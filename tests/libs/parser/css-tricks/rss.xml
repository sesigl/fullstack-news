<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:wfw="http://wellformedweb.org/CommentAPI/"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
  xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
  xmlns:media="http://search.yahoo.com/mrss/"
>

  <channel>
    <title>CSS-Tricks</title>
    <atom:link href="https://css-tricks.com/feed/" rel="self" type="application/rss+xml"/>
    <link>https://css-tricks.com</link>
    <description>Tips, Tricks, and Techniques on using Cascading Style Sheets.</description>
    <lastBuildDate>Wed, 05 Oct 2022 13:05:44 +0000</lastBuildDate>
    <language>en-US</language>
    <sy:updatePeriod>
      hourly
    </sy:updatePeriod>
    <sy:updateFrequency>
      1
    </sy:updateFrequency>
    <generator>https://wordpress.org/?v=6.0.2</generator>

    <image>
      <url>https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=32%2C32&#038;ssl=1</url>
      <title>CSS-Tricks</title>
      <link>https://css-tricks.com</link>
      <width>32</width>
      <height>32</height>
    </image>
    <site xmlns="com-wordpress:feed-additions:1">45537868</site>
    <item>
      <title>Using Web Components With Next (or Any SSR Framework)</title>
      <link>https://css-tricks.com/using-web-components-with-next-or-any-ssr-framework/</link>
      <comments>
        https://css-tricks.com/using-web-components-with-next-or-any-ssr-framework/#respond
      </comments>

      <dc:creator><![CDATA[Adam Rackis]]></dc:creator>
      <pubDate>Wed, 05 Oct 2022 13:05:43 +0000</pubDate>
      <category><![CDATA[Article]]></category>
      <category><![CDATA[server side rendering]]></category>
      <category><![CDATA[web components]]></category>
      <guid isPermaLink="false">https://css-tricks.com/?p=373787</guid>

      <description><![CDATA[<p>In my <a href="https://css-tricks.com/shoelace-component-frameowrk-introduction">previous post</a> we looked at Shoelace, which is a component library with a full suite of UX components that are beautiful, accessible, and — perhaps unexpectedly — built with <a href="https://css-tricks.com/an-introduction-to-web-components/">Web Components</a>. This means they can be used &#8230;</p>
<hr />
<p><small><a rel="nofollow" href="https://css-tricks.com/using-web-components-with-next-or-any-ssr-framework/">Using Web Components With Next (or Any SSR Framework)</a> originally published on <a rel="nofollow" href="https://css-tricks.com">CSS-Tricks</a>, which is part of the <a href="https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=">DigitalOcean</a> family. You should <a href="https://css-tricks.com/newsletters/">get the newsletter</a>.</p>
]]></description>
      <content:encoded><![CDATA[
<p>In my <a href="https://css-tricks.com/shoelace-component-frameowrk-introduction">previous post</a> we looked at Shoelace, which is a component library with a full suite of UX components that are beautiful, accessible, and — perhaps unexpectedly — built with <a href="https://css-tricks.com/an-introduction-to-web-components/">Web Components</a>. This means they can be used with any JavaScript framework. While React&#8217;s Web Component interoperability is, at present, less than ideal, <a href="https://css-tricks.com/building-interoperable-web-components-react/#aa-option-2-wrap-it">there are workarounds</a>.</p>



<p>But one serious shortcoming of Web Components is their current lack of support for server-side rendering (SSR). There is something called the Declarative Shadow DOM (DSD) in the works, but current support for it is pretty minimal, and it actually requires buy-in from your web server to emit special markup for the DSD. There&#8217;s currently work being done for <a href="https://nextjs.org" rel="noopener">Next.js</a> that I look forward to seeing. But for this post, we&#8217;ll look at how to manage Web Components from any SSR framework, like Next.js, <em>today</em>.</p>



<span id="more-373787"></span>



<p>We&#8217;ll wind up doing a non-trivial amount of manual work, and <em>slightly</em> hurting our page&#8217;s startup performance in the process. We&#8217;ll then look at how to minimize these performance costs. But make no mistake: this solution is not without tradeoffs, so don&#8217;t expect otherwise. Always measure and profile.</p>


<h3 id="the-problem">The problem</h3>


<p>Before we dive in, let&#8217;s take a moment and actually explain the problem. Why don&#8217;t Web Components work well with server-side rendering?</p>



<p>Application frameworks like Next.js take React code and run it through an API to essentially &#8220;stringify&#8221; it, meaning it turns your components into plain HTML. So the React component tree will render on the server hosting the web app, and that HTML will be sent down with the rest of the web app&#8217;s HTML document to your user&#8217;s browser. Along with this HTML are some <code>&lt;script&gt;</code> tags that load React, along with the code for all your React components. When a browser processes these <code>&lt;script&gt;</code> tags, React will re-render the component tree, and match things up with the SSR&#8217;d HTML that was sent down. At this point, all of the effects will start running, the event handlers will wire up, and the state will actually&#8230; contain state. It&#8217;s at this point that the web app becomes <em>interactive</em>. The process of re-processing your component tree on the client, and wiring everything up is called <strong><dfn>hydration</dfn></strong>.</p>



<p>So, what does this have to do with Web Components? Well, when you render something, say the same Shoelace <code>&lt;sl-tab-group&gt;</code> component we visited <a href="https://css-tricks.com/shoelace-component-frameowrk-introduction">last time</a>:</p>



<pre rel="HTML" class="wp-block-csstricks-code-block language-markup" data-line=""><code markup="tt">&lt;sl-tab-group ref="{tabsRef}">
  &lt;sl-tab slot="nav" panel="general"> General &lt;/sl-tab>
  &lt;sl-tab slot="nav" panel="custom"> Custom &lt;/sl-tab>
  &lt;sl-tab slot="nav" panel="advanced"> Advanced &lt;/sl-tab>
  &lt;sl-tab slot="nav" panel="disabled" disabled> Disabled &lt;/sl-tab>

  &lt;sl-tab-panel name="general">This is the general tab panel.&lt;/sl-tab-panel>
  &lt;sl-tab-panel name="custom">This is the custom tab panel.&lt;/sl-tab-panel>
  &lt;sl-tab-panel name="advanced">This is the advanced tab panel.&lt;/sl-tab-panel>
  &lt;sl-tab-panel name="disabled">This is a disabled tab panel.&lt;/sl-tab-panel>
&lt;/sl-tab-group></code></pre>



<p>&#8230;React (or honestly <em>any</em> JavaScript framework) will see those tags and simply pass them along. React (or Svelte, or Solid) are not responsible for turning those tags into nicely-formatted tabs. The code for that is tucked away inside of whatever code you have that defines those Web Components. In our case, that code is in the Shoelace library, but the code can be anywhere. What&#8217;s important is <em>when the code runs</em>.</p>



<p>Normally, the code registering these Web Components will be pulled into your application&#8217;s normal code via a JavaScript <code>import</code>. That means this code will wind up in your JavaScript bundle and execute during hydration which means that, between your user first seeing the SSR&#8217;d HTML and hydration happening, these tabs (or any Web Component for that matter) will not render the correct content. Then, when hydration happens, the proper content will display, likely causing the content around these Web Components to move around and fit the properly formatted content. This is known as a <strong>flash of unstyled content</strong>, or FOUC. In theory, you could stick markup in between all of those <code>&lt;sl-tab-xyz&gt;</code> tags to match the finished output, but this is all but impossible in practice, especially for a third-party component library like Shoelace.</p>


<h3 id="moving-our-web-component-registration-code">Moving our Web Component registration code</h3>


<p>So the problem is that the code to make Web Components do what they need to do won&#8217;t actually run until hydration occurs. For this post, we&#8217;ll look at running that code sooner; immediately, in fact. We&#8217;ll look at custom bundling our Web Component code, and manually adding a script directly to our document&#8217;s <code>&lt;head&gt;</code> so it runs immediately, and blocks the rest of the document until it does. <em>This is normally a terrible thing to do.</em> The whole point of server-side rendering is to <em>not</em> block our page from processing until our JavaScript has processed. But once done, it means that, as the document is initially rendering our HTML from the server, the Web Components will be registered and will both immediately and synchronously emit the right content.</p>



<p>In our case, we&#8217;re <em>just</em> looking to run our Web Component registration code in a blocking script. This code isn&#8217;t huge, and we&#8217;ll look to significantly lessen the performance hit by adding some cache headers to help with subsequent visits. <strong>This isn&#8217;t a perfect solution.</strong> The first time a user browses your page will always block while that script file is loaded. Subsequent visits will cache nicely, but this tradeoff <em>might not</em> be feasible for you — e-commerce, anyone? Anyway, profile, measure, and make the right decision for your app. Besides, in the future it&#8217;s entirely possible Next.js will fully support DSD and Web Components.</p>


<h3 id="getting-started">Getting started</h3>


<p>All of the code we&#8217;ll be looking at is in <a href="https://github.com/arackaf/next-wc-ssr" rel="noopener">this GitHub repo</a> and <a href="https://next-wc-ssr.vercel.app/" rel="noopener">deployed here with Vercel</a>. The web app renders some Shoelace components along with text that changes color and content upon hydration. You should be able to see the text change to &#8220;Hydrated,&#8221; with the Shoelace components already rendering properly.</p>


<h3 id="custom-bundling-web-component-code">Custom bundling Web Component code</h3>


<p>Our first step is to create a single JavaScript module that imports all of our Web Component definitions. For the Shoelace components I&#8217;m using, my code looks like this:</p>



<pre rel="JavaScript" class="wp-block-csstricks-code-block language-javascript" data-line=""><code markup="tt">import { setDefaultAnimation } from "@shoelace-style/shoelace/dist/utilities/animation-registry";

import "@shoelace-style/shoelace/dist/components/tab/tab.js";
import "@shoelace-style/shoelace/dist/components/tab-panel/tab-panel.js";
import "@shoelace-style/shoelace/dist/components/tab-group/tab-group.js";

import "@shoelace-style/shoelace/dist/components/dialog/dialog.js";

setDefaultAnimation("dialog.show", {
  keyframes: [
    { opacity: 0, transform: "translate3d(0px, -20px, 0px)" },
    { opacity: 1, transform: "translate3d(0px, 0px, 0px)" },
  ],
  options: { duration: 250, easing: "cubic-bezier(0.785, 0.135, 0.150, 0.860)" },
});
setDefaultAnimation("dialog.hide", {
  keyframes: [
    { opacity: 1, transform: "translate3d(0px, 0px, 0px)" },
    { opacity: 0, transform: "translate3d(0px, 20px, 0px)" },
  ],
  options: { duration: 250, easing: "cubic-bezier(0.785, 0.135, 0.150, 0.860)" },
});</code></pre>



<p>It loads the definitions for the <a href="https://shoelace.style/components/tab-group" rel="noopener"><code>&lt;sl-tab-group&gt;</code></a> and <a href="https://shoelace.style/components/dialog" rel="noopener"><code>&lt;sl-dialog&gt;</code></a> components, and overrides some default animations for the dialog. Simple enough. But the interesting piece here is getting this code into our application. We <em>cannot</em> simply <code>import</code> this module. If we did that, it&#8217;d get bundled into our normal JavaScript bundles and run during hydration. This would cause the FOUC we&#8217;re trying to avoid.</p>



<p>While Next.js does have a number of webpack hooks to custom bundle things, I&#8217;ll use <a href="https://css-tricks.com/adding-vite-to-your-existing-web-app/">Vite</a> instead. First, install it with <code>npm i vite</code> and then create a <code>vite.config.js</code> file. Mine looks like this:</p>



<pre rel="JavaScript" class="wp-block-csstricks-code-block language-javascript" data-line=""><code markup="tt">import { defineConfig } from "vite";
import path from "path";

export default defineConfig({
  build: {
    outDir: path.join(__dirname, "./shoelace-dir"),
    lib: {
      name: "shoelace",
      entry: "./src/shoelace-bundle.js",
      formats: ["umd"],
      fileName: () => "shoelace-bundle.js",
    },
    rollupOptions: {
      output: {
        entryFileNames: `[name]-[hash].js`,
      },
    },
  },
});</code></pre>



<p>This will build a bundle file with our Web Component definitions in the <code>shoelace-dir</code> folder. Let&#8217;s move it over to the <code>public</code> folder so that Next.js will serve it. And we should also keep track of the exact name of the file, with the hash on the end of it. Here&#8217;s a Node script that moves the file and writes a JavaScript module that exports a simple constant with the name of the bundle file (this will come in handy shortly):</p>



<pre rel="JavaScript" class="wp-block-csstricks-code-block language-javascript" data-line=""><code markup="tt">const fs = require("fs");
const path = require("path");

const shoelaceOutputPath = path.join(process.cwd(), "shoelace-dir");
const publicShoelacePath = path.join(process.cwd(), "public", "shoelace");

const files = fs.readdirSync(shoelaceOutputPath);

const shoelaceBundleFile = files.find(name => /^shoelace-bundle/.test(name));

fs.rmSync(publicShoelacePath, { force: true, recursive: true });

fs.mkdirSync(publicShoelacePath, { recursive: true });
fs.renameSync(path.join(shoelaceOutputPath, shoelaceBundleFile), path.join(publicShoelacePath, shoelaceBundleFile));
fs.rmSync(shoelaceOutputPath, { force: true, recursive: true });

fs.writeFileSync(path.join(process.cwd(), "util", "shoelace-bundle-info.js"), `export const shoelacePath = "/shoelace/${shoelaceBundleFile}";`);</code></pre>



<p>Here&#8217;s a companion npm script:</p>



<pre rel="Terminal" class="wp-block-csstricks-code-block language-none" data-line=""><code markup="tt">"bundle-shoelace": "vite build &amp;&amp; node util/process-shoelace-bundle",</code></pre>



<p>That should work. For me, <code>util/shoelace-bundle-info.js</code> now exists, and looks like this:</p>



<pre rel="JavaScript" class="wp-block-csstricks-code-block language-javascript" data-line=""><code markup="tt">export const shoelacePath = "/shoelace/shoelace-bundle-a6f19317.js";</code></pre>


<h3 id="loading-the-script">Loading the script</h3>


<p>Let&#8217;s go into the Next.js <code>\_document.js</code> file and pull in the name of our Web Component bundle file:</p>



<pre rel="JavaScript" class="wp-block-csstricks-code-block language-javascript" data-line=""><code markup="tt">import { shoelacePath } from "../util/shoelace-bundle-info";</code></pre>



<p>Then we manually render a <code>&lt;script&gt;</code> tag in the <code>&lt;head&gt;</code>. Here&#8217;s what my entire <code>_document.js</code> file looks like:</p>



<pre rel="JavaScript" class="wp-block-csstricks-code-block language-javascript" data-line=""><code markup="tt">import { Html, Head, Main, NextScript } from "next/document";
import { shoelacePath } from "../util/shoelace-bundle-info";

export default function Document() {
  return (
    &lt;Html>
      &lt;Head>
        &lt;script src={shoelacePath}>&lt;/script>
      &lt;/Head>
      &lt;body>
        &lt;Main />
        &lt;NextScript />
      &lt;/body>
    &lt;/Html>
  );
}</code></pre>



<p>And that should work! Our Shoelace registration will load in a blocking script and be available immediately as our page processes the initial HTML.</p>


<h3 id="improving-performance">Improving performance</h3>


<p>We could leave things as they are but let&#8217;s add caching for our Shoelace bundle. We&#8217;ll tell Next.js to make these Shoelace bundles cacheable by adding the following entry to our Next.js config file:</p>



<pre rel="JavaScript" class="wp-block-csstricks-code-block language-javascript" data-line=""><code markup="tt">async headers() {
  return [
    {
      source: "/shoelace/shoelace-bundle-:hash.js",
      headers: [
        {
          key: "Cache-Control",
          value: "public,max-age=31536000,immutable",
        },
      ],
    },
  ];
}</code></pre>



<p>Now, on subsequent browses to our site, we see the Shoelace bundle caching nicely!</p>



<figure class="wp-block-image size-full"><img loading="lazy" width="1448" height="60" src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/img2-http-caching.jpg?resize=1448%2C60&#038;ssl=1" alt="DevTools Sources panel open and showing the loaded Shoelace bundle." class="wp-image-373792" srcset="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/img2-http-caching.jpg?w=1448&amp;ssl=1 1448w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/img2-http-caching.jpg?resize=300%2C12&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/img2-http-caching.jpg?resize=1024%2C42&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/img2-http-caching.jpg?resize=768%2C32&amp;ssl=1 768w" sizes="(min-width: 735px) 864px, 96vw" data-recalc-dims="1" /></figure>



<p>If our Shoelace bundle ever changes, the file name will change (via the <code>:hash</code> portion from the source property above), the browser will find that it does not have that file cached, and will simply request it fresh from the network.</p>


<h3 id="wrapping-up">Wrapping up</h3>


<p>This may have seemed like a lot of manual work; and it was. It&#8217;s unfortunate Web Components don&#8217;t offer better out-of-the-box support for server-side rendering.</p>



<p>But we shouldn&#8217;t forget the benefits they provide: it&#8217;s nice being able to use quality UX components that aren&#8217;t tied to a specific framework. It&#8217;s aldo nice being able to experiment with brand new frameworks, like <a href="https://www.solidjs.com" rel="noopener">Solid</a>, without needing to find (or hack together) some sort of tab, modal, autocomplete, or whatever component.</p>
<hr />
<p><small><a rel="nofollow" href="https://css-tricks.com/using-web-components-with-next-or-any-ssr-framework/">Using Web Components With Next (or Any SSR Framework)</a> originally published on <a rel="nofollow" href="https://css-tricks.com">CSS-Tricks</a>, which is part of the <a href="https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=">DigitalOcean</a> family. You should <a href="https://css-tricks.com/newsletters/">get the newsletter</a>.</p>
]]></content:encoded>

      <wfw:commentRss>
        https://css-tricks.com/using-web-components-with-next-or-any-ssr-framework/feed/
      </wfw:commentRss>
      <slash:comments>0</slash:comments>


      <post-id xmlns="com-wordpress:feed-additions:1">373787</post-id>
    </item>
    <item>
      <title>State of CSS 2022 Survey Now Open</title>
      <link>https://css-tricks.com/state-of-css-2022-survey-now-open/</link>
      <comments>https://css-tricks.com/state-of-css-2022-survey-now-open/#comments</comments>

      <dc:creator><![CDATA[Geoff Graham]]></dc:creator>
      <pubDate>Tue, 04 Oct 2022 18:35:09 +0000</pubDate>
      <category><![CDATA[Link]]></category>
      <category><![CDATA[research]]></category>
      <category><![CDATA[survey]]></category>
      <guid isPermaLink="false">https://css-tricks.com/?p=374217</guid>

      <description><![CDATA[<p>The State of CSS survey recently opened up. Last year, the survey confirmed everyone&#8217;s assumptions that <a href="https://2021.stateofcss.com/en-US/technologies/css-frameworks" rel="noopener">TailwindCSS is super popular</a> and <a href="https://2021.stateofcss.com/en-US/features/other-features/#variables" rel="noopener">CSS variables are mainstream</a>. It also codified what many of us want from CSS, from Container Queries to &#8230;</p>
<hr />
<p><small><a rel="nofollow" href="https://css-tricks.com/state-of-css-2022-survey-now-open/">State of CSS 2022 Survey Now Open</a> originally published on <a rel="nofollow" href="https://css-tricks.com">CSS-Tricks</a>, which is part of the <a href="https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=">DigitalOcean</a> family. You should <a href="https://css-tricks.com/newsletters/">get the newsletter</a>.</p>
]]></description>
      <content:encoded><![CDATA[
<p>The State of CSS survey recently opened up. Last year, the survey confirmed everyone&#8217;s assumptions that <a href="https://2021.stateofcss.com/en-US/technologies/css-frameworks" rel="noopener">TailwindCSS is super popular</a> and <a href="https://2021.stateofcss.com/en-US/features/other-features/#variables" rel="noopener">CSS variables are mainstream</a>. It also codified what many of us want from CSS, from Container Queries to a parent selector. (Spoiler alert, we now have both of &#8217;em.)</p>



<p>While I wouldn&#8217;t say the results have been super surprising each year, this time I&#8217;m excited to start seeing more historical trends reveal themselves. <a href="https://2019.stateofcss.com" rel="noopener">The survey has been running since 2019</a>, so that&#8217;s going to be four years (ancient in front-end years!) of data to see if certain frameworks came and went, specific features are gaining momentum, what general learning practices are out there, and just plain more context. It takes time for stuff to build up like this, so kudos to <a href="https://sachagreif.com" rel="noopener">Sacha Greif</a> for keeping this thing going.</p>



<span id="more-374217"></span>



<p>And speaking of the team behind the survey, <a href="https://lea.verou.me" rel="noopener">Lea Verou</a> is new to the bunch and lead this year&#8217;s edition. Lea made some nice additions, including more open-ended comments, questions about browser inconsistencies, and a question that compares the amount of time you write CSS versus JavaScript.</p>



<p>Browsers actually use this stuff to help prioritize what features to work on — so definitely add your voice to the mix! The polls close on October 20.</p>
<p><a href="https://stateofcss.com/en-us/?source=css-tricks" rel="noopener">To Shared Link</a> &#8212; <a href="https://css-tricks.com/state-of-css-2022-survey-now-open/">Permalink on CSS-Tricks</a></p><hr />
<p><small><a rel="nofollow" href="https://css-tricks.com/state-of-css-2022-survey-now-open/">State of CSS 2022 Survey Now Open</a> originally published on <a rel="nofollow" href="https://css-tricks.com">CSS-Tricks</a>, which is part of the <a href="https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=">DigitalOcean</a> family. You should <a href="https://css-tricks.com/newsletters/">get the newsletter</a>.</p>
]]></content:encoded>

      <wfw:commentRss>https://css-tricks.com/state-of-css-2022-survey-now-open/feed/
      </wfw:commentRss>
      <slash:comments>1</slash:comments>


      <post-id xmlns="com-wordpress:feed-additions:1">374217</post-id>
    </item>
    <item>
      <title>Introducing Shoelace, a Framework-Independent Component-Based UX Library</title>
      <link>https://css-tricks.com/shoelace-component-frameowrk-introduction/</link>
      <comments>https://css-tricks.com/shoelace-component-frameowrk-introduction/#respond</comments>

      <dc:creator><![CDATA[Adam Rackis]]></dc:creator>
      <pubDate>Tue, 04 Oct 2022 13:01:53 +0000</pubDate>
      <category><![CDATA[Article]]></category>
      <category><![CDATA[framework]]></category>
      <category><![CDATA[web components]]></category>
      <guid isPermaLink="false">https://css-tricks.com/?p=373703</guid>

      <description><![CDATA[<p>This is a post about <a href="https://shoelace.style/" rel="noopener">Shoelace</a>, a component library by <a href="https://twitter.com/claviska" rel="noopener">Cory LaViska</a>, but with a twist. It defines all your standard UX components: tabs, modals, accordions, auto-completes, and <a href="https://shoelace.style/components/alert" rel="noopener">much, much more</a>. They look beautiful out of the &#8230;</p>
<hr />
<p><small><a rel="nofollow" href="https://css-tricks.com/shoelace-component-frameowrk-introduction/">Introducing Shoelace, a Framework-Independent Component-Based UX Library</a> originally published on <a rel="nofollow" href="https://css-tricks.com">CSS-Tricks</a>, which is part of the <a href="https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=">DigitalOcean</a> family. You should <a href="https://css-tricks.com/newsletters/">get the newsletter</a>.</p>
]]></description>
      <content:encoded><![CDATA[
<p>This is a post about <a href="https://shoelace.style/" rel="noopener">Shoelace</a>, a component library by <a href="https://twitter.com/claviska" rel="noopener">Cory LaViska</a>, but with a twist. It defines all your standard UX components: tabs, modals, accordions, auto-completes, and <a href="https://shoelace.style/components/alert" rel="noopener">much, much more</a>. They look beautiful out of the box, are accessible, and fully customizable. But rather than creating these components in React, or Solid, or Svelte, etc., it creates them with <a href="https://css-tricks.com/our-best-posts-on-web-components/">Web Components</a>; this means you can use them with <em>any</em> framework.</p>



<span id="more-373703"></span>


<h3 id="some-preliminary-things">Some preliminary things</h3>


<p>Web Components are great, but there&#8217;s currently a few small hitches to be aware of.</p>


<h4 id="react">React</h4>


<p>I said they work in any JavaScript framework, but as I&#8217;ve written before, React&#8217;s support for Web Components is <a href="https://css-tricks.com/building-interoperable-web-components-react/#aa-react-is-a-different-beast">currently poor</a>. To address this, Shoelace actually <a href="https://shoelace.style/frameworks/react?id=usage" rel="noopener">created wrappers</a> just for React.</p>



<p>Another option, which I personally like, is to create a thin React component that accepts the tag name of a Web Component and all of its attributes and properties, then does the dirty work of handling React&#8217;s shortcomings. I talked about this option <a href="https://css-tricks.com/building-interoperable-web-components-react/#aa-option-2-wrap-it">in a previous post</a>. I like this solution because it&#8217;s designed to be deleted. The Web Component interoperability problem is currently fixed in React&#8217;s experimental branch, so once that&#8217;s shipped, any thin Web Component-interoperable component you&#8217;re using could be searched, and removed, leaving you with direct Web Component usages, without any React wrappers.</p>


<h4 id="serverside-rendering-ssr">Server-Side Rendering (SSR)</h4>


<p>Support for SSR is also poor at the time of this writing. In theory, there&#8217;s something called <a href="https://web.dev/declarative-shadow-dom/" rel="noopener">Declarative Shadow DOM</a> (DSD) which would enable SSR. But browser support is minimal, and in any event, DSD actually requires <em>server support</em> to work right, which means <a href="https://nextjs.org" rel="noopener">Next</a>, <a href="https://css-tricks.com/the-basics-of-remix/">Remix</a>, or whatever you happen to use on the server will need to become capable of some special handling.</p>



<p>That said, there are other ways to get Web Components to <q>just work</q> with a web app that&#8217;s SSR&#8217;d with something like Next. The short version is that the scripts registering your Web Components need to run in a blocking script before your markup is parsed. But that&#8217;s a topic for another post.</p>



<p>Of course, if you&#8217;re building any kind of client-rendered SPA, this is a non-issue. This is what we&#8217;ll work with in this post.</p>


<h3 id="lets-start">Let&#8217;s start</h3>


<p>Since I want this post to focus on Shoelace and on its Web Component nature, I&#8217;ll be using <a href="https://css-tricks.com/getting-acquainted-with-svelte-the-new-framework-on-the-block/">Svelte</a> for everything. I&#8217;ll also be using this <a href="https://stackblitz.com/edit/vitejs-vite-4dm7sb?file=index.html" rel="noopener">Stackblitz project</a> for demonstration. We&#8217;ll build this demo together, step-by-step, but feel free to open that REPL up anytime to see the end result.</p>



<p>I&#8217;ll show you how to use Shoelace, and more importantly, how to customize it. We&#8217;ll talk about <a href="https://css-tricks.com/encapsulating-style-and-structure-with-shadow-dom/">Shadow DOMs</a> and which styles they block from the outside world (as well as which ones they don&#8217;t). We&#8217;ll also talk about the <code>::part</code> CSS selector — which may be entirely new to you — and we&#8217;ll even see how Shoelace allows us to override and customize its various animations.</p>



<p>If you find you like Shoelace after reading this post and want to try it in a React project, my advice is to use <a href="https://css-tricks.com/building-interoperable-web-components-react/#aa-option-2-wrap-it">a wrapper</a> like I mentioned in the introduction. This will allow you to use any of Shoelace&#8217;s components, and it can be removed altogether once React ships the Web Component fixes they already have (look for that in version 19).</p>


<h3 id="introducing-shoelace">Introducing Shoelace</h3>


<p>Shoelace has fairly detailed <a href="https://shoelace.style/getting-started/installation" rel="noopener">installation instructions</a>. At its most simple, you can dump <code>&lt;script&gt;</code> and <code>&lt;style&gt;</code> tags into your HTML doc, and that&#8217;s that. For any production app, though, you&#8217;ll probably want to selectively import only what you want, and there are instructions for that, too.</p>



<p>With Shoelace installed, let&#8217;s create a Svelte component to render some content, and then go through the steps to fully customize it. To pick something fairly non-trivial, I went with the tabs and a dialog (commonly referred to as a modal) components. Here&#8217;s some markup <a href="https://shoelace.style/components/tab-group" rel="noopener">taken largely from the docs</a>:</p>



<pre rel="HTML" class="wp-block-csstricks-code-block language-markup" data-line=""><code markup="tt">&lt;sl-tab-group>
  &lt;sl-tab slot="nav" panel="general">General&lt;/sl-tab>
  &lt;sl-tab slot="nav" panel="custom">Custom&lt;/sl-tab>
  &lt;sl-tab slot="nav" panel="advanced">Advanced&lt;/sl-tab>
  &lt;sl-tab slot="nav" panel="disabled" disabled>Disabled&lt;/sl-tab>

  &lt;sl-tab-panel name="general">This is the general tab panel.&lt;/sl-tab-panel>
  &lt;sl-tab-panel name="custom">This is the custom tab panel.&lt;/sl-tab-panel>
  &lt;sl-tab-panel name="advanced">This is the advanced tab panel.&lt;/sl-tab-panel>
  &lt;sl-tab-panel name="disabled">This is a disabled tab panel.&lt;/sl-tab-panel>
&lt;/sl-tab-group>

&lt;sl-dialog no-header label="Dialog">
  Hello World!
  &lt;button slot="footer" variant="primary">Close&lt;/button>
&lt;/sl-dialog>

&lt;br />
&lt;button>Open Dialog&lt;/button></code></pre>



<p>This renders some nice, styled tabs. The underline on the active tab even animates nicely, and slides from one active tab to the next.</p>



<figure class="wp-block-image size-full"><img loading="lazy" width="1130" height="380" src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/img1-default-tabs.jpg?resize=1130%2C380&#038;ssl=1" alt="Four horizontal tab headings with the first active in blue with placeholder content contained in a panel below." class="wp-image-373704" srcset="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/img1-default-tabs.jpg?w=1130&amp;ssl=1 1130w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/img1-default-tabs.jpg?resize=300%2C101&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/img1-default-tabs.jpg?resize=1024%2C344&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/img1-default-tabs.jpg?resize=768%2C258&amp;ssl=1 768w" sizes="(min-width: 735px) 864px, 96vw" data-recalc-dims="1" /><figcaption>Default tabs in Shoelace</figcaption></figure>



<p>I won&#8217;t waste your time running through every inch of the APIs that are already well-documented on the Shoelace website. Instead, let&#8217;s look into how best to interact with, and fully customize these Web Components.</p>


<h3 id="interacting-with-the-api-methods-and-events">Interacting with the API: methods and events</h3>


<p>Calling methods and subscribing to events on a Web Component might be slightly different than what you&#8217;re used to with your normal framework of choice, but it&#8217;s not too complicated. Let&#8217;s see how.</p>


<h4 id="tabs">Tabs</h4>


<p>The tabs component (<code>&lt;sl-tab-group&gt;</code>) has a <a href="https://shoelace.style/components/tab-group?id=methods" rel="noopener"><code>show</code> method</a>, which manually shows a particular tab. In order to call this, we need to get access to the underlying DOM element of our tabs. In Svelte, that means using <code>bind:this</code>. In React, it&#8217;d be a <code>ref</code>. And so on. Since we&#8217;re using Svelte, let&#8217;s declare a variable for our <code>tabs</code> instance:</p>



<pre rel="HTML" class="wp-block-csstricks-code-block language-markup" data-line=""><code markup="tt">&lt;script>
  let tabs;
&lt;/script></code></pre>



<p>&#8230;and bind it:</p>



<pre rel="HTML" class="wp-block-csstricks-code-block language-markup" data-line=""><code markup="tt">&lt;sl-tab-group bind:this="{tabs}">&lt;/sl-tab-group></code></pre>



<p>Now we can add a button to call it:</p>



<pre rel="JSX" class="wp-block-csstricks-code-block language-jsx" data-line=""><code markup="tt">&lt;button on:click={() => tabs.show("custom")}>Show custom&lt;/button></code></pre>



<p>It&#8217;s the same idea for events. There&#8217;s a <a href="https://shoelace.style/components/tab-group?id=events" rel="noopener"><code>sl-tab-show</code> event</a> that fires when a new tab is shown. We could use <code>addEventListener</code> on our <code>tabs</code> variable, or we can use Svelte&#8217;s <code>on:event-name</code> shortcut.</p>



<pre rel="JSX" class="wp-block-csstricks-code-block language-jsx" data-line=""><code markup="tt">&lt;sl-tab-group bind:this={tabs} on:sl-tab-show={e => console.log(e)}></code></pre>



<p>That works and logs the event objects as you show different tabs.</p>



<figure class="wp-block-image size-full"><img loading="lazy" width="1660" height="578" src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/img2-event-obj.jpg?resize=1660%2C578&#038;ssl=1" alt="Event object meta shown in DevTools." class="wp-image-373708" srcset="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/img2-event-obj.jpg?w=1660&amp;ssl=1 1660w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/img2-event-obj.jpg?resize=300%2C104&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/img2-event-obj.jpg?resize=1024%2C357&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/img2-event-obj.jpg?resize=768%2C267&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/img2-event-obj.jpg?resize=1536%2C535&amp;ssl=1 1536w" sizes="(min-width: 735px) 864px, 96vw" data-recalc-dims="1" /></figure>



<p>Typically we render tabs and let the user click between them, so this work isn&#8217;t usually even necessary, but it&#8217;s there if you need it. Now let&#8217;s get the dialog component interactive.</p>


<h4 id="dialog">Dialog</h4>


<p>The dialog component (<code>&lt;sl-dialog&gt;</code>) takes an <code>open</code> prop which controls whether the dialog is&#8230; open. Let&#8217;s declare it in our Svelte component:</p>



<pre rel="HTML" class="wp-block-csstricks-code-block language-markup" data-line=""><code markup="tt">&lt;script>
  let tabs;
  let open = false;
&lt;/script></code></pre>



<p>It also has an <code>sl-hide</code> event for when the dialog is hidden. Let&#8217;s pass our <code>open</code> prop and bind to the <code>hide</code> event so we can reset it when the user clicks outside of the dialog content to close it. And let&#8217;s add a click handler to that close button to set our <code>open</code> prop to <code>false</code>, which would also close the dialog.</p>



<pre rel="JSX" class="wp-block-csstricks-code-block language-jsx" data-line=""><code markup="tt">&lt;sl-dialog no-header {open} label="Dialog" on:sl-hide={() => open = false}>
  Hello World!
  &lt;button slot="footer" variant="primary" on:click={() => open = false}>Close&lt;/button>
&lt;/sl-dialog></code></pre>



<p>Lastly, let&#8217;s wire up our open dialog button:</p>



<pre rel="JSX" class="wp-block-csstricks-code-block language-jsx" data-line=""><code markup="tt">&lt;button on:click={() => (open = true)}>Open Dialog&lt;/button></code></pre>



<p>And that&#8217;s that. Interacting with a component library&#8217;s API is more or less straightforward. If that&#8217;s all this post did, it would be pretty boring.</p>



<p>But Shoelace — being built with Web Components — means that some things, particularly styles, will work a bit differently than we might be used to.</p>


<h3 id="customize-all-the-styles">Customize all the styles!</h3>


<p class="is-style-explanation">As of this writing, Shoelace is still in beta and the creator is considering changing some default styles, possibly even removing some defaults altogether so they&#8217;ll no longer override your host application&#8217;s styles. The concepts we&#8217;ll cover are relevant either way, but don&#8217;t be surprised if some of the Shoelace specifics I mention are different when you go to use it.</p>



<p>As nice as Shoelace&#8217;s default styles are, we might have our own designs in our web app, and we&#8217;ll want our UX components to match. Let&#8217;s see how we&#8217;d go about that in a Web Components world.</p>



<p>We won&#8217;t try to actually <em>improve</em> anything. The Shoelace creator is a far better designer than I&#8217;ll ever be. Instead, we&#8217;ll just look at how to <em>change</em> things, so you can adapt to your own web apps.</p>


<h4 id="a-quick-tour-of-shadow-doms">A quick tour of Shadow DOMs</h4>


<p>Take a peek at one of those tab headers in your DevTools; it should look something like this:</p>



<figure class="wp-block-image size-full"><img loading="lazy" width="1870" height="390" src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/img6-shadow-dom.jpg?resize=1870%2C390&#038;ssl=1" alt="The tabs component markup shown in DevTools." class="wp-image-373713" srcset="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/img6-shadow-dom.jpg?w=1870&amp;ssl=1 1870w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/img6-shadow-dom.jpg?resize=300%2C63&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/img6-shadow-dom.jpg?resize=1024%2C214&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/img6-shadow-dom.jpg?resize=768%2C160&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/img6-shadow-dom.jpg?resize=1536%2C320&amp;ssl=1 1536w" sizes="(min-width: 735px) 864px, 96vw" data-recalc-dims="1" /></figure>



<p>Our tab element has created a <code>div</code> container with a <code>.tab</code> and <code>.tab--active</code> class, and a <code>tabindex</code>, while also displaying the text we entered for that tab. But notice that it&#8217;s sitting inside of a <em>shadow root</em>. This allows Web Component authors to add their own markup to the Web Component while also providing a place for the content <em>we</em> provide. Notice the <code>&lt;slot&gt;</code> element? That basically means &#8220;put whatever content the user rendered <strong>between</strong> the Web Component tags <em>here</em>.&#8221;</p>



<p>So the <code>&lt;sl-tab&gt;</code> component creates a shadow root, adds some content to it to render the nicely-styled tab header along with a placeholder (<code>&lt;slot&gt;</code>) that renders our content inside.</p>


<h4 id="encapsulated-styles">Encapsulated styles</h4>


<p>One of the classic, more frustrating problems in web development has always been styles <a href="https://css-tricks.com/the-c-in-css-the-cascade/">cascading</a> to places where we don&#8217;t want them. You might worry that any style rules in our application which specify something like <code>div.tab</code> would interfere with these tabs. It turns out this isn&#8217;t a problem; shadow roots encapsulate styles. Styles from outside the shadow root do not affect what&#8217;s inside the shadow root (with some exceptions which we&#8217;ll talk about), and vice versa.</p>



<p>The exceptions to this are inheritable styles. You, of course, don&#8217;t need to apply a <code>font-family</code> style for every element in your web app. Instead, you can specify your <code>font-family</code> once, on <code>:root</code> or <code>html</code> and have it inherit everywhere beneath it. This inheritance will, in fact, pierce the shadow root as well.</p>



<p><a href="https://css-tricks.com/a-complete-guide-to-custom-properties/">CSS custom properties</a> (often called &#8220;css variables&#8221;) are a related exception. A shadow root can absolutely read a CSS property that is defined outside the shadow root; this will become relevant in a moment.</p>


<h4 id="the-part-selector">The <code>::part</code> selector</h4>


<p>What about styles that <em>don&#8217;t</em> inherit. What if we want to customize something like <a href="https://css-tricks.com/almanac/properties/c/cursor/"><code>cursor</code></a>, which doesn&#8217;t inherit, on something inside of the shadow root. Are we out of luck? It turns out we&#8217;re not. Take another look at the tab element image above and its shadow root. Notice the <code>part</code> attribute on the <code>div</code>? That allows you to target and style that element from outside the shadow root using the <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/::part" rel="noopener"><code>::part</code> selector</a>. We&#8217;ll walk through an example is a bit.</p>


<h3 id="overriding-shoelace-styles">Overriding Shoelace styles</h3>


<p>Let&#8217;s see each of these approaches in action. As of now, <em>a lot</em> of Shoelace styles, including fonts, receive default values from CSS custom properties. To align those fonts with your application&#8217;s styles, override the custom props in question. See <a href="https://shoelace.style/getting-started/customizing" rel="noopener">the docs</a> for info on which CSS variables Shoelace is using, or you can simply  inspect the styles in any given element in DevTools.</p>


<h4 id="inheriting-styles-through-the-shadow-root">Inheriting styles through the shadow root</h4>


<p>Open the <code>app.css</code> file in the <code>src</code> directory of the <a href="https://stackblitz.com/edit/vitejs-vite-4dm7sb?file=index.html" rel="noopener">StackBlitz project</a>. In the <code>:root</code> section at the bottom, you should see a <code>letter-spacing: normal;</code> declaration. Since the <a href="https://css-tricks.com/almanac/properties/l/letter-spacing/"><code>letter-spacing</code></a> property is inheritable, try setting a new value, like <code>2px</code>. On save, all content, including the tab headers defined in the shadow root, will adjust accordingly.</p>



<figure class="wp-block-image size-full"><img loading="lazy" width="1266" height="260" src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/img8-letter-spacing.jpg?resize=1266%2C260&#038;ssl=1" alt="Four horizontal tab headers with the first active in blue with plqceholder content contained in a panel below. The text is slightly stretched with letter spacing." class="wp-image-373716" srcset="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/img8-letter-spacing.jpg?w=1266&amp;ssl=1 1266w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/img8-letter-spacing.jpg?resize=300%2C62&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/img8-letter-spacing.jpg?resize=1024%2C210&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/img8-letter-spacing.jpg?resize=768%2C158&amp;ssl=1 768w" sizes="(min-width: 735px) 864px, 96vw" data-recalc-dims="1" /></figure>


<h4 id="overwriting-shoelace-css-variables">Overwriting Shoelace CSS variables</h4>


<p>The <code>&lt;sl-tab-group&gt;</code> component reads an <code>--indicator-color</code> CSS custom property for the active tab&#8217;s underline. We can override this with some basic CSS:</p>



<pre rel="CSS" class="wp-block-csstricks-code-block language-css" data-line=""><code markup="tt">sl-tab-group {
  --indicator-color: green;
}</code></pre>



<p>And just like that, we now have a green indicator!</p>



<figure class="wp-block-image size-full"><img loading="lazy" width="1048" height="180" src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/img-7-green-indicator.jpg?resize=1048%2C180&#038;ssl=1" alt="Four horizontal tab headers with the first active with blue text and a green underline." class="wp-image-373718" srcset="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/img-7-green-indicator.jpg?w=1048&amp;ssl=1 1048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/img-7-green-indicator.jpg?resize=300%2C52&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/img-7-green-indicator.jpg?resize=1024%2C176&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/img-7-green-indicator.jpg?resize=768%2C132&amp;ssl=1 768w" sizes="(min-width: 735px) 864px, 96vw" data-recalc-dims="1" /></figure>


<h4 id="querying-parts">Querying parts</h4>


<p>In the version of Shoelace I&#8217;m using right now (2.0.0-beta.83), any non-disabled tab has a <code>pointer</code> cursor. Let&#8217;s change that to a default cursor for the active (selected) tab. We already saw that the <code>&lt;sl-tab&gt;</code> element adds a <code>part="base"</code> attribute on the container for the tab header. Also, the currently selected tab receives an <code>active</code> attribute. Let&#8217;s use these facts to target the active tab, and change the cursor:</p>



<pre rel="CSS" class="wp-block-csstricks-code-block language-css" data-line=""><code markup="tt">sl-tab[active]::part(base) {
  cursor: default;
}</code></pre>



<p>And that&#8217;s that!</p>


<h3 id="customizing-animations">Customizing animations</h3>


<p>For some icing on the metaphorical cake, let&#8217;s see how Shoelace allows us to customize animations. Shoelace uses the <a href="https://css-tricks.com/css-animations-vs-web-animations-api/">Web Animations API</a>, and exposes a <code>setDefaultAnimation</code> API to control how different elements animate their various interactions. See the docs for specifics, but as an example, here&#8217;s how you might change Shoelace&#8217;s default dialog animation from expanding outward, and shrinking inward, to instead animate in from the top, and drop down while hiding.</p>



<pre rel="JavaScript" class="wp-block-csstricks-code-block language-javascript" data-line=""><code markup="tt">import { setDefaultAnimation } from "@shoelace-style/shoelace/dist/utilities/animation-registry";

setDefaultAnimation("dialog.show", {
  keyframes: [
    { opacity: 0, transform: "translate3d(0px, -20px, 0px)" },
    { opacity: 1, transform: "translate3d(0px, 0px, 0px)" },
  ],
  options: { duration: 250, easing: "cubic-bezier(0.785, 0.135, 0.150, 0.860)" },
});
setDefaultAnimation("dialog.hide", {
  keyframes: [
    { opacity: 1, transform: "translate3d(0px, 0px, 0px)" },
    { opacity: 0, transform: "translate3d(0px, 20px, 0px)" },
  ],
  options: { duration: 200, easing: "cubic-bezier(0.785, 0.135, 0.150, 0.860)" },
});</code></pre>



<p>That code is in the <code>App.svelte</code> file. Comment it out to see the original, default animation.</p>


<h3 id="wrapping-up">Wrapping up</h3>


<p>Shoelace is an incredibly ambitious component library that&#8217;s built with Web Components. Since Web Components are framework-independent, they can be used in any project, with any framework. With new frameworks starting to come out with both amazing performance characteristics, and also ease of use, the ability to use quality user experience widgets which aren&#8217;t tied to any one framework has never been more compelling.</p>
<hr />
<p><small><a rel="nofollow" href="https://css-tricks.com/shoelace-component-frameowrk-introduction/">Introducing Shoelace, a Framework-Independent Component-Based UX Library</a> originally published on <a rel="nofollow" href="https://css-tricks.com">CSS-Tricks</a>, which is part of the <a href="https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=">DigitalOcean</a> family. You should <a href="https://css-tricks.com/newsletters/">get the newsletter</a>.</p>
]]></content:encoded>

      <wfw:commentRss>https://css-tricks.com/shoelace-component-frameowrk-introduction/feed/
      </wfw:commentRss>
      <slash:comments>0</slash:comments>


      <post-id xmlns="com-wordpress:feed-additions:1">373703</post-id>
    </item>
    <item>
      <title>Getting Started With WordPress Block Development</title>
      <link>https://css-tricks.com/getting-started-with-wordpress-block-development/</link>
      <comments>https://css-tricks.com/getting-started-with-wordpress-block-development/#comments
      </comments>

      <dc:creator><![CDATA[Arjun Singh]]></dc:creator>
      <pubDate>Fri, 30 Sep 2022 13:04:56 +0000</pubDate>
      <category><![CDATA[Article]]></category>
      <category><![CDATA[gutenberg]]></category>
      <category><![CDATA[WordPress]]></category>
      <category><![CDATA[WordPress blocks]]></category>
      <guid isPermaLink="false">https://css-tricks.com/?p=373732</guid>

      <description><![CDATA[<p>Let’s acknowledge that developing for WordPress is weird right now. Whether you’re new to WordPress or have worked with it for eons, the introduction of “Full-Site Editing” (FSE) features, including the <a href="https://wordpress.org/support/article/wordpress-editor/" rel="noopener">Block Editor</a> (WordPress 5.0) and the <a href="https://wordpress.org/support/article/site-editor/" rel="noopener">Site Editor</a> (WordPress &#8230;</p>
<hr />
<p><small><a rel="nofollow" href="https://css-tricks.com/getting-started-with-wordpress-block-development/">Getting Started With WordPress Block Development</a> originally published on <a rel="nofollow" href="https://css-tricks.com">CSS-Tricks</a>, which is part of the <a href="https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=">DigitalOcean</a> family. You should <a href="https://css-tricks.com/newsletters/">get the newsletter</a>.</p>
]]></description>
      <content:encoded><![CDATA[
<p>Let’s acknowledge that developing for WordPress is weird right now. Whether you’re new to WordPress or have worked with it for eons, the introduction of “Full-Site Editing” (FSE) features, including the <a href="https://wordpress.org/support/article/wordpress-editor/" rel="noopener">Block Editor</a> (WordPress 5.0) and the <a href="https://wordpress.org/support/article/site-editor/" rel="noopener">Site Editor</a> (WordPress 5.9), have upended the traditional way we build WordPress themes and plugins.</p>



<p>Even though it’s been five years since we met the Block Editor for the first time, developing for it is difficult because documentation is either lacking or outdated. That’s more of a statement on how fast FSE features are moving, something <a href="https://css-tricks.com/not-sure-how-to-wordpress-anymore/">Geoff lamented in a recent post</a>.</p>



<p>Case in point: In 2018, an <a href="https://css-tricks.com/learning-gutenberg-1-series-intro/">introductory series</a> about getting into Gutenberg development was published right here on CSS-tricks. Times have changed since then, and, while that style of development does still work, it is <a href="https://developer.wordpress.org/block-editor/reference-guides/block-api/block-metadata/" rel="noopener">not recommended</a> anymore (besides, the <code>create-guten-block</code> project it’s based on is also no longer maintained).</p>



<p>In this article, I intend to help you get started with WordPress block development in a way that follows the current methodology. So, yes, things could very well change after this is published. But I’m going to try and focus on it in a way that hopefully captures the essence of block development, because even though the tools might evolve over time, the core ideas are likely to remain the same.</p>



<span id="more-373732"></span>



<figure class="wp-block-image size-full"><img loading="lazy" width="2880" height="1656" src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1662664100600_post-editor-interface.png?resize=2880%2C1656&#038;ssl=1" alt="The WordPress Block Editor interface with highlighted areas showing three key features." class="wp-image-373733" srcset="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1662664100600_post-editor-interface.png?w=2880&amp;ssl=1 2880w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1662664100600_post-editor-interface.png?resize=300%2C173&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1662664100600_post-editor-interface.png?resize=1024%2C589&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1662664100600_post-editor-interface.png?resize=768%2C442&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1662664100600_post-editor-interface.png?resize=1536%2C883&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1662664100600_post-editor-interface.png?resize=2048%2C1178&amp;ssl=1 2048w" sizes="(min-width: 735px) 864px, 96vw" data-recalc-dims="1" /><figcaption>The Gutenberg Editor: (1) The block inserter, (2) the content area, and (3) the settings sidebar<br>Credit: <a href="https://developer.wordpress.org/block-editor/" rel="noopener">WordPress Block Editor Handbook</a></figcaption></figure>


<h3 id="what-are-wordpress-blocks-exactly">What are WordPress blocks, exactly?</h3>


<p>Let’s start by airing out some confusion with what we mean by terms like <em>blocks</em>. All of the development that went into these features leading up to WordPress 5.0 was codenamed “<a href="https://wordpress.org/gutenberg/" rel="noopener">Gutenberg</a>” — you know, the inventor of the <a href="https://en.wikipedia.org/wiki/Printing_press" rel="noopener">printing press</a>.</p>



<p>Since then, “Gutenberg” has been used to describe everything related to blocks, including the Block Editor and Site Editor, so it’s gotten convoluted to the extent that some folks <a href="https://humanmade.com/2022/08/24/can-we-please-stop-saying-gutenberg/" rel="noopener">depise the name</a>. To top it all off, there’s a <a href="https://wordpress.org/plugins/gutenberg/" rel="noopener">Gutenberg plugin</a> where experimental features are tested for possible inclusion. And if you think calling all of this “Full-Site Editing” would solve the issue, <a href="https://wptavern.com/wordpress-contributors-consider-renaming-full-site-editing" rel="noopener">there are concerns with that as well</a>.</p>



<p>So, when we refer to “blocks” in this article what we mean are components for creating content in the WordPress Block Editor. Blocks are inserted into a page or post and provide the structure for a particular type of content. WordPress ships with a handful of “core” blocks for common content types, like Paragraph, List, Image, Video, and Audio, <a href="https://developer.wordpress.org/block-editor/reference-guides/core-blocks/" rel="noopener">to name a few</a>.</p>



<p>Apart from these core blocks, we can create custom blocks too. That is what WordPress block development is about (there&#8217;s also filtering core blocks to modify their functionality, but you likely won&#8217;t be needing that just yet).</p>


<h3 id="what-blocks-do">What blocks do</h3>


<p>Before we dive into creating blocks, we must first get some sense of how blocks work internally. That will definitely save us a ton of frustration later on.</p>



<p>The way I like to think about a block is rather abstract: to me, a block is an entity, with some properties (called attributes), that represents some content. I know this sounds pretty vague, but stay with me. A block basically manifests itself in two ways: as a graphical interface in the block editor or as a chunk of data in the database.</p>



<p>When you open up the WordPress Block Editor and insert a block, say a Pullquote block, you get a nice interface. You can click into that interface and edit the quoted text. The Settings panel to the right side of the Block Editor UI provides options for adjusting the text and setting the block’s appearance.</p>



<figure class="wp-block-image size-full"><img loading="lazy" width="653" height="336" src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1662664751637_pullquote-editor-interface.png?resize=653%2C336&#038;ssl=1" alt="" class="wp-image-373735" srcset="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1662664751637_pullquote-editor-interface.png?w=653&amp;ssl=1 653w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1662664751637_pullquote-editor-interface.png?resize=300%2C154&amp;ssl=1 300w" sizes="(min-width: 735px) 864px, 96vw" data-recalc-dims="1" /><figcaption>The <a href="https://wordpress.org/support/article/pullquote-block/" rel="noopener">Pullquote block</a> that is included in WordPress Core</figcaption></figure>



<p>When you are done creating your fancy pullquote and hit Publish, the entire post gets stored in the database in the <code>wp_posts</code> table. This isn’t anything new because of Gutenberg. That’s how things have always worked — WordPress stores post content in a designated table in the database. But what’s new is that <em>a representation of the Pullquote block</em> is part of the content that gets stored in <code>post_content</code> field of the <code>wp_posts</code> table.</p>



<p>What does this representation look like? Have a look:</p>



<pre rel="HTML" class="wp-block-csstricks-code-block language-markup" data-line=""><code markup="tt">&lt;!-- wp:pullquote {"textAlign":"right"} -->
&lt;figure class="wp-block-pullquote has-text-align-right">
  &lt;blockquote>
    &lt;p>It is not an exaggeration to say that peas can be described as nothing less than perfect spheres of joy.&lt;/p>
    &lt;cite>The Encyclopedia of world peas&lt;/cite>
  &lt;/blockquote>
&lt;/figure>
&lt;!-- /wp:pullquote --></code></pre>



<p>Looks like plain HTML, right?! This, in technical lingo, is the &#8220;serialized&#8221; block. Notice the JSON data in the HTML comment, <code>"textAlign": "right"</code>. That’s an <em>attribute —</em> a property associated with the block.</p>



<p>Let&#8217;s say that you close the Block Editor, and then some time later, open it again. The content from the relevant <code>post_content</code> field is retrieved by the Block Editor. The editor then parses the retrieved content, and wherever it encounters this:</p>



<pre rel="HTML" class="wp-block-csstricks-code-block language-markup" data-line=""><code markup="tt">&lt;!-- wp:pullquote {"textAlign":"right"} -->...&lt;!-- /wp:pullquote --></code></pre>



<p>…it says out loud to itself:</p>



<blockquote class="wp-block-quote"><p>OK, that seems like a Pullquote block to me. Hmm.. it’s got an attribute too… I do have a JavaScript file that tells me how to construct the graphical interface for a Pullquote block in the editor from its attributes. I should do that now to render this block in all its glory.</p></blockquote>



<p>As a block developer, your job is to:</p>



<ol><li>Tell WordPress that you want to register a specific type of block, with so-and-so details.</li><li>Provide the JavaScript file to the Block Editor that will help it render the block in the editor while also “serializing” it to save it in the database.</li><li>Provide any additional resources the block needs for its proper functionality, e.g. styles and fonts.</li></ol>



<p>One thing to note is that all of this conversion from serialized data to graphical interface — and vice versa — takes place only in the Block Editor. On the front end, the content is displayed exactly the way it is stored. Therefore, in a sense, blocks are a fancy way of putting data in the database.</p>



<p>Hopefully, this gives you some clarity as to how a block works.</p>



<figure class="wp-block-image size-full"><img loading="lazy" width="1233" height="453" src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1662664915710_serialization-diagram.png?resize=1233%2C453&#038;ssl=1" alt="Diagram outlining the post editor states and how data is saved to a database and parsed for rendering." class="wp-image-373737" srcset="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1662664915710_serialization-diagram.png?w=1233&amp;ssl=1 1233w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1662664915710_serialization-diagram.png?resize=300%2C110&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1662664915710_serialization-diagram.png?resize=1024%2C376&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1662664915710_serialization-diagram.png?resize=768%2C282&amp;ssl=1 768w" sizes="(min-width: 735px) 864px, 96vw" data-recalc-dims="1" /></figure>


<h3 id="blocks-are-just-plugins">Blocks are just plugins</h3>


<p>Blocks are just plugins. Well, technically, you <em>can</em> put blocks in themes and you <em>can</em> put multiple blocks in a plugin. But, more often than not, if you want to make a block, you’re going to be making a plugin. So, if you’ve ever created a WordPress plugin, then you’re already part-way there to having a handle on making a WordPress block.</p>



<p>But let’s assume for a moment that you’ve never set up a WordPress plugin, let alone a block. Where do you even start?</p>


<h3 id="setting-up-a-block">Setting up a block</h3>


<p>We have covered what blocks are. Let’s start setting things up to make one.</p>


<h4 id="make-sure-you-have-node-installed">Make sure you have Node installed</h4>


<p>This will give you access to <code>npm</code> and <code>npx</code> commands, where <code>npm</code> installs your block’s dependencies and helps compile stuff, while <code>npx</code> runs commands on packages without installing them. If you’re on macOS, you probably already have Node and can can use <a href="https://formulae.brew.sh/formula/nvm#default" rel="noopener"><code>nvm</code></a> to update versions. If you’re on Windows, you’ll need to <a href="https://nodejs.org/en/" rel="noopener">download and install Node</a>.</p>


<h4 id="create-a-project-folder">Create a project folder</h4>


<p>Now, you might run into other tutorials that jump straight into the command line and instruct you to install a package called <a href="https://developer.wordpress.org/block-editor/reference-guides/packages/packages-create-block/" rel="noopener"><code>@wordpress/create-block</code></a>. This package is great because it spits out a fully formed project folder with all the dependencies and tools you need to start developing.</p>



<p>I personally go this route when setting up my own blocks, but humor me for a moment because I want to cut through the opinionated stuff it introduces and focus just on the required bits for the sake of understanding the baseline development environment.</p>



<p>These are the files I’d like to call out specifically:</p>



<ul><li><code>readme.txt</code>: This is sort of like the front face of the plugin directory, typically used to describe the plugin and provide additional details on usage and installation. If you submit your block to the <a href="https://wordpress.org/plugins/" rel="noopener">WordPress Plugin Directory</a>, this file helps populate the plugin page. If you plan on creating a GitHub repo for your block plugin, then you might also consider a <code>README.md</code> file with the same information so it displays nicely there.</li><li><code>package.json</code>: This defines the Node packages that are required for development. We’ll crack it open when we get to installation. In classic WordPress plugin development, you might be accustomed to working with Composer and a <code>composer.json</code> file instead. This is the equivalent of that.</li><li><code>plugin.php</code>: This is the main plugin file and, yes, it’s classic PHP! We’ll put our plugin header and metadata in here and use it to register the plugin.</li></ul>



<p>In addition to these files, there’s also the <code>src</code> directory, which is supposed to contain the source code of our block.</p>



<p>Having these files and the <code>src</code> directory is all you need to get started. Out of that group, notice that <strong>we technically only need one file</strong> (<code>plugin.php</code>) to make the plugin. The rest either provide information or are used to manage the development environment.</p>



<p>The aforementioned <code>@wordpress/create-block</code> package scaffolds these files (and more) for us. You can think of it as an automation tool instead of a necessity. Regardless, it does make the job easier, so you can take the liberty of scaffolding a block with it by running:</p>



<pre rel="Terminal" class="wp-block-csstricks-code-block language-none" data-line=""><code markup="tt">npx @wordpress/create-block</code></pre>


<h4 id="install-block-dependencies">Install block dependencies</h4>


<p>Assuming you have the three files mentioned in the previous section ready, it’s time to install the dependencies. First, we need to specify the dependencies we will need. We do that by editing the <code>package.json</code>. While using the <code>@wordpress/create-block</code> utility, the following is generated for us (comments added; JSON does not support comments, so remove the comments if you’re copying the code):</p>



<pre rel="JSON" class="wp-block-csstricks-code-block language-javascript" data-line=""><code markup="tt">{
  // Defines the name of the project
  "name": "block-example",
  // Sets the project version number using semantic versioning
  "version": "0.1.0",
  // A brief description of the project
  "description": "Example block scaffolded with Create Block tool.",
  // You could replace this with yourself
  "author": "The WordPress Contributors",
  // Standard licensing information
  "license": "GPL-2.0-or-later",
  // Defines the main JavaScript file
  "main": "build/index.js",
  // Everything we need for building and compiling the plugin during development
  "scripts": {
    "build": "wp-scripts build",
    "format": "wp-scripts format",
    "lint:css": "wp-scripts lint-style",
    "lint:js": "wp-scripts lint-js",
    "packages-update": "wp-scripts packages-update",
    "plugin-zip": "wp-scripts plugin-zip",
    "start": "wp-scripts start"
  },
  // Defines which version of the scripts packages are used (24.1.0 at time of writing)
  // https://developer.wordpress.org/block-editor/reference-guides/packages/packages-scripts/
  "devDependencies": {
    "@wordpress/scripts": "^24.1.0"
  }
}</code></pre>



<details >
  <summary>
          View without comments      </summary>


<pre rel="JSON" class="wp-block-csstricks-code-block language-javascript" data-line=""><code markup="tt">{
  "name": "block-example",
  "version": "0.1.0",
  "description": "Example block scaffolded with Create Block tool.",
  "author": "The WordPress Contributors",
  "license": "GPL-2.0-or-later",
  "main": "build/index.js",
  "scripts": {
    "build": "wp-scripts build",
    "format": "wp-scripts format",
    "lint:css": "wp-scripts lint-style",
    "lint:js": "wp-scripts lint-js",
    "packages-update": "wp-scripts packages-update",
    "plugin-zip": "wp-scripts plugin-zip",
    "start": "wp-scripts start"
  },
  "devDependencies": {
    "@wordpress/scripts": "^24.1.0"
  }
}</code></pre>


</details>


<p>The <code>@wordpress/scripts</code> package is the main dependency here. As you can see, it’s a <code>devDependency</code> meaning that it aids in development. How so? It exposes the <code>wp-scripts</code> binary that we can use to compile our code, from the <code>src</code> directory to the <code>build</code> directory, among other things.</p>



<p>There are a number of other packages that WordPress maintains for various purposes. For example, the <a href="https://developer.wordpress.org/block-editor/reference-guides/packages/packages-components/" rel="noopener"><code>@wordpress/components</code></a> package provides <a href="https://wordpress.github.io/gutenberg/?path=/story/docs-introduction--page" rel="noopener">several pre-fab <abbr>UI</abbr> components</a> for the WordPress Block Editor that can be used for creating consistent user experiences for your block that aligns with WordPress design standards.</p>



<p>You don&#8217;t actually <em>need</em> to install these packages, even if you want to use them. This is because these <code>@wordpress</code> dependencies aren&#8217;t bundled with your block code. Instead, any <code>import</code> statements referencing code from utility packages — like <code>@wordpress/components</code> — are used to construct an &#8220;assets&#8221; file, during compilation. Moreover, these import statements are converted to statements mapping the imports to properties of a global object. For example, <code>import { __ } from "@wordpress/i18n"</code> is converted to a minified version of <code>const __ = window.wp.i18n.__</code>. (<code>window.wp.i18n</code> being an object that is guaranteed to be available in the global scope, once the corresponding <code>i18n</code> package file is enqueued).</p>



<p>During block registration in the plugin file, the &#8220;assets&#8221; file is implicitly used to tell WordPress the package dependencies for the block. These dependencies are automatically enqueued. All of this is taken care of behind the scenes, granted you are using the <code>scripts</code> package. That being said, you can still choose to locally install dependencies for code completion and parameter info in your <code>package.json</code> file:</p>



<pre rel="JSON" class="wp-block-csstricks-code-block language-javascript" data-line=""><code markup="tt">// etc.
"devDependencies": {
  "@wordpress/scripts": "^24.1.0"
},
"dependencies": {
  "@wordpress/components": "^19.17.0"
}</code></pre>



<p>Now that <code>package.json</code> is set up, we should be able to install all those dependencies by navigating to the project folder in the command line and running <code>npm install</code>.</p>



<figure class="wp-block-image size-full"><img loading="lazy" width="1660" height="330" src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1663178221704_ScreenShot2022-09-14at11.56.39AM.png?resize=1660%2C330&#038;ssl=1" alt="Terminal output after running the install command. 1,296 packages were installed." class="wp-image-373740" srcset="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1663178221704_ScreenShot2022-09-14at11.56.39AM.png?w=1660&amp;ssl=1 1660w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1663178221704_ScreenShot2022-09-14at11.56.39AM.png?resize=300%2C60&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1663178221704_ScreenShot2022-09-14at11.56.39AM.png?resize=1024%2C204&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1663178221704_ScreenShot2022-09-14at11.56.39AM.png?resize=768%2C153&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1663178221704_ScreenShot2022-09-14at11.56.39AM.png?resize=1536%2C305&amp;ssl=1 1536w" sizes="(min-width: 735px) 864px, 96vw" data-recalc-dims="1" /></figure>


<h4 id="add-the-plugin-header">Add the plugin header</h4>


<p>If you’re coming from classic WordPress plugin development, then you probably know that all plugins have a block of information in the main plugin file that helps WordPress recognize the plugin and display information about it on the Plugins screen of the WordPress admin.</p>



<p>Here’s what <code>@wordpress/create-block</code> generated for me in for a plugin creatively called “Hello World”:</p>



<pre rel="PHP" class="wp-block-csstricks-code-block language-javascript" data-line=""><code markup="tt">&lt;?php
/**
 * Plugin Name:       Block Example
 * Description:       Example block scaffolded with Create Block tool.
 * Requires at least: 5.9
 * Requires PHP:      7.0
 * Version:           0.1.0
 * Author:            The WordPress Contributors
 * License:           GPL-2.0-or-later
 * License URI:       https://www.gnu.org/licenses/gpl-2.0.html
 * Text Domain:       css-tricks
 *
 * @package           create-block
 */</code></pre>



<p>That’s in the main plugin file, which you can call whatever you’d like. You might call it something generic like <code>index.php</code> or <code>plugin.php</code>. The <code>create-block</code> package automatically calls it whatever you provide as the project name when installing it. Since I called this example “Block Example”, the package gave us a <code>block-example.php</code> file with all this stuff.</p>



<p>You’re going to want to change some of the details, like making yourself the author and whatnot. And not all of that is necessary. If I was rolling this from “scratch”, then it might look something closer to this:</p>



<pre rel="PHP" class="wp-block-csstricks-code-block language-javascript" data-line=""><code markup="tt">&lt;?php
/**
 * Plugin Name:       Block Example
 * Plugin URI:        https://css-tricks.com
 * Description:       An example plugin for learning WordPress block development.
 * Version:           1.0.0
 * Author:            Arjun Singh
 * License:           GPL-2.0-or-later
 * License URI:       https://www.gnu.org/licenses/gpl-2.0.html
 * Text Domain:       css-tricks
 */</code></pre>



<p>I won’t get into the exact purpose of each line since that’s already a <a href="https://developer.wordpress.org/plugins/plugin-basics/header-requirements/" rel="noopener">well-established pattern in the WordPress Plugin Handbook</a>.</p>


<h4 id="the-file-structure">The file structure</h4>


<p>We’ve already looked at the required files for our block. But if you’re using <code>@wordpress/create-block</code>, you will see a bunch of other files in the project folder.</p>



<p>Here’s what’s in there at the moment:</p>



<pre rel="" class="wp-block-csstricks-code-block language-none" data-line=""><code markup="tt">block-example/
├── build
├── node_modules
├── src/
│   ├── block.json
│   ├── edit.js
│   ├── editor.scss
│   ├── index.js
│   ├── save.js
│   └── style.scss
├── .editorconfig
├── .gitignore
├── block-example.php
├── package-lock.json
├── package.json
└── readme.txt</code></pre>



<p>Phew, that’s a lot! Let’s call out the new stuff:</p>



<ul><li><code>build/</code>: This folder received the compiled assets when processing the files for production use.</li><li><code>node_modules</code>: This holds all the development dependencies we installed when running <code>npm install</code>.</li><li><code>src/</code>: This folder holds the plugin’s source code that gets compiled and sent to the <code>build</code> directory. We’ll look at each of the files in here in just a bit.</li><li><code>.editorconfig</code>: This contains configurations to adapt your code editor for code consistency.</li><li><code>.gitignore</code>: This is a standard repo file that identifies local files that should be excluded from version control tracking. Your <code>node_modules</code> should definitely be included in here.</li><li><code>package-lock.json</code>: This is an auto-generated file containing for tracking updates to the required packages we installed with <code>npm install</code>.</li></ul>


<h4 id="block-metadata">Block metadata</h4>


<p>I want to dig into the <code>src</code> directory with you but will focus first on just one file in it: <code>block.json</code>. If you’ve used <code>create-block</code> , it’s already there for you; if not, go ahead and create it. WordPress is leaning in hard to make this the standard, canonical way to register a block by providing metadata that provides WordPress context to both recognize the block and render it in the Block Editor.</p>



<p>Here’s what <code>@wordpress/create-block</code> generated for me:</p>



<pre rel="JSON" class="wp-block-csstricks-code-block language-javascript" data-line=""><code markup="tt">{
  "$schema": "https://schemas.wp.org/trunk/block.json",
  "apiVersion": 2,
  "name": "create-block/block example",
  "version": "0.1.0",
  "title": "Block Example",
  "category": "widgets",
  "icon": "smiley",
  "description": "Example block scaffolded with Create Block tool.",
  "supports": {
    "html": false
  },
  "textdomain": "css-tricks",
  "editorScript": "file:./index.js",
  "editorStyle": "file:./index.css",
  "style": "file:./style-index.css"
}</code></pre>



<p>There’s actually a <a href="https://developer.wordpress.org/block-editor/reference-guides/block-api/block-metadata/" rel="noopener">bunch of different information</a> we can include here, but all that’s actually required is <a href="https://developer.wordpress.org/block-editor/reference-guides/block-api/block-metadata/#name" rel="noopener"><code>name</code></a> and <a href="https://developer.wordpress.org/block-editor/reference-guides/block-api/block-metadata/#title" rel="noopener"><code>title</code></a>. A super minimal version might look like this:</p>



<pre rel="JSON" class="wp-block-csstricks-code-block language-javascript" data-line=""><code markup="tt">{
  "$schema": "https://schemas.wp.org/trunk/block.json",
  "apiVersion": 2,
  "name": "css-tricks/block-example",
  "version": "1.0.0",
  "title": "Block Example",
  "category": "text",
  "icon": "format-quote",
  "editorScript": "file:./index.js",
}</code></pre>



<ul><li><code>$schema</code> defines the schema formatting used to validate the content in the file. It sounds like a required thing, but it’s totally optional as it allows supporting code editors to validate the syntax and provide other additional affordances, like tooltip hints and auto-completion.</li><li><code>apiVersion</code> refers to which version of the <a href="https://developer.wordpress.org/block-editor/reference-guides/block-api/" rel="noopener">Block API</a> the plugin uses. Today, Version 2 is the latest.</li><li><code>name</code> is a required unique string that helps identify the plugin. Notice that I’ve prefixed this with <code>css-tricks/</code> which I’m using as a namespace to help avoid conflicts with other plugins that might have the same name. You might choose to use something like your initials instead (e.g. <code>as/block-example</code>).</li><li><code>version</code> is something <a href="https://developer.wordpress.org/block-editor/reference-guides/block-api/block-metadata/#version" rel="noopener">WordPress suggests using</a> as a cache-busting mechanism when new versions are released.</li><li><code>title</code> is the other required field, and it sets the name that’s used wherever the plugin is displayed.</li><li><code>category</code> groups the block with other blocks and displays them together in the Block Editor. Current existing categories include <code>text</code>, <code>media</code>, <code>design</code>, <code>widgets</code>, <code>theme</code>, and <code>embed</code>, and you can even create <a href="https://developer.wordpress.org/block-editor/reference-guides/filters/block-filters/#managing-block-categories" rel="noopener">custom categories</a>.</li><li><code>icon</code> lets you choose something from the <a href="https://developer.wordpress.org/resource/dashicons/#info" rel="noopener">Dashicons library</a> to visually represent your block in the Block Editor. I’m using the <a href="https://developer.wordpress.org/resource/dashicons/#format-quote" rel="noopener"><code>format-quote</code></a> icon since we’re making our own pullquote sort of thing in this example. It’s nice we can leverage existing icons rather than having to create our own, though that’s certainly possible.</li><li><code>editorScript</code> is where the main JavaScript file, <code>index.js</code>, lives.</li></ul>


<h4 id="register-the-block">Register the block</h4>


<p>One last thing before we hit actual code, and that’s to register the plugin. We just set up all that metadata and we need a way for WordPress to consume it. That way, WordPress knows where to find all the plugin assets so they can be enqueued for use in the Block Editor.</p>



<p>Registering the block is a two-fold process. We need to register it both in PHP and in JavaScript. For the PHP side, open up the main plugin file (<code>block-example.php</code> in this case) and add the following right after the plugin header:</p>



<pre rel="PHP" class="wp-block-csstricks-code-block language-javascript" data-line=""><code markup="tt">function create_block_block_example_block_init() {
  register_block_type( __DIR__ . '/build' );
}
add_action( 'init', 'create_block_block_example_block_init' );</code></pre>



<p>This is what the <code>create-block</code> utility generated for me, so that’s why the function is named the way it is. We can use a different name. The key, again, is avoiding conflicts with other plugins, so it’s a good idea to use your namespace here to make it as unique as possible:</p>



<pre rel="PHP" class="wp-block-csstricks-code-block language-javascript" data-line=""><code markup="tt">function css_tricks_block_example_block_init() {
  register_block_type( __DIR__ . '/build' );
}
add_action( 'init', 'css_tricks_block_example_block_init' );</code></pre>



<p>Why are we pointing to the <code>build</code> directory if the <code>block.json</code> with all the block metadata is in <code>src</code>? That’s because our code still needs to be compiled. The <code>scripts</code> package processes the code from files in the <code>src</code> directory and places the compiled files used in production in the <code>build</code> directory, while also <em>copying the</em> <code>block.json</code> <em>file</em> in the process.</p>



<p>Alright, let’s move over to the JavaScript side of registering the block. Open up <code>src/index.js</code> and make sure it looks like this:</p>



<pre rel="JSX" class="wp-block-csstricks-code-block language-jsx" data-line=""><code markup="tt">import { registerBlockType } from "@wordpress/blocks";

import metadata from "./block.json";
import Edit from "./edit.js";
import Save from "./save.js";

const { name } = metadata;

registerBlockType(name, {
  edit: Edit,
  save: Save,
});</code></pre>



<p>We’re getting into React and JSX land! This tells WordPress to:</p>



<ul><li>Import the <code>registerBlockType</code> module from the <code>@wordpress/blocks</code> package.</li><li>Import metadata from <code>block.json</code>.</li><li>Import the <code>Edit</code> and <code>Save</code> components from their corresponding files. We’ll be putting code into those files later.</li><li>Register the the block, and use the <code>Edit</code> and <code>Save</code> components for rendering the block and saving its content to the database.</li></ul>



<p>What’s up with the <code>edit</code> and <code>save</code> functions? One of the nuances of WordPress block development is differentiating the “back end” from the “front end” and these functions are used to render the block’s content in those contexts, where <code>edit</code> handles back-end rendering and <code>save</code> writes the content from the Block Editor to the database for rendering the content on the front end of the site.</p>


<h3 id="a-quick-test">A quick test</h3>


<p>We can do some quick work to see our block working in the Block Editor and rendered on the front end. Let’s open <code>index.js</code> again and use the <code>edit</code> and <code>save</code> functions to return some basic content that illustrates how they work:</p>



<pre rel="JSX" class="wp-block-csstricks-code-block language-jsx" data-line=""><code markup="tt">import { registerBlockType } from "@wordpress/blocks";
import metadata from "./block.json";

const { name } = metadata;

registerBlockType(name, {
  edit: () => {
    return (
      "Hello from the Block Editor"
    );
  },
  save: () => {
    return (
      "Hello from the front end"
    );
  }
});</code></pre>



<p>This is basically a stripped-down version of the same code we had before, only we’re pointing directly to the metadata in <code>block.json</code> to fetch the block name, and left out the <code>Edit</code> and <code>Save</code> components since we’re running the functions directly from here.</p>



<p>We can compile this by running <code>npm run build</code> in the command line. After that, we have access to a block called “Block Example” in the Block Editor:</p>



<figure class="wp-block-image size-full"><img loading="lazy" width="2534" height="1688" src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1663194604524_ScreenShot2022-09-14at4.29.37PM.png?resize=2534%2C1688&#038;ssl=1" alt="The WordPress Block Editor with the block inserter panel open and the pullquote block inserted into the content area. It reads hello from the back end." class="wp-image-373745" srcset="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1663194604524_ScreenShot2022-09-14at4.29.37PM.png?w=2534&amp;ssl=1 2534w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1663194604524_ScreenShot2022-09-14at4.29.37PM.png?resize=300%2C200&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1663194604524_ScreenShot2022-09-14at4.29.37PM.png?resize=1024%2C682&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1663194604524_ScreenShot2022-09-14at4.29.37PM.png?resize=768%2C512&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1663194604524_ScreenShot2022-09-14at4.29.37PM.png?resize=1536%2C1023&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1663194604524_ScreenShot2022-09-14at4.29.37PM.png?resize=2048%2C1364&amp;ssl=1 2048w" sizes="(min-width: 735px) 864px, 96vw" data-recalc-dims="1" /></figure>



<p>If we drop the block into the content area, we get the message we return from the <code>edit</code> function:</p>



<figure class="wp-block-image size-full"><img loading="lazy" width="2304" height="1640" src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1663200160433_ScreenShot2022-09-14at6.00.52PM.png?resize=2304%2C1640&#038;ssl=1" alt="" class="wp-image-373755" srcset="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1663200160433_ScreenShot2022-09-14at6.00.52PM.png?w=2304&amp;ssl=1 2304w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1663200160433_ScreenShot2022-09-14at6.00.52PM.png?resize=300%2C214&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1663200160433_ScreenShot2022-09-14at6.00.52PM.png?resize=1024%2C729&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1663200160433_ScreenShot2022-09-14at6.00.52PM.png?resize=768%2C547&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1663200160433_ScreenShot2022-09-14at6.00.52PM.png?resize=1536%2C1093&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1663200160433_ScreenShot2022-09-14at6.00.52PM.png?resize=2048%2C1458&amp;ssl=1 2048w" sizes="(min-width: 735px) 864px, 96vw" data-recalc-dims="1" /></figure>



<p>If we save and publish the post, we should get the message we return from the <code>save</code> function when viewing it on the front end:</p>



<figure class="wp-block-image size-full"><img loading="lazy" width="2304" height="1892" src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1663194894555_ScreenShot2022-09-14at4.34.44PM.png?resize=2304%2C1892&#038;ssl=1" alt="The pullquote block rendered on the front end of the website. It says hello from the front end." class="wp-image-373746" srcset="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1663194894555_ScreenShot2022-09-14at4.34.44PM.png?w=2304&amp;ssl=1 2304w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1663194894555_ScreenShot2022-09-14at4.34.44PM.png?resize=300%2C246&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1663194894555_ScreenShot2022-09-14at4.34.44PM.png?resize=1024%2C841&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1663194894555_ScreenShot2022-09-14at4.34.44PM.png?resize=768%2C631&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1663194894555_ScreenShot2022-09-14at4.34.44PM.png?resize=1536%2C1261&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1663194894555_ScreenShot2022-09-14at4.34.44PM.png?resize=2048%2C1682&amp;ssl=1 2048w" sizes="(min-width: 735px) 864px, 96vw" data-recalc-dims="1" /></figure>


<h3 id="creating-a-block">Creating a block</h3>


<p>Looks like everything is hooked up! We can revert back to what we had in <code>index.js</code> before the test now that we’ve confirmed things are working:</p>



<pre rel="JSX" class="wp-block-csstricks-code-block language-jsx" data-line=""><code markup="tt">import { registerBlockType } from "@wordpress/blocks";

import metadata from "./block.json";
import Edit from "./edit.js";
import Save from "./save.js";

const { name } = metadata;

registerBlockType(name, {
  edit: Edit,
  save: Save,
});</code></pre>



<p>Notice that the <code>edit</code> and <code>save</code> functions are tied to two existing files in the <code>src</code> directory that <code>@wordpress/create-block</code> generated for us and includes all the additional imports we need in each file. More importantly, though, those files establish the <code>Edit</code> and <code>Save</code> components that contain the block’s markup.</p>


<h4 id="back-end-markup-srceditjs">Back end markup (<code>src/edit.js</code>)</h4>


<pre rel="JSX" class="wp-block-csstricks-code-block language-jsx" data-line=""><code markup="tt">import { useBlockProps } from "@wordpress/block-editor";
import { __ } from "@wordpress/i18n";

export default function Edit() {
  return (
    &lt;p {...useBlockProps()}>
      {__("Hello from the Block Editor", "block-example")}
    &lt;/p>
  );
}</code></pre>



<p>See what we did there? We’re importing props from the <a href="https://developer.wordpress.org/block-editor/reference-guides/packages/packages-block-editor/" rel="noopener"><code>@wordpress/block-editor</code></a> package which allows us to generate classes we can use later for styling. We’re also importing the <code>__</code> internationalization function, for dealing with translations.</p>



<figure class="wp-block-image size-full"><img loading="lazy" width="1470" height="480" src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1663199536006_ScreenShot2022-09-14at5.51.51PM.png?resize=1470%2C480&#038;ssl=1" alt="The pullquote block on the back end, selected and with devtools open beside it displaying the markup." class="wp-image-373751" srcset="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1663199536006_ScreenShot2022-09-14at5.51.51PM.png?w=1470&amp;ssl=1 1470w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1663199536006_ScreenShot2022-09-14at5.51.51PM.png?resize=300%2C98&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1663199536006_ScreenShot2022-09-14at5.51.51PM.png?resize=1024%2C334&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1663199536006_ScreenShot2022-09-14at5.51.51PM.png?resize=768%2C251&amp;ssl=1 768w" sizes="(min-width: 735px) 864px, 96vw" data-recalc-dims="1" /></figure>


<h4 id="frontend-markup-srcsavejs">Front-end markup (<code>src/save.js</code>)</h4>


<p>This creates a <code>Save</code> component and we’re going to use pretty much the same thing as <code>src/edit.js</code> with slightly different text:</p>



<pre rel="JSX" class="wp-block-csstricks-code-block language-jsx" data-line=""><code markup="tt">import { useBlockProps } from "@wordpress/block-editor";
import { __ } from "@wordpress/i18n";

export default function Save() {
  return (
    &lt;p {...useBlockProps.save()}>
      {__("Hello from the front end", "block-example")}
    &lt;/p>
  );
}</code></pre>



<p>Again, we get a nice class we can use in our CSS:</p>



<figure class="wp-block-image size-full"><img loading="lazy" width="1600" height="348" src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1663199195305_ScreenShot2022-09-14at5.45.45PM.png?resize=1600%2C348&#038;ssl=1" alt="The pullquote block on the front end, selected and with devtools open beside it displaying the markup." class="wp-image-373752" srcset="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1663199195305_ScreenShot2022-09-14at5.45.45PM.png?w=1600&amp;ssl=1 1600w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1663199195305_ScreenShot2022-09-14at5.45.45PM.png?resize=300%2C65&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1663199195305_ScreenShot2022-09-14at5.45.45PM.png?resize=1024%2C223&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1663199195305_ScreenShot2022-09-14at5.45.45PM.png?resize=768%2C167&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1663199195305_ScreenShot2022-09-14at5.45.45PM.png?resize=1536%2C334&amp;ssl=1 1536w" sizes="(min-width: 735px) 864px, 96vw" data-recalc-dims="1" /></figure>


<h3 id="styling-blocks">Styling blocks</h3>


<p>We just covered how to use block props to create classes. You’re reading this article on a site all about CSS, so I feel like I’d be missing something if we didn’t specifically address how to write block styles.</p>


<h4 id="differentiating-front-and-backend-styles">Differentiating front and back-end styles</h4>


<p>If you take a look at the <code>block.json</code> in the <code>src</code> directory you’ll find two fields related to styles:</p>



<ul><li><code>editorStyle</code> provides the path to the styles applied to the back end.</li><li><code>style</code> is the path for shared styles that are applied to both the front and back end.</li></ul>



<p class="is-style-explanation"><a href="https://css-tricks.com/getting-the-wordpress-block-editor-to-look-like-the-front-end-design/">Kev Quirk has a detailed article</a> that shows his approach for making the back-end editor look like the front end UI.</p>



<p>Recall that the <code>@wordpress/scripts</code> package copies the <code>block.json</code> file when it processes the code in the <code>/src</code> directory and places compiled assets in the <code>/build</code> directory. It is the <code>build/block.json</code> file that is used to register the block. <strong>That means any path that we provide in <code>src/block.json</code> should be written relative to <code>build/block.json</code>.</strong></p>


<h4 id="using-sass">Using Sass</h4>


<p>We could drop a couple of CSS files in the <code>build</code> directory, reference the paths in <code>src/block.json</code>, run the build, and call it a day. But that doesn’t leverage the full might of the <code>@wordpress/scripts</code> compilation process, which is capable of compiling Sass into CSS. Instead, we place our style files in the <code>src</code> directory and import them in JavaScript.</p>



<p>While doing that, we need to be mindful of how <code>@wordpress/scripts</code> processes styles:</p>



<ul><li>A file named <code>style.css</code> or <code>style.scss</code> or <code>style.sass</code>, imported into the JavaScript code, is compiled to <code>style-index.css</code>.</li><li>All other style files are compiled and bundled into <code>index.css</code>.</li></ul>



<p>The <code>@wordpress/scripts</code> package uses <a href="https://webpack.js.org" rel="noopener">webpack</a> for bundling and <code>@wordpress/scripts</code> uses the <a href="https://webpack.js.org/loaders/postcss-loader/" rel="noopener">PostCSS plugin</a> for working for processing styles. PostCSS can be extended with additional plugins. The <code>scripts</code> package uses the ones for Sass, SCSS, and Autoprefixer, all of which are available for use without installing additional packages.</p>



<p>In fact, when you spin up your initial block with <code>@wordpress/create-block</code>, you get a nice head start with SCSS files you can use to hit the ground running:</p>



<ul><li><code>editor.scss</code> contains all the styles that are applied to the back-end editor.</li><li><code>style.scss</code> contains all the styles shared by both the front and back end.</li></ul>



<p>Let’s now see this approach in action by writing a little Sass that we’ll compile into the CSS for our block. Even though the examples aren’t going to be very Sass-y, I’m still writing them to the SCSS files to demonstrate the compilation process.</p>


<h4 id="front-and-backend-styles">Front <em>and</em> back-end styles</h4>


<p>OK, let’s start with styles that are applied to both the front and back end. First, we need to create <code>src/style.scss</code> (it’s already there if you’re using <code>@wordpress/create-block</code>) and make sure we import it, which we can do in <code>index.js</code>:</p>



<pre rel="JSX" class="wp-block-csstricks-code-block language-jsx" data-line=""><code markup="tt">import "./style.scss";</code></pre>



<p>Open up <code>src/style.scss</code> and drop a few basic styles in there using the class that was generated for us from the block props:</p>



<pre rel="CSS" class="wp-block-csstricks-code-block language-css" data-line=""><code markup="tt">.wp-block-css-tricks-block-example {
  background-color: rebeccapurple;
  border-radius: 4px;
  color: white;
  font-size: 24px;
}</code></pre>



<p>That’s it for now! When we run the build, this gets compiled into <code>build/style.css</code> and is referenced by both the Block Editor and the front end.</p>


<h4 id="backend-styles">Back-end styles</h4>


<p>You might need to write styles that are specific to the Block Editor. For that, create <code>src/editor.scss</code> (again, <code>@wordpress/create-block</code> does this for you) and drop some styles in there:</p>



<pre rel="CSS" class="wp-block-csstricks-code-block language-css" data-line=""><code markup="tt">.wp-block-css-tricks-block-example {
  background-color: tomato;
  color: black;
}</code></pre>



<p>Then import it in <code>edit.js</code>, which is the file that contains our <code>Edit</code> component (we can import it anywhere we want, but since these styles are for the editor, it’s more logical to import the component here):</p>



<pre rel="JSX" class="wp-block-csstricks-code-block language-jsx" data-line=""><code markup="tt">import "./editor.scss";</code></pre>



<p>Now when we run <code>npm run build</code>, the styles are applied to the block in both contexts:</p>



<div class="wp-container-2 is-nowrap wp-block-group ticss-bdf06b68">
<figure class="wp-block-image size-full"><img loading="lazy" width="2304" height="1640" src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1663200160433_ScreenShot2022-09-14at6.00.52PM.png?resize=2304%2C1640&#038;ssl=1" alt="The pullquote block in the WordPress Block Editor with an applied tomoato-colored background.\ behind black text." class="wp-image-373755" srcset="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1663200160433_ScreenShot2022-09-14at6.00.52PM.png?w=2304&amp;ssl=1 2304w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1663200160433_ScreenShot2022-09-14at6.00.52PM.png?resize=300%2C214&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1663200160433_ScreenShot2022-09-14at6.00.52PM.png?resize=1024%2C729&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1663200160433_ScreenShot2022-09-14at6.00.52PM.png?resize=768%2C547&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1663200160433_ScreenShot2022-09-14at6.00.52PM.png?resize=1536%2C1093&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1663200160433_ScreenShot2022-09-14at6.00.52PM.png?resize=2048%2C1458&amp;ssl=1 2048w" sizes="(min-width: 735px) 864px, 96vw" data-recalc-dims="1" /></figure>



<figure class="wp-block-image size-full"><img loading="lazy" width="2304" height="1892" src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1663200175660_ScreenShot2022-09-14at5.59.47PM.png?resize=2304%2C1892&#038;ssl=1" alt="The pullquote block ion the front end with an applied rebecca purple-colored background behind black text." class="wp-image-373760" srcset="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1663200175660_ScreenShot2022-09-14at5.59.47PM.png?w=2304&amp;ssl=1 2304w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1663200175660_ScreenShot2022-09-14at5.59.47PM.png?resize=300%2C246&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1663200175660_ScreenShot2022-09-14at5.59.47PM.png?resize=1024%2C841&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1663200175660_ScreenShot2022-09-14at5.59.47PM.png?resize=768%2C631&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1663200175660_ScreenShot2022-09-14at5.59.47PM.png?resize=1536%2C1261&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_502E64079A5921B82DEB1629A78181C654216231A204F868ED97D178614D24E2_1663200175660_ScreenShot2022-09-14at5.59.47PM.png?resize=2048%2C1682&amp;ssl=1 2048w" sizes="(min-width: 735px) 864px, 96vw" data-recalc-dims="1" /></figure>



<p></p>
</div>


<h4 id="referencing-styles-in-blockjson">Referencing styles in <code>block.json</code></h4>


<p>We imported the styling files in the <code>edit.js</code> and <code>index.js</code>, but recall that the compilation step generates two CSS files for us in the <code>build</code> directory: <code>index.css</code> and <code>style-index.css</code> respectively. We need to reference these generated files in the block metadata.</p>



<p>Let’s add a couple of statements to the <code>block.json</code> metadata:</p>



<pre rel="JSON" class="wp-block-csstricks-code-block language-javascript" data-line="10,11"><code markup="tt">{
  "$schema": "https://schemas.wp.org/trunk/block.json",
  "apiVersion": 2,
  "name": "css-tricks/block-example",
  "version": "1.0.0",
  "title": "Block Example",
  "category": "text",
  "icon": "format-quote",
  "editorScript": "file:./index.js",
  "editorStyle": "file:./index.css",
  "style": "file:./style-index.css"
}</code></pre>



<p>Run <code>npm run build</code> once again, install and activate the plugin on your WordPress site, and you’re ready to use it!</p>



<p class="is-style-explanation">You can use <code>npm run start</code> to run your build in watch mode, automatically compiling your code every time you make a change in your code and save.</p>


<h3 id="were-scratching-the-surface">We’re scratching the surface</h3>


<p>Actual blocks make use of the Block Editor’s Settings sidebar and other features WordPress provides to create rich user experiences. Moreover, the fact that there&#8217;s essentially two versions of our block — <code>edit</code> and <code>save</code> — you also need to give thought to how you organize your code to avoid code duplication.</p>



<p>But hopefully this helps de-mystify the general process for creating WordPress blocks. This is truly a new era in WordPress development. It’s tough to learn new ways of doing things, but I’m looking forward to seeing how it evolves. Tools like <code>@wordpress/create-block</code> help, but even then it’s nice to know exactly what it’s doing and why.</p>



<p>Are the things we covered here going to change? Most likely! But at least you have a baseline to work from as we keep watching WordPress blocks mature, including best practices for making them.</p>


<h3 id="references">References</h3>


<p>Again, my goal here is to map out an efficient path for getting into block development in this season where things are evolving quickly and WordPress documentation is having a little hard time catching up. Here are some resources I used to pull this together:</p>



<ul><li><a href="https://developer.wordpress.org/block-editor/explanations/architecture/key-concepts/" rel="noopener">Key Concepts</a> (WordPress Block Editor Handbook)</li><li><a href="https://developer.wordpress.org/block-editor/getting-started/create-block/" rel="noopener">Create a Block Tutorial</a> (WordPress Block Editor Handbook)</li><li><a href="https://developer.wordpress.org/block-editor/reference-guides/block-api/block-metadata/" rel="noopener">Metadata in <code>block.json</code></a> (WordPress Block Editor Handbook)</li><li><a href="https://github.com/WordPress/gutenberg/tree/trunk/packages/block-library/src" rel="noopener">Source code for core blocks</a> (WordPress GitHub)</li><li><a href="https://github.com/WordPress/gutenberg/blob/939cb7cdc16ce4cbb0d0f430f2b710371705bc3e/packages/scripts/config/webpack.config.js" rel="noopener">webpack config used in the <code>@wordpress/scripts</code> package</a> (WordPress GitHub)</li><li><a href="https://tommcfarlin.com/learning-to-build-block-editor-blocks-1/" rel="noopener">A Backend Engineer Learns to Build Block Editor Blocks, Part 1</a> (Tom McFarlin)</li><li><a href="https://www.twitch.tv/ryanwelchercodes/videos" rel="noopener">Ryan Welcher’s Twitch streams</a> (Ryan is a developer advocate at Automattic)</li></ul>
<hr />
<p><small><a rel="nofollow" href="https://css-tricks.com/getting-started-with-wordpress-block-development/">Getting Started With WordPress Block Development</a> originally published on <a rel="nofollow" href="https://css-tricks.com">CSS-Tricks</a>, which is part of the <a href="https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=">DigitalOcean</a> family. You should <a href="https://css-tricks.com/newsletters/">get the newsletter</a>.</p>
]]></content:encoded>

      <wfw:commentRss>
        https://css-tricks.com/getting-started-with-wordpress-block-development/feed/
      </wfw:commentRss>
      <slash:comments>2</slash:comments>


      <post-id xmlns="com-wordpress:feed-additions:1">373732</post-id>
    </item>
    <item>
      <title>GIFs Without the .gif: The Most Performant Image and Video Options Right Now</title>
      <link>
        https://css-tricks.com/gifs-without-the-gif-the-most-performant-image-and-video-options-right-now/
      </link>
      <comments>
        https://css-tricks.com/gifs-without-the-gif-the-most-performant-image-and-video-options-right-now/#comments
      </comments>

      <dc:creator><![CDATA[Ollie Williams]]></dc:creator>
      <pubDate>Wed, 28 Sep 2022 13:09:11 +0000</pubDate>
      <category><![CDATA[Article]]></category>
      <category><![CDATA[avif]]></category>
      <category><![CDATA[gif]]></category>
      <category><![CDATA[image-set]]></category>
      <category><![CDATA[picture]]></category>
      <category><![CDATA[video]]></category>
      <category><![CDATA[webp]]></category>
      <guid isPermaLink="false">https://css-tricks.com/?p=373484</guid>

      <description><![CDATA[<p>So you want an auto-playing looping video without sound? In popular vernacular this is the very meaning of the word <em>GIF</em>. The word has stuck around but the image format itself is ancient and obsolete. Twitter, for example, has &#8230;</p>
<hr />
<p><small><a rel="nofollow" href="https://css-tricks.com/gifs-without-the-gif-the-most-performant-image-and-video-options-right-now/">GIFs Without the .gif: The Most Performant Image and Video Options Right Now</a> originally published on <a rel="nofollow" href="https://css-tricks.com">CSS-Tricks</a>, which is part of the <a href="https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=">DigitalOcean</a> family. You should <a href="https://css-tricks.com/newsletters/">get the newsletter</a>.</p>
]]></description>
      <content:encoded><![CDATA[
<p>So you want an auto-playing looping video without sound? In popular vernacular this is the very meaning of the word <em>GIF</em>. The word has stuck around but the image format itself is ancient and obsolete. Twitter, for example, has a “GIF” button that actually inserts a <code>&lt;video&gt;</code> element with an MP4 file into your tweet — no <code>.gif</code> in sight. There are a beguiling amount of ways to achieve the same outcome but one thing is clear: there’s really no good reason to use the bulky <code>.gif</code> file format anymore.</p>



<span id="more-373484"></span>


<h3 id="use-a-html-ltvideogt-element">Use a HTML <code>&lt;video&gt;</code> element</h3>


<p>It’s easy to recreate the behavior of a GIF using the HTML video element.</p>



<pre rel="HTML" class="wp-block-csstricks-code-block language-markup" data-line=""><code markup="tt">&lt;video autoplay loop muted playsinline src="cats.mp4">&lt;/video></code></pre>



<p>With this code the video will play automatically in a continuous loop with no audio. <a href="https://css-tricks.com/what-does-playsinline-mean-in-web-video/"><code>playsinline</code></a> means that mobile browsers will play the video where it is on the page rather than opening in fullscreen.</p>



<p>While the HTML video element itself has been supported for many years, the same can’t be said for the wide variety of video formats.</p>



<p>Videos are made up of two parts: the container and the video codec. (If your video contains audio then it is made up of three parts, the third being the audio codec.) Containers can store video, audio, subtitles and meta information. The two most common containers for video on the web are MP4 and WebM. The container is the same as the file type — if a file ends with a <code>.mp4</code> extension, that means it’s using an MP4 container. The file extension doesn’t tell you the codec though. Examples of video codecs commonly used on the web include VP8, VP9, H.264 and HEVC (H.265). For your video to play online, the browser needs to support both the video container and the codec.</p>



<p>Browser support for video is a labyrinthine mess, which is part of the reason YouTube embeds are ubiquitous, but that doesn’t work for our use case. Let’s look at the video formats that are worth considering.</p>



<p><strong>Containers</strong></p>



<ul><li>MP4 was originally released in 2001. It is supported by all web browsers and has been for quite some time.</li><li><a href="https://caniuse.com/webm" rel="noopener">WebM</a> was released in 2010. It works in all browsers except for iOS Safari.</li></ul>



<p><strong>Codecs</strong></p>



<ul><li>The H.264 codec <a href="https://caniuse.com/mpeg4" rel="noopener">works in all browsers</a>.</li><li>HEVC/H.265, the successor of H.264, is supported by <a href="https://caniuse.com/hevc" rel="noopener">Safari, Edge, and Chrome</a> (as of version 105).</li><li>VP9 is the successor to the VP8 codec. VP9 is supported by all the browsers that support WebM.</li><li>The AV1 codec has been supported in Chrome since 2018 and Firefox since 2019. It has <a href="https://caniuse.com/av1" rel="noopener">not yet shipped</a> in Edge or Safari.</li></ul>



<p>An MP4 file using the H.264 codec will work everywhere, but it doesn’t deliver the best quality or the smallest file size.</p>



<p>AV1 doesn’t have cross-browser support yet but, released in 2018, it’s the most modern codec around. It’s already being used, at least for some videos and platforms, by <a href="https://netflixtechblog.com/netflix-now-streaming-av1-on-android-d5264a515202" rel="noopener">Netflix</a>, YouTube and <a href="https://aomedia.org/member%20spotlight/aomedia-member-spotlight-vimeo/" rel="noopener">Vimeo</a>. AV1 is a royalty-free video codec designed specifically for the internet. AV1 was created by the Alliance for Open Media (AOM), a group founded by Google, Mozilla, Cisco, Microsoft, Netflix, Amazon, and Intel. Apple is now also a member, so it’s safe to assume all browsers will support AV1 eventually. <a href="https://twitter.com/patrickbrosset/status/1570793602497871882" rel="noopener">Edge</a> is “still evaluating options to support AVIF and AV1.”</p>



<p>The recently redesigned website from development consultancy Evil Martians is a testament to the file-size reduction that AV1 is capable of.</p>



<figure class="wp-block-embed is-type-rich is-provider-twitter wp-block-embed-twitter"><div class="wp-block-embed__wrapper">
<blockquote class="twitter-tweet" data-width="500" data-dnt="true"><p lang="en" dir="ltr">We are using video files for moving backgrounds on <a href="https://t.co/5VndxSCEgv">https://t.co/5VndxSCEgv</a>.<br><br>In AV1 it is just 68 KB, similar to the image file. HEVC is 195 KB, and H264 is 512 КB.<br><br>This is a good example how good AV1 is.<a href="https://t.co/lqti7vMdDW">https://t.co/lqti7vMdDW</a> <a href="https://t.co/DaCnKxy6QK">pic.twitter.com/DaCnKxy6QK</a></p>&mdash; Sitnik the Developer (@sitnikcode) <a href="https://twitter.com/sitnikcode/status/1567860568765210626?ref_src=twsrc%5Etfw" rel="noopener">September 8, 2022</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</div></figure>



<p>If you want to use newer video formats with fallbacks for older browsers, you can use multiple <code>&lt;source&gt;</code> elements. The order of the source elements matter. Specify the ideal source at the top, and the fallback after.</p>



<pre rel="HTML" class="wp-block-csstricks-code-block language-markup" data-line=""><code markup="tt">&lt;video autoplay loop muted playsinline>
  &lt;source src="cats.webm" type="video/webm"> &lt;!-- ideal -->
  &lt;source src="cats.mp4" type="video/mp4"> &lt;!-- fallhack -->
&lt;/video></code></pre>



<p>Given the above code, <code>cats.webm</code> will be used unless the browser does not support that format, in which case the MP4 will be displayed instead.</p>



<p>What if you want to include multiple MP4 files, but with each using a different codec? When specifying the <code>type</code> you can include a <a href="https://developer.mozilla.org/en-US/docs/Web/Media/Formats/codecs_parameter" rel="noopener">codecs parameter</a>. The syntax is horrifically complicated for anybody who isn’t some kind of hardcore codec nerd, but it looks something like this:</p>



<pre rel="HTML" class="wp-block-csstricks-code-block language-markup" data-line=""><code markup="tt">&lt;video autoplay loop muted playsinline>
  &lt;source src="cats.mp4" type="video/mp4; codecs=av01.0.05M.08" >
  &lt;source src="cats.mp4" type="video/mp4" >
&lt;/video></code></pre>



<p>Using the above code the browser will select AV1 if it can play that format and fallback to the universally-supported H.264 if not. For AV1, the <code>codecs</code> parameter always starts with <code>av01</code>. The next number is either <code>0</code> (for main profile), <code>1</code> (for high profile) or <code>2</code> (for professional profile). Next comes a two-digit level number. This is followed either by the letter <code>M</code> (for main tier) or <code>H</code> (for high tier). It’s difficult to understand what any those things mean, so you could provide your AV1 video in a WebM container and avoid specifying the codec entirely.</p>



<p>Most video editing software does not allow you to export as AV1, or even as WebM. If you want to use one of those formats you’ll need to export your video as something else, like a <code>.mov</code>, and then convert it using the command-line tool <a href="https://ffmpeg.org" rel="noopener">FFmpeg</a>:</p>



<pre rel="Terminal" class="wp-block-csstricks-code-block language-none" data-line=""><code markup="tt">ffmpeg -i yourSourceFile.mov -map_metadata -1 -c:a libopus -c:v librav1e -qp 80 -tile-columns 2 -tile-rows 2 -pix_fmt yuv420p -movflags +faststart -vf &amp;quot;scale=trunc(iw/2)*2:trunc(ih/2)*2&amp;quot; videoTitle.mp4</code></pre>



<p>You should use the most high-resolution source file you can. Obviously, once image quality is lost you can’t improve it through conversion to a superior format. Using a <code>.gif</code> as a source file isn’t ideal because the visual quality of <code>.gif</code> isn’t great, but you’ll still get the benefit of a large reduction in file size:</p>



<pre rel="Terminal" class="wp-block-csstricks-code-block language-none" data-line=""><code markup="tt">ffmpeg -i cats.gif -map_metadata -1 -an opus -c:v librav1e -qp 80 -tile-columns 2 -tile-rows 2 -pix_fmt yuv420p -movflags +faststart -vf &amp;quot;scale=trunc(iw/2)*2:trunc(ih/2)*2&amp;quot; cats.mp4</code></pre>



<p>On Mac, you can download FFmpeg using Homebrew:</p>



<pre rel="Terminal" class="wp-block-csstricks-code-block language-none" data-line=""><code markup="tt">brew install ffmpeg</code></pre>



<p>Here’s a nice example of video in web design on the masterfully designed <a href="https://oxide.computer" rel="noopener">Oxide website</a>:</p>



<figure class="wp-block-embed is-type-rich is-provider-twitter wp-block-embed-twitter"><div class="wp-block-embed__wrapper">
<blockquote class="twitter-tweet" data-width="500" data-dnt="true"><p lang="en" dir="ltr">Site serves transparent video where it can – WebM on most browsers, transparent mov on Safari, which lets you do some subtle but nice hover effects <a href="https://t.co/wa0eTgGWa2">pic.twitter.com/wa0eTgGWa2</a></p>&mdash; Ben Leonard (@lenjaminbeonard) <a href="https://twitter.com/lenjaminbeonard/status/1560562312796577792?ref_src=twsrc%5Etfw" rel="noopener">August 19, 2022</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</div></figure>



<p>If you want to use the video as a background and place other elements on top of it, working with <code>&lt;video&gt;</code> is slightly more challenging than a CSS <code>background-image</code>, and requires code that goes something like this:</p>



<pre rel="CSS" class="wp-block-csstricks-code-block language-css" data-line=""><code markup="tt">.video-parent {
  position: relative;
  width: 100vw;
  height: 100vh;
}

.video-parent video {
  object-fit: cover;
  position: absolute;
  inset: 0;
  z-index: -1;
  width: 100%;
  height: 100%;
}</code></pre>



<p>The <code>&lt;video&gt;</code> element is a perfectly okay option for replacing GIFs but it does have one unfortunate side-effect: it prevents a user’s screen from going to sleep, as explained in <a href="https://textslashplain.com/2020/10/05/images-keeping-you-awake/" rel="noopener">this post</a> from an ex- product manager on the Microsoft Edge browser.</p>


<h3 id="the-benefits-of-using-an-image">The benefits of using an image</h3>


<p>Whether it’s an animated WebP or animated AVIF file, using images rather than video comes with some benefits.</p>



<p>I’m not sure how many people actually want to art-direct their GIFs, but using the <code>&lt;picture&gt;</code> element does open up some possibilities that couldn’t easily be achieved with <code>&lt;video&gt;</code>. You could specify different animations for light and dark mode, for example:</p>



<pre rel="HTML" class="wp-block-csstricks-code-block language-markup" data-line=""><code markup="tt">&lt;picture>
  &lt;source srcset="dark-animation.avifs" media="(prefers-color-scheme: dark)">
  &lt;img src="light-animation.avif" alt="">
&lt;/picture></code></pre>



<iframe src="https://codesandbox.io/embed/elegant-tdd-96dlht?fontsize=14&amp;hidenavigation=1&amp;theme=dark" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" title="light/dark mode media query animation" allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking" sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"></iframe>



<p>We might want a video on mobile to be a different aspect ratio than on desktop. We could just crop parts of the image with CSS, but that seems like a waste of bytes and somewhat haphazard. Using a media query we can display a different animated image file based on the screen size or orientation:</p>



<pre rel="HTML" class="wp-block-csstricks-code-block language-markup" data-line=""><code markup="tt">&lt;picture>
  &lt;source type="image/avif" srcset="typeloop-landscape.avifs" media="(orientation: landscape)"">
  &lt;img src="typeloop-portrait.avif" alt="">
&lt;/picture></code></pre>



<iframe src="https://codesandbox.io/embed/goofy-brattain-wqe1r0?fontsize=14&amp;hidenavigation=1&amp;theme=dark" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" title="Responsive landscape/portrait media query for img" allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking" sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"></iframe>



<p>All of this is <em>possible</em> with video — you can use <code>matchMedia</code> to do any media queries in JavaScript and programmatically change the <code>src</code> of a <code>&lt;video&gt;</code> element:</p>



<pre rel="JavaScript" class="wp-block-csstricks-code-block language-javascript" data-line=""><code markup="tt">const mediaQuery = window.matchMedia("(prefers-color-scheme: dark)");
if (mediaQuery.matches) {
  document.querySelector("video").src = "dark-animation.mp4";
}</code></pre>



<p>I believe that whenever there’s a way to do something with markup it should be preferred over doing it JavaScript.</p>



<p>You can use raster images <em>inside of</em> an SVG using the <a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Element/image" rel="noopener"><code>&lt;image&gt;</code> element</a>. This includes animated image formats. There’s not much you can do with an image inside an SVG that you couldn’t already do with CSS, but if you group an image with vector elements inside an SVG, then you do get the benefit that the different elements move and scale together.</p>



<p>The <code>&lt;img&gt;</code> element has the benefit of <a href="https://css-tricks.com/native-lazy-loading/">native lazy-loading</a>:</p>



<pre rel="HTML" class="wp-block-csstricks-code-block language-markup" data-line=""><code markup="tt">&lt;img loading="lazy" src="cats.avif" alt="cats"></code></pre>



<p>If you want a background video that takes up the entire screen, it’s slightly easier to position a <code>background-image</code> than a HTML <code>&lt;video&gt;</code> element:</p>



<pre rel="CSS" class="wp-block-csstricks-code-block language-css" data-line=""><code markup="tt">.background-video {
  background-image: url("coolbackground.webp");
  background-repeat: no-repeat;
  background-size: cover;
  height: 100vh;
  width: 100vh;
} </code></pre>



<p>If you want to support older browsers you could use the <code>&lt;picture&gt;</code> element with a fallback of either an animated WebP or, just for Safari, an <code>img</code> with a video <code>src</code>, or if you care about ancient browsers, maybe an APNG (animated PNG) or a GIF. Using multiple image formats this way might be impractical if you’re optimizing images manually; but it is relatively trivial if you’re using a service like <a href="https://css-tricks.com/cloudinary-tricks-for-video/">Cloudinary</a>.</p>



<pre rel="HTML" class="wp-block-csstricks-code-block language-markup" data-line=""><code markup="tt">&lt;picture>
  &lt;source type="image/avif" srcset="cats.avif">
  &lt;img src="cats.webp">
&lt;/picture></code></pre>



<p>There’s still no well-supported way to specify fallback images for CSS backgrounds. <code>image-set</code> is an equivalent of the <code>&lt;picture&gt;</code> element, [but for <code>background-image</code>. Unfortunately, only Firefox currently <a href="https://caniuse.com/css-image-set" rel="noopener">supports</a> the <code>type</code> attribute of <code>image-set</code>.</p>



<pre rel="CSS" class="wp-block-csstricks-code-block language-css" data-line=""><code markup="tt">.box {
  background-image: image-set(
    url("cats.avif") type("image/avif"),
    url("cats.webp") type("image/webp"));
}</code></pre>


<div class="caniuse"><div class="caniuse-header"><p>This browser support data is from <a href="http://caniuse.com/#feat=css-image-set" rel="noopener">Caniuse</a>, which has more detail. A number indicates that browser supports the feature at that version and up.</p></div><div class="caniuse-section"><h4>Desktop</h4><table class="browser-support-table"><thead><tr><th class="chrome"><span>Chrome</span></th><th class="firefox"><span>Firefox</span></th><th class="ie"><span>IE</span></th><th class="edge"><span>Edge</span></th><th class="safari"><span>Safari</span></th></tr></thead><tbody><tr><td class="a yep-nope yep-nope-partial" title="Chrome - "><span class="caniuse-agents-version version">109*</span></td><td class="y yep" title="Firefox - "><span class="caniuse-agents-version version">89</span></td><td class="n nope" title="IE - "><span class="caniuse-agents-version version">No</span></td><td class="a yep-nope yep-nope-partial" title="Edge - "><span class="caniuse-agents-version version">105*</span></td><td class="a yep-nope yep-nope-partial" title="Safari - "><span class="caniuse-agents-version version">TP</span></td></tr></table></div><div class="caniuse-section"><h4>Mobile / Tablet</h4><table class="browser-support-table"><thead><tr><th class="and_chr"><span>Android Chrome</span></th><th class="and_ff"><span>Android Firefox</span></th><th class="android"><span>Android</span></th><th class="ios_saf"><span>iOS Safari</span></th></tr></thead><tbody><tr><td class="a yep-nope yep-nope-partial" title="Android Chrome - "><span class="caniuse-agents-version version">105*</span></td><td class="y yep" title="Android Firefox - "><span class="caniuse-agents-version version">104</span></td><td class="a yep-nope yep-nope-partial" title="Android - "><span class="caniuse-agents-version version">105*</span></td><td class="a yep-nope yep-nope-partial" title="iOS Safari - "><span class="caniuse-agents-version version">16.1</span></td></tr></table></div></div>


<h3 id="use-animated-webp">Use animated WebP</h3>


<p>The WebP image format was introduced by Google in 2010. WebP, including animated WebP, has <a href="https://caniuse.com/webp" rel="noopener">broad browser support</a>.</p>



<figure class="wp-block-image size-full"><img loading="lazy" width="400" height="400" src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_4893B66DA51FBBD6FD731EFF2D15BCD4AE96EF4EAC6FE9B20B77E0C6A87F974A_1662885429742_animated-webp-supported.webp?resize=400%2C400&#038;ssl=1" alt="A cat flying through space leaving a rainbow trail" class="wp-image-373489" data-recalc-dims="1"/></figure>



<pre rel="HTML" class="wp-block-csstricks-code-block language-markup" data-line=""><code markup="tt">&lt;img src="nyancat.webp" alt="A cat flying through space leaving a rainbow trail"></code></pre>


<div class="caniuse"><div class="caniuse-header"><p>This browser support data is from <a href="http://caniuse.com/#feat=”webp”" rel="noopener">Caniuse</a>, which has more detail. A number indicates that browser supports the feature at that version and up.</p></div><div class="caniuse-section"><h4>Desktop</h4><table class="browser-support-table"><thead><tr><th class="chrome"><span>Chrome</span></th><th class="firefox"><span>Firefox</span></th><th class="ie"><span>IE</span></th><th class="edge"><span>Edge</span></th><th class="safari"><span>Safari</span></th></tr></thead><tbody><tr><td class="y yep" title="Chrome - "><span class="caniuse-agents-version version">32</span></td><td class="y yep" title="Firefox - "><span class="caniuse-agents-version version">65</span></td><td class="n nope" title="IE - "><span class="caniuse-agents-version version">No</span></td><td class="y yep" title="Edge - "><span class="caniuse-agents-version version">18</span></td><td class="y yep" title="Safari - "><span class="caniuse-agents-version version">16.0</span></td></tr></table></div><div class="caniuse-section"><h4>Mobile / Tablet</h4><table class="browser-support-table"><thead><tr><th class="and_chr"><span>Android Chrome</span></th><th class="and_ff"><span>Android Firefox</span></th><th class="android"><span>Android</span></th><th class="ios_saf"><span>iOS Safari</span></th></tr></thead><tbody><tr><td class="y yep" title="Android Chrome - "><span class="caniuse-agents-version version">105</span></td><td class="y yep" title="Android Firefox - "><span class="caniuse-agents-version version">104</span></td><td class="y yep" title="Android - "><span class="caniuse-agents-version version">4.2-4.3</span></td><td class="y yep" title="iOS Safari - "><span class="caniuse-agents-version version">14.0-14.4</span></td></tr></table></div></div>


<h3 id="use-animated-avif">Use animated AVIF</h3>


<p>WebP is now twelve years old. The more modern AV1 Image File Format (AVIF), released in 2019, is the best image format <a href="https://jakearchibald.com/2020/avif-has-landed/" rel="noopener">for most use cases</a> on the web. Converting a <code>.gif</code> file to AVIF can reduce bytes by over 90%.</p>



<pre rel="HTML" class="wp-block-csstricks-code-block language-markup" data-line=""><code markup="tt">&lt;img src="nyancat.avif" alt="A cat flying through space leaving a rainbow trail"></code></pre>



<p>As its name suggests, AVIF is based on the the AV1 video codec. Like WebP, AVIF can be used for both still images and animation. There’s not much difference between an animated AVIF file and an AV1 video in an MP4 container.</p>



<p>You can put a shadow on AVIF animation, e.g.:</p>



<pre rel="CSS" class="wp-block-csstricks-code-block language-css" data-line=""><code markup="tt">filter: drop-shadow(2px 4px 6px black);</code></pre>



<p>AVIF is already supported by Safari, Firefox, Samsung Internet, and Chrome. Firefox only shipped support for still images, not animated AVIF. Safari supports animation as of version <a href="https://developer.apple.com/documentation/safari-release-notes/safari-16_1-release-notes" rel="noopener">16.1</a>. Unfortunately, because Firefox does support AVIF, just not animated AVIF, it’s impossible to successfully use the <code>&lt;picture&gt;</code> element to display AVIF only to browsers that support animation. Given the following code, Firefox would display the AVIF, <em>but as a static image</em>, rather than showing the animated WebP version:</p>



<pre rel="HTML" class="wp-block-csstricks-code-block language-markup" data-line=""><code markup="tt">&lt;picture>
  &lt;source srcset="https://fonts.gstatic.com/s/e/notoemoji/latest/1f4a9/512.avif" type="image/avif">
  &lt;img src="https://fonts.gstatic.com/s/e/notoemoji/latest/1f4a9/512.webp" alt="&#x1f4a9;" width="32" height="32">
&lt;/picture></code></pre>



<p><a href="https://css-tricks.com/useful-tools-for-creating-avif-images/">Tooling for AVIF</a> is still improving. Video editing software does not enable you to export footage as animated AVIF or animated WebP. You’ll need to export it in some other format and then convert it. On the website <a href="https://ezgif.com/" rel="noopener">ezgif.com</a> you can upload a video file or a <code>.gif</code> and convert it to AVIF or WebP. You could also use FFmpeg. Using <a href="https://cloudinary.com/documentation/videos_to_animated_images#delivering_animated_avif_files" rel="noopener">Cloudinary</a> you can upload a video file or an old <code>.gif</code> and convert it to pretty much any format you want — including animated WebP and animated AVIF. As of time of writing, Squoosh, an image conversion app, doesn’t support animated AVIF.</p>



<p>Adoption remains lacking in design software. When viewing a prototype, Figma will play any animated GIFs included in the design. For AVIF, by contrast, you can’t even import or export a still image.</p>



<figure class="wp-block-image size-full"><img loading="lazy" width="660" height="572" src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_4893B66DA51FBBD6FD731EFF2D15BCD4AE96EF4EAC6FE9B20B77E0C6A87F974A_1663184801550_ScreenShot2022-09-04at9.56.11AM.png?resize=660%2C572&#038;ssl=1" alt="An error in Figma that says files failed to import." class="wp-image-373490" srcset="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_4893B66DA51FBBD6FD731EFF2D15BCD4AE96EF4EAC6FE9B20B77E0C6A87F974A_1663184801550_ScreenShot2022-09-04at9.56.11AM.png?w=660&amp;ssl=1 660w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_4893B66DA51FBBD6FD731EFF2D15BCD4AE96EF4EAC6FE9B20B77E0C6A87F974A_1663184801550_ScreenShot2022-09-04at9.56.11AM.png?resize=300%2C260&amp;ssl=1 300w" sizes="(min-width: 735px) 864px, 96vw" data-recalc-dims="1" /></figure>


<h3 id="use-a-video-with-an-ltimggt-element">Use a video with an <code>&lt;img&gt;</code> element</h3>


<p>In 2018, <a href="https://webkit.org/blog/8216/new-webkit-features-in-safari-11-1/" rel="noopener">Safari</a> <a href="https://webkit.org/blog/8216/new-webkit-features-in-safari-11-1/" rel="noopener">11.1</a> gave developers the ability to use a video file as the source of the HTML <code>&lt;img&gt;</code> element. This works in Safari:</p>



<pre rel="HTML" class="wp-block-csstricks-code-block language-markup" data-line=""><code markup="tt">&lt;img src="cat.mp4" alt="A Siamese cat walking in a circle"></code></pre>



<p>All the same codecs that Safari supports for <code>&lt;video&gt;</code> are supported by&nbsp;<code>&lt;img&gt;.</code> This means you can use&nbsp;MP4, H.264,&nbsp;and HEVC.</p>



<p>In Safari, video files will also work anyplace in CSS where you could use an image, like <code>background-image</code> or <code>border-image</code>:</p>



<pre rel="CSS" class="wp-block-csstricks-code-block language-css" data-line=""><code markup="tt">.video-border {
  border: 40px solid transparent;
  border-image: url(abstract_bg_animation.mp4) 100 round;
}</code></pre>



<p>One strange consequence of this feature in Safari is that the <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#attr-poster" rel="noopener">poster image</a> of a <code>&lt;video&gt;</code> element can also be a video. The poster will autoplay <a href="https://lapcatsoftware.com/articles/img1.html" rel="noopener">even if you have blocked video’s from auto-playing</a>. Safari claimed this feature came with performance benefits, not just over using <code>.gif</code> files but also over using the <code>&lt;video&gt;</code> element. According to <a href="https://developer.apple.com/documentation/webkit/delivering_video_content_for_safari" rel="noopener">Apple</a>:</p>



<blockquote class="wp-block-quote"><p>By placing your videos in <code>&lt;img&gt;</code> elements, the content loads faster, uses less battery power, and gets better performance.</p></blockquote>



<p>Colin Bendell, co-author of O‘Reilly’s High Performance Images, wrote about the <a href="https://calendar.perfplanet.com/2017/animated-gif-without-the-gif/#-but-we-already-have-video-tags" rel="noopener">shortcomings of the <code>&lt;video&gt;</code> tag</a> for our use case:</p>



<blockquote class="wp-block-quote"><p>Unlike <code>&lt;img&gt;</code> tags, browsers do <a href="http://yoavweiss.github.io/preloader-velocity-nyc-talk/#/32" rel="noopener">not preload</a> <a href="http://yoavweiss.github.io/preloader-velocity-nyc-talk/#/32" rel="noopener"><code>&lt;video&gt;</code></a> content. Generally preloaders only preload JavaScript, CSS, and image resources because they are critical for the page layout. Since <code>&lt;video&gt;</code> content can be any length – from micro-form to long-form – <code>&lt;video&gt;</code> tags are skipped until the main thread is ready to parse its content. This delays the loading of <code>&lt;video&gt;</code> content by many hundreds of milliseconds.</p><p>[…]</p><p>Worse yet, many browsers assume that <code>&lt;video&gt;</code> tags contain long-form content. Instead of downloading the whole video file at once, which would waste your cell data plan in cases where you do not end up watching the whole video, the browser will first perform a 1-byte request to test if the server supports <a href="https://tools.ietf.org/html/rfc7233" rel="noopener">HTTP Range Requests</a>. Then it will follow with multiple range requests in various chunk sizes to ensure that the video is adequately (but not over-) buffered. The consequence is multiple TCP round trips before the browser can even start to decode the content and significant delays before the user sees anything. On high-latency cellular connections, these round trips can set video loads back by hundreds or thousands of milliseconds.</p></blockquote>



<p>Chrome has marked this as <a href="https://bugs.chromium.org/p/chromium/issues/detail?id=791658" rel="noopener">“WontFix”</a> — meaning they don’t intend to ever support this feature, for <a href="https://developers.google.com/speed/webp/faq#what_is_webp_why_should_i_use_it:~:text=Why%20not%20simply%20support%20WebM%20in%20%3Cimg%3E%253F" rel="noopener">various reasons</a>. There is, however, an <a href="https://github.com/whatwg/html/issues/7141" rel="noopener">open issue</a> on GitHub to add it to the HTML spec, which would force Google’s hand.</p>


<h3 id="respecting-user-preferences">Respecting user preferences</h3>


<p>Video has the benefit of automatically respecting a users preferences. Firefox and Safari allow users to <a href="https://www.wired.com/story/how-to-turn-off-autoplay-in-browser/" rel="noopener">block videos from automatically playing</a>, even if they don’t have any audio. Here are the settings in Firefox, for example:</p>



<figure class="wp-block-image size-full"><img loading="lazy" width="2580" height="1590" src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_4893B66DA51FBBD6FD731EFF2D15BCD4AE96EF4EAC6FE9B20B77E0C6A87F974A_1662742727899_ScreenShot2022-09-09at5.57.52PM.png?resize=2580%2C1590&#038;ssl=1" alt="firefox autoplay settings open in a modal." class="wp-image-373491" srcset="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_4893B66DA51FBBD6FD731EFF2D15BCD4AE96EF4EAC6FE9B20B77E0C6A87F974A_1662742727899_ScreenShot2022-09-09at5.57.52PM.png?w=2580&amp;ssl=1 2580w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_4893B66DA51FBBD6FD731EFF2D15BCD4AE96EF4EAC6FE9B20B77E0C6A87F974A_1662742727899_ScreenShot2022-09-09at5.57.52PM.png?resize=300%2C185&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_4893B66DA51FBBD6FD731EFF2D15BCD4AE96EF4EAC6FE9B20B77E0C6A87F974A_1662742727899_ScreenShot2022-09-09at5.57.52PM.png?resize=1024%2C631&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_4893B66DA51FBBD6FD731EFF2D15BCD4AE96EF4EAC6FE9B20B77E0C6A87F974A_1662742727899_ScreenShot2022-09-09at5.57.52PM.png?resize=768%2C473&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_4893B66DA51FBBD6FD731EFF2D15BCD4AE96EF4EAC6FE9B20B77E0C6A87F974A_1662742727899_ScreenShot2022-09-09at5.57.52PM.png?resize=1536%2C947&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_4893B66DA51FBBD6FD731EFF2D15BCD4AE96EF4EAC6FE9B20B77E0C6A87F974A_1662742727899_ScreenShot2022-09-09at5.57.52PM.png?resize=2048%2C1262&amp;ssl=1 2048w" sizes="(min-width: 735px) 864px, 96vw" data-recalc-dims="1" /></figure>



<p>The user can still decide to watch a certain video by right-clicking and pressing play in the menu, or enable autoplay for all videos on a specific website.</p>



<figure class="wp-block-image size-full"><img loading="lazy" width="1116" height="828" src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_4893B66DA51FBBD6FD731EFF2D15BCD4AE96EF4EAC6FE9B20B77E0C6A87F974A_1662743487578_ScreenShot2022-09-09at6.11.09PM.png?resize=1116%2C828&#038;ssl=1" alt="Contextual menu for a video." class="wp-image-373492" srcset="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_4893B66DA51FBBD6FD731EFF2D15BCD4AE96EF4EAC6FE9B20B77E0C6A87F974A_1662743487578_ScreenShot2022-09-09at6.11.09PM.png?w=1116&amp;ssl=1 1116w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_4893B66DA51FBBD6FD731EFF2D15BCD4AE96EF4EAC6FE9B20B77E0C6A87F974A_1662743487578_ScreenShot2022-09-09at6.11.09PM.png?resize=300%2C223&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_4893B66DA51FBBD6FD731EFF2D15BCD4AE96EF4EAC6FE9B20B77E0C6A87F974A_1662743487578_ScreenShot2022-09-09at6.11.09PM.png?resize=1024%2C760&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_4893B66DA51FBBD6FD731EFF2D15BCD4AE96EF4EAC6FE9B20B77E0C6A87F974A_1662743487578_ScreenShot2022-09-09at6.11.09PM.png?resize=768%2C570&amp;ssl=1 768w" sizes="(min-width: 735px) 864px, 96vw" data-recalc-dims="1" /></figure>



<p>For users who haven’t disabled autoplay, it’s nice to have the option to pause an animation if you happen to find it annoying or distracting (a user can still right-click to bring up the pause option in a menu when video controls aren’t shown). Success Criterion <a href="https://www.w3.org/TR/WCAG21/#pause-stop-hide" rel="noopener">2.2.2 Pause, Stop, Hide</a> of the WCAG accessibility guidelines states:</p>



<blockquote class="wp-block-quote"><p>For any moving, blinking or scrolling information that (1) starts automatically, (2) lasts more than five seconds, and (3) is presented in parallel with other content, there is a mechanism for the user to pause, stop, or hide it unless the movement, blinking, or scrolling is part of an activity where it is essential.</p></blockquote>



<p>With the <code>&lt;video&gt;</code> element, you’ll achieve that criterion without any additional development.</p>



<p>There’s also a “reduce motion” user setting that developers can respect by reducing or removing CSS and JavaScript web animations.</p>



<figure class="wp-block-image size-full"><img loading="lazy" width="1426" height="1090" src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_4893B66DA51FBBD6FD731EFF2D15BCD4AE96EF4EAC6FE9B20B77E0C6A87F974A_1662749524794_ScreenShot2022-09-09at7.51.32PM.png?resize=1426%2C1090&#038;ssl=1" alt="macOS settings window for display accessibility with rediced motion checked." class="wp-image-373493" srcset="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_4893B66DA51FBBD6FD731EFF2D15BCD4AE96EF4EAC6FE9B20B77E0C6A87F974A_1662749524794_ScreenShot2022-09-09at7.51.32PM.png?w=1426&amp;ssl=1 1426w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_4893B66DA51FBBD6FD731EFF2D15BCD4AE96EF4EAC6FE9B20B77E0C6A87F974A_1662749524794_ScreenShot2022-09-09at7.51.32PM.png?resize=300%2C229&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_4893B66DA51FBBD6FD731EFF2D15BCD4AE96EF4EAC6FE9B20B77E0C6A87F974A_1662749524794_ScreenShot2022-09-09at7.51.32PM.png?resize=1024%2C783&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_4893B66DA51FBBD6FD731EFF2D15BCD4AE96EF4EAC6FE9B20B77E0C6A87F974A_1662749524794_ScreenShot2022-09-09at7.51.32PM.png?resize=768%2C587&amp;ssl=1 768w" sizes="(min-width: 735px) 864px, 96vw" data-recalc-dims="1" /></figure>



<p>You can also use it to display a still image instead of an animation. This takes <a href="https://web.dev/prefers-reduced-motion/#working-with-the-media-query-from-lesspicturegreater-contexts" rel="noopener">extra code</a> to implement — and you need to host a still image in additional to your animated image.</p>



<pre rel="HTML" class="wp-block-csstricks-code-block language-markup" data-line=""><code markup="tt">&lt;picture>
  &lt;source
    srcset="nyancat.avifs"
    type="image/avif"
    media="(prefers-reduced-motion: no-preference)"
  />
  &lt;img src="nyancat.png" alt="Nyan cat" width="250" height="250" />
&lt;/picture></code></pre>



<p>There’s another downside. When using the <code>&lt;picture&gt;</code> element in this way if the user has checked “reduce motion”there’s no way for them to see the animation. Just because a user prefers <em>less</em> animation, doesn’t mean they never want <em>any</em> — they might still want to be able to opt-in and watch one every now and then. Unlike the <code>&lt;video&gt;</code> element, displaying a still image takes away that choice.</p>


<h3 id="checking-for-progressive-enhancement">Checking for progressive enhancement</h3>


<p>If you want to check that your <code>&lt;picture&gt;</code> code is properly working and fallback images are being displayed, you can use the <strong>Rendering</strong> tab in Chrome DevTools to turn off support for AVIF and WebP image formats. Seeing as all browsers now support WebP, this is a pretty handy feature.</p>



<figure class="wp-block-image size-full"><img loading="lazy" width="884" height="222" src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_4893B66DA51FBBD6FD731EFF2D15BCD4AE96EF4EAC6FE9B20B77E0C6A87F974A_1662595390866_file.jpeg?resize=884%2C222&#038;ssl=1" alt="Chrome DevTools with Rendering panel open optons for disabling AVIF and WebP images." class="wp-image-373494" srcset="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_4893B66DA51FBBD6FD731EFF2D15BCD4AE96EF4EAC6FE9B20B77E0C6A87F974A_1662595390866_file.jpeg?w=884&amp;ssl=1 884w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_4893B66DA51FBBD6FD731EFF2D15BCD4AE96EF4EAC6FE9B20B77E0C6A87F974A_1662595390866_file.jpeg?resize=300%2C75&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_4893B66DA51FBBD6FD731EFF2D15BCD4AE96EF4EAC6FE9B20B77E0C6A87F974A_1662595390866_file.jpeg?resize=768%2C193&amp;ssl=1 768w" sizes="(min-width: 735px) 864px, 96vw" data-recalc-dims="1" /></figure>



<p>While it’s usually the best option to create animations with CSS, JavaScript, DOM elements, canvas and SVG, as new image and video formats offer smaller files than what was previously possible, they become a useful option for UI animation (rather than just nyancat loops). For one-off animations, an AVIF file is probably going to be more performant than importing an entire <a href="https://github.com/airbnb/lottie/issues/114" rel="noopener">animation library</a>.</p>



<figure class="wp-block-image size-full"><img loading="lazy" width="616" height="576" src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_4893B66DA51FBBD6FD731EFF2D15BCD4AE96EF4EAC6FE9B20B77E0C6A87F974A_1663351571897_ezgif.com-gif-maker1.webp?resize=616%2C576&#038;ssl=1" alt="Circular badge that reads Match Accepted with an animated blue progress highlight going around it." class="wp-image-373495" data-recalc-dims="1"/><figcaption>Here’s a fun example of using video for UI from all the way back in 2017 for the&nbsp;<a href="https://technology.riotgames.com/news/under-hood-league-client%E2%80%99s-hextech-ui#:~:text=ANIMATIONS%20AND%20VIDEO" target="_blank" rel="noreferrer noopener">League of Legends website</a>.</figcaption></figure>


<h3 id="lottie">Lottie</h3>


<p><a href="https://www.adobe.com/products/aftereffects.html" rel="noopener">After Effects</a> is a popular animation tool from Adobe. Using an extension called <a href="https://exchange.adobe.com/apps/cc/12557/bodymovin" rel="noopener">Bodymovin</a>, you can export animation data from After Effects as a JSON file.</p>



<p>Then there&#8217;s <a href="https://airbnb.design/lottie/" rel="noopener">Lottie</a>, an open-source animation library from Airbnb that can take that JSON file and <a href="https://css-tricks.com/animating-with-lottie/">render it as an animation</a> on different platforms. The library is available for native iOS, Android, and React Native applications, as well as for the web. You can see&nbsp;<a href="https://airbnb.io/lottie/#/community-showcase" target="_blank" rel="noreferrer noopener">examples</a>&nbsp;from Google Home, Target, and Walgreens, among others.</p>



<p>Once you’ve included the dependency you need to write a small amount of JavaScript code to get the animation to run:</p>



<pre rel="HTML" class="wp-block-csstricks-code-block language-markup" data-line=""><code markup="tt">&lt;div id="lottie">&lt;/div></code></pre>



<pre rel="JavaScript" class="wp-block-csstricks-code-block language-javascript" data-line=""><code markup="tt">const animation = bodymovin.loadAnimation({
  container: document.getElementById('lottie'),
  path: 'myAnimation.json',
  renderer: 'svg',
  loop: true,
  autoplay: true,
})</code></pre>



<p>You can optionally change those settings to only play after an event:</p>



<pre rel="JavaScript" class="wp-block-csstricks-code-block language-javascript" data-line=""><code markup="tt">const lottieContainer = document.getElementById('lottie');
const animation = bodymovin.loadAnimation({
  container: lottieContainer,
  path: 'myAnimation.json',
  renderer: 'svg',
  loop: true,
  autoplay: false,
  })
// Play the animation on hover
lottieContainer.addEventListener('mouseover', () => {
  animation.play();
});
// Stop the animation after playing once
animation.addEventListener('loopComplete', function() {
  animation.stop();
});</code></pre>



<p>Here’s a&nbsp;<a href="https://lottiefiles.com/32147-cute-cat-works" target="_blank" rel="noreferrer noopener">cute example</a>&nbsp;of a cat typing on a keyboard I took from&nbsp;<a href="https://lottiefiles.com/32147-cute-cat-works" target="_blank" rel="noreferrer noopener">Lottiefiles.com</a>&nbsp;(the&nbsp;website is a useful website for previewing your own Lottie JSON file animations, rather than needing to install After Effects, as well finding animations from other creatives):</p>



<iframe src="https://codesandbox.io/embed/dreamy-goodall-y223xr?fontsize=14&amp;hidenavigation=1&amp;theme=dark" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" title="Typing cat Lottie animation" allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking" sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"></iframe>



<p>You can also programmatically play an animation backwards and change the playback rate.</p>



<p>If you do choose to use Lottie, there&#8217;s a <a href="https://www.figma.com/community/plugin/809860933081065308/LottieFiles" rel="noopener">Figma plugin for Lottie</a> but all it does is convert JSON files to&nbsp;<code>.gif</code>&nbsp;so that they can be previewed in prototyping mode.</p>



<p>Abd what about Lottie&#8217;s performance? There’s&nbsp;<a href="https://bundlephobia.com/package/lottie-web@5.7.2" target="_blank" rel="noreferrer noopener">size of the library</a>&nbsp;— 254.6KB (63.8 gzipped) — and the size of the JSON file to consider. There’s also the amount of&nbsp;<a href="https://jaredstanley.medium.com/improving-site-performance-by-optimizing-lottie-animations-9f032972d338" target="_blank" rel="noreferrer noopener">DOM elements</a>&nbsp;that get created for the SVG parts. If you run into this issue, Lottie has the option to render to a HTML&nbsp;<code>&lt;canvas&gt;</code>, but you’ll need to use a different version of the JavaScript library.</p>



<pre rel="JavaScript" class="wp-block-csstricks-code-block language-javascript" data-line=""><code markup="tt">const animation = bodymovin.loadAnimation({
  container: document.getElementById('lottie'),
  path: 'myAnimation.json',
  renderer: 'canvas',
})</code></pre>



<p>Lottie isn’t a full replacement for gifs. While After Effects itself is often used with video clips, and Lottie can render to a HTML&nbsp;<code>&lt;canvas&gt;</code>, and a canvas can play video clips, you wouldn’t use a Lottie file for that purpose. Lottie is for advanced 2D animations, not so much for video. There are other tools for creating complex web animations with a GUI like&nbsp;<a href="https://www.svgator.com/" target="_blank" rel="noreferrer noopener">SVGator</a>&nbsp;and&nbsp;<a href="https://rive.app/" target="_blank" rel="noreferrer noopener">Rive</a>, but I haven’t tried them myself. &#x1f937;&#x200d;&#x2642;&#xfe0f;</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<p>I wish there was a <abbr title="too long; didn’t read">TL;DR</abbr> for this article. For now, at least, there’s no clear winner…</p>
<hr />
<p><small><a rel="nofollow" href="https://css-tricks.com/gifs-without-the-gif-the-most-performant-image-and-video-options-right-now/">GIFs Without the .gif: The Most Performant Image and Video Options Right Now</a> originally published on <a rel="nofollow" href="https://css-tricks.com">CSS-Tricks</a>, which is part of the <a href="https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=">DigitalOcean</a> family. You should <a href="https://css-tricks.com/newsletters/">get the newsletter</a>.</p>
]]></content:encoded>

      <wfw:commentRss>
        https://css-tricks.com/gifs-without-the-gif-the-most-performant-image-and-video-options-right-now/feed/
      </wfw:commentRss>
      <slash:comments>4</slash:comments>


      <post-id xmlns="com-wordpress:feed-additions:1">373484</post-id>
    </item>
    <item>
      <title>Named Element IDs Can Be Referenced as JavaScript Globals</title>
      <link>https://css-tricks.com/named-element-ids-can-be-referenced-as-javascript-globals/</link>
      <comments>
        https://css-tricks.com/named-element-ids-can-be-referenced-as-javascript-globals/#comments
      </comments>

      <dc:creator><![CDATA[Matteo Mazzarolo]]></dc:creator>
      <pubDate>Tue, 27 Sep 2022 12:58:21 +0000</pubDate>
      <category><![CDATA[Article]]></category>
      <category><![CDATA[global scope]]></category>
      <category><![CDATA[JavaScript]]></category>
      <guid isPermaLink="false">https://css-tricks.com/?p=373209</guid>

      <description><![CDATA[<p>Did you know that DOM elements with IDs are accessible in JavaScript as global variables? It’s one of those things that’s been around, like, forever but I’m really digging into it for the first time.</p>
<p>If this is the first &#8230;</p>
<hr />
<p><small><a rel="nofollow" href="https://css-tricks.com/named-element-ids-can-be-referenced-as-javascript-globals/">Named Element IDs Can Be Referenced as JavaScript Globals</a> originally published on <a rel="nofollow" href="https://css-tricks.com">CSS-Tricks</a>, which is part of the <a href="https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=">DigitalOcean</a> family. You should <a href="https://css-tricks.com/newsletters/">get the newsletter</a>.</p>
]]></description>
      <content:encoded><![CDATA[
<p>Did you know that DOM elements with IDs are accessible in JavaScript as global variables? It’s one of those things that’s been around, like, forever but I’m really digging into it for the first time.</p>



<p>If this is the first time you’re hearing about it, brace yourself! We can see it in action simply by adding an ID to an element in HTML:</p>



<pre rel="HTML" class="wp-block-csstricks-code-block language-markup" data-line=""><code markup="tt">&lt;div id="cool">&lt;/div></code></pre>



<p>Normally, we’d define a new variable using <code>querySelector("#cool")</code> or <code>getElementById("cool")</code> to select that element:</p>



<pre rel="JavaScript" class="wp-block-csstricks-code-block language-javascript" data-line=""><code markup="tt">var el = querySelector("#cool");</code></pre>



<p>But we actually already have access to <code>#cool</code> without that rigamorale:</p>



<span id="more-373209"></span>



<div class="wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper"><iframe id="cp_embed_RwyWNBQ" src="//codepen.io/anon/embed/RwyWNBQ?height=450&amp;theme-id=1&amp;slug-hash=RwyWNBQ&amp;default-tab=html,result" height="450" scrolling="no" frameborder="0" allowfullscreen allowpaymentrequest name="CodePen Embed RwyWNBQ" title="CodePen Embed RwyWNBQ" class="cp_embed_iframe" style="width:100%;overflow:hidden">CodePen Embed Fallback</iframe></div>



<p>So, any <code>id</code> — or <code>name</code> attribute, for that matter — in the HTML can be accessed in JavaScript using <code>window[ELEMENT_ID]</code>. Again, this isn’t exactly “new” but it’s really uncommon to see.</p>



<p>As you may guess, accessing the global scope with named references isn&#8217;t the greatest idea. Some folks have come to call this the “global scope polluter.” We’ll get into why that is, but first…</p>


<h3 id="some-context">Some context</h3>


<p>This approach is <a href="https://html.spec.whatwg.org/multipage/window-object.html#named-access-on-the-window-object" rel="noopener">outlined in the HTML specification</a>, where it’s described as “named access on the <code>Window</code> object.”</p>



<p>Internet Explorer was the first to implement the feature. All other browsers added it as well. Gecko was the only browser at the time to not support it directly in standards mode, opting instead to make it an experimental feature. There was hesitation to implement it at all, but it <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=622491#c8" rel="noopener">moved ahead in the name of browser compatibility</a> (Gecko even tried to <a href="https://bugs.webkit.org/show_bug.cgi?id=81972" rel="noopener">convince WebKit</a> to move it out of standards mode) and eventually made it to standards mode in Firefox 14.</p>



<p>One thing that might not be well known is that browsers had to put in place a few precautionary measures — with varying degrees of success — to ensure generated globals don’t break the webpage. One such measure is…</p>


<h3 id="variable-shadowing">Variable shadowing</h3>


<p>Probably the most interesting part of this feature is that named element references don&#8217;t <a href="https://en.wikipedia.org/wiki/Variable_shadowing" rel="noopener">shadow existing global variables</a>. So, if a DOM element has an <code>id</code> that is already defined as a global, it won&#8217;t override the existing one. For example:</p>



<pre rel="HTML" class="wp-block-csstricks-code-block language-markup" data-line=""><code markup="tt">&lt;head>
  &lt;script>
    window.foo = "bar";
  &lt;/script>
&lt;/head>
&lt;body>
  &lt;div id="foo">I won't override window.foo&lt;/div>
  &lt;script>
    console.log(window.foo); // Prints "bar"
  &lt;/script>
&lt;/body></code></pre>



<p>And the opposite is true as well:</p>



<pre rel="HTML" class="wp-block-csstricks-code-block language-markup" data-line=""><code markup="tt">&lt;div id="foo">I will be overridden :(&lt;/div>
&lt;script>
  window.foo = "bar";
  console.log(window.foo); // Prints "bar"
&lt;/script></code></pre>



<p>This behavior is essential because it nullifies dangerous overrides such as <code>&lt;div id="alert" /&gt;</code>, which would otherwise create a conflict by invalidating the <code>alert</code> API. This safeguarding technique may very well be the why you — if you’re like me — are learning about this for the first time.</p>


<h3 id="the-case-against-named-globals">The case against named globals</h3>


<p>Earlier, I said that using global named elements as references might not be the greatest idea. There are lots of reasons for that, which <a href="https://www.tjvantoll.com/2012/07/19/dom-element-references-as-global-variables/" rel="noopener">TJ VanToll has covered nicely over at his blog</a> and I will summarize here:</p>



<ul><li><strong>If the DOM changes, then so does the reference.</strong> That makes for some really “brittle” (<a href="https://html.spec.whatwg.org/#named-access-on-the-window-object" rel="noopener">the spec’s term</a> for it) code where the separation of concerns between HTML and JavaScript might be too much.</li><li><strong>Accidental references are far too easy.</strong> A simple typo may very well wind up referencing a named global and give you unexpected results.</li><li><strong>It is implemented differently in browsers.</strong> For example, we should be able to access an anchor with an <code>id</code> — e.g. <code>&lt;a id="cool"&gt;</code> — but some browsers (namely Safari and Firefox) return a <code>ReferenceError</code> in the console.</li><li><strong>It might not return what you think.</strong> According to the spec, when there are multiple instances of the same named element in the DOM — say, two instances of <code>&lt;div class="cool"&gt;</code> — the browser should return an <code>HTMLCollection</code> with an array of the instances. Firefox, however, only returns the first instance. Then again, <a href="https://html.spec.whatwg.org/#global-attributes:concept-id" rel="noopener">the spec says</a> we ought to use one instance of an <code>id</code> in an element’s tree anyway. But doing so won’t stop a page from working or anything like that.</li><li><strong>Maybe there’s a performance cost?</strong> I mean, the browser’s gotta make that list of references and maintain it. A couple of folks ran tests <a href="https://stackoverflow.com/questions/3434278/do-dom-tree-elements-with-ids-become-global-properties" rel="noopener">in this StackOverflow thread</a>, where named globals were actually <a href="https://jsben.ch/AZD81" rel="noopener">more performant in one test</a> and <a href="https://jsben.ch/bexDw" rel="noopener">less performant in a more recent test</a>.</li></ul>


<h3 id="additional-considerations">Additional considerations</h3>


<p>Let’s say we chuck the criticisms against using named globals and use them anyway. It’s all good. But there are some things you might want to consider as you do.</p>


<h4 id="polyfills">Polyfills</h4>


<p>As edge-case-y as it may sound, these types of global checks are a typical setup requirement for polyfills. Check out the following example where we set a cookie using the new <a href="https://developer.mozilla.org/en-US/docs/Web/API/CookieStore" rel="noopener"><code>CookieStore</code> API</a>, polyfilling it on browsers that don&#8217;t support it yet:</p>



<pre rel="HTML" class="wp-block-csstricks-code-block language-markup" data-line=""><code markup="tt">&lt;body>
  &lt;img id="cookieStore">&lt;/img>
  &lt;script>
    // Polyfill the CookieStore API if not yet implemented.
    // https://developer.mozilla.org/en-US/docs/Web/API/CookieStore
    if (!window.cookieStore) {
      window.cookieStore = myCookieStorePolyfill;
    }
    cookieStore.set("foo", "bar");
  &lt;/script>
&lt;/body></code></pre>



<p>This code works perfectly fine in Chrome, but throws the following error in Safari.:</p>



<pre rel="" class="wp-block-csstricks-code-block language-none" data-line=""><code markup="tt">TypeError: cookieStore.set is not a function</code></pre>



<p>Safari lacks support for the <code>CookieStore</code> API as of this writing. As a result, the polyfill is not applied because the <code>img</code> element ID creates a global variable that clashes with the <code>cookieStore</code> global.</p>


<h4 id="javascript-api-updates">JavaScript API updates</h4>


<p>We can flip the situation and find yet another issue where updates to the browser&#8217;s JavaScript engine can break a named element’s global references.</p>



<p>For example:</p>



<pre rel="HTML" class="wp-block-csstricks-code-block language-markup" data-line=""><code markup="tt">&lt;body>
  &lt;input id="BarcodeDetector">&lt;/input>
  &lt;script>
    window.BarcodeDetector.focus();
  &lt;/script>
&lt;/body></code></pre>



<p>That script grabs a reference to the input element and invokes <code>focus()</code> on it. It works correctly. Still, we don&#8217;t know how <em>long</em> it will continue to work.</p>



<p>You see, the global variable we&#8217;re using to reference the input element will stop working as soon as browsers start supporting the <a href="https://developer.mozilla.org/en-US/docs/Web/API/BarcodeDetector" rel="noopener"><code>BarcodeDetector</code> API</a>. At that point, the <code>window.BarcodeDetector</code> global will no longer be a reference to the input element and <code>.focus()</code> will throw a “<code>window.BarcodeDetector.focus</code> is not a function” error.</p>


<h3 id="conclusion">Conclusion</h3>


<p>Let’s sum up how we got here:</p>



<ul><li>All major browsers automatically create global references to each DOM element with an <code>id</code> (or, in some cases, a <code>name</code> attribute).</li><li>Accessing these elements through their global references is unreliable and potentially dangerous. Use <code>querySelector</code> or <code>getElementById</code> instead.</li><li>Since global references are generated automatically, they may have some side effects on your code. That’s a good reason to avoid using the <code>id</code> attribute unless you really need it.</li></ul>



<p>At the end of the day, it’s probably a good idea to avoid using named globals in JavaScript. I quoted the spec earlier about how it leads to “brittle” code, but here’s the full text to drive the point home:</p>



<blockquote class="wp-block-quote"><p>As a general rule, relying on this will lead to brittle code. Which IDs end up mapping to this API can vary over time, as new features are added to the web platform, for example. Instead of this, use <code>document.getElementById()</code> or <code>document.querySelector()</code>.</p></blockquote>



<p>I think the fact that the HTML spec itself recommends to staying away from this feature speaks for itself.</p>
<hr />
<p><small><a rel="nofollow" href="https://css-tricks.com/named-element-ids-can-be-referenced-as-javascript-globals/">Named Element IDs Can Be Referenced as JavaScript Globals</a> originally published on <a rel="nofollow" href="https://css-tricks.com">CSS-Tricks</a>, which is part of the <a href="https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=">DigitalOcean</a> family. You should <a href="https://css-tricks.com/newsletters/">get the newsletter</a>.</p>
]]></content:encoded>

      <wfw:commentRss>
        https://css-tricks.com/named-element-ids-can-be-referenced-as-javascript-globals/feed/
      </wfw:commentRss>
      <slash:comments>15</slash:comments>


      <post-id xmlns="com-wordpress:feed-additions:1">373209</post-id>
    </item>
    <item>
      <title>How to Create Wavy Shapes &#038; Patterns in CSS</title>
      <link>https://css-tricks.com/how-to-create-wavy-shapes-patterns-in-css/</link>
      <comments>https://css-tricks.com/how-to-create-wavy-shapes-patterns-in-css/#respond</comments>

      <dc:creator><![CDATA[Temani Afif]]></dc:creator>
      <pubDate>Mon, 26 Sep 2022 13:13:30 +0000</pubDate>
      <category><![CDATA[Article]]></category>
      <category><![CDATA[mask]]></category>
      <category><![CDATA[multiple backgrounds]]></category>
      <category><![CDATA[radial-gradient]]></category>
      <guid isPermaLink="false">https://css-tricks.com/?p=373403</guid>

      <description><![CDATA[<p>The wave is probably one of the most difficult shapes to make in CSS. We always try to approximate it with properties like <code>border-radius</code> and lots of magic numbers until we get something that feels kinda close. And that’s before &#8230;</p>
<hr />
<p><small><a rel="nofollow" href="https://css-tricks.com/how-to-create-wavy-shapes-patterns-in-css/">How to Create Wavy Shapes &amp; Patterns in CSS</a> originally published on <a rel="nofollow" href="https://css-tricks.com">CSS-Tricks</a>, which is part of the <a href="https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=">DigitalOcean</a> family. You should <a href="https://css-tricks.com/newsletters/">get the newsletter</a>.</p>
]]></description>
      <content:encoded><![CDATA[
<p>The wave is probably one of the most difficult shapes to make in CSS. We always try to approximate it with properties like <code>border-radius</code> and lots of magic numbers until we get something that feels kinda close. And that’s before we even get into wavy patterns, which are more difficult.</p>



<p>“SVG it!” you might say, and you are probably right that it’s a better way to go. But we will see that CSS can make nice waves and the code for it doesn’t have to be all crazy. And guess what? I have <a href="https://css-generators.com/wavy-shapes/" rel="noopener">an online generator</a> to make it even more trivial!</p>



<span id="more-373403"></span>



<figure class="wp-block-video wp-block-embed is-type-video is-provider-videopress"><div class="wp-block-embed__wrapper">
<iframe title="VideoPress Video Player" aria-label='VideoPress Video Player' width='500' height='254' src='https://videopress.com/embed/Kic8Ekan?cover=1&amp;preloadContent=metadata&amp;useAverageColor=1&amp;hd=1' frameborder='0' allowfullscreen data-resize-to-parent="true" allow='clipboard-write'></iframe><script src='https://v0.wordpress.com/js/next/videopress-iframe.js?m=1658470809'></script>
</div></figure>



<p>If you play with the generator, you can see that the CSS it spits out is only two gradients and a CSS mask property — just those two things and we can make any kind of wave shape or pattern. Not to mention that we can easily control the size and the curvature of the waves while we’re at it.</p>



<p>Some of the values may look like “<a href="https://css-tricks.com/magic-numbers-in-css/">magic numbers</a>” but there’s actually logic behind them and we will dissect the code and discover all the secrets behind creating waves.</p>



<p class="is-style-explanation">This article is a follow-up to <a href="https://css-tricks.com/css-borders-using-masks/">a previous one</a> where I built all kinds of different zig-zag, scoped, scalloped, and yes, wavy border borders. I highly recommend checking that article as it uses the same technique we will cover here, but in greater detail.</p>


<h3 id="the-math-behind-waves">The math behind waves</h3>


<p>Strictly speaking, there isn’t one magic formula behind wavy shapes. Any shape with curves that go up and down can be called a wave, so we are not going to restrict ourselves to complex math. Instead, we will reproduce a wave using the basics of geometry.</p>



<p>Let’s start with a simple example using two circle shapes:</p>



<figure class="wp-block-image size-full"><img loading="lazy" width="704" height="368" src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661730367615_image.png?resize=704%2C368&#038;ssl=1" alt="Two gray circles." class="wp-image-373405" srcset="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661730367615_image.png?w=704&amp;ssl=1 704w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661730367615_image.png?resize=300%2C157&amp;ssl=1 300w" sizes="(min-width: 735px) 864px, 96vw" data-recalc-dims="1" /></figure>



<p>We have two circles with the same radius next to each other. Do you see that red line? It covers the top half of the first circle and the bottom half of the second one. Now imagine you take that line and repeat it.</p>



<figure class="wp-block-image size-full"><img loading="lazy" width="1036" height="340" src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661730706556_image.png?resize=1036%2C340&#038;ssl=1" alt="A squiggly red line in the shape of waves." class="wp-image-373406" srcset="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661730706556_image.png?w=1036&amp;ssl=1 1036w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661730706556_image.png?resize=300%2C98&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661730706556_image.png?resize=1024%2C336&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661730706556_image.png?resize=768%2C252&amp;ssl=1 768w" sizes="(min-width: 735px) 864px, 96vw" data-recalc-dims="1" /></figure>



<p>We already see the wave. Now let’s fill the bottom part (or the top one) to get the following:</p>



<figure class="wp-block-image size-full"><img loading="lazy" width="898" height="270" src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661730844124_image.png?resize=898%2C270&#038;ssl=1" alt="Red wave pattern." class="wp-image-373407" srcset="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661730844124_image.png?w=898&amp;ssl=1 898w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661730844124_image.png?resize=300%2C90&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661730844124_image.png?resize=768%2C231&amp;ssl=1 768w" sizes="(min-width: 735px) 864px, 96vw" data-recalc-dims="1" /></figure>



<p>Tada! We have a wavy shape, and one that we can control using one variable for the circle radii. This is one of the easiest waves we can make and it’s the one I showed off in <a href="https://css-tricks.com/css-borders-using-masks/">th</a><a href="https://css-tricks.com/css-borders-using-masks/">is</a> <a href="https://css-tricks.com/css-borders-using-masks/">previous article</a></p>



<p>Let’s add a bit of complexity by taking the first illustration and moving the circles a little:</p>



<figure class="wp-block-image size-full"><img loading="lazy" width="677" height="474" src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661731802980_image.png?resize=677%2C474&#038;ssl=1" alt="Two gray circles with two bisecting dashed lines indicating spacing." class="wp-image-373409" srcset="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661731802980_image.png?w=677&amp;ssl=1 677w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661731802980_image.png?resize=300%2C210&amp;ssl=1 300w" sizes="(min-width: 735px) 864px, 96vw" data-recalc-dims="1" /></figure>



<p>We still have two circles with the same radii but they are no longer horizontally aligned. In this case, the red line no longer covers half the area of each circle, but a smaller area instead. This area is limited by the dashed red line. That line crosses the point where both circles meet.</p>



<p>Now take that line and repeat it and you get another wave, a smoother one.</p>



<figure class="wp-block-image size-full"><img loading="lazy" width="1006" height="293" src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661732198695_image.png?resize=1006%2C293&#038;ssl=1" alt="A red squiggly line." class="wp-image-373410" srcset="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661732198695_image.png?w=1006&amp;ssl=1 1006w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661732198695_image.png?resize=300%2C87&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661732198695_image.png?resize=768%2C224&amp;ssl=1 768w" sizes="(min-width: 735px) 864px, 96vw" data-recalc-dims="1" /></figure>



<figure class="wp-block-image size-full"><img loading="lazy" width="730" height="285" src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661767386260_image.png?resize=730%2C285&#038;ssl=1" alt="A red wave pattern." class="wp-image-373411" srcset="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661767386260_image.png?w=730&amp;ssl=1 730w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661767386260_image.png?resize=300%2C117&amp;ssl=1 300w" sizes="(min-width: 735px) 864px, 96vw" data-recalc-dims="1" /></figure>



<p>I think you get the idea. By controlling the position and size of the circles, we can create any wave we want. We can even create variables for them, which I will call <code>P</code> and <code>S</code>, respectively.</p>



<figure class="wp-block-image size-full"><img loading="lazy" width="1224" height="592" src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661732569525_image.png?resize=1224%2C592&#038;ssl=1" alt="" class="wp-image-373412" srcset="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661732569525_image.png?w=1224&amp;ssl=1 1224w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661732569525_image.png?resize=300%2C145&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661732569525_image.png?resize=1024%2C495&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661732569525_image.png?resize=768%2C371&amp;ssl=1 768w" sizes="(min-width: 735px) 864px, 96vw" data-recalc-dims="1" /></figure>



<p>You have probably noticed that, in the online generator, we control the wave using two inputs. They map to the above variables. <code>S</code> is the “Size of the wave” and <code>P</code> is the “curvature of the wave”.</p>



<p>I am defining <code>P</code> as <code>P = m*S</code> where <code>m</code> is the variable you adjust when updating the curvature of the wave. This allows us to always have the same curvature, even if we update S.</p>



<p><code>m</code> can be any value between <code>0</code> and <code>2</code>. <code>0</code> will give us the first particular case where both circles are aligned horizontally. <code>2</code> is a kind of maximum value. We can go bigger, but after a few tests I found that anything above <code>2</code> produces bad, flat shapes.</p>



<p>Let’s not forget the radius of our circle! That can also be defined using <code>S</code> and <code>P</code> like this:</p>



<pre rel="" class="wp-block-csstricks-code-block language-none" data-line=""><code markup="tt">R = sqrt(P² + S²)/2</code></pre>



<p>When <code>P</code> is equal to <code>0</code>, we will have <code>R = S/2</code>.</p>



<p>We have everything to start converting all of this into gradients in CSS!</p>


<h3 id="creating-gradients">Creating gradients</h3>


<p>Our waves use circles, and when talking about circles we talk about radial gradients. And since two circles define our wave, we will logically be using two radial gradients.</p>



<p>We will start with the particular case where <code>P</code> is equal to <code>0</code>. Here is the illustration of the first gradient:</p>



<div class="wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper"><iframe id="cp_embed_gOeNyvr/336eab3f100e7796488a594858712dc0" src="//codepen.io/anon/embed/preview/gOeNyvr/336eab3f100e7796488a594858712dc0?height=750&amp;theme-id=1&amp;slug-hash=gOeNyvr/336eab3f100e7796488a594858712dc0&amp;default-tab=result" height="750" scrolling="no" frameborder="0" allowfullscreen allowpaymentrequest name="CodePen Embed gOeNyvr/336eab3f100e7796488a594858712dc0" title="CodePen Embed gOeNyvr/336eab3f100e7796488a594858712dc0" class="cp_embed_iframe" style="width:100%;overflow:hidden">CodePen Embed Fallback</iframe></div>



<p>This gradient creates the first curvature while filling in the entire bottom area —the “water” of the wave so to speak.</p>



<figure class="wp-block-image size-full"><img loading="lazy" width="484" height="412" src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661768883486_image.png?resize=484%2C412&#038;ssl=1" alt="" class="wp-image-373413" srcset="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661768883486_image.png?w=484&amp;ssl=1 484w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661768883486_image.png?resize=300%2C255&amp;ssl=1 300w" sizes="(min-width: 735px) 864px, 96vw" data-recalc-dims="1" /></figure>



<pre rel="CSS" class="wp-block-csstricks-code-block language-css" data-line=""><code markup="tt">.wave {
  --size: 50px;

  mask: radial-gradient(var(--size) at 50% 0%, #0000 99%, red 101%)
    50% var(--size)/calc(4 * var(--size)) 100% repeat-x;
}</code></pre>



<p>The <code>--size</code> variable defines the radius and the size of the radial gradient. If we compare it with the <code>S</code> variable, then it’s equal to <code>S/2</code>.</p>



<p>Now let’s add the second gradient:</p>



<div class="wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper"><iframe id="cp_embed_LYdKvBK/f562b8d7de5f487b412065ae9ec1ea82" src="//codepen.io/anon/embed/preview/LYdKvBK/f562b8d7de5f487b412065ae9ec1ea82?height=725&amp;theme-id=1&amp;slug-hash=LYdKvBK/f562b8d7de5f487b412065ae9ec1ea82&amp;default-tab=result" height="725" scrolling="no" frameborder="0" allowfullscreen allowpaymentrequest name="CodePen Embed LYdKvBK/f562b8d7de5f487b412065ae9ec1ea82" title="CodePen Embed LYdKvBK/f562b8d7de5f487b412065ae9ec1ea82" class="cp_embed_iframe" style="width:100%;overflow:hidden">CodePen Embed Fallback</iframe></div>



<p>The second gradient is nothing but a circle to complete our wave:</p>



<pre rel="CSS" class="wp-block-csstricks-code-block language-css" data-line=""><code markup="tt">radial-gradient(var(--size) at 50% var(--size), blue 99%, #0000 101%)
  calc(50% - 2*var(--size)) 0/calc(4 * var(--size)) 100%</code></pre>



<p>If you check <a href="https://css-tricks.com/css-borders-using-masks/#aa-wavy-css-borders">the previous article</a> you will see that I am simply repeating what I already did there.</p>



<blockquote class="wp-block-quote"><p>I followed both articles but the gradient configurations are not the same.</p></blockquote>



<p>That’s because we can reach the same result using different gradient configurations. You will notice a slight difference in the alignment if you compare both configurations, but the trick is the same. This can be confusing if you are unfamiliar with gradients, but don’t worry. With some practice, you get used to them and you will find by yourself that different syntax can lead to the same result.</p>



<p>Here is the full code for our first wave:</p>



<pre rel="CSS" class="wp-block-csstricks-code-block language-css" data-line=""><code markup="tt">.wave {
  --size: 50px;

  mask:
    radial-gradient(var(--size) at 50% var(--size),#000 99%, #0000 101%)
      calc(50% - 2*var(--size)) 0/calc(4 * var(--size)) 100%,
    radial-gradient(var(--size) at 50% 0px, #0000 99%, #000 101%)
      50% var(--size)/calc(4 * var(--size)) 100% repeat-x;
}</code></pre>



<p>Now let’s take this code and adjust it to where we introduce a variable that makes this fully reusable for creating any wave we want. As we saw in the previous section, the main trick is to move the circles so they are no more aligned so let’s update the position of each one. We will move the first one up and the second down.</p>



<p>Our code will look like this:</p>



<pre rel="CSS" class="wp-block-csstricks-code-block language-css" data-line=""><code markup="tt">.wave {
  --size: 50px;
  --p: 25px;

  mask:
    radial-gradient(var(--size) at 50% calc(var(--size) + var(--p)), #000 99%, #0000 101%)
      calc(50% - 2*var(--size)) 0/calc(4 * var(--size)) 100%,
    radial-gradient(var(--size) at 50% calc(-1*var(--p)), #0000 99%, #000 101%)
      50% var(--size) / calc(4 * var(--size)) 100% repeat-x;
}</code></pre>



<p>I have introduced a new <code>--p</code> variable that’s used it to define the center position of each circle. The first gradient is using <code>50% calc(-1*var(--p))</code>, so its center moves up while the second one is using <code>calc(var(--size) + var(--p))</code> to move it down.</p>



<p>A demo is worth a thousand words:</p>



<div class="wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper"><iframe id="cp_embed_poLXBmK/63c5669871c60e16679e07651e69c4f0" src="//codepen.io/anon/embed/preview/poLXBmK/63c5669871c60e16679e07651e69c4f0?height=750&amp;theme-id=1&amp;slug-hash=poLXBmK/63c5669871c60e16679e07651e69c4f0&amp;default-tab=result" height="750" scrolling="no" frameborder="0" allowfullscreen allowpaymentrequest name="CodePen Embed poLXBmK/63c5669871c60e16679e07651e69c4f0" title="CodePen Embed poLXBmK/63c5669871c60e16679e07651e69c4f0" class="cp_embed_iframe" style="width:100%;overflow:hidden">CodePen Embed Fallback</iframe></div>



<p>The circles are neither aligned nor touch one another. We spaced them far apart without changing their radii, so we lost our wave. But we can fix things up by using the same math we used earlier to calculate the new radius. Remember that <code>R = sqrt(P² + S²)/2</code>. In our case, <code>--size</code> is equal to <code>S/2</code>; the same for <code>--p</code> which is also equal to <code>P/2</code> since we are moving both circles. So, the distance between their center points is double the value of <code>--p</code> for this:</p>



<pre rel="" class="wp-block-csstricks-code-block language-none" data-line=""><code markup="tt">R = sqrt(var(--size) * var(--size) + var(--p) * var(--p))</code></pre>



<p>That gives us a result of <code>55.9px</code>.</p>



<div class="wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper"><iframe id="cp_embed_qBozGBB/74b62018dc6aa360ab316d1dc6408361" src="//codepen.io/anon/embed/preview/qBozGBB/74b62018dc6aa360ab316d1dc6408361?height=750&amp;theme-id=1&amp;slug-hash=qBozGBB/74b62018dc6aa360ab316d1dc6408361&amp;default-tab=result" height="750" scrolling="no" frameborder="0" allowfullscreen allowpaymentrequest name="CodePen Embed qBozGBB/74b62018dc6aa360ab316d1dc6408361" title="CodePen Embed qBozGBB/74b62018dc6aa360ab316d1dc6408361" class="cp_embed_iframe" style="width:100%;overflow:hidden">CodePen Embed Fallback</iframe></div>



<p>Our wave is back! Let’s plug that equation into our CSS:</p>



<pre rel="CSS" class="wp-block-csstricks-code-block language-css" data-line="4"><code markup="tt">.wave {
  --size: 50px;
  --p: 25px;
  --R: sqrt(var(--p) * var(--p) + var(--size)*var(--size));

  mask:
    radial-gradient(var(--R) at 50% calc(var(--size) + var(--p)), #000 99%, #0000 101%)
      calc(50% - 2*var(--size)) 0 / calc(4 * var(--size)) 100%,
    radial-gradient(var(--R) at 50% calc(-1*var(--p)), #0000 99%, #000 101%)
      50% var(--size)/calc(4 * var(--size)) 100% repeat-x;
}</code></pre>



<p>This is valid CSS code. <a href="https://drafts.csswg.org/css-values/#exponent-funcs" rel="noopener"><code>sqrt()</code> is part of the specification</a>, but at the time I’m writing this, there is no browser support for it. That means we need a sprinkle of JavaScript or Sass to calculate that value until we get broader <code>sqrt()</code> support.</p>



<p>This is pretty darn cool: all it takes is two gradients to get a cool wave that you can apply to any element using the <code>mask</code> property. No more trial and error — all you need is to update two variables and you’re good to go!</p>


<h3 id="reversing-the-wave">Reversing the wave</h3>


<p>What if we want the waves going the other direction, where we’re filling in the “sky” instead of the “water”. Believe it or not, all we have to do is to update two values:</p>



<pre rel="CSS" class="wp-block-csstricks-code-block language-css" data-line="7,9"><code markup="tt">.wave {
  --size: 50px;
  --p: 25px;
  --R: sqrt(var(--p) * var(--p) + var(--size) * var(--size));

  mask:
    radial-gradient(var(--R) at 50% calc(100% - (var(--size) + var(--p))), #000 99%, #0000 101%)
      calc(50% - 2 * var(--size)) 0/calc(4 * var(--size)) 100%,
    radial-gradient(var(--R) at 50% calc(100% + var(--p)), #0000 99%, #000 101%)
      50% calc(100% - var(--size)) / calc(4 * var(--size)) 100% repeat-x;
}</code></pre>



<p>All I did there is add an offset equal to <code>100%</code>, highlighted above. Here’s the result:</p>



<div class="wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper"><iframe id="cp_embed_oNqKvOW/cdb4a2d632083e083a4901d3495798a9" src="//codepen.io/anon/embed/preview/oNqKvOW/cdb4a2d632083e083a4901d3495798a9?height=450&amp;theme-id=1&amp;slug-hash=oNqKvOW/cdb4a2d632083e083a4901d3495798a9&amp;default-tab=result" height="450" scrolling="no" frameborder="0" allowfullscreen allowpaymentrequest name="CodePen Embed oNqKvOW/cdb4a2d632083e083a4901d3495798a9" title="CodePen Embed oNqKvOW/cdb4a2d632083e083a4901d3495798a9" class="cp_embed_iframe" style="width:100%;overflow:hidden">CodePen Embed Fallback</iframe></div>



<p>We can consider a more friendly syntax using keyword values to make it even easier:</p>



<pre rel="CSS" class="wp-block-csstricks-code-block language-css" data-line=""><code markup="tt">.wave {
  --size: 50px;
  --p: 25px;
  --R: sqrt(var(--p)*var(--p) + var(--size) * var(--size));

  mask:
    radial-gradient(var(--R) at left 50% bottom calc(var(--size) + var(--p)), #000 99%, #0000 101%)
      calc(50% - 2 * var(--size)) 0/calc(4 * var(--size)) 100%,
    radial-gradient(var(--R) at left 50% bottom calc(-1 * var(--p)), #0000 99%, #000 101%)
      left 50% bottom var(--size) / calc(4 * var(--size)) 100% repeat-x;
}</code></pre>



<p>We’re using the <code>left</code> and <code>bottom</code> keywords to specify the sides and the offset. By default, the browser defaults to <code>left</code> and <code>top</code> — that’s why we use <code>100%</code> to move the element to the bottom. In reality, we are moving it from the <code>top</code> by <code>100%</code>, so it’s really the same as saying <code>bottom</code>. Much easier to read than math!</p>



<p>With this updated syntax, all we have to do is to swap <code>bottom</code> for <code>top</code> — or vice versa — to change the direction of the wave.</p>



<div class="wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper"><iframe id="cp_embed_gOeVObj/f8cc4128db72f2529068864901ecb8e9" src="//codepen.io/anon/embed/preview/gOeVObj/f8cc4128db72f2529068864901ecb8e9?height=525&amp;theme-id=1&amp;slug-hash=gOeVObj/f8cc4128db72f2529068864901ecb8e9&amp;default-tab=result" height="525" scrolling="no" frameborder="0" allowfullscreen allowpaymentrequest name="CodePen Embed gOeVObj/f8cc4128db72f2529068864901ecb8e9" title="CodePen Embed gOeVObj/f8cc4128db72f2529068864901ecb8e9" class="cp_embed_iframe" style="width:100%;overflow:hidden">CodePen Embed Fallback</iframe></div>



<p>And if you want to get both top and bottom waves, we combine all the gradients in a single declaration:</p>



<pre rel="CSS" class="wp-block-csstricks-code-block language-css" data-line=""><code markup="tt">.wave {
  --size: 50px;
  --p: 25px;
  --R: sqrt(var(--p)*var(--p) + var(--size)*var(--size));

  mask:
    /* Gradient 1 */
    radial-gradient(var(--R) at left 50% bottom calc(var(--size) + var(--p)), #000 99%, #0000 101%)
      left calc(50% - 2*var(--size)) bottom 0 / calc(4 * var(--size)) 51% repeat-x,
    /* Gradient 2 */
    radial-gradient(var(--R) at left 50% bottom calc(-1 * var(--p)), #0000 99%, #000 101%)
      left 50% bottom var(--size) / calc(4 * var(--size)) calc(51% - var(--size)) repeat-x,
    /* Gradient 3 */
    radial-gradient(var(--R) at left 50% top calc(var(--size) + var(--p)), #000 99%, #0000 101%)
      left calc(50% - 2 * var(--size)) top 0 / calc(4 * var(--size)) 51% repeat-x,
    /* Gradient 4 */
    radial-gradient(var(--R) at left 50% top calc(-1 * var(--p)), #0000 99%, #000 101%)
      left 50% top var(--size) / calc(4 * var(--size)) calc(51% - var(--size)) repeat-x;
}</code></pre>



<div class="wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper"><iframe id="cp_embed_WNzVNQB/c4d0e46831e81e214bf186ead7107329" src="//codepen.io/anon/embed/preview/WNzVNQB/c4d0e46831e81e214bf186ead7107329?height=525&amp;theme-id=1&amp;slug-hash=WNzVNQB/c4d0e46831e81e214bf186ead7107329&amp;default-tab=result" height="525" scrolling="no" frameborder="0" allowfullscreen allowpaymentrequest name="CodePen Embed WNzVNQB/c4d0e46831e81e214bf186ead7107329" title="CodePen Embed WNzVNQB/c4d0e46831e81e214bf186ead7107329" class="cp_embed_iframe" style="width:100%;overflow:hidden">CodePen Embed Fallback</iframe></div>



<p>If you check the code, you will see that in addition to combining all the gradients, I have also reduced their height from <code>100%</code> to <code>51%</code> so that they both cover half of the element. Yes, <code>51%</code>. We need that little extra percent for a small overlap that avoid gaps.</p>



<blockquote class="wp-block-quote"><p>What about the left and right sides?</p></blockquote>



<p>It’s your homework! Take what we did with the top and bottom sides and try to update the values to get the right and left values. Don’t worry, it’s easy and the only thing you need to do is to swap values.</p>



<p>If you have trouble, you can always use <a href="https://css-generators.com/wavy-shapes/" rel="noopener">the online generator</a> to check the code and visualize the result.</p>


<h3 id="wavy-lines">Wavy lines</h3>


<p>Earlier, we made our first wave using a red line then filled the bottom portion of the element. How about that wavy line? That’s a wave too! Even better is if we can control its thickness with a variable so we can reuse it. Let’s do it!</p>



<figure class="wp-block-video wp-block-embed is-type-video is-provider-videopress"><div class="wp-block-embed__wrapper">
<iframe title="VideoPress Video Player" aria-label='VideoPress Video Player' width='500' height='254' src='https://videopress.com/embed/SVPg6efr?cover=1&amp;playsinline=1&amp;preloadContent=metadata&amp;useAverageColor=1&amp;hd=1' frameborder='0' allowfullscreen data-resize-to-parent="true" allow='clipboard-write'></iframe><script src='https://v0.wordpress.com/js/next/videopress-iframe.js?m=1658470809'></script>
</div></figure>



<p>We are not going to start from scratch but rather take the previous code and update it. The first thing to do is to update the color stops of the gradients. Both gradients start from a transparent color to an opaque one, or vice versa. To simulate a line or border, we need to start from transparent, go to opaque, then back to transparent again:</p>



<pre rel="CSS" class="wp-block-csstricks-code-block language-css" data-line=""><code markup="tt">#0000 calc(99% - var(--b)), #000 calc(101% - var(--b)) 99%, #0000 101%</code></pre>



<p>I think you already guessed that the <code>--b</code> variable is what we’re using to control the line thickness. Let’s apply this to our gradients:</p>



<div class="wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper"><iframe id="cp_embed_bGvXeqJ/e46727ddcbdcd61ef4069e94c871ae53" src="//codepen.io/anon/embed/preview/bGvXeqJ/e46727ddcbdcd61ef4069e94c871ae53?height=350&amp;theme-id=1&amp;slug-hash=bGvXeqJ/e46727ddcbdcd61ef4069e94c871ae53&amp;default-tab=result" height="350" scrolling="no" frameborder="0" allowfullscreen allowpaymentrequest name="CodePen Embed bGvXeqJ/e46727ddcbdcd61ef4069e94c871ae53" title="CodePen Embed bGvXeqJ/e46727ddcbdcd61ef4069e94c871ae53" class="cp_embed_iframe" style="width:100%;overflow:hidden">CodePen Embed Fallback</iframe></div>



<p>Yeah, the result is far from a wavy line. But looking closely, we can see that one gradient is correctly creating the bottom curvature. So, all we really need to do is rectify the second gradient. Instead of keeping a full circle, let’s make partial one like the other gradient.</p>



<div class="wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper"><iframe id="cp_embed_KKoOMQp/796462623df84650973c4ecd804f77a1" src="//codepen.io/anon/embed/preview/KKoOMQp/796462623df84650973c4ecd804f77a1?height=350&amp;theme-id=1&amp;slug-hash=KKoOMQp/796462623df84650973c4ecd804f77a1&amp;default-tab=result" height="350" scrolling="no" frameborder="0" allowfullscreen allowpaymentrequest name="CodePen Embed KKoOMQp/796462623df84650973c4ecd804f77a1" title="CodePen Embed KKoOMQp/796462623df84650973c4ecd804f77a1" class="cp_embed_iframe" style="width:100%;overflow:hidden">CodePen Embed Fallback</iframe></div>



<p>Still far, but we have both curvatures we need! If you check the code, you will see that we have two identical gradients. The only difference is their positioning:</p>



<pre rel="CSS" class="wp-block-csstricks-code-block language-css" data-line=""><code markup="tt">.wave {
  --size: 50px;
  --b: 10px;
  --p: 25px;
  --R: sqrt(var(--p)*var(--p) + var(--size)*var(--size));

  --_g: #0000 calc(99% - var(--b)), #000 calc(101% - var(--b)) 99%, #0000 101%;
  mask:
    radial-gradient(var(--R) at left 50% bottom calc(-1*var(--p)), var(--_g))
      calc(50% - 2*var(--size)) 0/calc(4*var(--size)) 100%,
    radial-gradient(var(--R) at left 50% top    calc(-1*var(--p)), var(--_g))
      50% var(--size)/calc(4*var(--size)) 100%;
}</code></pre>



<p>Now we need to adjust the size and position for the final shape. We no longer need the gradient to be full-height, so we can replace <code>100%</code> with this:</p>



<pre rel="CSS" class="wp-block-csstricks-code-block language-css" data-line=""><code markup="tt">/* Size plus thickness */
calc(var(--size) + var(--b))</code></pre>



<p>There is no mathematical logic behind this value. It only needs to be big enough for the curvature. We will see its effect on the pattern in just a bit. In the meantime, let’s also update the position to vertically center the gradients:</p>



<pre rel="CSS" class="wp-block-csstricks-code-block language-css" data-line=""><code markup="tt">.wave {
  --size: 50px;
  --b: 10px;
  --p: 25px;
  --R: sqrt(var(--p)*var(--p) + var(--size)*var(--size));

  --_g: #0000 calc(99% - var(--b)), #000 calc(101% - var(--b)) 99%, #0000 101%;
  mask:
    radial-gradient(var(--R) at left 50% bottom calc(-1*var(--p)), var(--_g))
      calc(50% - 2*var(--size)) 50%/calc(4 * var(--size)) calc(var(--size) + var(--b)) no-repeat,
    radial-gradient(var(--R) at left 50% top calc(-1 * var(--p)), var(--_g)) 50%
      50%/calc(4 * var(--size)) calc(var(--size) + var(--b)) no-repeat;
}</code></pre>



<p>Still not quite there:</p>



<div class="wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper"><iframe id="cp_embed_mdxNEwG/d1393831ae2f1aa79193bc4a3fab9eeb" src="//codepen.io/anon/embed/preview/mdxNEwG/d1393831ae2f1aa79193bc4a3fab9eeb?height=350&amp;theme-id=1&amp;slug-hash=mdxNEwG/d1393831ae2f1aa79193bc4a3fab9eeb&amp;default-tab=result" height="350" scrolling="no" frameborder="0" allowfullscreen allowpaymentrequest name="CodePen Embed mdxNEwG/d1393831ae2f1aa79193bc4a3fab9eeb" title="CodePen Embed mdxNEwG/d1393831ae2f1aa79193bc4a3fab9eeb" class="cp_embed_iframe" style="width:100%;overflow:hidden">CodePen Embed Fallback</iframe></div>



<p>One gradient needs to move a bit down and the other a bit up. Both need to move by half of their height.</p>



<div class="wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper"><iframe id="cp_embed_MWVNeVe/340e5119d33d6d5c2dc52d5b631290b3" src="//codepen.io/anon/embed/preview/MWVNeVe/340e5119d33d6d5c2dc52d5b631290b3?height=350&amp;theme-id=1&amp;slug-hash=MWVNeVe/340e5119d33d6d5c2dc52d5b631290b3&amp;default-tab=result" height="350" scrolling="no" frameborder="0" allowfullscreen allowpaymentrequest name="CodePen Embed MWVNeVe/340e5119d33d6d5c2dc52d5b631290b3" title="CodePen Embed MWVNeVe/340e5119d33d6d5c2dc52d5b631290b3" class="cp_embed_iframe" style="width:100%;overflow:hidden">CodePen Embed Fallback</iframe></div>



<p>We are almost there! We need a small fix for the radius to have a perfect overlap. Both lines need to offset by half the border (<code>--b</code>) thickness:</p>



<div class="wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper"><iframe id="cp_embed_eYMqzKg/de2524bf45f6d5af6e8fe0277ff2e1c1" src="//codepen.io/anon/embed/preview/eYMqzKg/de2524bf45f6d5af6e8fe0277ff2e1c1?height=350&amp;theme-id=1&amp;slug-hash=eYMqzKg/de2524bf45f6d5af6e8fe0277ff2e1c1&amp;default-tab=result" height="350" scrolling="no" frameborder="0" allowfullscreen allowpaymentrequest name="CodePen Embed eYMqzKg/de2524bf45f6d5af6e8fe0277ff2e1c1" title="CodePen Embed eYMqzKg/de2524bf45f6d5af6e8fe0277ff2e1c1" class="cp_embed_iframe" style="width:100%;overflow:hidden">CodePen Embed Fallback</iframe></div>



<p>We got it! A perfect wavy line that we can easily adjust by controlling a few variables:</p>



<pre rel="CSS" class="wp-block-csstricks-code-block language-css" data-line=""><code markup="tt">.wave {
  --size: 50px;
  --b: 10px;
  --p: 25px;
  --R: calc(sqrt(var(--p) * var(--p) + var(--size) * var(--size)) + var(--b) / 2);

  --_g: #0000 calc(99% - var(--b)), #000 calc(101% - var(--b)) 99%, #0000 101%;
  mask:
    radial-gradient(var(--R) at left 50% bottom calc(-1 * var(--p)), var(--_g))
     calc(50% - 2*var(--size)) calc(50% - var(--size)/2 - var(--b)/2) / calc(4 * var(--size)) calc(var(--size) + var(--b)) repeat-x,
    radial-gradient(var(--R) at left 50% top calc(-1*var(--p)),var(--_g))
     50%  calc(50% + var(--size)/2 + var(--b)/2) / calc(4 * var(--size)) calc(var(--size) + var(--b)) repeat-x;
}</code></pre>



<p>I know that the logic takes a bit to grasp. That’s fine and as I said, creating a wavy shape in CSS is not easy, not to mention the tricky math behind it. That’s why the <a href="https://css-generators.com/wavy-shapes/" rel="noopener">online generator</a> is a lifesaver — you can easily get the final code even if you don’t fully understand the logic behind it.</p>


<h3 id="wavy-patterns">Wavy patterns</h3>


<p>We can make a pattern from the wavy line we just created!</p>



<blockquote class="wp-block-quote"><p>Oh no, the code of the pattern will be even more difficult to understand!</p></blockquote>



<p>Not at all! We already have the code. All we need to do is to remove <code>repeat-x</code> from what we already have, and tada. &#x1f389;</p>



<div class="wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper"><iframe id="cp_embed_yLKmJrV/3672bed3b2e683545060cd6f4d4b2a8d" src="//codepen.io/anon/embed/preview/yLKmJrV/3672bed3b2e683545060cd6f4d4b2a8d?height=450&amp;theme-id=1&amp;slug-hash=yLKmJrV/3672bed3b2e683545060cd6f4d4b2a8d&amp;default-tab=result" height="450" scrolling="no" frameborder="0" allowfullscreen allowpaymentrequest name="CodePen Embed yLKmJrV/3672bed3b2e683545060cd6f4d4b2a8d" title="CodePen Embed yLKmJrV/3672bed3b2e683545060cd6f4d4b2a8d" class="cp_embed_iframe" style="width:100%;overflow:hidden">CodePen Embed Fallback</iframe></div>



<p>A nice wavy pattern. Remember the equation I said we’d revisit?</p>



<pre rel="CSS" class="wp-block-csstricks-code-block language-css" data-line=""><code markup="tt">/* Size plus thickness */
calc(var(--size) + var(--b))</code></pre>



<p>Well, this is what controls the distance between the lines in the pattern. We can make a variable out of it, but there’s no need for more complexity. I’m not even using a variable for that in the generator. Maybe I’ll change that later.</p>



<p>Here is the same pattern going in a different direction:</p>



<div class="wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper"><iframe id="cp_embed_wvmVWVB/661154a86f2e9017e579a1e48480686c" src="//codepen.io/anon/embed/preview/wvmVWVB/661154a86f2e9017e579a1e48480686c?height=450&amp;theme-id=1&amp;slug-hash=wvmVWVB/661154a86f2e9017e579a1e48480686c&amp;default-tab=result" height="450" scrolling="no" frameborder="0" allowfullscreen allowpaymentrequest name="CodePen Embed wvmVWVB/661154a86f2e9017e579a1e48480686c" title="CodePen Embed wvmVWVB/661154a86f2e9017e579a1e48480686c" class="cp_embed_iframe" style="width:100%;overflow:hidden">CodePen Embed Fallback</iframe></div>



<p>I am providing you with the code in that demo, but I’d for you to dissect it and understand what changes I made to make that happen.</p>


<h3 id="simplifying-the-code">Simplifying the code</h3>


<p>In all the previous demos, we always define the <code>--size</code> and <code>--p</code> independently. But do you recall how I mentioned earlier that the online generator evaluates <code>P</code> as equal to <code>m*S</code>, where <code>m</code> controls the curvature of the wave? By defining a fixed multiplier, we can work with one particular wave and the code can become easier. This is what we will need in most cases: a specific wavy shape and a variable to control its size.</p>



<p>Let’s update our code and introduce the <code>m</code> variable:</p>



<pre rel="CSS" class="wp-block-csstricks-code-block language-css" data-line=""><code markup="tt">.wave {
  --size: 50px;
  --R: calc(var(--size) * sqrt(var(--m) * var(--m) + 1));

  mask:
    radial-gradient(var(--R) at 50% calc(var(--size) * (1 + var(--m))), #000 99%, #0000 101%)
      calc(50% - 2*var(--size)) 0/calc(4 * var(--size)) 100%,
    radial-gradient(var(--R) at 50% calc(-1 * var(--size) * var(--m)), #0000 99%, #000 101%)
      50% var(--size) / calc(4 * var(--size)) 100% repeat-x;
  }</code></pre>



<p>As you can see, we no longer need the <code>--p</code> variable. I replaced it with <code>var(--m)*var(--size)</code>, and optimized some of the math accordingly. Now, If we want to work with a particular wavy shape, we can omit the <code>--m</code> variable and replace it with a fixed value. Let’s try <code>.8</code> for example.</p>



<pre rel="CSS" class="wp-block-csstricks-code-block language-css" data-line=""><code markup="tt">--size: 50px;
--R: calc(var(--size) * 1.28);

mask:
  radial-gradient(var(--R) at 50% calc(1.8 * var(--size)), #000 99%, #0000 101%)
    calc(50% - 2*var(--size)) 0/calc(4 * var(--size)) 100%,
  radial-gradient(var(--R) at 50% calc(-.8 * var(--size)), #0000 99%, #000 101%)
    50% var(--size) / calc(4 * var(--size)) 100% repeat-x;</code></pre>



<p>See how the code is easier now? Only one variable to control your wave, plus you no more need to rely on <code>sqrt()</code> which has no browser support!</p>



<div class="wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper"><iframe id="cp_embed_RwyNVOr/0b27ef8345b29e1a441a589660a27113" src="//codepen.io/anon/embed/preview/RwyNVOr/0b27ef8345b29e1a441a589660a27113?height=600&amp;theme-id=1&amp;slug-hash=RwyNVOr/0b27ef8345b29e1a441a589660a27113&amp;default-tab=result" height="600" scrolling="no" frameborder="0" allowfullscreen allowpaymentrequest name="CodePen Embed RwyNVOr/0b27ef8345b29e1a441a589660a27113" title="CodePen Embed RwyNVOr/0b27ef8345b29e1a441a589660a27113" class="cp_embed_iframe" style="width:100%;overflow:hidden">CodePen Embed Fallback</iframe></div>



<p>You can apply the same logic to all the demos we saw even for the wavy lines and the pattern. I started with a detailed mathmatical explanation and gave the generic code, but you may find yourself needing easier code in a real use case. This is what I am doing all the time. I rarely use the generic code, but I always consider a simplified version especially that, in most of the cases, I am using some known values that don’t need to be stored as variables. (<strong>Spoiler alert:</strong> I will be sharing a few examples at the end!)</p>


<h3 id="limitations-to-this-approach">Limitations to this approach</h3>


<p>Mathematically, the code we made should give us perfect wavy shapes and patterns, but in reality, we will face some strange results. So, yes, this method has its limitations. For example, the online generator is capable of producing poor results, especially with wavy lines. Part of the issue is due to a particular combination of values where the result gets scrambled, like using a big value for the border thickness compared to the size:</p>



<figure class="wp-block-image size-full"><img loading="lazy" width="797" height="329" src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661813355000_image.png?resize=797%2C329&#038;ssl=1" alt="" class="wp-image-373419" srcset="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661813355000_image.png?w=797&amp;ssl=1 797w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661813355000_image.png?resize=300%2C124&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661813355000_image.png?resize=768%2C317&amp;ssl=1 768w" sizes="(min-width: 735px) 864px, 96vw" data-recalc-dims="1" /></figure>



<p>For the other cases, it’s the issue related to some rounding that will results in misalignment and gaps between the waves:</p>



<figure class="wp-block-image size-full"><img loading="lazy" width="898" height="435" src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661813585840_image.png?resize=898%2C435&#038;ssl=1" alt="" class="wp-image-373420" srcset="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661813585840_image.png?w=898&amp;ssl=1 898w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661813585840_image.png?resize=300%2C145&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_D930F8BF9DD02D28A0A37A10F2263CBE66B755F885F6F3DBE7C1C17A3128CE11_1661813585840_image.png?resize=768%2C372&amp;ssl=1 768w" sizes="(min-width: 735px) 864px, 96vw" data-recalc-dims="1" /></figure>



<p>That said, I still think the method we covered remains a good one because it produces smooth waves in most cases, and we can easily avoid the bad results by playing with different values until we get it perfect.</p>


<h3 id="wrapping-up">Wrapping up</h3>


<p>I hope that after this article, you will no more to fumble around with trial and error to build a wavy shape or pattern. In addition <a href="https://css-generators.com/wavy-shapes/" rel="noopener">to the online generator</a>, you have all the math secrets behind creating any kind of wave you want!</p>



<p>The article ends here but now you have a powerful tool to create fancy designs that use wavy shapes. Here’s inspiration to get you started…</p>



<div class="wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper"><iframe id="cp_embed_WNdPPEO" src="//codepen.io/anon/embed/preview/WNdPPEO?height=450&amp;theme-id=1&amp;slug-hash=WNdPPEO&amp;default-tab=result" height="450" scrolling="no" frameborder="0" allowfullscreen allowpaymentrequest name="CodePen Embed WNdPPEO" title="CodePen Embed WNdPPEO" class="cp_embed_iframe" style="width:100%;overflow:hidden">CodePen Embed Fallback</iframe></div>



<div class="wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper"><iframe id="cp_embed_vYddpzK" src="//codepen.io/anon/embed/preview/vYddpzK?height=450&amp;theme-id=1&amp;slug-hash=vYddpzK&amp;default-tab=result" height="450" scrolling="no" frameborder="0" allowfullscreen allowpaymentrequest name="CodePen Embed vYddpzK" title="CodePen Embed vYddpzK" class="cp_embed_iframe" style="width:100%;overflow:hidden">CodePen Embed Fallback</iframe></div>



<div class="wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper"><iframe id="cp_embed_BaYaKJx" src="//codepen.io/anon/embed/preview/BaYaKJx?height=450&amp;theme-id=1&amp;slug-hash=BaYaKJx&amp;default-tab=result" height="450" scrolling="no" frameborder="0" allowfullscreen allowpaymentrequest name="CodePen Embed BaYaKJx" title="CodePen Embed BaYaKJx" class="cp_embed_iframe" style="width:100%;overflow:hidden">CodePen Embed Fallback</iframe></div>



<div class="wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper"><iframe id="cp_embed_JjvXzNL" src="//codepen.io/anon/embed/preview/JjvXzNL?height=450&amp;theme-id=1&amp;slug-hash=JjvXzNL&amp;default-tab=result" height="450" scrolling="no" frameborder="0" allowfullscreen allowpaymentrequest name="CodePen Embed JjvXzNL" title="CodePen Embed JjvXzNL" class="cp_embed_iframe" style="width:100%;overflow:hidden">CodePen Embed Fallback</iframe></div>



<div class="wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper"><iframe id="cp_embed_yLjBYRY" src="//codepen.io/anon/embed/preview/yLjBYRY?height=450&amp;theme-id=1&amp;slug-hash=yLjBYRY&amp;default-tab=result" height="450" scrolling="no" frameborder="0" allowfullscreen allowpaymentrequest name="CodePen Embed yLjBYRY" title="CodePen Embed yLjBYRY" class="cp_embed_iframe" style="width:100%;overflow:hidden">CodePen Embed Fallback</iframe></div>



<div class="wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper"><iframe id="cp_embed_QWrwNBM" src="//codepen.io/anon/embed/preview/QWrwNBM?height=450&amp;theme-id=1&amp;slug-hash=QWrwNBM&amp;default-tab=result" height="450" scrolling="no" frameborder="0" allowfullscreen allowpaymentrequest name="CodePen Embed QWrwNBM" title="CodePen Embed QWrwNBM" class="cp_embed_iframe" style="width:100%;overflow:hidden">CodePen Embed Fallback</iframe></div>



<div class="wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper"><iframe id="cp_embed_rNvLjmy" src="//codepen.io/anon/embed/preview/rNvLjmy?height=450&amp;theme-id=1&amp;slug-hash=rNvLjmy&amp;default-tab=result" height="450" scrolling="no" frameborder="0" allowfullscreen allowpaymentrequest name="CodePen Embed rNvLjmy" title="CodePen Embed rNvLjmy" class="cp_embed_iframe" style="width:100%;overflow:hidden">CodePen Embed Fallback</iframe></div>



<div class="wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper"><iframe id="cp_embed_ExLyQgx" src="//codepen.io/anon/embed/preview/ExLyQgx?height=450&amp;theme-id=1&amp;slug-hash=ExLyQgx&amp;default-tab=result" height="450" scrolling="no" frameborder="0" allowfullscreen allowpaymentrequest name="CodePen Embed ExLyQgx" title="CodePen Embed ExLyQgx" class="cp_embed_iframe" style="width:100%;overflow:hidden">CodePen Embed Fallback</iframe></div>



<p>What about you? Use my online generator (or write the code manually if you already learned all the math by heart) and show me your creations! Let’s have a good collection in the comment section.</p>
<hr />
<p><small><a rel="nofollow" href="https://css-tricks.com/how-to-create-wavy-shapes-patterns-in-css/">How to Create Wavy Shapes &amp; Patterns in CSS</a> originally published on <a rel="nofollow" href="https://css-tricks.com">CSS-Tricks</a>, which is part of the <a href="https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=">DigitalOcean</a> family. You should <a href="https://css-tricks.com/newsletters/">get the newsletter</a>.</p>
]]></content:encoded>

      <wfw:commentRss>https://css-tricks.com/how-to-create-wavy-shapes-patterns-in-css/feed/
      </wfw:commentRss>
      <slash:comments>0</slash:comments>


      <post-id xmlns="com-wordpress:feed-additions:1">373403</post-id>
    </item>
    <item>
      <title>How To Customize WordPress Block Theme Cover Templates with Dynamic Post Feature
        Images
      </title>
      <link>
        https://css-tricks.com/how-to-customize-wordpress-block-theme-cover-templates-with-dynamic-post-feature-images/
      </link>
      <comments>
        https://css-tricks.com/how-to-customize-wordpress-block-theme-cover-templates-with-dynamic-post-feature-images/#comments
      </comments>

      <dc:creator><![CDATA[Ganesh Dahal]]></dc:creator>
      <pubDate>Fri, 23 Sep 2022 16:15:19 +0000</pubDate>
      <category><![CDATA[Article]]></category>
      <category><![CDATA[WordPress]]></category>
      <guid isPermaLink="false">https://css-tricks.com/?p=373057</guid>

      <description><![CDATA[<p>If we browse the <a href="https://wordpress.org/themes/" rel="noopener">WordPress theme directory</a>, a majority of themes showcase cover images. It is a feature in popular demand. The cover page trend is true even in the <a href="https://wordpress.org/themes/" rel="noopener">block theme directory</a> screenshots as well.</p>
<p>Let’s consider the &#8230;</p>
<hr />
<p><small><a rel="nofollow" href="https://css-tricks.com/how-to-customize-wordpress-block-theme-cover-templates-with-dynamic-post-feature-images/">How To Customize WordPress Block Theme Cover Templates with Dynamic Post Feature Images</a> originally published on <a rel="nofollow" href="https://css-tricks.com">CSS-Tricks</a>, which is part of the <a href="https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=">DigitalOcean</a> family. You should <a href="https://css-tricks.com/newsletters/">get the newsletter</a>.</p>
]]></description>
      <content:encoded><![CDATA[
<p>If we browse the <a href="https://wordpress.org/themes/" rel="noopener">WordPress theme directory</a>, a majority of themes showcase cover images. It is a feature in popular demand. The cover page trend is true even in the <a href="https://wordpress.org/themes/" rel="noopener">block theme directory</a> screenshots as well.</p>



<p>Let’s consider the following example from <a href="https://github.com/WordPress/twentytwenty" rel="noopener">Twenty Twenty</a>&nbsp;(a classic theme) which includes a <a href="https://github.com/WordPress/twentytwenty/blob/master/templates/template-cover.php" rel="noopener">cover template</a>&nbsp;that can be used to display both in single post and page, where the post’s featured image displays at the top that stretches across the browser screen, with post title and other desired meta data below. Cover templates allow creating content that stands out from the traditional constraints of displaying content.</p>



<figure class="wp-block-image size-full"><img loading="lazy" width="867" height="547" src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-coverpage-2020.jpg?resize=867%2C547&#038;ssl=1" alt="" class="wp-image-373270" srcset="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-coverpage-2020.jpg?w=867&amp;ssl=1 867w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-coverpage-2020.jpg?resize=300%2C189&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-coverpage-2020.jpg?resize=768%2C485&amp;ssl=1 768w" sizes="(min-width: 735px) 864px, 96vw" data-recalc-dims="1" /><figcaption><em>Screenshot showing a single post with Twenty Twenty cover template</em>.</figcaption></figure>



<p>Creating cover templates currently requires writing PHP code as captured here in the <a href="https://github.com/WordPress/twentytwenty/blob/master/template-parts/content-cover.php" rel="noopener">Twenty Twenty default theme’s cover template</a>. If we look at the <code>template-parts/content-cover.php</code>&nbsp;file, it contains the <a href="https://github.com/WordPress/twentytwenty/blob/master/templates/template-cover.php" rel="noopener">code</a>&nbsp;for displaying content when the <code>cover-template</code>&nbsp;is used.</p>



<p>Thus, it is not possible to create a customized cover page if you do not possess a deep knowledge of PHP. For many ordinary WordPress users, the only option is to use plugin like <a href="https://wordpress.org/plugins/custom-post-type-ui/" rel="noopener">Custom Post Type UI</a>&nbsp;as described in <a href="https://www.youtube.com/watch?v=XBmjW2aqBFk" rel="noopener">this short video</a>.</p>



<span id="more-373057"></span>


<h3 id="cover-sections-in-block-themes">Cover sections in block themes</h3>


<p>Since <a href="https://wordpress.org/news/2021/07/tatum/" rel="noopener">WordPress 5.8</a>, theme authors could create custom templates (like single post, author, category, and others) with a top hero section using <a href="https://developer.wordpress.org/block-editor/" rel="noopener">block editor</a>&nbsp;cover block and bundled into their themes with minimal or no code.</p>



<p>Before diving into how top large cover sections are created in block themes templates, let’s briefly look at the two block themes <a href="https://wordpress.org/themes/twentytwentytwo/" rel="noopener">Twenty Twenty-Two</a>&nbsp;and <a href="https://wordpress.org/themes/wabi/" rel="noopener">Wabi</a>&nbsp;by Rich Tabor (full review <a href="https://wptavern.com/unearthing-hidden-treasures-in-the-wabi-wordpress-block-theme" rel="noopener">here</a>).</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="1024" height="390" src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-2020-wabi.jpg?resize=1024%2C390&#038;ssl=1" alt="" class="wp-image-373271" srcset="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-2020-wabi-scaled.jpg?resize=1024%2C390&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-2020-wabi-scaled.jpg?resize=300%2C114&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-2020-wabi-scaled.jpg?resize=768%2C293&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-2020-wabi-scaled.jpg?resize=1536%2C585&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-2020-wabi-scaled.jpg?resize=2048%2C780&amp;ssl=1 2048w" sizes="(min-width: 735px) 864px, 96vw" data-recalc-dims="1" /><figcaption><em>Screenshot showing cover page thumbnails of Twenty Twenty-Two (left) and Wabi (right) themes.</em></figcaption></figure>



<p>Behind-the-scenes, Twenty Twenty-Two implements a large header by <a href="https://themes.trac.wordpress.org/browser/twentytwentytwo/1.2/inc/patterns/hidden-bird.php" rel="noopener">adding a hidden image stored as a pattern</a>&nbsp;in the <a href="https://themes.trac.wordpress.org/browser/twentytwentytwo/1.2/parts/header-large-dark.html" rel="noopener"><code>header-dark-large</code></a>&nbsp;parts. Whereas, in the Wabi theme, the large header background color in a single post is implemented with <a href="https://themes.trac.wordpress.org/browser/wabi/1.0.4/templates/single.html" rel="noopener">accent background colors and a 50px height spacer block</a>&nbsp;(lines: 5-9). The accent colors are managed by the <a href="https://themes.trac.wordpress.org/browser/wabi/1.0.4/assets/js/accent-color.js" rel="noopener"><code>assets/js/accent-colors.js</code></a>&nbsp;file.</p>



<p>Many others chose to create a top cover section by using <a href="https://wordpress.org/support/article/cover-block/" rel="noopener">cover block</a>, which allowed users to change the background color and add a static image from Media Library or upload from media devices &#8211; without writing any code. With this approach, images from the <a href="https://make.wordpress.org/core/2022/04/14/whats-new-in-gutenberg-13-0-14-april/#highlight-2" rel="noopener">post featured image block</a>&nbsp;had to be added manually to each single post if you wanted to have the post featured image as the background image in single posts.</p>


<h3 id="cover-blocks-with-dynamic-post-featured-image">Cover Blocks with dynamic post featured image</h3>


<p>WordPress 6.0 made available another cool <a href="https://make.wordpress.org/core/2022/04/14/whats-new-in-gutenberg-13-0-14-april/#highlight-2" rel="noopener">featured image cover blocks</a>&nbsp;feature, which allows use of the featured image of any post or page as the background image in the cover block.</p>



<p>In the following <a href="https://www.youtube.com/watch?v=2-1kwfDzZXg" rel="noopener">short video</a>, Automattic engineers discuss adding featured images to cover blocks with an example from <a href="https://github.com/Automattic/themes/tree/trunk/archeo" rel="noopener">Archeo</a>&nbsp;theme:</p>



<figure class="wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio"><div class="wp-block-embed__wrapper">
<iframe loading="lazy" title="Using the Post Featured Image with the Cover Block" width="500" height="281" src="https://www.youtube.com/embed/2-1kwfDzZXg?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
</div></figure>



<p>The image block including post featured image block can be further customized using <code><a href="https://developer.wordpress.org/block-editor/how-to-guides/themes/theme-json/#presets" rel="noopener">duotone</a></code>&nbsp;color in <code>theme.json</code>&nbsp;as discussed in this short <a href="https://www.youtube.com/watch?v=YPU-sT96f2g" rel="noopener">Connecting The Dots</a>&nbsp;YouTube video (Automattic’s Anne McCarthy).</p>



<p><strong>Use case examples (Wei,</strong> <strong>Bright Mode)</strong></p>



<p>If we browse the thumbnail images in the <a href="https://wordpress.org/themes/tags/full-site-editing/" rel="noopener">block theme directory</a>, we see a majority of them include large cover header sections. If we dig into their template files, they make use of cover blocks with static image background.</p>



<p>Some recently developed themes are using cover blocks with the dynamic post featured image background (e.g., Archeo, Wei, Frost, Bright Mode, etc.). A brief overview of the new feature is available in <a href="https://github.com/WordPress/gutenberg/pull/39658#issuecomment-1117870716" rel="noopener">this short GitHub video</a>.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="1024" height="412" src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-wei-brightmode.jpg?resize=1024%2C412&#038;ssl=1" alt="" class="wp-image-373272" srcset="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-wei-brightmode-scaled.jpg?resize=1024%2C412&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-wei-brightmode-scaled.jpg?resize=300%2C121&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-wei-brightmode-scaled.jpg?resize=768%2C309&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-wei-brightmode-scaled.jpg?resize=1536%2C618&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-wei-brightmode-scaled.jpg?resize=2048%2C824&amp;ssl=1 2048w" sizes="(min-width: 735px) 864px, 96vw" data-recalc-dims="1" /><figcaption><em>Screenshot showing cover page thumbnails of Wei (left) and Bright-mode (right) themes.</em></figcaption></figure>



<p>Combining dynamic accent colors features of <a href="https://wptavern.com/unearthing-hidden-treasures-in-the-wabi-wordpress-block-theme" rel="noopener">Wabi</a>&nbsp;theme with cover and post featured image blocks, Rich Tabor further expands his creativity in his new <a href="https://wordpress.org/themes/wei/" rel="noopener">Wei</a>&nbsp;theme (full review available <a href="https://wptavern.com/wei-a-free-minimalist-wordpress-theme-from-rich-tabor" rel="noopener">here</a>) to display dynamic cover images from a single post.</p>



<p>In his Wei announcement post, <a href="https://richtabor.com/wei/" rel="noopener">Rich Tabor writes</a>:&nbsp;“Behind-the-scenes, the <code>single.html</code>&nbsp;template is using a Cover block that leverages the post’s featured image. Then the duotone is applied by the color scheme assigned to the post. This way, just about any image will look fine”.</p>



<p class="is-style-explanation">If you would like to dig deeper into the Wei theme&#8217;s header cover block and learn how to create your own, here is a <a href="https://www.youtube.com/watch?v=DGH9AMYzyrg&amp;t=1s" rel="noopener">short video</a>&nbsp;from <a href="https://twitter.com/fklux" rel="noopener">Fränk Klein</a>&nbsp;(WP Development Courses) who explains step-by-step how it was created.</p>



<p>Similar to the Wei theme, <a href="https://briangardner.com/" rel="noopener">Brian Gardner</a>&nbsp;also makes use of cover block with post featured image block in his recent <a href="https://wordpress.org/themes/bright-mode/" rel="noopener">Bright Mode</a>&nbsp;theme to display standout contents with <a href="https://bg.design/bright-mode/styles/" rel="noopener">vibrant colors</a>.</p>



<p><a href="https://wptavern.com/bright-mode-a-new-block-theme-with-vibrant-colors-patterns-and-custom-block-styles" rel="noopener">Brian told WPTavern</a>: “he loves most about the theme is the way the Cover Block is used on <a href="https://bg.design/bright-mode/showcase/" rel="noopener">single pages</a>. It pulls the featured image into the Cover block and also offers custom block styles for shadows and full-height options. [&#8230;] I feel as though this really presents what’s possible with modern WordPress.”</p>



<p class="is-style-explanation">For more detail, here is its <a href="https://bg.design/bright-mode/" rel="noopener">demo site</a>&nbsp;and <a href="https://wptavern.com/bright-mode-a-new-block-theme-with-vibrant-colors-patterns-and-custom-block-styles" rel="noopener">full review of Brian’s Bright Mode theme</a>.</p>


<h3 id="designing-complex-layouts-with-block-editor">Designing complex layouts with block editor</h3>


<p>Recently, WordPress launched a new block editor designed <a href="https://wordpress.org/" rel="noopener">landing homepage</a> and a <a href="https://wordpress.org/download/" rel="noopener">download page</a>. The announcement <a href="https://wptavern.com/wordpress-launches-new-homepage-and-download-page-designs" rel="noopener">attracted mixed reactions</a> from its readers, including from <a href="https://profiles.wordpress.org/matt/" rel="noopener">Matt Mullenweg</a> (Automattic) who commented on the 33-days taken to design and launch such a &#8220;simple page&#8221;. You can find <a href="https://make.wordpress.org/meta/2022/08/01/developing-the-redesigned-home-and-download-pages/#comment-936" rel="noopener">additional behind the scene discussions here</a>.</p>



<p>In response, Jamie Marsland of Pootlepress created <a href="https://www.youtube.com/watch?v=mRrrYGpz9Qo" rel="noopener">this YouTube video</a> where he reproduces a nearly identical homepage in nearly 20 minutes.</p>



<p>Commenting on Marsland video, <a href="https://wptavern.com/jamie-marsland-recreates-wordpress-org-homepage-in-20-minutes-using-the-block-editor" rel="noopener">Sarah Gooding of WP Travern writes</a>: &#8220;He is what one might describe as a power user with the block editor. He can quickly shuffle rows, columns, and groups around, adjusting padding and margins as necessary, and assign each section the corresponding color for the design. At this point, this is not something most average WordPress users could do.&#8221;</p>



<p>Though the block editor has come a long way, there are still growing pain points to most theme developers and ordinary users to create and design complex layouts with it.</p>


<h2 id="adding-enhancement-to-tt2-gopher-blocks">Adding enhancement to TT2 Gopher blocks</h2>


<p>In this section, I will walk you through how I added enhancements to the <a href="https://github.com/tinjure20/TT2-gopher-blocks" rel="noopener">TT2 Gopher Blocks theme</a>&nbsp;that I referenced in my previous article. Inspired by cover blocks from themes that I described earlier, I wanted to add three cover templates (author, category, and single-cover) to the theme.</p>



<p>While browsing websites, we notice two types of cover headers. The mostly observed header is cover section blended with the site header (site title and top navigation) into the cover block (e.g., Twenty Twenty, Twenty Twenty-Two, Wei, Wabi, Frost, Bright Mode, etc.). We also find header cover section which is not blended with site header and positioned just underneath, such as this <a href="https://www.bbc.com/future" rel="noopener">BBC Future</a>&nbsp;website. For TT2 Gopher blocks theme, I opted for the latter.</p>


<h3 id="creating-cover-header-patterns">Creating cover header patterns</h3>


<p>First, let’s create cover header patterns for author, single, and others (categories, tags) templates using cover blocks. Then we will convert them into patterns (as described <a href="https://css-tricks.com/how-to-create-block-theme-patterns-in-wordpress-6-0/#aa-section-2-creating-and-loading-patterns-without-registration">here previously</a>) and call the respective header cover patterns into the templates.</p>



<p>If you are familiar to working with the block editor, design your header section using cover blocks in the site editor and then convert the cover header code into patterns. However, if you are not familiar with FSE editor, then the easiest way is to copy patterns from the <a href="https://wordpress.org/patterns/" rel="noopener">patterns directory</a>&nbsp;in a post, make necessary modification and convert it into a pattern.</p>



<p>In my <a href="https://css-tricks.com/how-to-create-block-theme-patterns-in-wordpress-6-0/#aa-section-3-creating-and-using-patterns-with-low-code">previous CSS-Tricks article</a>, I discussed in detail on creating and using block patterns. Here is a brief overview of the workflow that I am using to create the single post cover header pattern:</p>



<p><em><strong>Single post cover header pattern</strong></em></p>



<p><em>Step 1</em>: Using FSE interface, let&#8217;s create a new blank file and start building block structure as shown on the left panel.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="1024" height="444" src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-header-cover-single.jpg?resize=1024%2C444&#038;ssl=1" alt="" class="wp-image-373274" srcset="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-header-cover-single.jpg?resize=1024%2C444&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-header-cover-single.jpg?resize=300%2C130&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-header-cover-single.jpg?resize=768%2C333&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-header-cover-single.jpg?resize=1536%2C667&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-header-cover-single.jpg?w=2000&amp;ssl=1 2000w" sizes="(min-width: 735px) 864px, 96vw" data-recalc-dims="1" /><figcaption>Screenshot of the WordPress UI with the Full Site Editor. A block is being assembled with post date, categories, and post title.</figcaption></figure>



<p>Alternatively, this could be done in a post or page first, and then copy and paste the markup into a pattern file, later.</p>



<p><em>Step 2</em>: Next, to covert the above markup into a pattern, first we should copy its code markup and paste into a new <code>/patterns/header-single-cover.php</code>&nbsp;in our code editor. We should also add required pattern file header markup (e.g., title, slug, categories, inserter, etc.).</p>



<p>Here is the entire code of the <code>/patterns/header-single-cover.php</code>&nbsp;file:</p>



<pre rel="PHP" class="wp-block-csstricks-code-block language-javascript" data-line="10"><code markup="tt">&lt;?php
    /**
     * Title: Header cover single
     * Slug: tt2gopher/header-cover-single
     * Categories: tt2gopher-header
     * Block Types: core/template-part/header
     * inserter: yes
     */
?>
    &lt;!-- wp:cover {"url":"https://pd.w.org/2022/08/15062ed5f5707b5c5.85694718-2048x1536.jpg","id":100,"dimRatio":0,"overlayColor":"foreground","focalPoint":{"x":"0.40","y":"0.37"},"minHeight":50,"minHeightUnit":"vh","isDark":false,"align":"full","style":{"color":{"duotone":["#000000","#00a5ff"]},"spacing":{"margin":{"top":"0px","bottom":"0px"}}}} -->
    &lt;div class="wp-block-cover alignfull is-light" style="margin-top:0px;margin-bottom:0px;min-height:50vh">&lt;span aria-hidden="true" class="wp-block-cover__background has-foreground-background-color has-background-dim-0 has-background-dim">&lt;/span>&lt;img class="wp-block-cover__image-background wp-image-100" alt="" src="https://pd.w.org/2022/08/15062ed5f5707b5c5.85694718-2048x1536.jpg" style="object-position:40% 37%" data-object-fit="cover" data-object-position="40% 37%"/>&lt;div class="wp-block-cover__inner-container">&lt;!-- wp:group {"style":{"elements":{"link":{"color":{"text":"var:preset|color|base"}}},"spacing":{"blockGap":"10px"}},"textColor":"base","layout":{"wideSize":"800px"}} -->
    &lt;div class="wp-block-group has-base-color has-text-color has-link-color">&lt;!-- wp:group {"style":{"spacing":{"blockGap":"10px"}},"textColor":"primary","layout":{"type":"flex","flexWrap":"nowrap","justifyContent":"center"},"fontSize":"small"} -->
    &lt;div class="wp-block-group has-primary-color has-text-color has-small-font-size">&lt;!-- wp:post-date {"textColor":"foreground"} /-->

    &lt;!-- wp:paragraph -->
    &lt;p>|&lt;/p>
    &lt;!-- /wp:paragraph -->

    &lt;!-- wp:post-terms {"term":"category","style":{"elements":{"link":{"color":{"text":"var:preset|color|foreground"}}}}} /-->&lt;/div>
    &lt;!-- /wp:group -->

    &lt;!-- wp:post-title {"textAlign":"center","level":1,"style":{"typography":{"fontStyle":"normal","fontWeight":"400"}},"textColor":"foreground","fontSize":"max-60"} /-->&lt;/div>
    &lt;!-- /wp:group -->&lt;/div>&lt;/div>
    &lt;!-- /wp:cover --></code></pre>



<p><em>Step 3</em>: For this demo, I have used <a href="https://wordpress.org/photos/photo/15062ed5f5/" rel="noopener">this image from photos directory</a>&nbsp;as a filler background image, and applied the <em>Midnight</em>&nbsp;duotone color. To use post featured image dynamically, we should add <code>"useFeaturedImage":true</code>&nbsp;in the cover block by replacing the above filler image link just before the <code>"dimRatio":50</code>&nbsp;such that the line 10 should look like the following:</p>



<pre rel="HTML" class="wp-block-csstricks-code-block language-markup" data-line=""><code markup="tt">&lt;!-- wp:cover {"useFeaturedImage":true,"dimRatio":0,"overlayColor":"foreground","focalPoint":{"x":"0.40","y":"0.37"},"minHeight":50,"minHeightUnit":"vh","isDark":false,"align":"full","style":{"color":{"duotone":["#000000","#00a5ff"]},"spacing":{"margin":{"top":"0px","bottom":"0px"}}}} --></code></pre>



<p>Alternatively, the filler image could also be changed by clicking <strong>Replace</strong> and selecting <strong>Use featured image</strong> option:</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="1024" height="247" src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-cover-replace-image.jpg?resize=1024%2C247&#038;ssl=1" alt="" class="wp-image-373273" srcset="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-cover-replace-image.jpg?resize=1024%2C247&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-cover-replace-image.jpg?resize=300%2C72&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-cover-replace-image.jpg?resize=768%2C185&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-cover-replace-image.jpg?resize=1536%2C371&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-cover-replace-image.jpg?w=1600&amp;ssl=1 1600w" sizes="(min-width: 735px) 864px, 96vw" data-recalc-dims="1" /><figcaption>Screenshot of the WordPress UI with &#8216;Replace&#8217; and &#8216;Use featured image&#8217; selected.</figcaption></figure>



<p>Now, the header cover patterns should be visible in the patterns inserter panel for use anywhere in the templates, posts, and pages.</p>



<p><em><strong>Archive cover headers</strong></em></p>



<p>Inspired by <a href="https://wptavern.com/fse-outreach-13-building-an-author-template-from-the-wordpress-site-editor" rel="noopener">this WP Tavern post</a>&nbsp;and a step-by-step walkthrough to create an author template header, I wanted to create a similar cover header and add to TT2 Gopher theme, too.</p>



<p>First, let’s create the archive cover header pattern for <code>author.html</code> the template as well, following the above workflow. In this case, I am creating this in a new blank page, by adding blocks (as shown below in list view):</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="1024" height="386" src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-header-author-cover.jpg?resize=1024%2C386&#038;ssl=1" alt="" class="wp-image-373275" srcset="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-header-author-cover.jpg?resize=1024%2C386&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-header-author-cover.jpg?resize=300%2C113&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-header-author-cover.jpg?resize=768%2C290&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-header-author-cover.jpg?resize=1536%2C580&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-header-author-cover.jpg?resize=2048%2C773&amp;ssl=1 2048w" sizes="(min-width: 735px) 864px, 96vw" data-recalc-dims="1" /><figcaption>Screenshot of the WordPress UI for an Author page using a single post header cover.</figcaption></figure>



<p>In the background for the cover, I used the same image used in the single post header cover.</p>



<p>Because we would like to display a short author biography on the author block, a biographical statement should also be added to the user profile page, or else a blank space will be displayed in the front-end.</p>



<p>The following is the markup code of the <code>header-author-cover</code>, that we will use pattern, in the next step:</p>



<pre rel="HTML" class="wp-block-csstricks-code-block language-markup" data-line=""><code markup="tt">    &lt;!-- wp:cover {"url":"https://pd.w.org/2022/03/8256241eff74ef542.61868565.jpeg","id":226,"dimRatio":10,"focalPoint":{"x":"0.50","y":"0.75"},"minHeight":200,"minHeightUnit":"px","isDark":false,"align":"full","style":{"color":{"duotone":["#000000","#00a5ff"]}}} -->
    &lt;div class="wp-block-cover alignfull is-light" style="min-height:200px">&lt;span aria-hidden="true" class="wp-block-cover__background has-background-dim-10 has-background-dim">&lt;/span>&lt;img class="wp-block-cover__image-background wp-image-226" alt="" src="https://pd.w.org/2022/03/8256241eff74ef542.61868565.jpeg" style="object-position:50% 75%" data-object-fit="cover" data-object-position="50% 75%"/>&lt;div class="wp-block-cover__inner-container">&lt;!-- wp:group {"layout":{"inherit":true}} -->
    &lt;div class="wp-block-group">&lt;!-- wp:group {"style":{"spacing":{"padding":{"top":"1rem","right":"2rem","bottom":"1rem","left":"2rem"}}},"layout":{"type":"flex","flexWrap":"nowrap"}} -->
    &lt;div class="wp-block-group" style="padding-top:1rem;padding-right:2rem;padding-bottom:1rem;padding-left:2rem">&lt;!-- wp:avatar {"size":70,"isLink":true,"align":"right","style":{"border":{"radius":"9999px"}}} /-->

    &lt;!-- wp:group -->
    &lt;div class="wp-block-group">&lt;!-- wp:group {"style":{"spacing":{"blockGap":"6px"}},"layout":{"type":"flex"},"fontSize":"large"} -->
    &lt;div class="wp-block-group has-large-font-size">&lt;!-- wp:paragraph {"textColor":"foreground","fontSize":"large"} -->
    &lt;p class="has-foreground-color has-text-color has-large-font-size">Published by:&lt;/p>
    &lt;!-- /wp:paragraph -->

    &lt;!-- wp:post-author-name {"isLink":true,"style":{"typography":{"fontStyle":"large","fontWeight":"600"},"elements":{"link":{"color":{"text":"var:preset|color|background"}}}},"textColor":"foreground"} /-->&lt;/div>
    &lt;!-- /wp:group -->

    &lt;!-- wp:post-author-biography {"textColor":"foreground","fontSize":"small"} /-->

    &lt;!-- wp:separator {"backgroundColor":"foreground"} -->
    &lt;hr class="wp-block-separator has-text-color has-foreground-color has-alpha-channel-opacity has-foreground-background-color has-background"/>
    &lt;!-- /wp:separator -->&lt;/div>
    &lt;!-- /wp:group -->&lt;/div>
    &lt;!-- /wp:group -->&lt;/div>
    &lt;!-- /wp:group -->&lt;/div>&lt;/div>
    &lt;!-- /wp:cover --></code></pre>



<p>To covert the markup into a <code>header-author-cover</code>&nbsp;pattern, we should add the required pattern file header markup as described earlier. By editing the <code>header-author-cover.php</code>&nbsp;pattern, we can create similar header covers for tags, taxonomy, and other custom templates.</p>



<p class="is-style-explanation">The <a href="https://github.com/tinjure20/TT2-gopher-blocks/blob/Branch-1/templates/category.html" rel="noopener"><code>header-category-cover.php</code>&nbsp;pattern for my <code>category.html</code>&nbsp;template is available on GitHub</a>.</p>


<h3 id="creating-templates-with-header-cover-blocks">Creating Templates with header cover blocks</h3>


<p><a href="https://wordpress.org/news/2022/05/arturo/" rel="noopener">WordPress 6.0</a>&nbsp;and the recent <a href="https://make.wordpress.org/core/2022/07/20/whats-new-in-gutenberg-13-7-20-july/#templates" rel="noopener">Gutenberg 13.7</a>&nbsp;extended template creating features into the block editor, thus making it possible for many WordPress users, without deep knowledge of coding, to create their customized templates.</p>



<p>For more detailed information and use cases, here is a <a href="https://make.wordpress.org/core/2022/07/21/core-editor-improvement-deeper-customization-with-more-template-options/" rel="noopener">thorough customization note by Justin Tadlock</a>.</p>



<p><a href="https://wordpress.org/support/article/wordpress-editor/" rel="noopener">Block editor</a> allows creating various types of templates, including cover templates. Let&#8217;s briefly overview how combining <a href="https://wordpress.org/support/article/cover-block/" rel="noopener">cover block</a>&nbsp;and <a href="https://wordpress.org/support/article/post-featured-image-block/" rel="noopener">post featured image block</a>&nbsp;with new template UI makes easy to create various types of cover custom templates even with no or low coding skills.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="1024" height="653" src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-add-new-template.jpg?resize=1024%2C653&#038;ssl=1" alt="" class="wp-image-373276" srcset="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-add-new-template-scaled.jpg?resize=1024%2C653&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-add-new-template-scaled.jpg?resize=300%2C191&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-add-new-template-scaled.jpg?resize=768%2C490&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-add-new-template-scaled.jpg?resize=1536%2C980&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-add-new-template-scaled.jpg?resize=2048%2C1306&amp;ssl=1 2048w" sizes="(min-width: 735px) 864px, 96vw" data-recalc-dims="1" /><figcaption>Screenshot of the WordPress UI displaying available templates provided by TT2 Gopher Blocks &#8211; Single, Page, Index, Home, 404, Blank, and Archive.</figcaption></figure>



<p>Creating templates has been made much easier with Gutenberg 13.7. How to create block templates <a href="https://developer.wordpress.org/themes/block-themes/templates-and-template-parts/#how-to-create-templates-with-code" rel="noopener">with codes</a>&nbsp;and <a href="https://developer.wordpress.org/themes/block-themes/templates-and-template-parts/#how-to-create-templates-in-the-site-editor" rel="noopener">in site editor</a>&nbsp;is described in the&nbsp;<em>Theme handbook</em> and in <a href="https://css-tricks.com/a-deep-introduction-to-wordpress-block-themes/#aa-creating-templates-and-template-parts">my previous article</a>.</p>



<p><em><strong>Author template with cover block</strong></em></p>



<p>Top (header section) markup of the <code>author.html</code> template is shown below (line 6):</p>



<pre rel="HTML" class="wp-block-csstricks-code-block language-markup" data-line="6"><code markup="tt">    &lt;!-- wp:template-part {"slug":"header-small-dark","theme":"TT2-GOPHER-V2","tagName":"header"} /-->

    &lt;!-- wp:group {"tagName":"main","style":{"spacing":{"margin":{"top":"0","bottom":"0px"},"padding":{"bottom":"80px"},"blockGap":"0px"}},"className":"site-content"} -->
    &lt;main class="wp-block-group site-content" style="margin-top:0;margin-bottom:0px;padding-bottom:80px">

        &lt;!-- wp:pattern {"slug":"tt2gopher/header-author-cover"} /-->

    ...
    ...
    ...
    &lt;!-- /wp:group -->
    ...</code></pre>



<p>Here are screenshots of cover headers for the <code>author.html</code> and <code>category.html</code> templates:</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="1024" height="141" src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-archive-cover.jpg?resize=1024%2C141&#038;ssl=1" alt="" class="wp-image-373277" srcset="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-archive-cover-scaled.jpg?resize=1024%2C141&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-archive-cover-scaled.jpg?resize=300%2C41&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-archive-cover-scaled.jpg?resize=768%2C106&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-archive-cover-scaled.jpg?resize=1536%2C211&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-archive-cover-scaled.jpg?resize=2048%2C282&amp;ssl=1 2048w" sizes="(min-width: 735px) 864px, 96vw" data-recalc-dims="1" /><figcaption>Screenshot of Author Page header (left) with author name, avatar, and biography. And screenshot of Category Page header (right).</figcaption></figure>



<p class="is-style-explanation">The entire <a href="https://github.com/tinjure20/TT2-gopher-blocks/tree/Branch-1/templates" rel="noopener">code for both templates is available on GitHub</a>.</p>



<p><em><strong>Single post with cover block</strong></em></p>



<p>To display cover block in our single post, we have to call the <code>header-cover-single pattern</code>&nbsp;below the header section (line 3):</p>



<pre rel="HTML" class="wp-block-csstricks-code-block language-markup" data-line="3"><code markup="tt">    &lt;!-- wp:template-part {"slug":"header-small-dark","tagName":"header"} /-->

     &lt;!-- wp:pattern {"slug":"tt2gopher/header-cover-single"} /-->

    &lt;!-- wp:spacer {"height":32} -->
    &lt;div style="height:32px" aria-hidden="true" class="wp-block-spacer">&lt;/div>
    &lt;!-- /wp:spacer -->
    ....
    ....
    ....</code></pre>



<p>Here is a screen capture showing the front-end view of the single post with the header cover section:</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="1024" height="592" src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-single-post-with-cover.jpg?resize=1024%2C592&#038;ssl=1" alt="" class="wp-image-373278" srcset="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-single-post-with-cover.jpg?resize=1024%2C592&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-single-post-with-cover.jpg?resize=300%2C173&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-single-post-with-cover.jpg?resize=768%2C444&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-single-post-with-cover.jpg?resize=1536%2C888&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/wp-blocks-single-post-with-cover.jpg?w=2000&amp;ssl=1 2000w" sizes="(min-width: 735px) 864px, 96vw" data-recalc-dims="1" /><figcaption>Screenshot of TT2 Gopher Blocks Single Post with Header Cover Section Pattern.</figcaption></figure>



<p class="is-style-explanation">The entire <a href="https://github.com/tinjure20/TT2-gopher-blocks/blob/Branch-1/templates/single-cover.html" rel="noopener"><code>single-cover.html</code>&nbsp;template is available on GitHub</a>.</p>



<p>You can find additional step-by-step walkthrough tutorials on creating a <a href="https://wptavern.com/making-an-impression-how-to-build-a-post-hero-header-with-blocks" rel="noopener">hero header post section</a>&nbsp;and <a href="https://wptavern.com/featured-cover-blocks-and-the-future-of-binding-data-to-generic-wordpress-blocks" rel="noopener">using post featured image background cover blocks</a>&nbsp;on&nbsp;<em>WP Tavern</em>&nbsp;and <a href="https://fullsiteediting.com/" rel="noopener">Full Site Editing</a> website.</p>



<p>There you have it!</p>


<h3 id="helpful-resources">Helpful Resources</h3>

<h4 id="featured-image-cover-block">Featured image cover block</h4>


<ul><li><a href="https://wordpress.org/support/article/post-featured-image-block/" rel="noopener">Post Featured Image Block</a> (WordPress Support)</li><li><a href="https://www.youtube.com/watch?v=2-1kwfDzZXg" rel="noopener">Using the Post Featured Image with the Cover Block YouTube</a> (Dave on WP)</li><li><a href="https://wordpress.com/support/wordpress-editor/blocks/cover-block/" rel="noopener">Cover Block Step by Step tutorial</a> (WordPress Support)</li><li><a href="https://wptavern.com/featured-cover-blocks-and-the-future-of-binding-data-to-generic-wordpress-blocks" rel="noopener">Featured Cover Blocks and the Future of Binding Data to Generic WordPress Blocks</a> (WP Tavern)</li><li><a href="https://www.pootlepress.com/2021/11/custom-single-post-layouts-with-wordpress-gutenberg/" rel="noopener">Custom Single Post Layouts with WordPress Gutenberg</a> (Pootlepress)</li><li><a href="https://github.com/WordPress/gutenberg/pull/39658#event-6362139353" rel="noopener">Makes cover block dynamic and adds featured image binding #39658</a> (GitHub)</li></ul>


<h4 id="blog-posts">Blog posts</h4>


<ul><li><a href="https://wptavern.com/featured-cover-blocks-and-the-future-of-binding-data-to-generic-wordpress-blocks" rel="noopener">Featured Cover Blocks and the Future of Binding Data to Generic WordPress Blocks</a> (WPTavern)</li><li><a href="https://wptavern.com/making-an-impression-how-to-build-a-post-hero-header-with-blocks" rel="noopener">Making an Impression: How To Build a Post Hero Header With Blocks</a> (WPTavern)</li><li><a href="https://make.wordpress.org/core/2022/07/21/core-editor-improvement-deeper-customization-with-more-template-options/" rel="noopener">Core Editor Improvement: Deeper customization with more template options</a> (Make WordPress Core)</li></ul>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<p>Even though the block themes, in general, are <a href="https://wptavern.com/wordpress-themes-team-contributors-get-pushback-on-proposal-to-improve-block-themes-visibility-in-the-directory" rel="noopener">getting lots of pushback from WordPress community members</a>, in my opinion, <a href="https://richtabor.com/a-new-era/" rel="noopener">they are the future of WordPress</a>,&nbsp;too. With block themes, amateur theme authors, without the deep coding skills and mastery of PHP and JavaScript languages, can now create themes with complex layouts with a hero cover section as described in this article combined with <a href="https://css-tricks.com/how-to-create-block-theme-patterns-in-wordpress-6-0/">patterns</a>&nbsp;and <a href="https://css-tricks.com/creating-style-variations-in-wordpress-block-themes/">style variations</a>.</p>



<p>As an early Gutenberg user, I couldn’t be more excited with the new theming tools like <a href="https://wordpress.org/plugins/create-block-theme/" rel="noopener">create block theme</a>&nbsp;plugin and others which allow theme authors to achieve the following directly from block editor UI without writing any code:</p>



<ul><li>(i) <a href="https://github.com/WordPress/create-block-theme#create-block-theme" rel="noopener">create</a></li><li>(ii) overwrite theme files and export</li><li>(iii) generate blank or a child theme, and</li><li>(iv) modify and save style variation of the current theme</li></ul>



<p>Additionally, the recent iterations of the Gutenberg plugin allow enabling <a href="https://make.wordpress.org/core/2022/08/04/whats-new-in-gutenberg-13-8-3-august/#fluid-typography-support" rel="noopener">fluid typography</a> and <a href="https://gutenbergtimes.com/layouts-and-wide-alignments-in-wordpress-then-now-and-upcoming-changes/" rel="noopener">layout alignments</a>&nbsp;and other stylistic controls using only <code>theme.json</code>&nbsp;file without JavaScript and a line of CSS rules.</p>



<p>Thank you for reading and share your comments and thoughts below!</p>
<hr />
<p><small><a rel="nofollow" href="https://css-tricks.com/how-to-customize-wordpress-block-theme-cover-templates-with-dynamic-post-feature-images/">How To Customize WordPress Block Theme Cover Templates with Dynamic Post Feature Images</a> originally published on <a rel="nofollow" href="https://css-tricks.com">CSS-Tricks</a>, which is part of the <a href="https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=">DigitalOcean</a> family. You should <a href="https://css-tricks.com/newsletters/">get the newsletter</a>.</p>
]]></content:encoded>

      <wfw:commentRss>
        https://css-tricks.com/how-to-customize-wordpress-block-theme-cover-templates-with-dynamic-post-feature-images/feed/
      </wfw:commentRss>
      <slash:comments>1</slash:comments>


      <media:content url="https://www.youtube.com/embed/2-1kwfDzZXg" medium="video" width="1280"
        height="720">
        <media:player>https://www.youtube.com/embed/2-1kwfDzZXg</media:player>
        <media:title type="plain">Using the Post Featured Image with the Cover Block</media:title>
        <media:description type="html">
          <![CDATA[In this video I&#039;m joined by my colleague Ben Dwyer to discuss an upcoming Gutenberg feature which allows the featured image to be used within the Cover block...]]></media:description>
        <media:thumbnail
          url="https://css-tricks.com/wp-content/uploads/2022/08/maxresdefault-2.jpg"/>
        <media:rating scheme="urn:simple">nonadult</media:rating>
      </media:content>
      <post-id xmlns="com-wordpress:feed-additions:1">373057</post-id>
    </item>
    <item>
      <title>The Web is Good Now</title>
      <link>https://css-tricks.com/the-web-is-good-now/</link>
      <comments>https://css-tricks.com/the-web-is-good-now/#comments</comments>

      <dc:creator><![CDATA[Geoff Graham]]></dc:creator>
      <pubDate>Thu, 22 Sep 2022 22:07:22 +0000</pubDate>
      <category><![CDATA[Link]]></category>
      <category><![CDATA[conference]]></category>
      <category><![CDATA[talk]]></category>
      <guid isPermaLink="false">https://css-tricks.com/?p=373652</guid>

      <description><![CDATA[<p>The <a href="https://2022.cascadiajs.com/speakers/chris-coyier" rel="noopener">video</a> of Chris Coyier&#8217;s talk at <a href="https://2022.cascadiajs.com/" rel="noopener">CascadiaJS 2022</a> is now available. It&#8217;s his first in-person talk in more than two years, so it&#8217;s great to see our good friend back on stage slinging gems on what makes the web &#8230;</p>
<hr />
<p><small><a rel="nofollow" href="https://css-tricks.com/the-web-is-good-now/">The Web is Good Now</a> originally published on <a rel="nofollow" href="https://css-tricks.com">CSS-Tricks</a>, which is part of the <a href="https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=">DigitalOcean</a> family. You should <a href="https://css-tricks.com/newsletters/">get the newsletter</a>.</p>
]]></description>
      <content:encoded><![CDATA[
<p>The <a href="https://2022.cascadiajs.com/speakers/chris-coyier" rel="noopener">video</a> of Chris Coyier&#8217;s talk at <a href="https://2022.cascadiajs.com/" rel="noopener">CascadiaJS 2022</a> is now available. It&#8217;s his first in-person talk in more than two years, so it&#8217;s great to see our good friend back on stage slinging gems on what makes the web good these days.</p>



<p>Container Queries! WAAPI! Scroll Timelines! <code>offset-path</code>! FLIP! Variable fonts! Fluid type! We really are <a href="https://css-tricks.com/the-all-powerful-front-end-developer/">all-powerful front-end developers</a> these days.</p>



<p>Chris really packs a bunch into a 25-minute slot. It feels good to pause for that brief amount of time to reflect on the great new things for building websites and celebrate the fact that we get to use them.</p>



<p>And there&#8217;s nothing better than watching Chris greet the enture room as a bunch of &#8220;web nerds&#8221;. &#x1f913;</p>



<figure class="wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio"><div class="wp-block-embed__wrapper">
<iframe loading="lazy" title="The Web is Good Now | Chris Coyier | CascadiaJS 2022" width="500" height="281" src="https://www.youtube.com/embed/F18oy48jkrk?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
</div></figure>
<p><a href="https://2022.cascadiajs.com/speakers/chris-coyier" rel="noopener">To Shared Link</a> &#8212; <a href="https://css-tricks.com/the-web-is-good-now/">Permalink on CSS-Tricks</a></p><hr />
<p><small><a rel="nofollow" href="https://css-tricks.com/the-web-is-good-now/">The Web is Good Now</a> originally published on <a rel="nofollow" href="https://css-tricks.com">CSS-Tricks</a>, which is part of the <a href="https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=">DigitalOcean</a> family. You should <a href="https://css-tricks.com/newsletters/">get the newsletter</a>.</p>
]]></content:encoded>

      <wfw:commentRss>https://css-tricks.com/the-web-is-good-now/feed/</wfw:commentRss>
      <slash:comments>1</slash:comments>


      <media:content url="https://www.youtube.com/embed/F18oy48jkrk" medium="video" width="1280"
        height="720">
        <media:player>https://www.youtube.com/embed/F18oy48jkrk</media:player>
        <media:title type="plain">The Web is Good Now | Chris Coyier | CascadiaJS 2022</media:title>
        <media:description type="html">
          <![CDATA[There are quite a few things in the world of web design and development that have gotten… easy. It might be time to take a look at how you’re approaching som...]]></media:description>
        <media:thumbnail url="https://css-tricks.com/wp-content/uploads/2022/09/hqdefault.jpg"/>
        <media:rating scheme="urn:simple">nonadult</media:rating>
      </media:content>
      <post-id xmlns="com-wordpress:feed-additions:1">373652</post-id>
    </item>
    <item>
      <title>How I Made an Icon System Out of CSS Custom Properties</title>
      <link>https://css-tricks.com/how-i-made-an-icon-system-out-of-css-custom-properties/</link>
      <comments>
        https://css-tricks.com/how-i-made-an-icon-system-out-of-css-custom-properties/#comments
      </comments>

      <dc:creator><![CDATA[Louis Hoebregts]]></dc:creator>
      <pubDate>Thu, 22 Sep 2022 15:17:21 +0000</pubDate>
      <category><![CDATA[Article]]></category>
      <category><![CDATA[custom properties]]></category>
      <category><![CDATA[Sass]]></category>
      <category><![CDATA[SVG]]></category>
      <category><![CDATA[svg icons]]></category>
      <guid isPermaLink="false">https://css-tricks.com/?p=373111</guid>

      <description><![CDATA[<p>SVG is the best format for icons on a website, there is <a href="https://css-tricks.com/icon-fonts-vs-svg/">no doubt about that</a>. It allows you to have sharp icons no matter the screen pixel density, you can change the styles of the SVG on hover &#8230;</p>
<hr />
<p><small><a rel="nofollow" href="https://css-tricks.com/how-i-made-an-icon-system-out-of-css-custom-properties/">How I Made an Icon System Out of CSS Custom Properties</a> originally published on <a rel="nofollow" href="https://css-tricks.com">CSS-Tricks</a>, which is part of the <a href="https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=">DigitalOcean</a> family. You should <a href="https://css-tricks.com/newsletters/">get the newsletter</a>.</p>
]]></description>
      <content:encoded><![CDATA[
<p>SVG is the best format for icons on a website, there is <a href="https://css-tricks.com/icon-fonts-vs-svg/">no doubt about that</a>. It allows you to have sharp icons no matter the screen pixel density, you can change the styles of the SVG on hover and you can even animate the icons with CSS or JavaScript.</p>



<p>There are many ways to include an SVG on a page and each technique has its own advantages and disadvantages. For the last couple of years, I have been using a Sass function to import directly my icons in my CSS and avoid having to mess up my HTML markup.</p>



<span id="more-373111"></span>



<p>I have a Sass list with all the source codes of my icons. Each icon is then encoded into a data URI with a Sass function and stored in a <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties" rel="noopener">custom property</a> on the root of the page.</p>


<h3 id="tldr"><abbr title="Too long; didn't read">TL;DR</abbr></h3>


<p>What I have for you here is a Sass function that creates a SVG icon library directly in your CSS.</p>



<p>The SVG source code is compiled with the Sass function that encodes them in data URI and then stores the icons in CSS custom properties. You can then use any icon anywhere in your CSS like as if it was an external image.</p>



<p>This is an example pulled straight from the code of my personal site:</p>



<pre rel="CSS" class="wp-block-csstricks-code-block language-css" data-line="2"><code markup="tt">.c-filters__summary h2:after {
  content: var(--svg-down-arrow);
  position: relative;
  top: 2px;
  margin-left: auto;
  animation: closeSummary .25s ease-out;
}</code></pre>


<h3 id="demo">Demo</h3>


<div class="wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper"><iframe id="cp_embed_oNqKoad" src="//codepen.io/anon/embed/oNqKoad?height=450&amp;theme-id=1&amp;slug-hash=oNqKoad&amp;default-tab=css,result" height="450" scrolling="no" frameborder="0" allowfullscreen allowpaymentrequest name="CodePen Embed oNqKoad" title="CodePen Embed oNqKoad" class="cp_embed_iframe" style="width:100%;overflow:hidden">CodePen Embed Fallback</iframe></div>


<h3 id="sass-structure">Sass structure</h3>


<pre rel="SCSS" class="wp-block-csstricks-code-block language-scss" data-line=""><code markup="tt">/* All the icons source codes */
$svg-icons: (
  burger: '&lt;svg xmlns="http://www.w3.org/2000/svg" viewBox="0...'
);

/* Sass function to encode the icons */
@function svg($name) {
  @return url('data:image/svg+xml, #{$encodedSVG} ');
}

/* Store each icon into a custom property */
:root {
  @each $name, $code in $svg-icons {
    --svg-#{$name}: #{svg($name)};
  }
}

/* Append a burger icon in my button */
.menu::after {
  content: var(--svg-burger);
}		</code></pre>



<p>This technique has both pros and cons, so please take them into account before implementing this solution on your project:</p>


<h4 id="pros">Pros</h4>


<ul><li>There are no HTTP requests for the SVG files.</li><li>All of the icons are stored in one place.</li><li>If you need to update an icon, you don&#8217;t have to go over each HTML templates file.</li><li>The icons are cached along with your CSS.</li><li>You can manually edit the source code of the icons.</li><li>It does not pollute your HTML by adding extra markup.</li><li>You can still change the color or some aspect of the icon with CSS.</li></ul>


<h4 id="cons">Cons</h4>


<ul><li>You cannot animate or update a specific part of the SVG with CSS.</li><li>The more icons you have, the heavier your CSS compiled file will be.</li></ul>



<p>I mostly use this technique for icons rather than logos or illustrations. An encoded SVG is always going to be heavier than its original file, so I still load my complex SVG with an external file either with an <code>&lt;img&gt;</code> tag or in my CSS with <code>url(path/to/file.svg)</code>.</p>


<h3 id="encoding-svg-into-data-uri">Encoding SVG into data URI</h3>


<p>Encoding your SVG as data URIs is not new. In fact <a href="https://css-tricks.com/data-uris/">Chris Coyier wrote a post</a> about it over 10 years ago to explain how to use this technique and why you should (or should not) use it.</p>



<p>There are two ways to use an SVG in your CSS with data URI:</p>



<ul><li>As an external image (using <code>background-image,</code>border-image<code>,</code>list-style-image,&#8230;)</li><li>As the content of a pseudo element (e.g. <code>::before</code> or <code>::after</code>)</li></ul>



<p>Here is a basic example showing how you how to use those two methods:</p>



<div class="wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper"><iframe id="cp_embed_VwXorYz" src="//codepen.io/anon/embed/VwXorYz?height=450&amp;theme-id=1&amp;slug-hash=VwXorYz&amp;default-tab=css,result" height="450" scrolling="no" frameborder="0" allowfullscreen allowpaymentrequest name="CodePen Embed VwXorYz" title="CodePen Embed VwXorYz" class="cp_embed_iframe" style="width:100%;overflow:hidden">CodePen Embed Fallback</iframe></div>



<p>The main issue with this particular implementation is that you have to convert the SVG manually every time you need a new icon and it is not really pleasant to have this long string of unreadable code in your CSS.</p>



<p>This is where Sass comes to the rescue!</p>


<h3 id="using-a-sass-function">Using a Sass function</h3>


<p>By using Sass, we can make our life simpler by copying the source code of our SVG directly in our codebase, letting Sass encode them properly to avoid any browser error.</p>



<p>This solution is mostly inspired by an existing function developed by Threespot Media and available in <a href="https://github.com/Threespot/frontline-sass/blob/master/src/functions/_svg-url.scss" rel="noopener">their repository</a>.</p>



<p>Here are the four steps of this technique:</p>



<ul><li>Create a variable with all your SVG icons listed.</li><li>List all the characters that needs to be skipped for a data URI.</li><li>Implement a function to encode the SVGs to a data URI format.</li><li>Use your function in your code.</li></ul>


<h4 id="1-icons-list">1. Icons list</h4>


<pre rel="SCSS" class="wp-block-csstricks-code-block language-scss" data-line=""><code markup="tt">/**
* Add all the icons of your project in this Sass list
*/
$svg-icons: (
  burger: '&lt;svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24.8 18.92" width="24.8" height="18.92">&lt;path d="M23.8,9.46H1m22.8,8.46H1M23.8,1H1" fill="none" stroke="#000" stroke-linecap="round" stroke-width="2"/>&lt;/svg>'
);</code></pre>


<h4 id="2-list-of-escaped-characters">2. List of escaped characters</h4>


<pre rel="SCSS" class="wp-block-csstricks-code-block language-scss escape-chars" data-line=""><code markup="tt">/**
* Characters to escape from SVGs
* This list allows you to have inline CSS in your SVG code as well
*/
$fs-escape-chars: (
  ' ': '%20',
  '\'': '%22',
  '"': '%27',
  '#': '%23',
  '/': '%2F',
  ':': '%3A',
  '(': '%28',
  ')': '%29',
  '%': '%25',
  '&lt;': '%3C',
  '>': '%3E',
  '\\': '%5C',
  '^': '%5E',
  '{': '%7B',
  '|': '%7C',
  '}': '%7D',
);</code></pre>


<h4 id="3-encode-function">3. Encode function</h4>


<pre rel="SCSS" class="wp-block-csstricks-code-block language-scss" data-line=""><code markup="tt">/**
* You can call this function by using `svg(nameOfTheSVG)`
*/
@function svg($name) {
  // Check if icon exists
  @if not map-has-key($svg-icons, $name) {
    @error 'icon “#{$name}” does not exists in $svg-icons map';
    @return false;
  }

  // Get icon data
  $icon-map: map-get($svg-icons, $name);

  $escaped-string: '';
  $unquote-icon: unquote($icon-map);
  // Loop through each character in string
  @for $i from 1 through str-length($unquote-icon) {
    $char: str-slice($unquote-icon, $i, $i);

    // Check if character is in symbol map
    $char-lookup: map-get($fs-escape-chars, $char);

    // If it is, use escaped version
    @if $char-lookup != null {
        $char: $char-lookup;
    }

    // Append character to escaped string
    $escaped-string: $escaped-string + $char;
  }

  // Return inline SVG data
  @return url('data:image/svg+xml, #{$escaped-string} ');
}		</code></pre>


<h4 id="4-add-an-svg-in-your-page">4. Add an SVG in your page</h4>


<pre rel="SCSS" class="wp-block-csstricks-code-block language-scss" data-line=""><code markup="tt">button {
  &amp;::after {
    /* Import inline SVG */
    content: svg(burger);
  }
}</code></pre>



<p>If you have followed those steps, Sass should compile your code properly and output the following:</p>



<pre rel="CSS" class="wp-block-csstricks-code-block language-css" data-line=""><code markup="tt">button::after {
  content: url("data:image/svg+xml, %3Csvg%20xmlns=%27http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%27%20viewBox=%270%200%2024.8%2018.92%27%20width=%2724.8%27%20height=%2718.92%27%3E%3Cpath%20d=%27M23.8,9.46H1m22.8,8.46H1M23.8,1H1%27%20fill=%27none%27%20stroke=%27%23000%27%20stroke-linecap=%27round%27%20stroke-width=%272%27%2F%3E%3C%2Fsvg%3E ");
}		</code></pre>



<div class="wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper"><iframe id="cp_embed_ZExgayQ" src="//codepen.io/anon/embed/ZExgayQ?height=450&amp;theme-id=1&amp;slug-hash=ZExgayQ&amp;default-tab=css,result" height="450" scrolling="no" frameborder="0" allowfullscreen allowpaymentrequest name="CodePen Embed ZExgayQ" title="CodePen Embed ZExgayQ" class="cp_embed_iframe" style="width:100%;overflow:hidden">CodePen Embed Fallback</iframe></div>


<h3 id="custom-properties">Custom properties</h3>


<p>The now-implemented Sass <code>svg()</code> function works great. But its biggest flaw is that an icon that is needed in multiple places in your code will be duplicated and could increase your compiled CSS file weight by a lot!</p>



<p>To avoid this, we can store all our icons into <a href="https://css-tricks.com/a-complete-guide-to-custom-properties/">CSS variables</a> and use a reference to the variable instead of outputting the encoded URI every time.</p>



<p>We will keep the same code we had before, but this time we will first output all the icons from the Sass list into the root of our webpage:</p>



<pre rel="SCSS" class="wp-block-csstricks-code-block language-scss" data-line=""><code markup="tt">/**
  * Convert all icons into custom properties
  * They will be available to any HTML tag since they are attached to the :root
  */

:root {
  @each $name, $code in $svg-icons {
    --svg-#{$name}: #{svg($name)};
  }
}</code></pre>



<p>Now, instead of calling the <code>svg()</code> function every time we need an icon, we have to use the variable that was created with the <code>--svg</code> prefix.</p>



<pre rel="SCSS" class="wp-block-csstricks-code-block language-scss" data-line=""><code markup="tt">button::after {
  /* Import inline SVG */
  content: var(--svg-burger);
}</code></pre>


<h3 id="optimizing-your-svgs">Optimizing your SVGs</h3>


<p>This technique does not provide any optimization on the source code of the SVG you are using. Make sure that you don&#8217;t leave unnecessary code; otherwise they will be encoded as well and will increase your CSS file size.</p>



<p>You can check <a href="https://css-tricks.com/tools-for-optimizing-svg/">this great list</a> of tools and information on how to optimize properly your SVG. My favorite tool is Jake Archibald&#8217;s <a href="https://jakearchibald.github.io/svgomg/" rel="noopener">SVGOMG</a> — simply drag your file in there and copy the outputted code.</p>


<h3 id="bonus-updating-the-icon-on-hover">Bonus: Updating the icon on hover</h3>


<p>With this technique, we cannot select with CSS specific parts of the SVG. For example, there is no way to change the <code>fill</code> color of the icon when the user hovers the button. But there are a few tricks we can use with CSS to still be able to modify the look of our icon.</p>



<p>For example, if you have a black icon and you want to have it white on hover, you can use the <code>invert()</code> CSS filter. We can also play with the <code>hue-rotate()</code> filter.</p>



<div class="wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper"><iframe id="cp_embed_LYdwQjp/e15ebb181a5972921dc0640525992ba6" src="//codepen.io/anon/embed/LYdwQjp/e15ebb181a5972921dc0640525992ba6?height=450&amp;theme-id=1&amp;slug-hash=LYdwQjp/e15ebb181a5972921dc0640525992ba6&amp;default-tab=css,result" height="450" scrolling="no" frameborder="0" allowfullscreen allowpaymentrequest name="CodePen Embed LYdwQjp/e15ebb181a5972921dc0640525992ba6" title="CodePen Embed LYdwQjp/e15ebb181a5972921dc0640525992ba6" class="cp_embed_iframe" style="width:100%;overflow:hidden">CodePen Embed Fallback</iframe></div>


<h3 id="bonus-2-updating-the-i">Bonus #2: Updating the icon using CSS mask-image property</h3>


<p>Another trick to be able to change the color of your icon, is to use it as a mask on your pseudo-element with a background. Set your pseudo-element as <code>inline-block</code> with a <code>background-color</code> and define a <code>width</code> &amp; <code>height</code> for the size needed.</p>



<p>Once you have a rectangle with the color needed, apply those four values to only keep the shape of the SVG needed:</p>



<ul><li><strong><code>mask-image: var(--svg-burger)</code>:</strong> The reference to our icon.</li><li><strong><code>mask-repeat: no-repeat</code>:</strong> To prevent the mask to be duplicated.</li><li><strong><code>mask-size: contain</code>:</strong> To make the icon fit perfectly in the rectangle.</li><li><strong><code>mask-position: center</code>:</strong> To center our icon in the pseudo-element.</li></ul>



<p>Don&#8217;t forget that all CSS <code>mask</code> properties still need to be prefixed with <code>-webkit-</code> for most browsers as of September 2022.</p>



<div class="wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper"><iframe id="cp_embed_LYmejea" src="//codepen.io/anon/embed/LYmejea?height=450&amp;theme-id=1&amp;slug-hash=LYmejea&amp;default-tab=css,result" height="450" scrolling="no" frameborder="0" allowfullscreen allowpaymentrequest name="CodePen Embed LYmejea" title="CodePen Embed LYmejea" class="cp_embed_iframe" style="width:100%;overflow:hidden">CodePen Embed Fallback</iframe></div>



<p>Thanks to <a href="#comment-1797187">Christopher</a> and <a href="#comment-1797209">Mike</a> for letting me know about this trick in the comments!</p>


<h3 id="thats-it">That&#8217;s it!</h3>


<p>I hope you find this little helper function handy in your own projects. Let me know what you think of the approach — I&#8217;d be interested to know how you&#8217;d make this better or tackle it differently!</p>
<hr />
<p><small><a rel="nofollow" href="https://css-tricks.com/how-i-made-an-icon-system-out-of-css-custom-properties/">How I Made an Icon System Out of CSS Custom Properties</a> originally published on <a rel="nofollow" href="https://css-tricks.com">CSS-Tricks</a>, which is part of the <a href="https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=">DigitalOcean</a> family. You should <a href="https://css-tricks.com/newsletters/">get the newsletter</a>.</p>
]]></content:encoded>

      <wfw:commentRss>
        https://css-tricks.com/how-i-made-an-icon-system-out-of-css-custom-properties/feed/
      </wfw:commentRss>
      <slash:comments>6</slash:comments>


      <post-id xmlns="com-wordpress:feed-additions:1">373111</post-id>
    </item>
    <item>
      <title>CSS Rules vs. CSS Rulesets</title>
      <link>https://css-tricks.com/css-rules-vs-css-rulesets/</link>
      <comments>https://css-tricks.com/css-rules-vs-css-rulesets/#respond</comments>

      <dc:creator><![CDATA[Geoff Graham]]></dc:creator>
      <pubDate>Wed, 21 Sep 2022 21:53:44 +0000</pubDate>
      <category><![CDATA[Link]]></category>
      <category><![CDATA[terminology]]></category>
      <guid isPermaLink="false">https://css-tricks.com/?p=373639</guid>

      <description><![CDATA[<p><a href="https://www.w3.org/TR/css-syntax-3/#style-rules" rel="noopener">The latest spec</a>:</p>
<blockquote class="wp-block-quote">
<p>A&#160;style rule&#160;is a&#160;qualified rule&#160;that associates a&#160;selector list&#160;with a list of property declarations and possibly a list of nested rules. They are also called&#160;rule sets&#160;in&#160;CSS2.</p>
</blockquote>
<p><a href="https://www.impressivewebs.com/css-rules-vs-css-rulesets/" rel="noopener">Louis Lazaris</a>:</p>
<blockquote class="wp-block-quote">
<p>As the above quote from W3C indicates, it seems </p>
</blockquote>
<p>&#8230;</p>
<hr />
<p><small><a rel="nofollow" href="https://css-tricks.com/css-rules-vs-css-rulesets/">CSS Rules vs. CSS Rulesets</a> originally published on <a rel="nofollow" href="https://css-tricks.com">CSS-Tricks</a>, which is part of the <a href="https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=">DigitalOcean</a> family. You should <a href="https://css-tricks.com/newsletters/">get the newsletter</a>.</p>
]]></description>
      <content:encoded><![CDATA[
<p><a href="https://www.w3.org/TR/css-syntax-3/#style-rules" rel="noopener">The latest spec</a>:</p>



<blockquote class="wp-block-quote"><p>A&nbsp;<dfn>style rule</dfn>&nbsp;is a&nbsp;qualified rule&nbsp;that associates a&nbsp;selector list&nbsp;with a list of property declarations and possibly a list of nested rules. They are also called&nbsp;rule sets&nbsp;in&nbsp;CSS2.</p></blockquote>



<p><a href="https://www.impressivewebs.com/css-rules-vs-css-rulesets/" rel="noopener">Louis Lazaris</a>:</p>



<blockquote class="wp-block-quote"><p>As the above quote from W3C indicates, it seems like the W3C considers “rule set” to be a bit of an outdated term, preferring the term “style rule” (or possibly “rule” for short).</p></blockquote>



<span id="more-373639"></span>



<p>I never noticed that! &#8220;Rule set&#8221; is so gosh darned branded on my brain that it&#8217;s gonan take losing a lot of muscle memory to start using &#8220;style rule&#8221; instead. I didn&#8217;t see a specific note in the spec&#8217;s <a href="https://www.w3.org/TR/css-syntax-3/#changes" rel="noopener">Changes</a> section, but you can see the change in the table of contents between versions:</p>



<figure class="wp-block-image size-full"><img loading="lazy" width="1384" height="704" src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-21-at-12.46.13-PM.png?resize=1384%2C704&#038;ssl=1" alt="Side-by-side screenshot comparing the table of contents for both the CSS 2 and CSS 3 specifications." class="wp-image-373640" srcset="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-21-at-12.46.13-PM.png?w=1384&amp;ssl=1 1384w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-21-at-12.46.13-PM.png?resize=300%2C153&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-21-at-12.46.13-PM.png?resize=1024%2C521&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-21-at-12.46.13-PM.png?resize=768%2C391&amp;ssl=1 768w" sizes="(min-width: 735px) 864px, 96vw" data-recalc-dims="1" /></figure>



<p>Louis nicely sums up the parts of a style rule as well:</p>



<pre rel="CSS" class="wp-block-csstricks-code-block language-css" data-line=""><code markup="tt">/* Everything below is a style rule (or rule set, or just rule) */
section { /* Everything between the braces is a declaration block */
  margin: 0 20px; /* This line is an individual declaration */
  color: #888; /* Another declaration */
}</code></pre>



<p>I know nothing of the context and, at first, I was gonna poo-poo the change, but &#8220;style rule&#8221; really makes sense the more I sit with it. If the property:value pairs are<em> declarations</em> that sit in a <em>declaration block</em>, then we&#8217;ve got something less like a set of rules and more like one rule that defines the styles for a selector with a block of style declarations. &#x1f44c;</p>



<p>Once again, <a href="https://css-tricks.com/naming-things-is-only-getting-harder/">naming things is hard</a>.</p>
<p><a href="https://www.impressivewebs.com/css-rules-vs-css-rulesets/" rel="noopener">To Shared Link</a> &#8212; <a href="https://css-tricks.com/css-rules-vs-css-rulesets/">Permalink on CSS-Tricks</a></p><hr />
<p><small><a rel="nofollow" href="https://css-tricks.com/css-rules-vs-css-rulesets/">CSS Rules vs. CSS Rulesets</a> originally published on <a rel="nofollow" href="https://css-tricks.com">CSS-Tricks</a>, which is part of the <a href="https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=">DigitalOcean</a> family. You should <a href="https://css-tricks.com/newsletters/">get the newsletter</a>.</p>
]]></content:encoded>

      <wfw:commentRss>https://css-tricks.com/css-rules-vs-css-rulesets/feed/</wfw:commentRss>
      <slash:comments>0</slash:comments>


      <post-id xmlns="com-wordpress:feed-additions:1">373639</post-id>
    </item>
    <item>
      <title>CSS Checkerboard Background&#8230; But With Rounded Corners and Hover Styles</title>
      <link>
        https://css-tricks.com/css-checkerboard-background-but-with-rounded-corners-and-hover-styles/
      </link>
      <comments>
        https://css-tricks.com/css-checkerboard-background-but-with-rounded-corners-and-hover-styles/#comments
      </comments>

      <dc:creator><![CDATA[Preethi]]></dc:creator>
      <pubDate>Tue, 20 Sep 2022 13:19:24 +0000</pubDate>
      <category><![CDATA[Article]]></category>
      <category><![CDATA[background]]></category>
      <category><![CDATA[gradients]]></category>
      <category><![CDATA[patterns]]></category>
      <category><![CDATA[repeating gradient]]></category>
      <guid isPermaLink="false">https://css-tricks.com/?p=373167</guid>

      <description><![CDATA[<p>On one hand, creating simple checkered backgrounds with CSS is easy. On the other hand, though, unless we are one of the CSS-gradient-ninjas, we are kind of stuck with basic patterns.</p>
<p>At least that’s what I thought while staring at &#8230;</p>
<hr />
<p><small><a rel="nofollow" href="https://css-tricks.com/css-checkerboard-background-but-with-rounded-corners-and-hover-styles/">CSS Checkerboard Background&#8230; But With Rounded Corners and Hover Styles</a> originally published on <a rel="nofollow" href="https://css-tricks.com">CSS-Tricks</a>, which is part of the <a href="https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=">DigitalOcean</a> family. You should <a href="https://css-tricks.com/newsletters/">get the newsletter</a>.</p>
]]></description>
      <content:encoded><![CDATA[
<p>On one hand, creating simple checkered backgrounds with CSS is easy. On the other hand, though, unless we are one of the CSS-gradient-ninjas, we are kind of stuck with basic patterns.</p>



<p>At least that’s what I thought while staring at the checkered background on my screen and trying to round those corners of the squares just a little…until I remembered my favorite bullet point glyph — <code>✦</code> — and figured that if only I could place it over every intersection in the pattern, I’ll surely get the design I want.</p>



<p>Turns out it&#8217;s possible! Here’s the proof.</p>



<span id="more-373167"></span>



<div class="wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper"><iframe id="cp_embed_KKoOOGv" src="//codepen.io/anon/embed/KKoOOGv?height=550&amp;theme-id=1&amp;slug-hash=KKoOOGv&amp;default-tab=result" height="550" scrolling="no" frameborder="0" allowfullscreen allowpaymentrequest name="CodePen Embed KKoOOGv" title="CodePen Embed KKoOOGv" class="cp_embed_iframe" style="width:100%;overflow:hidden">CodePen Embed Fallback</iframe></div>



<p>Let’s start with the basic pattern:</p>



<pre rel="HTML" class="wp-block-csstricks-code-block language-markup" data-line=""><code markup="tt">&lt;div>&lt;/div></code></pre>



<pre rel="CSS" class="wp-block-csstricks-code-block language-css" data-line=""><code markup="tt">div {
 background:
  repeating-linear-gradient(
    to right, transparent,
    transparent 50px,
    white 50px,
    white 55px
  ),
  repeating-linear-gradient(
    to bottom, transparent,
    transparent 50px,
    white 50px,
    white 55px
  ),
  linear-gradient(45deg, pink, skyblue);
  /* more styles */
}</code></pre>



<p>What that gives us is a repeating background of squares that go from pink to blue with <code>5px</code> white gaps between them. Each square is fifty pixels wide and transparent. This is created using <a href="https://css-tricks.com/a-complete-guide-to-css-gradients/#h-repeating-gradients"><code>repeating-linear-gradient</code></a>, which creates a linear gradient image where the gradient repeats throughout the containing area.</p>



<p>In other words, the first gradient in that sequence creates white horizontal stripes and the second gradient creates white vertical stripes. Layered together, they form the checkered pattern, and the third gradient fills in the rest of the space.</p>



<div class="wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper"><iframe id="cp_embed_abGzjrd" src="//codepen.io/anon/embed/abGzjrd?height=550&amp;theme-id=1&amp;slug-hash=abGzjrd&amp;default-tab=result" height="550" scrolling="no" frameborder="0" allowfullscreen allowpaymentrequest name="CodePen Embed abGzjrd" title="CodePen Embed abGzjrd" class="cp_embed_iframe" style="width:100%;overflow:hidden">CodePen Embed Fallback</iframe></div>



<p>Now we add the star glyph I mentioned earlier, on top of the background pattern. We can do that by including it on the same <code>background</code> property as the gradients while using an encoded SVG for the shape:</p>



<pre rel="CSS" class="wp-block-csstricks-code-block language-css" data-line="4,5,6,7,8,9,10"><code markup="tt">div {
  background:
    repeat left -17px top -22px/55px 55px
    url("data:image/svg+xml,
    &lt;svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 35px 35px'>
      &lt;foreignObject width='35px' height='35px'>
        &lt;div xmlns='http://www.w3.org/1999/xhtml' style='color: white; font-size: 35px'>✦&lt;/div>
      &lt;/foreignObject>
    &lt;/svg>"
    ),
    repeating-linear-gradient(
      to right, transparent,
      transparent 50px,
      white 50px,
      white 55px
    ),
    repeating-linear-gradient(
      to bottom, transparent,
      transparent 50px,
      white 50px,
      white 55px
    ),
    linear-gradient(45deg, pink, skyblue);
  /* more style */
}</code></pre>



<p>Let’s break that down. The first keyword, <code>repeat</code>, denotes that this is a repeating background image. Followed by that is the position and size of each repeating unit, respectively (<code>left -17px top -22px/55px 55px</code>). This offset position is based on the glyph and pattern’s size. You’ll see below how the glyph size is given. The offset is added to re-position the repeating glyph exactly over each intersection in the checkered pattern.</p>



<p>The SVG has an HTML <code>&lt;div&gt;</code> carrying the glyph. Notice that I declared a <code>font-size</code> on it. That ultimately determines the border radius of the squares in the checkerboard pattern — the bigger the glyph, the more rounded the squares. The unrolled SVG from the data URL looks like this:</p>



<pre rel="SVG" class="wp-block-csstricks-code-block language-svg" data-line=""><code markup="tt">&lt;svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 35px 35px'>
  &lt;foreignObject width='35px' height='35px'>
    &lt;div xmlns='http://www.w3.org/1999/xhtml' style='color:white;font-size:35px'>✦&lt;/div>
  &lt;/foreignObject>
&lt;/svg></code></pre>



<p>Now that a CSS pattern is established, let’s add a <code>:hover</code> effect where the glyph is removed and the white lines are made slightly translucent by using <code>rgb()</code> color values with alpha transparency.</p>



<pre rel="CSS" class="wp-block-csstricks-code-block language-css" data-line=""><code markup="tt">div:hover {
  background:
    repeating-linear-gradient(
      to right, transparent,
      transparent 50px,
      rgb(255 255 255 / 0.5) 50px,
      rgb(255 255 255 / 0.5) 55px
    ),
    repeating-linear-gradient(
      to bottom, transparent,
      transparent 50px,
      rgb(255 255 255 / 0.5) 50px,
      rgb(255 255 255 / 0.5) 55px
    ),
  linear-gradient(45deg, pink, skyblue);
  box-shadow: 10px 10px 20px pink;
}</code></pre>



<p>There we go! Now, not only do we have our rounded corners, but we also have more control control over the pattern for effects like this:</p>



<div class="wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper"><iframe id="cp_embed_KKoOOGv" src="//codepen.io/anon/embed/KKoOOGv?height=600&amp;theme-id=1&amp;slug-hash=KKoOOGv&amp;default-tab=result" height="600" scrolling="no" frameborder="0" allowfullscreen allowpaymentrequest name="CodePen Embed KKoOOGv" title="CodePen Embed KKoOOGv" class="cp_embed_iframe" style="width:100%;overflow:hidden">CodePen Embed Fallback</iframe></div>



<p>Again, this whole exercise was an attempt to get a grid of squares in a checkerboard pattern that supports rounded corners, a background gradient that serves as an overlay across the pattern, and interactive styles. I think this accomplishes the task quite well, but I’m also interested in how you might’ve approached it. Let me know in the comments!</p>
<hr />
<p><small><a rel="nofollow" href="https://css-tricks.com/css-checkerboard-background-but-with-rounded-corners-and-hover-styles/">CSS Checkerboard Background&#8230; But With Rounded Corners and Hover Styles</a> originally published on <a rel="nofollow" href="https://css-tricks.com">CSS-Tricks</a>, which is part of the <a href="https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=">DigitalOcean</a> family. You should <a href="https://css-tricks.com/newsletters/">get the newsletter</a>.</p>
]]></content:encoded>

      <wfw:commentRss>
        https://css-tricks.com/css-checkerboard-background-but-with-rounded-corners-and-hover-styles/feed/
      </wfw:commentRss>
      <slash:comments>4</slash:comments>


      <post-id xmlns="com-wordpress:feed-additions:1">373167</post-id>
    </item>
    <item>
      <title>Making a Real-Time Clock With a Conic Gradient Face</title>
      <link>https://css-tricks.com/making-a-real-time-clock-with-a-conic-gradient-face/</link>
      <comments>
        https://css-tricks.com/making-a-real-time-clock-with-a-conic-gradient-face/#comments
      </comments>

      <dc:creator><![CDATA[Brecht De Ruyte]]></dc:creator>
      <pubDate>Mon, 19 Sep 2022 12:58:09 +0000</pubDate>
      <category><![CDATA[Article]]></category>
      <category><![CDATA[conic gradients]]></category>
      <category><![CDATA[custom properties]]></category>
      <category><![CDATA[dates]]></category>
      <category><![CDATA[gradients]]></category>
      <guid isPermaLink="false">https://css-tricks.com/?p=373184</guid>

      <description><![CDATA[<p>Gradients have been a part of the CSS spectrum for quite some time now. We see a lot of radial and linear gradients in a lot of projects, but there is one type of gradient that seems to be a &#8230;</p>
<hr />
<p><small><a rel="nofollow" href="https://css-tricks.com/making-a-real-time-clock-with-a-conic-gradient-face/">Making a Real-Time Clock With a Conic Gradient Face</a> originally published on <a rel="nofollow" href="https://css-tricks.com">CSS-Tricks</a>, which is part of the <a href="https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=">DigitalOcean</a> family. You should <a href="https://css-tricks.com/newsletters/">get the newsletter</a>.</p>
]]></description>
      <content:encoded><![CDATA[
<p>Gradients have been a part of the CSS spectrum for quite some time now. We see a lot of radial and linear gradients in a lot of projects, but there is one type of gradient that seems to be a bit lonely: <a href="https://css-tricks.com/a-complete-guide-to-css-gradients/#aa-conic-css-gradients">the conic gradient</a>. We&#8217;re going to make a watch face using this type of gradient.</p>



<span id="more-373184"></span>


<h3 id="working-with-conic-gradients">Working with conic gradients</h3>


<p>What we&#8217;re making consists of a gradient with color transitions rotated around a center point and can have multiple color values. For this clock to work, we will also be using the angle value of a conic gradient which defines the rotation or starting point. The angle is defined by using a <code>from</code> value.</p>



<pre rel="CSS" class="wp-block-csstricks-code-block language-css" data-line=""><code markup="tt">background-image: conic-gradient(from 45deg, #6e7dab, #5762d5);</code></pre>



<p>What is interesting about this, is that a starting angle can have a negative value in CSS, which will come in handy later.</p>



<p>A simple elegant example of a conical gradient:</p>



<div class="wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper"><iframe id="cp_embed_bGLjgyO" src="//codepen.io/anon/embed/bGLjgyO?height=550&amp;theme-id=1&amp;slug-hash=bGLjgyO&amp;default-tab=result" height="550" scrolling="no" frameborder="0" allowfullscreen allowpaymentrequest name="CodePen Embed bGLjgyO" title="CodePen Embed bGLjgyO" class="cp_embed_iframe" style="width:100%;overflow:hidden">CodePen Embed Fallback</iframe></div>


<h3 id="building-our-basic-clock">Building our basic clock</h3>


<p>Let’s start by adding some HTML for the clock and the hands:</p>



<p>Let’s create some default styling for our clock. For this to work properly, we will update CSS variables with JavaScript later on, so let’s scope these variables inside our <code>.clock</code> selector. For easy tweaking, let’s add the colors of the hands as well.</p>



<pre rel="CSS" class="wp-block-csstricks-code-block language-css" data-line=""><code markup="tt">.clock {
  /* general clock vars */
  --hour-hand-color: #000;
  --hour-hand-degrees: 0deg;
  --minute-hand-color: #000;
  --minute-hand-degrees: 0deg;
  --second-hand-color: hotpink;
  --second-hand-degrees: 0deg;

  position: relative;
  min-width: 320px;
  width: 25vw;
  height: 25vw;
  min-height: 320px;
  border-radius: 50%;
  margin: 0 auto;
  border: 7px solid #000;
}

/* clock hands */
.hand {
  position: absolute;
  left: 50%;
  bottom: 50%;
  height: 45%;
  width: 4px;
  margin-left: -2px;
  background: var(--second-hand-color);
  border-radius: 6px;
  transform-origin: bottom center;
  transition-timing-function: cubic-bezier(0.1, 2.7, 0.58, 1);
}
.second-hand {
  transform: rotate(var(--second-hand-degrees));
}
.hour-hand {
  height: 35%;
  border-radius: 40px;
  background-color: var(--hour-hand-color);
  transform: rotate(var(--hour-hand-degrees));
}
.minute-hand {
  height: 50%;
  background: var(--minute-hand-color);
  transform: rotate(var(--minute-hand-degrees));
}</code></pre>



<p>This sets us up with the general styling we need for the clock. We’ve set <code>transform-origin</code> on the hands so that they properly rotate around the face of the clock. There are also a few custom properties in there to set angles on the hands that we’ll update with JavaScript to get the timing just right so that each hand maps to seconds, minutes, and hours accordingly.</p>



<p>Here’s what we have so far:</p>



<div class="wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper"><iframe id="cp_embed_jOxPjwY" src="//codepen.io/anon/embed/jOxPjwY?height=450&amp;theme-id=1&amp;slug-hash=jOxPjwY&amp;default-tab=result" height="450" scrolling="no" frameborder="0" allowfullscreen allowpaymentrequest name="CodePen Embed jOxPjwY" title="CodePen Embed jOxPjwY" class="cp_embed_iframe" style="width:100%;overflow:hidden">CodePen Embed Fallback</iframe></div>



<p>Alright, let’s move on to updating those custom properties!</p>


<h3 id="adding-the-javascript-for-our-basic-clock">Adding the JavaScript for our basic clock</h3>


<p>First off, we’re going to target our clock and create a function:</p>



<pre rel="JavaScript" class="wp-block-csstricks-code-block language-javascript" data-line=""><code markup="tt">const clock = document.getElementById("clock");
function setDate() {
  // Code to set the current time and hand angles.
}
setDate();</code></pre>



<p>Inside of our function we’re going to fetch the current time using the <a href="https://css-tricks.com/everything-you-need-to-know-about-date-in-javascript/"><code>Date()</code> function</a> to calculate the correct angle of the hands:</p>



<pre rel="JavaScript" class="wp-block-csstricks-code-block language-javascript" data-line=""><code markup="tt">const now = new Date();
const secondsAngle = now.getSeconds() * 6;
const minsAngle = now.getMinutes() * 6 + secondsAngle / 60;
const hourAngle = ((now.getHours() % 12) / 12) * 360 + minsAngle / 12;</code></pre>



<p>Here is how this calculation works:</p>



<ul><li><strong>Seconds:</strong> We take 60 seconds and multiply it by <code>6</code>, which happens to be <code>360</code>, the perfect number of angles in a full circle.</li><li><strong>Minutes:</strong> Same as seconds, but now we add the seconds angle and divide it by <code>60</code> to increase the angle just a little bit within the minute for a more accurate result.</li><li><strong>Hours:</strong> First, we calculate the remainder of the hour and divide it by <code>12</code>. Then we divide that remainder by <code>12</code> again to get a decimal value we can multiply by <code>360</code>. For example, when we’re at the 23rd hour, <code>23 / 12 =</code> <code>remain</code> <code>11</code>. Divide this by 12 and we get <code>0.916</code> which then gets multiplied by <code>360</code> for a grand total of <code>330</code>. Here, we will do the same thing we did with the minutes and add the minutes angle, divided by <code>12</code>, for a more accurate result.</li></ul>



<p>Now that we have our angles, the only thing left to do is to update the variables of our clock by adding the following at the end of our function:</p>



<pre rel="JavaScript" class="wp-block-csstricks-code-block language-javascript" data-line=""><code markup="tt">clock.style.setProperty("--second-hand-degrees", secondsAngle + "deg");
clock.style.setProperty("--minute-hand-degrees", minsAngle + "deg");
clock.style.setProperty("--hour-hand-degrees", hourAngle + "deg");</code></pre>



<p>Last, but not least, we will trigger the function with an interval of a second to get a working clock:</p>



<pre rel="JavaScript" class="wp-block-csstricks-code-block language-javascript" data-line=""><code markup="tt">const clock = document.getElementById("clock");
function setDate() {
  // etc.
}
// Tick tick tick
setInterval(setDate, 1000);
setDate();</code></pre>



<p>See the working demo of our basic clock:</p>



<div class="wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper"><iframe id="cp_embed_QWmPQvX" src="//codepen.io/anon/embed/QWmPQvX?height=450&amp;theme-id=1&amp;slug-hash=QWmPQvX&amp;default-tab=result" height="450" scrolling="no" frameborder="0" allowfullscreen allowpaymentrequest name="CodePen Embed QWmPQvX" title="CodePen Embed QWmPQvX" class="cp_embed_iframe" style="width:100%;overflow:hidden">CodePen Embed Fallback</iframe></div>


<h3 id="applying-this-to-a-conical-gradient">Applying this to a conical gradient</h3>


<p>OK, so the hands of our clock are working. What we really want is to map them to a conical gradient that updates as the time changes. You may have seen the same effect if you have an Apple Watch with the “Gradient” face active:</p>



<figure class="wp-block-image size-full"><img loading="lazy" width="1200" height="800" src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_47924FAF6343D67ABE7CCF2F092F4ED6FD55298A5F656D41C8AA715335336C95_1662487592695_apple-watch-always-on-gradient-100811885-large.jpg?resize=1200%2C800&#038;ssl=1" alt="Black Apple Watch on a person's wrist showing a deep purple conic gradient face." class="wp-image-373185" srcset="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_47924FAF6343D67ABE7CCF2F092F4ED6FD55298A5F656D41C8AA715335336C95_1662487592695_apple-watch-always-on-gradient-100811885-large.jpg?w=1200&amp;ssl=1 1200w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_47924FAF6343D67ABE7CCF2F092F4ED6FD55298A5F656D41C8AA715335336C95_1662487592695_apple-watch-always-on-gradient-100811885-large.jpg?resize=300%2C200&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_47924FAF6343D67ABE7CCF2F092F4ED6FD55298A5F656D41C8AA715335336C95_1662487592695_apple-watch-always-on-gradient-100811885-large.jpg?resize=1024%2C683&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/s_47924FAF6343D67ABE7CCF2F092F4ED6FD55298A5F656D41C8AA715335336C95_1662487592695_apple-watch-always-on-gradient-100811885-large.jpg?resize=768%2C512&amp;ssl=1 768w" sizes="(min-width: 735px) 864px, 96vw" data-recalc-dims="1" /><figcaption>Credit: <a href="https://www.macworld.com/article/233327/apple-watch-series-5-always-on-ranked.html" rel="noopener">Macworld</a></figcaption></figure>



<p>To do this, let’s start by updating our <code>.clock</code> element with a conic gradient and two custom properties that control the starting and ending angles :</p>



<pre rel="CSS" class="wp-block-csstricks-code-block language-css" data-line=""><code markup="tt">.clock {
  /* same as before */

  /* conic gradient vars */
  --start: 0deg;
  --end: 0deg;

  /* same as before */

  background:
    conic-gradient(
      from var(--start),
      rgb(255 255 255) 2deg,
      rgb(0 0 0 / 0.5) var(--end),
      rgb(255 255 255) 2deg,
      rgb(0 0 0 / 0.7)
  );
}</code></pre>



<p>You can play around with this a bit to style it just the way you like it. I added some extra colors in the gradient to my liking, but as long as you have a starting point and an ending point, you’re good to go.</p>



<div class="wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper"><iframe id="cp_embed_mdLebLY" src="//codepen.io/anon/embed/mdLebLY?height=450&amp;theme-id=1&amp;slug-hash=mdLebLY&amp;default-tab=result" height="450" scrolling="no" frameborder="0" allowfullscreen allowpaymentrequest name="CodePen Embed mdLebLY" title="CodePen Embed mdLebLY" class="cp_embed_iframe" style="width:100%;overflow:hidden">CodePen Embed Fallback</iframe></div>



<p>Next up, we will update our <code>setDate()</code> function so that it updates the variables for our starting and ending points on the conic gradient. The starting point will be our seconds hand, which is easy to find because it will be the same as the angle of our minutes. To make this end at the hours hand, we should make our ending point the same as the <code>hourAngle</code> variable in the script, but subtract our starting point from it.</p>



<pre rel="JavaScript" class="wp-block-csstricks-code-block language-javascript" data-line=""><code markup="tt">let startPosition = minsAngle;
let endPosition = hourAngle - minsAngle;</code></pre>



<p>Now we can update our variables with JavaScript again:</p>



<pre rel="JavaScript" class="wp-block-csstricks-code-block language-javascript" data-line=""><code markup="tt">clock.style.setProperty("--start", startPosition + "deg");
clock.style.setProperty("--end", endPosition + "deg");</code></pre>



<p>It looks like we could be done at this point, but there is a catch! This calculation works fine as long as the minutes hand has a smaller angle than the hours hand. Our conic gradient will get messy the moment when the minutes hand has moved past it. To fix this, we will use a negative value as a starting point. Luckily, it’s easy to spot when this happens. Before updating our variables we’ll add the following:</p>



<pre rel="JavaScript" class="wp-block-csstricks-code-block language-javascript" data-line=""><code markup="tt">if (minsAngle > hourAngle) {
  startPosition = minsAngle - 360;
  endPosition = hourAngle - startPosition;
}</code></pre>



<p>By subtracting <code>360</code> from our minutes angle, we are able to set a negative value for our <code>startposition</code> variable. Because of this negative starting point, our end position should be updated by the hour angle, subtracted by the starting position.</p>



<p>There we go — now the hour and minute hands are set to gradient angles:</p>



<div class="wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper"><iframe id="cp_embed_PoRvZJm" src="//codepen.io/anon/embed/PoRvZJm?height=450&amp;theme-id=1&amp;slug-hash=PoRvZJm&amp;default-tab=result" height="450" scrolling="no" frameborder="0" allowfullscreen allowpaymentrequest name="CodePen Embed PoRvZJm" title="CodePen Embed PoRvZJm" class="cp_embed_iframe" style="width:100%;overflow:hidden">CodePen Embed Fallback</iframe></div>



<p>That’s it! But don’t let that stop you from taking this even further. Create your own styles and share them with me in the comments so I can check them out.. Here is a little inspiration to get you going:</p>



<div class="wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper"><iframe id="cp_embed_VwXPeZj" src="//codepen.io/anon/embed/VwXPeZj?height=550&amp;theme-id=1&amp;slug-hash=VwXPeZj&amp;default-tab=result" height="550" scrolling="no" frameborder="0" allowfullscreen allowpaymentrequest name="CodePen Embed VwXPeZj" title="CodePen Embed VwXPeZj" class="cp_embed_iframe" style="width:100%;overflow:hidden">CodePen Embed Fallback</iframe></div>
<hr />
<p><small><a rel="nofollow" href="https://css-tricks.com/making-a-real-time-clock-with-a-conic-gradient-face/">Making a Real-Time Clock With a Conic Gradient Face</a> originally published on <a rel="nofollow" href="https://css-tricks.com">CSS-Tricks</a>, which is part of the <a href="https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=">DigitalOcean</a> family. You should <a href="https://css-tricks.com/newsletters/">get the newsletter</a>.</p>
]]></content:encoded>

      <wfw:commentRss>
        https://css-tricks.com/making-a-real-time-clock-with-a-conic-gradient-face/feed/
      </wfw:commentRss>
      <slash:comments>8</slash:comments>


      <post-id xmlns="com-wordpress:feed-additions:1">373184</post-id>
    </item>
    <item>
      <title>More Details on `details`</title>
      <link>https://css-tricks.com/more-details-on-details/</link>
      <comments>https://css-tricks.com/more-details-on-details/#comments</comments>

      <dc:creator><![CDATA[Geoff Graham]]></dc:creator>
      <pubDate>Thu, 15 Sep 2022 13:12:40 +0000</pubDate>
      <category><![CDATA[Article]]></category>
      <category><![CDATA[details]]></category>
      <category><![CDATA[details/summary]]></category>
      <guid isPermaLink="false">https://css-tricks.com/?p=373372</guid>

      <description><![CDATA[<p>A lot of chatter around the ol&#8217; <code>&#60;details&#62;</code> and <code>&#60;summary&#62;</code> elements lately! I saw <a href="https://twitter.com/LeaVerou/status/1563912029827747840" rel="noopener">Lea Verou recently tweet an observation</a> about the element&#8217;s <code>display</code> behavior and that sorta splintered into more observations and usage notes from folks, including a <a href="https://github.com/whatwg/html/issues/2272" rel="noopener">revived </a>&#8230;</p>
<hr />
<p><small><a rel="nofollow" href="https://css-tricks.com/more-details-on-details/">More Details on `details`</a> originally published on <a rel="nofollow" href="https://css-tricks.com">CSS-Tricks</a>, which is part of the <a href="https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=">DigitalOcean</a> family. You should <a href="https://css-tricks.com/newsletters/">get the newsletter</a>.</p>
]]></description>
      <content:encoded><![CDATA[
<p>A lot of chatter around the ol&#8217; <code>&lt;details&gt;</code> and <code>&lt;summary&gt;</code> elements lately! I saw <a href="https://twitter.com/LeaVerou/status/1563912029827747840" rel="noopener">Lea Verou recently tweet an observation</a> about the element&#8217;s <code>display</code> behavior and that sorta splintered into more observations and usage notes from folks, including a <a href="https://github.com/whatwg/html/issues/2272" rel="noopener">revived discussion</a> on whether <code>&lt;summary&gt;</code> should be allowed to contain interactive elements or not.</p>



<p>There are a lot of dots to connect and I&#8217;ll do my best here to do exactly that.</p>



<span id="more-373372"></span>


<h3 id="can-we-change-the-display-of-elements-nested-in-the-ltdetailsgt-element">Can we change the display of elements nested in the <code>&lt;details&gt;</code> element?</h3>


<figure class="wp-block-embed is-type-rich is-provider-twitter wp-block-embed-twitter"><div class="wp-block-embed__wrapper">
<blockquote class="twitter-tweet" data-width="500" data-dnt="true"><p lang="en" dir="ltr">In the app I’m building, I’m using &lt;details&gt; for panels but ran into some sizing weirdness.<br>Flexbox: <a href="https://t.co/noZvxAN35G">https://t.co/noZvxAN35G</a><br>Grid: <a href="https://t.co/pis0lPjvXk">https://t.co/pis0lPjvXk</a><br>At first I thought it was a bug, but all three engines agree. Nothing in the UA stylesheet for &lt;details&gt; seems to explain it.</p>&mdash; Lea Verou (@LeaVerou) <a href="https://twitter.com/LeaVerou/status/1563912029827747840?ref_src=twsrc%5Etfw" rel="noopener">August 28, 2022</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</div></figure>



<p>Super weird! If we crack open DevTools, the user agent stylesheet tells us <code>&lt;details&gt;</code> is a displayed as a block element.</p>



<figure class="wp-block-image size-full"><img loading="lazy" width="2128" height="1024" src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-8.55.28-AM.png?resize=2128%2C1024&#038;ssl=1" alt="" class="wp-image-373373" srcset="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-8.55.28-AM.png?w=2128&amp;ssl=1 2128w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-8.55.28-AM.png?resize=300%2C144&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-8.55.28-AM.png?resize=1024%2C493&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-8.55.28-AM.png?resize=768%2C370&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-8.55.28-AM.png?resize=1536%2C739&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-8.55.28-AM.png?resize=2048%2C986&amp;ssl=1 2048w" sizes="(min-width: 735px) 864px, 96vw" data-recalc-dims="1" /></figure>



<p>Notice the required <code>&lt;summary&gt;</code> element and the two additional <code>&lt;div&gt;</code>s in there. We can override the <code>display</code>, right?</p>



<figure class="wp-block-image size-full"><img loading="lazy" width="2128" height="1024" src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-8.58.35-AM.png?resize=2128%2C1024&#038;ssl=1" alt="" class="wp-image-373374" srcset="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-8.58.35-AM.png?w=2128&amp;ssl=1 2128w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-8.58.35-AM.png?resize=300%2C144&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-8.58.35-AM.png?resize=1024%2C493&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-8.58.35-AM.png?resize=768%2C370&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-8.58.35-AM.png?resize=1536%2C739&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-8.58.35-AM.png?resize=2048%2C986&amp;ssl=1 2048w" sizes="(min-width: 735px) 864px, 96vw" data-recalc-dims="1" /></figure>



<p>What we might expect is that <code>&lt;details&gt;</code> now has an explicit height of <code>40vh</code> and three rows where the third row takes up the remaining space leftover from the first two. Like this:</p>



<figure class="wp-block-image size-full"><img loading="lazy" width="1506" height="358" src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-9.06.18-AM.png?resize=1506%2C358&#038;ssl=1" alt="Open details element with a summary of foo and two child elements, one yellow and one blue. The blue element takes up the rest of the space left by summary and the first child." class="wp-image-373375" srcset="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-9.06.18-AM.png?w=1506&amp;ssl=1 1506w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-9.06.18-AM.png?resize=300%2C71&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-9.06.18-AM.png?resize=1024%2C243&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-9.06.18-AM.png?resize=768%2C183&amp;ssl=1 768w" sizes="(min-width: 735px) 864px, 96vw" data-recalc-dims="1" /></figure>



<p>Ugh, but the third row doesn&#8217;t&#8230; do&#8230; that.</p>



<figure class="wp-block-image size-full"><img loading="lazy" width="1530" height="358" src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-9.07.40-AM.png?resize=1530%2C358&#038;ssl=1" alt="Open details element with a summary of foo and two child elements, one yellow and one blue. The summary and two child elements are all the same height." class="wp-image-373376" srcset="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-9.07.40-AM.png?w=1530&amp;ssl=1 1530w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-9.07.40-AM.png?resize=300%2C70&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-9.07.40-AM.png?resize=1024%2C240&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-9.07.40-AM.png?resize=768%2C180&amp;ssl=1 768w" sizes="(min-width: 735px) 864px, 96vw" data-recalc-dims="1" /></figure>



<p>Apparently what we&#8217;re dealing with is a grid container that is unable to apply grid behavior to its grid items. But the HTML spec tells us:</p>



<blockquote class="wp-block-quote"><p>The&nbsp;<code><a href="https://html.spec.whatwg.org/#the-details-element" rel="noopener">details</a></code>&nbsp;element is <strong>expected to render as a&nbsp;<a href="https://drafts.csswg.org/css2/#block-boxes%E2%91%A0" rel="noopener">block box</a></strong>. The element is also expected to have an internal&nbsp;<a href="https://dom.spec.whatwg.org/#concept-shadow-tree" rel="noopener">shadow tree</a>&nbsp;with two&nbsp;<a href="https://dom.spec.whatwg.org/#concept-slot" rel="noopener">slots</a>.</p><cite>(Emphasis mine)</cite></blockquote>



<p>And a little later:</p>



<blockquote class="wp-block-quote"><p>The&nbsp;<code><a href="https://html.spec.whatwg.org/#the-details-element" rel="noopener">details</a></code>&nbsp;element&#8217;s second&nbsp;<a href="https://dom.spec.whatwg.org/#concept-slot" rel="noopener">slot</a>&nbsp;is expected to have its&nbsp;<code><a href="https://html.spec.whatwg.org/#attr-style" rel="noopener">style</a></code>&nbsp;attribute set to &#8220;<code>display: block; content-visibility: hidden;</code>&#8221; when the&nbsp;<code><a href="https://html.spec.whatwg.org/#the-details-element" rel="noopener">details</a></code>&nbsp;element does not have an&nbsp;<code><a href="https://html.spec.whatwg.org/#attr-details-open" rel="noopener">open</a></code>&nbsp;attribute. <strong>When it does have the&nbsp;<code><a href="https://html.spec.whatwg.org/#attr-details-open" rel="noopener">open</a></code>&nbsp;attribute, the&nbsp;<code><a href="https://html.spec.whatwg.org/#attr-style" rel="noopener">style</a></code>&nbsp;attribute is expected to be removed from the second&nbsp;<a href="https://dom.spec.whatwg.org/#concept-slot" rel="noopener">slot</a>.</strong></p><cite>(Emphasis mine, again)</cite></blockquote>



<p>So, the spec says the second slot — the two additional <code>&lt;div&gt;</code>s from the example — are only coerced into being block elements when <code>&lt;details&gt;</code> is closed. When it&#8217;s open — <code>&lt;details open&gt;</code> — they should conform to the grid display that overrides the user agent styling&#8230; right?</p>



<p>That&#8217;s the debate. I get that <a href="https://html.spec.whatwg.org/#flow-content-3" rel="noopener"><code>slots</code> are set to <code>display: contents</code> by default</a>, but jamming nested elements into slots and removing the ability to style them seems off. Is it a spec issue that the contents are slots, or a browser issue that we cannot override their <code>display</code> even though they are in the box tree? Smarter people can enlighten me but it seems like an incorrect implementation.</p>


<h3 id="is-ltdetailsgt-a-container-or-an-interactive-element">Is <code>&lt;details&gt;</code> a container or an interactive element?</h3>


<p>Lots of folks are <a href="https://css-tricks.com/using-details-for-menus-and-dialogs-is-an-interesting-idea/">using <code>&lt;details&gt;</code> to toggle menus</a> open and closed. It&#8217;s a practice <a href="https://github.com/github/details-menu-element" rel="noopener">popularized by GitHub</a>.</p>



<figure class="wp-block-image size-full"><img loading="lazy" width="1440" height="668" src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-9.46.04-AM.png?resize=1440%2C668&#038;ssl=1" alt="DevTools open with the details element highlighted in orange." class="wp-image-373379" srcset="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-9.46.04-AM.png?w=1440&amp;ssl=1 1440w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-9.46.04-AM.png?resize=300%2C139&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-9.46.04-AM.png?resize=1024%2C475&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-9.46.04-AM.png?resize=768%2C356&amp;ssl=1 768w" sizes="(min-width: 735px) 864px, 96vw" data-recalc-dims="1" /></figure>



<p>Seems reasonable. The spec sure allows it:</p>



<blockquote class="wp-block-quote"><p>The&nbsp;<code><a href="https://html.spec.whatwg.org/#the-details-element" rel="noopener">details</a></code>&nbsp;element&nbsp;<a href="https://html.spec.whatwg.org/#represents" rel="noopener">represents</a>&nbsp;a disclosure widget from which the user can obtain additional information <strong>or controls</strong>.</p><cite>(Emphasis mine)</cite></blockquote>



<p>Alright, so we might expect that <code>&lt;details&gt;</code> is the container (it has an <a href="https://w3c.github.io/html-aam/#el-details" rel="noopener">implicit <code>role=group</code></a>) and <code>&lt;summary&gt;</code> is an interactive element that sets the container&#8217;s <code>open</code> state. Makes sense since <a href="https://w3c.github.io/html-aam/#el-summary" rel="noopener"><code>&lt;summary&gt;</code> has an implcit <code>button</code> role</a> in some contexts (but no corresponding WAI-ARIA role).</p>



<p>But <a href="https://melsumner.github.io/details-as-a-menu" rel="noopener">Melanie Sumner did some digging</a> that not only seems to contradict that, but leads to the conclusion that using <code>&lt;details&gt;</code> as a menu probably ain&#8217;t the best thing. See what happens when <code>&lt;details&gt;</code> is rendered without the <code>&lt;summary&gt;</code> element:</p>



<div class="wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper"><iframe id="cp_embed_yLjaWEG" src="//codepen.io/anon/embed/yLjaWEG?height=250&amp;theme-id=1&amp;slug-hash=yLjaWEG&amp;default-tab=html,result" height="250" scrolling="no" frameborder="0" allowfullscreen allowpaymentrequest name="CodePen Embed yLjaWEG" title="CodePen Embed yLjaWEG" class="cp_embed_iframe" style="width:100%;overflow:hidden">CodePen Embed Fallback</iframe></div>



<p>It does exactly what the spec suggests when it&#8217;s missing a <code>&lt;summary&gt;</code> — it makes its own:</p>



<blockquote class="wp-block-quote"><p>The first&nbsp;<code><a href="https://html.spec.whatwg.org/#the-summary-element" rel="noopener">summary</a></code>&nbsp;element child of the element, <em>if any</em>,&nbsp;<a href="https://html.spec.whatwg.org/#represents" rel="noopener">represents</a>&nbsp;the summary or legend of the details. <strong>If there is no child&nbsp;<code><a href="https://html.spec.whatwg.org/#the-summary-element" rel="noopener">summary</a></code>&nbsp;element, the user agent should provide its own legend (e.g. &#8220;Details&#8221;).</strong></p><cite>(Emphasis mine)</cite></blockquote>



<figure class="wp-block-image size-full"><img loading="lazy" width="1306" height="460" src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-11.01.46-AM.png?resize=1306%2C460&#038;ssl=1" alt="DevTools open with the summary markup highlighted in orange." class="wp-image-373383" srcset="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-11.01.46-AM.png?w=1306&amp;ssl=1 1306w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-11.01.46-AM.png?resize=300%2C106&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-11.01.46-AM.png?resize=1024%2C361&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-11.01.46-AM.png?resize=768%2C271&amp;ssl=1 768w" sizes="(min-width: 735px) 864px, 96vw" data-recalc-dims="1" /></figure>



<p>Melanie ran that through an HTML validator and — surprise! — it&#8217;s invalid:</p>



<figure class="wp-block-image size-full"><img loading="lazy" width="1332" height="274" src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-12.47.26-PM.png?resize=1332%2C274&#038;ssl=1" alt="Error, element details is missing a required instance of child element summary." class="wp-image-373396" srcset="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-12.47.26-PM.png?w=1332&amp;ssl=1 1332w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-12.47.26-PM.png?resize=300%2C62&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-12.47.26-PM.png?resize=1024%2C211&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-12.47.26-PM.png?resize=768%2C158&amp;ssl=1 768w" sizes="(min-width: 735px) 864px, 96vw" data-recalc-dims="1" /></figure>



<p>So, <code>&lt;details&gt;</code> requires the <code>&lt;summary&gt;</code>. And when <code>&lt;summary&gt;</code> is missing, <code>&lt;details&gt;</code> creates it&#8217;s own, though it&#8217;s relayed as invalid markup. It&#8217;s all hunky-dory and valid when  <code>&lt;summary&gt;</code> is there:</p>



<figure class="wp-block-image size-full"><img loading="lazy" width="1200" height="558" src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/173834024-472e2208-a5a6-4920-b0a3-39b323c69e53.png?resize=1200%2C558&#038;ssl=1" alt="Success message from the W3C HTML validator with the markup for a details element and summary that contains a link element." class="wp-image-373385" srcset="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/173834024-472e2208-a5a6-4920-b0a3-39b323c69e53.png?w=1200&amp;ssl=1 1200w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/173834024-472e2208-a5a6-4920-b0a3-39b323c69e53.png?resize=300%2C140&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/173834024-472e2208-a5a6-4920-b0a3-39b323c69e53.png?resize=1024%2C476&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/173834024-472e2208-a5a6-4920-b0a3-39b323c69e53.png?resize=768%2C357&amp;ssl=1 768w" sizes="(min-width: 735px) 864px, 96vw" data-recalc-dims="1" /></figure>



<p>All of which leads to a new question: <strong>why is <code>&lt;summary&gt;</code> given an implcit <code>button</code> role when <code>&lt;details&gt;</code> is what appears to be the interactive element?</strong> Perhaps this is another case where the browser implementation is incorrect? Then again, the spec does categorize both as <a href="https://html.spec.whatwg.org/multipage/interactive-elements.html#interactive-elements" rel="noopener">interactive elements</a>. You can see how utterly confusing all of this becomes.</p>



<p>Either way, Melanie&#8217;s ultimate conclusion that we ought to avoid using <code>&lt;details&gt;</code> for menus is based on how assistive tech reads and announces <code>&lt;details&gt;</code> that contain interactive elements. The element is announced, but there is no mention of interactive controls beyond that until you, er, <em>interact</em> with <code>&lt;details&gt;</code>. Only then will something like a list of links be announced.</p>



<p>Besides, content inside a collapsed <code>&lt;details&gt;</code> is excluded from in-page searching (except in Chromium browsers, which can access the collapsed content at the time of writing), making things even more difficult to find.</p>


<h3 id="should-ltsummarygt-allow-interactive-elements">Should <code>&lt;summary&gt;</code> allow interactive elements?</h3>


<p>That&#8217;s the question posed in <a href="https://github.com/whatwg/html/issues/2272" rel="noopener">this open thread</a>. The idea is that something like this would be invalid:</p>



<pre rel="HTML" class="wp-block-csstricks-code-block language-markup" data-line=""><code markup="tt">&lt;details>
  &lt;summary>&lt;a href="...">Link element&lt;/a>&lt;/summary>
&lt;/details>

&lt;!-- or -->

&lt;details>
  &lt;summary>&lt;input>&lt;/summary>
&lt;/details></code></pre>



<p><a href="https://twitter.com/scottohara" rel="noopener">Scott O&#8217;Hara</a> sums up nicely <a href="https://github.com/whatwg/html/issues/2272#issuecomment-1242415594" rel="noopener">why this is an issue</a>:</p>



<blockquote class="wp-block-quote"><p>The link is not discoverable at all to JAWS when navigating with its virtual cursor. If navigating to the summary element via the Tab key, JAWS announces &#8220;example text, button&#8221; as the name and role of the element. If hitting Tab key again, JAWS again announces &#8220;example text, button&#8221; even though keyboard focus is on the link.</p><p>[&#8230;]</p><p>There is more I could go on about with the various problems different AT have with the content model for summary&#8230; but that would just extend this comment out beyond what is necessary. tldr; the summary content model produces very inconsistent and sometimes just flat out broken experiences for people using AT.</p></blockquote>



<p class="is-style-explanation">Scott opened tickets to correct this behavior in <a href="https://bugs.chromium.org/p/chromium/issues/detail?id=1361983" rel="noopener">Chromium</a> and <a href="https://bugs.webkit.org/show_bug.cgi?id=244984" rel="noopener">WebKit</a>. Thanks, Scott!</p>



<p>Yet, it&#8217;s valid HTML:</p>



<figure class="wp-block-image size-full"><img loading="lazy" width="1406" height="520" src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-11.54.12-AM.png?resize=1406%2C520&#038;ssl=1" alt="Success message from the W3C validator with details markup." class="wp-image-373387" srcset="https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-11.54.12-AM.png?w=1406&amp;ssl=1 1406w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-11.54.12-AM.png?resize=300%2C111&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-11.54.12-AM.png?resize=1024%2C379&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/09/Screen-Shot-2022-09-13-at-11.54.12-AM.png?resize=768%2C284&amp;ssl=1 768w" sizes="(min-width: 735px) 864px, 96vw" data-recalc-dims="1" /></figure>



<p>Scott goes further in a <a href="https://www.scottohara.me//blog/2022/09/12/details-summary.html" rel="noopener">separate blog post</a>. For example, he explains how slapping <code>role=button</code> on <code>&lt;summary></code> might seem like a reasonable fix to ensure it is consistently announced by assistive tech. That would also settle the debate over whether <code>&lt;summary></code> should allow interactive elements because <a href="https://html.spec.whatwg.org/multipage/form-elements.html#the-button-element" rel="noopener">buttons cannot contain interactive elements</a>. The only problem is that Safari then treats <code>&lt;summary></code> as a standard button, which loses its <code>expanded</code> and <code>collapsed</code> states. So, the correct role is announced, but now its state is not. &#x1f643;</p>


<h3 id="where-do-we-go-now">Where do we go now?</h3>


<p>Are you scared to use <code>&lt;details&gt;</code>/<code>&lt;summary&gt;</code> with all of these issues and inconsistencies? I sure am, but only insofar as to make sure that what&#8217;s in it provides the right sort of experience and expectations for users.</p>



<p>I&#8217;m just glad these conversations are happening and that they&#8217;re taking place in the open. Because of that, you can comment on Scott&#8217;s three proposed solutions for how the content model for <code>&lt;summary&gt;</code> is defined, upvote his tickets, and report your own issues and use cases while you&#8217;re at it. Hopefully, the better we understand how the elements are used and what we expect them to do, the better they are implemented.</p>
<hr />
<p><small><a rel="nofollow" href="https://css-tricks.com/more-details-on-details/">More Details on `details`</a> originally published on <a rel="nofollow" href="https://css-tricks.com">CSS-Tricks</a>, which is part of the <a href="https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=">DigitalOcean</a> family. You should <a href="https://css-tricks.com/newsletters/">get the newsletter</a>.</p>
]]></content:encoded>

      <wfw:commentRss>https://css-tricks.com/more-details-on-details/feed/</wfw:commentRss>
      <slash:comments>3</slash:comments>


      <post-id xmlns="com-wordpress:feed-additions:1">373372</post-id>
    </item>
    <item>
      <title>When is it OK to Disable Text Selection?</title>
      <link>https://css-tricks.com/when-is-it-ok-to-disable-text-selection/</link>
      <comments>https://css-tricks.com/when-is-it-ok-to-disable-text-selection/#comments</comments>

      <dc:creator><![CDATA[Daniel Schwarz]]></dc:creator>
      <pubDate>Wed, 14 Sep 2022 13:03:04 +0000</pubDate>
      <category><![CDATA[Article]]></category>
      <category><![CDATA[::selection]]></category>
      <category><![CDATA[user-select]]></category>
      <guid isPermaLink="false">https://css-tricks.com/?p=373100</guid>

      <description><![CDATA[<p>Using CSS, it’s possible to prevent users from selecting text within an element using <code>user-select: none</code>. Now, it’s understandable why doing so might be considered “controversial”. I mean, <em>should</em> we be disabling standard user behaviors? Generally speaking, no, <a href="https://css-tricks.com/copy-paste-the-web/">we </a>&#8230;</p>
<hr />
<p><small><a rel="nofollow" href="https://css-tricks.com/when-is-it-ok-to-disable-text-selection/">When is it OK to Disable Text Selection?</a> originally published on <a rel="nofollow" href="https://css-tricks.com">CSS-Tricks</a>, which is part of the <a href="https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=">DigitalOcean</a> family. You should <a href="https://css-tricks.com/newsletters/">get the newsletter</a>.</p>
]]></description>
      <content:encoded><![CDATA[
<p>Using CSS, it’s possible to prevent users from selecting text within an element using <code>user-select: none</code>. Now, it’s understandable why doing so might be considered “controversial”. I mean, <em>should</em> we be disabling standard user behaviors? Generally speaking, no, <a href="https://css-tricks.com/copy-paste-the-web/">we shouldn’t be doing that</a>. But does disabling text selection have some legitimate (albeit rare) use-cases? I think so.</p>



<span id="more-373100"></span>



<p>In this article we’ll explore these use cases and take a look at how we can use <code>user-select: none</code> to improve (not hinder) user experiences. It’s also worth nothing that the <a href="https://css-tricks.com/almanac/properties/u/user-select/"><code>user-select</code></a> property has other values besides <code>none</code> that can be used to alter the behavior of text selection rather than disable it completely, and another value that even <em>enforces</em> text selection, so we’ll also take a look at those.</p>


<h3 id="possible-userselect-values">Possible <code>user-select</code> values</h3>


<p>Let’s kick things off by running through the different <code>user-select</code> values and what they do.</p>



<p>Applying <code>user-select: none;</code> to an element means that its text content and nested text content won’t be functionally selectable or visually selectable (i.e. <code>::selection</code> won’t work). If you were to make a selection that contained some non-selectable content, the non-selectable content would be omitted from the selection, so it’s fairly well implemented. And the support is great.</p>


<div class="caniuse"><div class="caniuse-header"><p>This browser support data is from <a href="http://caniuse.com/#feat=”user-select-none”" rel="noopener">Caniuse</a>, which has more detail. A number indicates that browser supports the feature at that version and up.</p></div><div class="caniuse-section"><h4>Desktop</h4><table class="browser-support-table"><thead><tr><th class="chrome"><span>Chrome</span></th><th class="firefox"><span>Firefox</span></th><th class="ie"><span>IE</span></th><th class="edge"><span>Edge</span></th><th class="safari"><span>Safari</span></th></tr></thead><tbody><tr><td class="y yep" title="Chrome - "><span class="caniuse-agents-version version">4*</span></td><td class="y yep" title="Firefox - "><span class="caniuse-agents-version version">2*</span></td><td class="y yep" title="IE - "><span class="caniuse-agents-version version">10*</span></td><td class="y yep" title="Edge - "><span class="caniuse-agents-version version">12*</span></td><td class="y yep" title="Safari - "><span class="caniuse-agents-version version">3.1*</span></td></tr></table></div><div class="caniuse-section"><h4>Mobile / Tablet</h4><table class="browser-support-table"><thead><tr><th class="and_chr"><span>Android Chrome</span></th><th class="and_ff"><span>Android Firefox</span></th><th class="android"><span>Android</span></th><th class="ios_saf"><span>iOS Safari</span></th></tr></thead><tbody><tr><td class="y yep" title="Android Chrome - "><span class="caniuse-agents-version version">105</span></td><td class="y yep" title="Android Firefox - "><span class="caniuse-agents-version version">104</span></td><td class="y yep" title="Android - "><span class="caniuse-agents-version version">2.1*</span></td><td class="y yep" title="iOS Safari - "><span class="caniuse-agents-version version">3.2*</span></td></tr></table></div></div>



<p>Conversely, <code>user-select: text</code> makes the content selectable. You’d use this value to overwrite <code>user-select: none</code>.</p>



<p><code>user-select: contain</code> is an interesting one. Applying it means that if a selection begins within the element then it must end within it too, containing it. This oddly doesn’t apply when the selection begins <em>before</em> the element, however, which is probably why no browser currently supports it. (Internet Explorer and earlier versions of Microsoft Edge previously supported it under the guise of <code>user-select: element</code>.)</p>



<p>With <code>user-select: all</code>, selecting part of the element’s content results in all of it being selected automatically. It’s all or nothing, which is very uncompromising but useful in circumstances where users are more likely to copy content to their clipboard (e.g. sharing and embedding links, code snippets, etc.). Instead of double-clicking, users will only need to click once for the content to auto-select.</p>



<p>Be careful, though, since this isn’t always the feature you think it is. What if users only want to select <em>part</em> of the content (e.g. only the font name part of a Google Fonts snippet or one part of a code snippet)? It’s still better to handle ”<a href="https://css-tricks.com/native-browser-copy-clipboard/">copy to clipboard</a>” using JavaScript in many scenarios.</p>



<p>A better application of <code>user-select: all</code> is to ensure that quotes are copied entirely and accurately.</p>



<p>The behavior of <code>user-select: auto</code> (the initial value of <code>user-select</code>) depends on the element and how it’s used. You can find out more about this in <a href="https://css-tricks.com/almanac/properties/u/user-select/">our almanac</a>.</p>



<p>Now let’s turn to exploring use cases for <code>user-select: none</code>…</p>


<h3 id="stripping-nontext-from-the-selection">Stripping non-text from the selection</h3>


<p>When you’re copying content from a web page, it’s probably from an article or some other type of long-form content, right? You probably don’t want your selection to include images, emoji (which can sometimes copy as text, e.g. “:thinkingface:”), and other things that you might expect to find wrapped in an <code>&lt;aside&gt;</code> element (e.g. in-article calls to action, ads, or something else that’s not part of the main content).</p>



<p>To prevent something from being included in selections, make sure that it’s wrapped in an HTML element and then apply <code>user-select: none</code> to it:</p>



<pre rel="HTML" class="wp-block-csstricks-code-block language-markup" data-line=""><code markup="tt">&lt;p>lorem &lt;span style="user-select: none">&#x1f914;&lt;/span> ipsum&lt;/p>

&lt;aside style="user-select: none">
  &lt;h1>Heading&lt;/h1>
  &lt;p>Paragraph&lt;/p>
  &lt;a>Call to action&lt;/a>
&lt;/aside></code></pre>



<p>In scenarios like this, we’re not disabling selection, but rather <em>optimizing</em> it. It’s also worth mentioning that selecting doesn’t necessarily mean copying — many readers (including myself) like to select content as they read it so that they can remember where they are (like a bookmark), another reason to optimize rather than disable completely.</p>


<h3 id="preventing-accidental-selection">Preventing accidental selection</h3>


<p>Apply <code>user-select: none</code> to links that look like buttons (e.g. <code>&lt;a href="/whatever" class="button"&gt;Click Me!&lt;/a&gt;</code>).</p>



<p>It’s not possible to select the text content of a <code>&lt;button&gt;</code> or <code>&lt;input type="submit"&gt;</code> because, well, why would you? However, this behavior doesn’t apply to links because traditionally they form part of a paragraph that should be selectable.</p>



<p>Fair enough.</p>



<p>We could argue that <a href="https://css-tricks.com/buttons-vs-links/">making links look like buttons is an anti-pattern</a>, but whatever. It’s not breaking the internet, is it? That ship has sailed anyway, so if you’re using links designed to look like buttons then they should mimic the behavior of buttons, not just for consistency but to prevent users from accidentally selecting the content instead of triggering the interaction.</p>



<p>I’m certainly prone to selecting things accidentally since I use my laptop in bed more than I care to admit. Plus, there are several medical conditions that can affect control and coordination, turning an intended click into an unintended drag/selection, so there are accessibility concerns that can be addressed with <code>user-select</code> too.</p>



<p>Interactions that require dragging (intentionally) do exist too of course (e.g. in browser games), but these are uncommon. Still, it just shows that <code>user-select</code> does in fact have quite a few use-cases.</p>


<h3 id="avoiding-paywalled-content-theft">Avoiding paywalled content theft</h3>


<p>Paywalled content gets a lot of hate, but if you feel that you need to protect your content, it’s your content — nobody has the right steal it just because they don’t believe they should pay for it.</p>



<p>If you do want to go down this route, there are many ways to make it more difficult for users to bypass paywalls (or similarly, copy copyrighted content such as the published work of others).</p>



<p>Blurring the content with CSS:</p>



<pre rel="CSS" class="wp-block-csstricks-code-block language-css" data-line=""><code markup="tt">article { filter: blur(&lt;radius>); }</code></pre>



<p>Disabling the keyboard shortcuts for DevTools:</p>



<pre rel="JavaScript" class="wp-block-csstricks-code-block language-javascript" data-line=""><code markup="tt">document.addEventListener("keydown", function (e) {
  if (e.keyCode == 123) e.preventDefault();
  else if ((e.ctrlKey || e.metaKey) &amp;&amp; e.altKey &amp;&amp; e.keyCode == 73) e.preventDefault();
  else if ((e.ctrlKey || e.metaKey) &amp;&amp; e.altKey &amp;&amp; e.keyCode == 74) e.preventDefault();
  else if ((e.ctrlKey || e.metaKey) &amp;&amp; e.altKey &amp;&amp; e.keyCode == 85) e.preventDefault();
});</code></pre>



<p>Disabling access to DevTools via the context menu by disabling the context menu itself:</p>



<pre rel="JavaScript" class="wp-block-csstricks-code-block language-javascript" data-line=""><code markup="tt">document.addEventListener("contextmenu", e => e.preventDefault())</code></pre>



<p>And of course, to prevent users from copying the content when they’re not allowed to read it at the source, applying <code>user-select: none</code>:</p>



<pre rel="HTML" class="wp-block-csstricks-code-block language-markup" data-line=""><code markup="tt">&lt;article style="user-select: none"></code></pre>


<h3 id="any-other-use-cases">Any other use cases?</h3>


<p>Those are the three use cases I could think of for preventing text selection. Several others crossed my mind, but they all seemed like a stretch. But what about you? Have you had to disable text selection on anything? I’d like to know!</p>
<hr />
<p><small><a rel="nofollow" href="https://css-tricks.com/when-is-it-ok-to-disable-text-selection/">When is it OK to Disable Text Selection?</a> originally published on <a rel="nofollow" href="https://css-tricks.com">CSS-Tricks</a>, which is part of the <a href="https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=">DigitalOcean</a> family. You should <a href="https://css-tricks.com/newsletters/">get the newsletter</a>.</p>
]]></content:encoded>

      <wfw:commentRss>https://css-tricks.com/when-is-it-ok-to-disable-text-selection/feed/
      </wfw:commentRss>
      <slash:comments>25</slash:comments>


      <post-id xmlns="com-wordpress:feed-additions:1">373100</post-id>
    </item>
  </channel>
</rss>
