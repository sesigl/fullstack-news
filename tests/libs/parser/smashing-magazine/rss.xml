<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Articles on Smashing Magazine — For Web Designers And Developers</title>
    <link>https://www.smashingmagazine.com/</link>
    <description>Recent content in Articles on Smashing Magazine — For Web Designers And
      Developers
    </description>
    <lastBuildDate>Mon, 03 Oct 2022 14:33:25 GMT</lastBuildDate>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
    <generator>manual</generator>
    <language>en</language>
    <image>
      <title>Articles on Smashing Magazine — For Web Designers And Developers</title>
      <url>https://www.smashingmagazine.com/images/favicon/app-icon-512x512.png</url>
      <link>https://www.smashingmagazine.com/</link>
    </image>
    <copyright>All rights reserved 2022, Smashing Media AG</copyright>
    <category>Development</category>
    <category>Design</category>
    <category>UX</category>
    <category>Mobile</category>
    <category>Front-end</category>
    <atom:link href="https://www.smashingmagazine.com/feed/" rel="self" type="application/rss+xml"/>
    <item>
      <title>
        <![CDATA[Delightful UI Animations With Shared Element Transitions API (Part 1)]]></title>
      <link>
        https://smashingmagazine.com/2022/10/ui-animations-shared-element-transitions-api-part1/
      </link>
      <guid>
        https://smashingmagazine.com/2022/10/ui-animations-shared-element-transitions-api-part1/
      </guid>
      <pubDate>Mon, 03 Oct 2022 13:00:00 GMT</pubDate>
      <description>
        <![CDATA[Shared Element Transitions API is a game-changing feature that will enable us to create impressive and elaborate UI animations easily. In this article, Adrian Bece will explore its incredible potential by building four real-life examples from scratch.]]></description>
      <content:encoded><![CDATA[<p>Animations are an essential part of web design and development. They can draw attention, guide users on their journey, provide satisfying and meaningful feedback to interaction, <a href="https://teatrlalka.pl/en">add character and flair to make the website stand out</a>, and so much more!</p>
<p>Before we begin, let’s take a quick look at the following video and imagine how much CSS and JavaScript would take to create an animation like this. Notice that the cart counter is also animated, and the animation runs right after the previous one completes.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/425e454f-c9a2-4c13-833e-ac7cfc5a89b0/1-ui-animations-shared-element-transitions-api-part1.png" /></p>
<p>Although this animation looks alright, it’s just a minor improvement. Currently, the API doesn’t really know that the image (shared element) that is being moved from the container to the overlay is the same element in their respective states. We need to instruct the browser to pay special attention to the image element when switching between states, so let’s do that!</p>
<h3>Creating A Shared Element Animation</h3>
<p>With <code>page-transition-tag</code> <strong>CSS property</strong>, we can easily tell the browser to watch for the element in both outgoing and incoming images, <strong>keep track of element’s size and position</strong> that are changing between them, and apply the appropriate animation.</p>
<p>We also need to apply the <code>contain: paint</code> or <code>contain: layout</code> to the shared element. <strong>This wasn’t required for the crossfade animations, as it’s only required for elements that will receive the</strong> <code>page-transition-tag</code>. If you want to learn more about CSS containment, Rachel Andrew wrote a <a href="https://www.smashingmagazine.com/2019/12/browsers-containment-css-contain-property/">very detailed article</a> explaining it.</p>
<pre><code>.gallery__image--active {
  page-transition-tag: active-image;
}

.gallery__image {
  contain: paint;
}
</code></pre>

<p>Another important caveat is that <code>page-transition-tag</code> <strong>has to be unique, and we can apply it to only one element during the duration of the animation</strong>. This is why we apply it to the active image element right before the image is moved to the overlay and remove it when the image overlay is closed and the image is returned to its original position:</p>
<div>
<pre><code>async function toggleImageView(index) {
   const image = document.getElementById(<code>js-gallery-image-${index}</code>);

  // Apply a CSS class that contains the page-transition-tag before animation starts.
  image.classList.add("gallery__image--active");

  const imageParentElement = image.parentElement;

  const moveTransition = document.createDocumentTransition();
  await moveTransition.start(() =&gt; moveImageToModal(image));

  overlayWrapper.onclick = async function () {
    const moveTransition = document.createDocumentTransition();
    await moveTransition.start(() =&gt; moveImageToGrid(imageParentElement));

    // Remove the class which contains the page-transition-tag after the animation ends.
    image.classList.remove("gallery__image--active");
  };
}
</code></pre>
</div>

<p>Alternatively, we could have used JavaScript to toggle the <code>page-transition-tag</code> property inline on the element. However, it’s better to use the CSS class <code>toggle</code> to make use of media queries to apply the tag conditionally:</p>
<pre><code>// Applies page-transition-tag to the image.
image.style.pageTransitionTag = "active-image";

// Removes page-transition-tag from the image.
image.style.pageTransitionTag = "none";
</code></pre>

<p>And that’s pretty much it! Let’s take a look at our example with the shared element applied:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/895adde5-dabe-4b3b-8e0c-9961d5848a4b/2-ui-animations-shared-element-transitions-api-part1.png" /></p>
<h3>Customizing Animation Duration And Easing Function</h3>
<p>We’ve created this complex transition with just a few lines of CSS and JavaScript, which turned out great. However, we expect to have more control over the animation properties like duration, easing function, delay, and so on to create even more elaborate animations or compose them for even greater effect.</p>
<p><strong>Shared Element Transitions API makes use of CSS <code>animation</code> properties</strong> and we can use them to fully customize our state animation. But which CSS selectors to use for these outgoing and incoming states that the API is generating for us?</p>
<p>Shared Element Transition API introduces new <strong>pseudo-elements</strong> that are added to DOM when its animations are run. Jake Archibald explains the pseudo-element tree in his <a href="https://developer.chrome.com/blog/shared-element-transitions-for-spas/#transitioning-multiple-elements">Chrome developers article</a>. By default (in case of crossfade animation), we get the following tree of pseudo-elements:</p>
<pre><code>::page-transition
└─ ::page-transition-container(root)
   └─ ::page-transition-image-wrapper(root)
      ├─ ::page-transition-outgoing-image(root)
      └─ ::page-transition-incoming-image(root)
</code></pre>

<p>These pseudo-elements may seem a bit confusing at first, so I’m including <a href="https://github.com/WICG/shared-element-transitions/blob/main/explainer.md">WICG’s concise explanation</a> for these pseudo-elements and their general purpose:</p>
<blockquote><ul><li><code>::page-transition</code> sits in a top-layer, over everything else on the page.</li><li><code>::page-transition-outgoing-image(root)</code> is a screenshot of the old state, and <code>::page-transition-incoming-image(root)</code> is a live representation of the new state. Both render as CSS replaced content.</li><li><code>::page-transition-container</code> animates size and position between the two states.</li><li><code>::page-transition-image-wrapper</code> provides blending isolation, so the two images can correctly cross-fade.</li><li><code>::page-transition-outgoing-image</code> and <code>::page-transition-incoming-image</code> are the visual states to cross-fade.</li></ul></blockquote>

<p>For example, when we apply the <code>page-transition-tag: active-image</code>, its pseudo-elements are added to the tree:</p>
<pre><code>::page-transition
├─ ::page-transition-container(root)
│  └─ ::page-transition-image-wrapper(root)
│     ├─ ::page-transition-outgoing-image(root)
│     └─ ::page-transition-incoming-image(root)
└─ ::page-transition-container(active-image)
   └─ ::page-transition-image-wrapper(active-image)
      ├─ ::page-transition-outgoing-image(active-image)
      └─ ::page-transition-incoming-image(active-image)
</code></pre>

<p>In our example, we want to modify both the crossfade (root) animation and the shared element animation. We can use the universal selector <code>*</code> with the pseudo-element to change animation properties for all available transition elements and target pseudo-elements for specific animation using the <code>page-transition-tag</code> value.</p>
<p>In this example, we are applying <code>400ms</code> duration for all animated elements with an <code>ease-in-out</code> easing function, and then override the <code>active-image</code> transition easing function and setting a custom <code>cubic-bezier</code> value:</p>
<pre><code>::page-transition-container(*) {
  animation-duration: 400ms;
  animation-timing-function: ease-in-out;
}

::page-transition-container(active-image) {
  animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
}
</code></pre>

<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/35e3402b-bc94-403b-9c40-a8f479345719/3-ui-animations-shared-element-transitions-api-part1.png" /></p>
<h3>Accessible Animations</h3>
<p>It’s important to be aware of accessibility requirements when working with animations. Some people prefer <a href="https://www.w3.org/WAI/WCAG21/Understanding/animation-from-interactions.html">browsing the web with reduced motion</a>, so we must either remove an animation or provide a more suitable alternative. This can be easily done with a widely supported <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion">prefers-reduced-motion</a> media query.</p>
<p>The following code snippet turns off animations for all elements using the Shared Element Transitions API. This is a shotgun solution, and we need to ensure that DOM updates smoothly and remains usable even with the animations turned off:</p>
<pre><code>@media (prefers-reduced-motion) {
    /* Turn off all animations */
    ::page-transition-container(*),
    ::page-transition-outgoing-image(*),
    ::page-transition-incoming-image(*) {
        animation: none !important;
    }

    /* Or, better yet, create accessible alternatives for these animations  */
}
</code></pre>

<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/04aebbec-3cb1-4143-a742-cf1dd971d517/4-ui-animations-shared-element-transitions-api-part1.png" /></p>
<pre><code>@keyframes fadeOut {
    from {
        filter: blur(0px) brightness(1) opacity(1);
    }
    to {
        filter: blur(6px) brightness(8) opacity(0);
    }
}

@keyframes fadeIn {
    from {
        filter: blur(6px) brightness(8) opacity(0);
    }
    to {
        filter: blur(0px) brightness(1) opacity(1);
    }
}
</code></pre>

<p>Now, all we have to do is assign the exit animation to the outgoing image pseudo-element and the entry animation to the incoming image pseudo-element. We can set a <code>page-transition-tag</code> directly to the HTML image element as it’s the only element that will perform this animation:</p>
<div>
<pre><code>/* We are applying contain property on all browsers (regardless of property support) to avoid differences in rendering and introducing bugs */
.gallery img {
    contain: paint;
}

@supports (page-transition-tag: supports-tag) {
    .gallery img {
        page-transition-tag: gallery-image;
    }

    ::page-transition-outgoing-image(gallery-image) {
        animation: fadeOut 0.4s ease-in both;
    }

    ::page-transition-incoming-image(gallery-image) {
        animation: fadeIn 0.4s ease-out 0.15s both;
    }
}
</code></pre>
</div>

<p>Even the seemingly simple crossfade animations can look cool, don’t you think? I think this particular animation fits really nicely with the dark theme we have in the example.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/33d27692-b13e-4d7f-9c97-e0c9775b51f0/5-ui-animations-shared-element-transitions-api-part1.png" /></p>
<div>
<pre><code>/* We are applying contain property on all browsers (regardless of property support) to avoid differences in rendering and introducing bugs */
.product__dot {
  contain: paint;
}

.shopping-bag__counter span {
  contain: paint;
}

@supports (page-transition-tag: supports-tag) {
  ::page-transition-container(cart-dot) {
    animation-duration: 0.7s;
    animation-timing-function: ease-in;
  }

  ::page-transition-outgoing-image(cart-counter) {
    animation: toDown 0.3s cubic-bezier(0.4, 0, 1, 1) both;
  }

  ::page-transition-incoming-image(cart-counter) {
    animation: fromUp 0.3s cubic-bezier(0, 0, 0.2, 1) 0.3s both;
  }
}

@keyframes toDown {
  from {
    transform: translateY(0);
    opacity: 1;
  }
  to {
    transform: translateY(4px);
    opacity: 0;
  }
}

@keyframes fromUp {
  from {
    transform: translateY(-3px);
    opacity: 0;
  }
  to {
    transform: translateY(0);
    opacity: 1;
  }
}
</code></pre>
</div>

<p>And that is it! It amazes me every time how elaborate these animations can turn out with so few lines of additional code, all thanks to Shared Element Transitions API. Notice that the <code>header</code> element with the <code>cart</code> icon is fixed, so it sticks to the top, and our standard animation setup works like a charm, regardless!</p>
<p>See the Pen <a href="https://codepen.io/smashingmag/pen/vYjxEOR">Add to cart animation - completed (2) [forked]</a> by <a href="https://codepen.io/AdrianBece">Adrian Bece</a>.</p>
Conclusion
<p>When done correctly, animations can <a href="http://species-in-pieces.com/">breathe life into any project</a> and offer a <a href="https://teatrlalka.pl/en">more delightful and memorable experience</a> to users. With the upcoming Shared Element Transitions API, creating complex UI state transition animations has never been easier, but we still need to be careful how we use and implement animations.</p>
<p>This simplicity can give way to bad practices, such as not using animations correctly, creating slow or repetitive animations, creating needlessly complex animations, and so on. It’s important to <a href="https://www.designbetter.co/animation-handbook">learn best practices for animations</a> and on the web so we can effectively utilize this API to create truly amazing and accessible experiences or even consult with the designer if we are unsure on how to proceed.</p>
<p>In the next article, we’ll explore the API’s potential when it comes to transition between different pages in Single Page Apps (SPA) and the upcoming Cross-document same-origin transitions, which are yet to be implemented.</p>
<p>I am excited to see what the <a href="https://codepen.io/jh3y/pen/YzaQezW">dev community will build</a> using this awesome new feature. Feel free to reach out on <a href="https://twitter.com/AdrianBeceDev">Twitter</a> or <a href="https://www.linkedin.com/in/adrianbece/">LinkedIn</a> if you have any questions or if you built something amazing using this API. </p>
<p>Go ahead and build something awesome!</p>
<p><em>Many thanks to <a href="https://twitter.com/jaffathecake">Jake Archibald</a> for reviewing this article for technical accuracy.</em></p>
<h3>References</h3>
<ul>
<li><a href="https://github.com/WICG/shared-element-transitions/blob/main/explainer.md">Shared Element Transitions</a>, WICG</li>
<li>“<a href="https://developer.chrome.com/blog/shared-element-transitions-for-spas/">Smooth And Simple Page Transitions With The Shared Element Transition API</a>”, Jake Archibald</li>
<li><a href="https://twitter.com/jh3yy/status/1550675304280035328">Shared Element Transitions API Twitter thread</a>, Jhey</li>
<li><a href="https://drafts.csswg.org/css-shared-element-transitions-1/">CSS Shared Element Transitions Module Level 1</a>, W3C</li>
</ul>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Adrian Bece)</author>
      <enclosure
        url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/aa71c04f-6c9e-4717-8767-a6f31f3c20c9/ui-animations-shared-element-transitions-api-part1.jpg"
        length="0" type="image/jpg"/>
    </item>
    <item>
      <title><![CDATA[October Vibes For Your Desktop (2022 Wallpapers Edition)]]></title>
      <link>https://smashingmagazine.com/2022/09/desktop-wallpaper-calendars-october-2022/</link>
      <guid>https://smashingmagazine.com/2022/09/desktop-wallpaper-calendars-october-2022/</guid>
      <pubDate>Fri, 30 Sep 2022 13:30:00 GMT</pubDate>
      <description>
        <![CDATA[How about a little inspiration boost? Well, we might have something for you: desktop wallpapers created with love by artists and designers from across the globe. They are available in versions with and without a calendar for October and can be downloaded for free. Enjoy!]]></description>
      <content:encoded><![CDATA[<p>When we look closely, inspiration can lie everywhere. In the leaves shining in the most beautiful colors in many parts of the world at this time of year, in a cup of coffee and a conversation with a friend, or when taking a walk on a windy October day. Whatever <em>your</em> secret to finding new inspiration might be, our monthly wallpapers series is bound to give you a little <strong>inspiration boost</strong>, too.</p>

<p>For this October edition, artists and designers from across the globe once again challenged their creative skills and designed <strong>wallpapers to spark your imagination</strong> and make the month a bit more colorful than it already is. Like every month since we embarked on this wallpapers adventure <a href="https://www.smashingmagazine.com/category/wallpapers">more than eleven years ago</a>.</p>

<p>The wallpapers in this collection all come in versions with and without a calendar for <strong>October 2022</strong> — so no matter if you want to keep an eye on your deadlines or plan to use your favorite design even after the month has ended, we’ve got you covered. Speaking of favorites: As a little bonus goodie, you’ll also find some oldies but goodies from past October editions at the end of this post. A big thank-you to everyone who shared their designs with us — this post wouldn’t exist without you!</p>

<ul>
<li>You can <strong>click on every image to see a larger preview</strong>,</li>
<li>We respect and carefully consider the ideas and motivation behind each and every artist’s work. This is why we give all artists the <strong>full freedom to explore their creativity</strong> and express emotions and experience through their works. This is also why the themes of the wallpapers weren’t anyhow influenced by us but rather designed from scratch by the artists themselves.</li>
<li><strong><a href="https://www.smashingmagazine.com/desktop-wallpaper-calendars-join-in/">Submit a wallpaper!</a></strong><br />Did you know that <em>you</em> could get featured in our next wallpapers post, too? We are always <strong>looking for creative talent</strong>.</li>
</ul>

Dreamy Autumn Girl
<p>“Our designers were inspired by the coziness of autumn and the mood that it evokes — the only desire that appears is to put on a warm cozy sweater, take a cup of warm tea, and just enjoy the view outside the window. If you want more free calendars on other thematic, check out our <a href="https://masterbundles.com/free-printable-october-calendars/">listicle</a>.” — Designed by <a href="https://masterbundles.com/">MasterBundles</a> from Ukraine.</p>
<a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/oct-22-dreamy-autumn-girl-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5e6453cd-7ad1-45e4-b88c-afe922049104/oct-22-dreamy-autumn-girl-preview-opt.png" /></a>
<ul>
<li><a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/oct-22-dreamy-autumn-girl-preview.png">preview</a></li>
<li>with calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/cal/oct-22-dreamy-autumn-girl-cal-320x480.png">320x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/cal/oct-22-dreamy-autumn-girl-cal-640x480.png">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/cal/oct-22-dreamy-autumn-girl-cal-800x480.png">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/cal/oct-22-dreamy-autumn-girl-cal-800x600.png">800x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/cal/oct-22-dreamy-autumn-girl-cal-1024x768.png">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/cal/oct-22-dreamy-autumn-girl-cal-1024x1024.png">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/cal/oct-22-dreamy-autumn-girl-cal-1152x864.png">1152x864</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/cal/oct-22-dreamy-autumn-girl-cal-1280x720.png">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/cal/oct-22-dreamy-autumn-girl-cal-1280x800.png">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/cal/oct-22-dreamy-autumn-girl-cal-1280x960.png">1280x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/cal/oct-22-dreamy-autumn-girl-cal-1280x1024.png">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/cal/oct-22-dreamy-autumn-girl-cal-1366x768.png">1366x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/cal/oct-22-dreamy-autumn-girl-cal-1400x1050.png">1400x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/cal/oct-22-dreamy-autumn-girl-cal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/cal/oct-22-dreamy-autumn-girl-cal-1600x1200.png">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/cal/oct-22-dreamy-autumn-girl-cal-1680x1050.png">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/cal/oct-22-dreamy-autumn-girl-cal-1680x1200.png">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/cal/oct-22-dreamy-autumn-girl-cal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/cal/oct-22-dreamy-autumn-girl-cal-1920x1200.png">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/cal/oct-22-dreamy-autumn-girl-cal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/cal/oct-22-dreamy-autumn-girl-cal-2560x1440.png">2560x1440</a></li>
<li>without calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/nocal/oct-22-dreamy-autumn-girl-nocal-320x480.png">320x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/nocal/oct-22-dreamy-autumn-girl-nocal-640x480.png">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/nocal/oct-22-dreamy-autumn-girl-nocal-800x480.png">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/nocal/oct-22-dreamy-autumn-girl-nocal-800x600.png">800x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/nocal/oct-22-dreamy-autumn-girl-nocal-1024x768.png">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/nocal/oct-22-dreamy-autumn-girl-nocal-1024x1024.png">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/nocal/oct-22-dreamy-autumn-girl-nocal-1152x864.png">1152x864</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/nocal/oct-22-dreamy-autumn-girl-nocal-1280x720.png">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/nocal/oct-22-dreamy-autumn-girl-nocal-1280x800.png">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/nocal/oct-22-dreamy-autumn-girl-nocal-1280x960.png">1280x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/nocal/oct-22-dreamy-autumn-girl-nocal-1280x1024.png">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/nocal/oct-22-dreamy-autumn-girl-nocal-1366x768.png">1366x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/nocal/oct-22-dreamy-autumn-girl-nocal-1400x1050.png">1400x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/nocal/oct-22-dreamy-autumn-girl-nocal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/nocal/oct-22-dreamy-autumn-girl-nocal-1600x1200.png">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/nocal/oct-22-dreamy-autumn-girl-nocal-1680x1050.png">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/nocal/oct-22-dreamy-autumn-girl-nocal-1680x1200.png">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/nocal/oct-22-dreamy-autumn-girl-nocal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/nocal/oct-22-dreamy-autumn-girl-nocal-1920x1200.png">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/nocal/oct-22-dreamy-autumn-girl-nocal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/nocal/oct-22-dreamy-autumn-girl-nocal-2560x1440.png">2560x1440</a></li>
</ul>

Spooky Season
<p>“Trick or treating, Tim Burton movies, Edgar Allan Poe poems — once these terms rise up to the top of Google searches, we know that the spooky season is here. We witch you a happy Halloween!” — Designed by <a href="https://www.popwebdesign.net/webdizajn.html">PopArt Studio</a> from Serbia.</p>
<a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/oct-22-spooky-season-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ca7b6fd8-7d32-45d1-97e5-e8c85d089a25/oct-22-spooky-season-preview-opt.png" /></a>
<ul>
<li><a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/oct-22-spooky-season-preview.png">preview</a></li>
<li>with calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/cal/oct-22-spooky-season-cal-320x480.png">320x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/cal/oct-22-spooky-season-cal-640x480.png">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/cal/oct-22-spooky-season-cal-800x480.png">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/cal/oct-22-spooky-season-cal-800x600.png">800x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/cal/oct-22-spooky-season-cal-1024x768.png">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/cal/oct-22-spooky-season-cal-1024x1024.png">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/cal/oct-22-spooky-season-cal-1152x864.png">1152x864</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/cal/oct-22-spooky-season-cal-1280x720.png">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/cal/oct-22-spooky-season-cal-1280x800.png">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/cal/oct-22-spooky-season-cal-1280x960.png">1280x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/cal/oct-22-spooky-season-cal-1280x1024.png">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/cal/oct-22-spooky-season-cal-1366x768.png">1366x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/cal/oct-22-spooky-season-cal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/cal/oct-22-spooky-season-cal-1440x1050.png">1440x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/cal/oct-22-spooky-season-cal-1600x1200.png">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/cal/oct-22-spooky-season-cal-1680x1050.png">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/cal/oct-22-spooky-season-cal-1680x1200.png">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/cal/oct-22-spooky-season-cal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/cal/oct-22-spooky-season-cal-1920x1200.png">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/cal/oct-22-spooky-season-cal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/cal/oct-22-spooky-season-cal-2560x1440.png">2560x1440</a></li>
<li>without calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/nocal/oct-22-spooky-season-nocal-320x480.png">320x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/nocal/oct-22-spooky-season-nocal-640x480.png">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/nocal/oct-22-spooky-season-nocal-800x480.png">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/nocal/oct-22-spooky-season-nocal-800x600.png">800x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/nocal/oct-22-spooky-season-nocal-1024x768.png">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/nocal/oct-22-spooky-season-nocal-1024x1024.png">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/nocal/oct-22-spooky-season-nocal-1152x864.png">1152x864</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/nocal/oct-22-spooky-season-nocal-1280x720.png">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/nocal/oct-22-spooky-season-nocal-1280x800.png">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/nocal/oct-22-spooky-season-nocal-1280x960.png">1280x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/nocal/oct-22-spooky-season-nocal-1280x1024.png">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/nocal/oct-22-spooky-season-nocal-1366x768.png">1366x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/nocal/oct-22-spooky-season-nocal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/nocal/oct-22-spooky-season-nocal-1440x1050.png">1440x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/nocal/oct-22-spooky-season-nocal-1600x1200.png">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/nocal/oct-22-spooky-season-nocal-1680x1050.png">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/nocal/oct-22-spooky-season-nocal-1680x1200.png">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/nocal/oct-22-spooky-season-nocal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/nocal/oct-22-spooky-season-nocal-1920x1200.png">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/nocal/oct-22-spooky-season-nocal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/nocal/oct-22-spooky-season-nocal-2560x1440.png">2560x1440</a></li>
</ul>

Boo!
<p>Designed by <a href="https://www.madfishdigital.com/">Mad Fish Digital</a> from Portland, OR.</p>
<a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/boo/oct-22-boo-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f31a08d8-dfa6-4dd9-bed0-857dad2beae7/oct-22-boo-preview-opt.png" /></a>
<ul>
<li><a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/boo/oct-22-boo-preview.png">preview</a></li>
<li>with calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/boo/cal/oct-22-boo-cal-320x480.jpg">320x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/boo/cal/oct-22-boo-cal-1024x1024.jpg">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/boo/cal/oct-22-boo-cal-1280x720.jpg">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/boo/cal/oct-22-boo-cal-1680x1200.jpg">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/boo/cal/oct-22-boo-cal-1920x1080.jpg">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/boo/cal/oct-22-boo-cal-2560x1440.jpg">2560x1440</a></li>
<li>without calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/boo/nocal/oct-22-boo-nocal-320x480.jpg">320x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/boo/nocal/oct-22-boo-nocal-1024x1024.jpg">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/boo/nocal/oct-22-boo-nocal-1280x720.jpg">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/boo/nocal/oct-22-boo-nocal-1680x1200.jpg">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/boo/nocal/oct-22-boo-nocal-1920x1080.jpg">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/boo/nocal/oct-22-boo-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>

Fall Colors
<p>“Fall is about orange, brown, and earthly colors. People still enjoy waling through the parks, even if it’s a little bit colder, just to take in the fall palette of colors.” — Designed by <a href="https://schedulingapp.net/">Andrew</a> from the United States.</p>
<a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/fall-colors/oct-22-fall-colors-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a7f30e65-09a4-483f-bbbc-83d5a1209b4c/oct-22-fall-colors-preview-opt.png" /></a>
<ul>
<li><a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/fall-colors/oct-22-fall-colors-preview.png">preview</a></li>
<li>with calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/fall-colors/cal/oct-22-fall-colors-cal-1024x1024.png">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/fall-colors/cal/oct-22-fall-colors-cal-1080x2200.png">1080x2200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/fall-colors/cal/oct-22-fall-colors-cal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/fall-colors/cal/oct-22-fall-colors-cal-1920x1200.png">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/fall-colors/cal/oct-22-fall-colors-cal-1920x1440.png">1920x1440</a></li>
<li>without calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/fall-colors/nocal/oct-22-fall-colors-nocal-1024x1024.png">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/fall-colors/nocal/oct-22-fall-colors-nocal-1080x2200.png">1080x2200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/fall-colors/nocal/oct-22-fall-colors-nocal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/fall-colors/nocal/oct-22-fall-colors-nocal-1920x1200.png">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/fall-colors/nocal/oct-22-fall-colors-nocal-1920x1440.png">1920x1440</a></li>
</ul>

King Of The Pirates
<p>Designed by <a href="https://www.ricardogimenes.com/">Ricardo Gimenes</a> from Sweden.</p>
<a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/oct-22-king-of-the-pirates-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/184c109e-2baf-4f92-be9b-2182f0a9686c/oct-22-king-of-the-pirates-preview-opt.png" /></a>
<ul>
<li><a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/oct-22-king-of-the-pirates-preview.png">preview</a></li>
<li>with calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/cal/oct-22-king-of-the-pirates-cal-640x480.png">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/cal/oct-22-king-of-the-pirates-cal-800x480.png">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/cal/oct-22-king-of-the-pirates-cal-800x600.png">800x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/cal/oct-22-king-of-the-pirates-cal-1024x768.png">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/cal/oct-22-king-of-the-pirates-cal-1024x1024.png">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/cal/oct-22-king-of-the-pirates-cal-1152x864.png">1152x864</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/cal/oct-22-king-of-the-pirates-cal-1280x720.png">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/cal/oct-22-king-of-the-pirates-cal-1280x960.png">1280x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/cal/oct-22-king-of-the-pirates-cal-1280x1024.png">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/cal/oct-22-king-of-the-pirates-cal-1366x768.png">1366x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/cal/oct-22-king-of-the-pirates-cal-1400x1050.png">1400x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/cal/oct-22-king-of-the-pirates-cal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/cal/oct-22-king-of-the-pirates-cal-1600x1200.png">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/cal/oct-22-king-of-the-pirates-cal-1680x1050.png">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/cal/oct-22-king-of-the-pirates-cal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/cal/oct-22-king-of-the-pirates-cal-1920x1200.png">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/cal/oct-22-king-of-the-pirates-cal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/cal/oct-22-king-of-the-pirates-cal-2560x1440.png">2560x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/cal/oct-22-king-of-the-pirates-cal-3840x2160.png">3840x2160</a></li>
<li>without calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/nocal/oct-22-king-of-the-pirates-nocal-640x480.png">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/nocal/oct-22-king-of-the-pirates-nocal-800x480.png">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/nocal/oct-22-king-of-the-pirates-nocal-800x600.png">800x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/nocal/oct-22-king-of-the-pirates-nocal-1024x768.png">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/nocal/oct-22-king-of-the-pirates-nocal-1024x1024.png">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/nocal/oct-22-king-of-the-pirates-nocal-1152x864.png">1152x864</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/nocal/oct-22-king-of-the-pirates-nocal-1280x720.png">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/nocal/oct-22-king-of-the-pirates-nocal-1280x960.png">1280x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/nocal/oct-22-king-of-the-pirates-nocal-1280x1024.png">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/nocal/oct-22-king-of-the-pirates-nocal-1366x768.png">1366x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/nocal/oct-22-king-of-the-pirates-nocal-1400x1050.png">1400x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/nocal/oct-22-king-of-the-pirates-nocal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/nocal/oct-22-king-of-the-pirates-nocal-1600x1200.png">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/nocal/oct-22-king-of-the-pirates-nocal-1680x1050.png">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/nocal/oct-22-king-of-the-pirates-nocal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/nocal/oct-22-king-of-the-pirates-nocal-1920x1200.png">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/nocal/oct-22-king-of-the-pirates-nocal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/nocal/oct-22-king-of-the-pirates-nocal-2560x1440.png">2560x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/nocal/oct-22-king-of-the-pirates-nocal-3840x2160.png">3840x2160</a></li>
</ul>

 Tarzan In The Jungle
<p>“We start this October with Tarzan in his jungle. Luckily Chita helps us!” — Designed by <a href="https://www.silocreativo.com/en">Veronica Valenzuela</a> from Spain.</p>
<a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/tarzan-in-the-jungle/oct-22-tarzan-in-the-jungle-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/05a2f9d9-2178-435c-b967-51439919551b/oct-22-tarzan-in-the-jungle-preview-opt.png" /></a>
<ul>
<li><a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/tarzan-in-the-jungle/oct-22-tarzan-in-the-jungle-preview.png">preview</a></li>
<li>with calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/tarzan-in-the-jungle/cal/oct-22-tarzan-in-the-jungle-cal-640x480.png">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/tarzan-in-the-jungle/cal/oct-22-tarzan-in-the-jungle-cal-800x480.png">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/tarzan-in-the-jungle/cal/oct-22-tarzan-in-the-jungle-cal-1024x768.png">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/tarzan-in-the-jungle/cal/oct-22-tarzan-in-the-jungle-cal-1280x720.png">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/tarzan-in-the-jungle/cal/oct-22-tarzan-in-the-jungle-cal-1280x800.png">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/tarzan-in-the-jungle/cal/oct-22-tarzan-in-the-jungle-cal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/tarzan-in-the-jungle/cal/oct-22-tarzan-in-the-jungle-cal-1600x1200.png">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/tarzan-in-the-jungle/cal/oct-22-tarzan-in-the-jungle-cal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/tarzan-in-the-jungle/cal/oct-22-tarzan-in-the-jungle-cal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/tarzan-in-the-jungle/cal/oct-22-tarzan-in-the-jungle-cal-2560x1440.png">2560x1440</a></li>
<li>without calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/tarzan-in-the-jungle/nocal/oct-22-tarzan-in-the-jungle-nocal-640x480.png">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/tarzan-in-the-jungle/nocal/oct-22-tarzan-in-the-jungle-nocal-800x480.png">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/tarzan-in-the-jungle/nocal/oct-22-tarzan-in-the-jungle-nocal-1024x768.png">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/tarzan-in-the-jungle/nocal/oct-22-tarzan-in-the-jungle-nocal-1280x720.png">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/tarzan-in-the-jungle/nocal/oct-22-tarzan-in-the-jungle-nocal-1280x800.png">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/tarzan-in-the-jungle/nocal/oct-22-tarzan-in-the-jungle-nocal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/tarzan-in-the-jungle/nocal/oct-22-tarzan-in-the-jungle-nocal-1600x1200.png">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/tarzan-in-the-jungle/nocal/oct-22-tarzan-in-the-jungle-nocal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/tarzan-in-the-jungle/nocal/oct-22-tarzan-in-the-jungle-nocal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/tarzan-in-the-jungle/nocal/oct-22-tarzan-in-the-jungle-nocal-2560x1440.png">2560x1440</a></li>
</ul>

Happy Halloween
<p>Designed by <a href="https://www.ricardogimenes.com/">Ricardo Gimenes</a> from Sweden.</p>
<a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/oct-22-happy-halloween-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a9a04c73-3a6a-42cd-a1cb-e4b42aefe2a8/oct-22-happy-halloween-preview-opt.png" /></a>
<ul>
<li><a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/oct-22-happy-halloween-preview.png">preview</a></li>
<li>with calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/cal/oct-22-happy-halloween-cal-640x480.png">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/cal/oct-22-happy-halloween-cal-800x480.png">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/cal/oct-22-happy-halloween-cal-800x600.png">800x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/cal/oct-22-happy-halloween-cal-1024x1024.png">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/cal/oct-22-happy-halloween-cal-1152x864.png">1152x864</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/cal/oct-22-happy-halloween-cal-1280x720.png">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/cal/oct-22-happy-halloween-cal-1280x800.png">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/cal/oct-22-happy-halloween-cal-1280x960.png">1280x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/cal/oct-22-happy-halloween-cal-1280x1024.png">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/cal/oct-22-happy-halloween-cal-1366x768.png">1366x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/cal/oct-22-happy-halloween-cal-1400x1050.png">1400x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/cal/oct-22-happy-halloween-cal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/cal/oct-22-happy-halloween-cal-1680x1050.png">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/cal/oct-22-happy-halloween-cal-1680x1200.png">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/cal/oct-22-happy-halloween-cal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/cal/oct-22-happy-halloween-cal-1920x1200.png">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/cal/oct-22-happy-halloween-cal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/cal/oct-22-happy-halloween-cal-2560x1440.png">2560x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/cal/oct-22-happy-halloween-cal-3840x2160.png">3840x2160</a></li>
<li>without calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/nocal/oct-22-happy-halloween-nocal-640x480.png">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/nocal/oct-22-happy-halloween-nocal-800x480.png">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/nocal/oct-22-happy-halloween-nocal-800x600.png">800x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/nocal/oct-22-happy-halloween-nocal-1024x1024.png">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/nocal/oct-22-happy-halloween-nocal-1152x864.png">1152x864</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/nocal/oct-22-happy-halloween-nocal-1280x720.png">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/nocal/oct-22-happy-halloween-nocal-1280x800.png">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/nocal/oct-22-happy-halloween-nocal-1280x960.png">1280x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/nocal/oct-22-happy-halloween-nocal-1280x1024.png">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/nocal/oct-22-happy-halloween-nocal-1366x768.png">1366x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/nocal/oct-22-happy-halloween-nocal-1400x1050.png">1400x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/nocal/oct-22-happy-halloween-nocal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/nocal/oct-22-happy-halloween-nocal-1680x1050.png">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/nocal/oct-22-happy-halloween-nocal-1680x1200.png">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/nocal/oct-22-happy-halloween-nocal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/nocal/oct-22-happy-halloween-nocal-1920x1200.png">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/nocal/oct-22-happy-halloween-nocal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/nocal/oct-22-happy-halloween-nocal-2560x1440.png">2560x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/nocal/oct-22-happy-halloween-nocal-3840x2160.png">3840x2160</a></li>
</ul>

Design Your Thinking
<p>“Thinking helps us challenge our own assumptions, discover new things about ourselves and our perspective, stay mentally sharp, and even be more optimistic. Using divergent thinking strategies can help you examine a problem from every angle and identify the true root of the issue. Deep thinking allows you to try on perspectives that you may not have considered before.” — Designed by <a href="https://www.linkedin.com/in/hiteshpuri/">Hitesh Puri</a> from Delhi, India.</p>
<a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/design-your-thinking/oct-22-design-your-thinking-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c0e731b4-a2f5-4b43-97d8-643801b77b8c/oct-22-design-your-thinking-preview-opt.png" /></a>
<ul>
<li><a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/design-your-thinking/oct-22-design-your-thinking-preview.png">preview</a></li>
<li>with calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/design-your-thinking/cal/oct-22-design-your-thinking-cal-1280x1024.png">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/design-your-thinking/cal/oct-22-design-your-thinking-cal-1366x768.png">1366x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/design-your-thinking/cal/oct-22-design-your-thinking-cal-1400x1050.png">1400x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/design-your-thinking/cal/oct-22-design-your-thinking-cal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/design-your-thinking/cal/oct-22-design-your-thinking-cal-1600x1200.png">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/design-your-thinking/cal/oct-22-design-your-thinking-cal-1680x1050.png">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/design-your-thinking/cal/oct-22-design-your-thinking-cal-1680x1200.png">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/design-your-thinking/cal/oct-22-design-your-thinking-cal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/design-your-thinking/cal/oct-22-design-your-thinking-cal-1920x1200.png">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/design-your-thinking/cal/oct-22-design-your-thinking-cal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/design-your-thinking/cal/oct-22-design-your-thinking-cal-2560x1440.png">2560x1440</a></li>
<li>without calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/design-your-thinking/nocal/oct-22-design-your-thinking-nocal-1280x1024.png">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/design-your-thinking/nocal/oct-22-design-your-thinking-nocal-1366x768.png">1366x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/design-your-thinking/nocal/oct-22-design-your-thinking-nocal-1400x1050.png">1400x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/design-your-thinking/nocal/oct-22-design-your-thinking-nocal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/design-your-thinking/nocal/oct-22-design-your-thinking-nocal-1600x1200.png">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/design-your-thinking/nocal/oct-22-design-your-thinking-nocal-1680x1050.png">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/design-your-thinking/nocal/oct-22-design-your-thinking-nocal-1680x1200.png">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/design-your-thinking/nocal/oct-22-design-your-thinking-nocal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/design-your-thinking/nocal/oct-22-design-your-thinking-nocal-1920x1200.png">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/design-your-thinking/nocal/oct-22-design-your-thinking-nocal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/design-your-thinking/nocal/oct-22-design-your-thinking-nocal-2560x1440.png">2560x1440</a></li>
</ul>

Welcome Maa Durga!
<p>“Welcome the power — Shakti. Welcome the love. Welcome her blessings. Welcome Maa Durga!” — Designed by <a href="https://quadrant.technology">Rahul Bhattacharya</a> from India.</p>
<a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/oct-22-welcome-maa-durga-full.jpg"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8823e919-4016-42ed-be0d-d6d2a729c42a/oct-22-welcome-maa-durga-preview-opt.png" /></a>
<ul>
<li><a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/oct-22-welcome-maa-durga-preview.jpg">preview</a></li>
<li>with calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/cal/oct-22-welcome-maa-durga-cal-320x480.jpg">320x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/cal/oct-22-welcome-maa-durga-cal-640x480.jpg">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/cal/oct-22-welcome-maa-durga-cal-800x480.jpg">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/cal/oct-22-welcome-maa-durga-cal-800x600.jpg">800x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/cal/oct-22-welcome-maa-durga-cal-1024x768.jpg">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/cal/oct-22-welcome-maa-durga-cal-1024x1024.jpg">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/cal/oct-22-welcome-maa-durga-cal-1152x864.jpg">1152x864</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/cal/oct-22-welcome-maa-durga-cal-1280x720.jpg">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/cal/oct-22-welcome-maa-durga-cal-1280x800.jpg">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/cal/oct-22-welcome-maa-durga-cal-1280x960.jpg">1280x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/cal/oct-22-welcome-maa-durga-cal-1280x1024.jpg">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/cal/oct-22-welcome-maa-durga-cal-1366x768.jpg">1366x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/cal/oct-22-welcome-maa-durga-cal-1400x1050.jpg">1400x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/cal/oct-22-welcome-maa-durga-cal-1440x900.jpg">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/cal/oct-22-welcome-maa-durga-cal-1600x1200.jpg">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/cal/oct-22-welcome-maa-durga-cal-1680x1050.jpg">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/cal/oct-22-welcome-maa-durga-cal-1680x1200.jpg">1680x1200</a></li>
<li>without calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/nocal/oct-22-welcome-maa-durga-nocal-320x480.jpg">320x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/nocal/oct-22-welcome-maa-durga-nocal-640x480.jpg">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/nocal/oct-22-welcome-maa-durga-nocal-800x480.jpg">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/nocal/oct-22-welcome-maa-durga-nocal-800x600.jpg">800x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/nocal/oct-22-welcome-maa-durga-nocal-1024x768.jpg">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/nocal/oct-22-welcome-maa-durga-nocal-1024x1024.jpg">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/nocal/oct-22-welcome-maa-durga-nocal-1152x864.jpg">1152x864</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/nocal/oct-22-welcome-maa-durga-nocal-1280x720.jpg">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/nocal/oct-22-welcome-maa-durga-nocal-1280x800.jpg">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/nocal/oct-22-welcome-maa-durga-nocal-1280x960.jpg">1280x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/nocal/oct-22-welcome-maa-durga-nocal-1280x1024.jpg">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/nocal/oct-22-welcome-maa-durga-nocal-1366x768.jpg">1366x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/nocal/oct-22-welcome-maa-durga-nocal-1400x1050.jpg">1400x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/nocal/oct-22-welcome-maa-durga-nocal-1440x900.jpg">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/nocal/oct-22-welcome-maa-durga-nocal-1600x1200.jpg">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/nocal/oct-22-welcome-maa-durga-nocal-1680x1050.jpg">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/nocal/oct-22-welcome-maa-durga-nocal-1680x1200.jpg">1680x1200</a></li>
</ul>

Old Tree
<p>“No surprise, with October, Halloween time is back. In the north, days are becoming shorter. The night atmosphere takes place and a slightly scary feeling surrounds everything. It’s not only a matter of death. I had taken a picture of this old tree. Who knows if there is really noone in there?” — Designed by <a href="https://www.philippebrouard.fr">Philippe Brouard</a> from France.</p>
<a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/old-tree/oct-22-old-tree-full.jpg"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3baa2bd4-7eea-4c4b-97ba-00934f15c574/oct-22-old-tree-preview-opt.png" /></a>
<ul>
<li><a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/old-tree/oct-22-old-tree-preview.jpg">preview</a></li>
<li>with calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/old-tree/cal/oct-22-old-tree-cal-1024x768.jpg">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/old-tree/cal/oct-22-old-tree-cal-1366x768.jpg">1366x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/old-tree/cal/oct-22-old-tree-cal-1600x1200.jpg">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/old-tree/cal/oct-22-old-tree-cal-1920x1080.jpg">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/old-tree/cal/oct-22-old-tree-cal-1920x1200.jpg">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/old-tree/cal/oct-22-old-tree-cal-2560x1440.jpg">2560x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/old-tree/cal/oct-22-old-tree-cal-2560x1600.jpg">2560x1600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/old-tree/cal/oct-22-old-tree-cal-2880x1800.jpg">2880x1800</a></li>
<li>without calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/old-tree/nocal/oct-22-old-tree-nocal-1024x768.jpg">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/old-tree/nocal/oct-22-old-tree-nocal-1366x768.jpg">1366x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/old-tree/nocal/oct-22-old-tree-nocal-1600x1200.jpg">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/old-tree/nocal/oct-22-old-tree-nocal-1920x1080.jpg">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/old-tree/nocal/oct-22-old-tree-nocal-1920x1200.jpg">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/old-tree/nocal/oct-22-old-tree-nocal-2560x1440.jpg">2560x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/old-tree/nocal/oct-22-old-tree-nocal-2560x1600.jpg">2560x1600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/old-tree/nocal/oct-22-old-tree-nocal-2880x1800.jpg">2880x1800</a></li>
</ul>



Oldies But Goodies

<p>Hidden in our wallpapers archives, we rediscovered some <strong>almost-forgotten treasures</strong> from past October editions. May we present… <em>(Please note that these designs don’t come with a calendar.)</em></p>

<p></p><h3>Autumn Vibes</h3><p></p>
<p></p><p>“Autumn has come, the time of long walks in the rain, weekends spent with loved ones, with hot drinks, and a lot of tenderness. Enjoy.” — Designed by <a href="https://www.librafire.com/">LibraFire</a> from Serbia.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/44511b2c-54dd-4a41-bf37-8e371feca3f0/oct-21-autumn-vibes-nocal-large-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/47909e5f-5e88-409c-9534-543c4018191a/oct-21-autumn-vibes-nocal-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/47909e5f-5e88-409c-9534-543c4018191a/oct-21-autumn-vibes-nocal-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/oct-21/autumn-vibes/nocal/oct-21-autumn-vibes-nocal-320x480.png">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/autumn-vibes/nocal/oct-21-autumn-vibes-nocal-640x480.png">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/autumn-vibes/nocal/oct-21-autumn-vibes-nocal-800x480.png">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/autumn-vibes/nocal/oct-21-autumn-vibes-nocal-800x600.png">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/autumn-vibes/nocal/oct-21-autumn-vibes-nocal-1024x768.png">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/autumn-vibes/nocal/oct-21-autumn-vibes-nocal-1024x1024.png">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/autumn-vibes/nocal/oct-21-autumn-vibes-nocal-1152x864.png">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/autumn-vibes/nocal/oct-21-autumn-vibes-nocal-1280x720.png">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/autumn-vibes/nocal/oct-21-autumn-vibes-nocal-1280x800.png">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/autumn-vibes/nocal/oct-21-autumn-vibes-nocal-1280x960.png">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/autumn-vibes/nocal/oct-21-autumn-vibes-nocal-1280x1024.png">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/autumn-vibes/nocal/oct-21-autumn-vibes-nocal-1366x768.png">1366x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/autumn-vibes/nocal/oct-21-autumn-vibes-nocal-1400x1050.png">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/autumn-vibes/nocal/oct-21-autumn-vibes-nocal-1440x900.png">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/autumn-vibes/nocal/oct-21-autumn-vibes-nocal-1600x1200.png">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/autumn-vibes/nocal/oct-21-autumn-vibes-nocal-1680x1050.png">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/autumn-vibes/nocal/oct-21-autumn-vibes-nocal-1680x1200.png">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/autumn-vibes/nocal/oct-21-autumn-vibes-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/autumn-vibes/nocal/oct-21-autumn-vibes-nocal-1920x1200.png">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/autumn-vibes/nocal/oct-21-autumn-vibes-nocal-1920x1440.png">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/autumn-vibes/nocal/oct-21-autumn-vibes-nocal-2560x1440.png">2560x1440</a></li>
</ul>

<p></p><h3>The Night Drive</h3><p></p>
<p></p><p>Designed by <a href="https://vlad.studio/">Vlad Gerasimov</a> from Georgia.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4d2855e9-dfb9-4bbb-88d2-179407686170/oct-21-the-night-drive-nocal-large-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c857e80c-d2c5-49b1-9664-50fd96b1b71b/oct-21-the-night-drive-nocal-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c857e80c-d2c5-49b1-9664-50fd96b1b71b/oct-21-the-night-drive-nocal-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-night-drive/nocal/oct-21-the-night-drive-nocal-800x480.jpg">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-night-drive/nocal/oct-21-the-night-drive-nocal-800x600.jpg">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-night-drive/nocal/oct-21-the-night-drive-nocal-1024x600.jpg">1024x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-night-drive/nocal/oct-21-the-night-drive-nocal-1024x768.jpg">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-night-drive/nocal/oct-21-the-night-drive-nocal-1152x864.jpg">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-night-drive/nocal/oct-21-the-night-drive-nocal-1280x720.jpg">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-night-drive/nocal/oct-21-the-night-drive-nocal-1280x800.jpg">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-night-drive/nocal/oct-21-the-night-drive-nocal-1280x960.jpg">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-night-drive/nocal/oct-21-the-night-drive-nocal-1280x1024.jpg">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-night-drive/nocal/oct-21-the-night-drive-nocal-1366x768.jpg">1366x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-night-drive/nocal/oct-21-the-night-drive-nocal-1440x900.jpg">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-night-drive/nocal/oct-21-the-night-drive-nocal-1440x960.jpg">1440x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-night-drive/nocal/oct-21-the-night-drive-nocal-1400x1050.jpg">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-night-drive/nocal/oct-21-the-night-drive-nocal-1600x900.jpg">1600x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-night-drive/nocal/oct-21-the-night-drive-nocal-1600x1200.jpg">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-night-drive/nocal/oct-21-the-night-drive-nocal-1680x1050.jpg">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-night-drive/nocal/oct-21-the-night-drive-nocal-1680x1200.jpg">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-night-drive/nocal/oct-21-the-night-drive-nocal-1920x1080.jpg">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-night-drive/nocal/oct-21-the-night-drive-nocal-1920x1200.jpg">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-night-drive/nocal/oct-21-the-night-drive-nocal-1920x1440.jpg">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-night-drive/nocal/oct-21-the-night-drive-nocal-2560x1440.jpg">2560x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-night-drive/nocal/oct-21-the-night-drive-nocal-2560x1600.jpg">2560x1600</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-night-drive/nocal/oct-21-the-night-drive-nocal-2880x1800.jpg">2880x1800</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-night-drive/nocal/oct-21-the-night-drive-nocal-3072x1920.jpg">3072x1920</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-night-drive/nocal/oct-21-the-night-drive-nocal-3840x2160.jpg">3840x2160</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-night-drive/nocal/oct-21-the-night-drive-nocal-5120x2880.jpg">5120x2880</a>    </li>
</ul>

<p></p><h3>The Return Of The Living Dead</h3><p></p>
<p></p><p>Designed by <a href="https://www.ricardogimenes.com/">Ricardo Gimenes</a> from Sweden.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9b8f09e5-f54e-4906-8850-7bccb0b78d76/oct-21-the-return-of-the-living-dead-nocal-large-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a00ddee6-5e43-4657-a42a-5f9ecb577f49/oct-21-the-return-of-the-living-dead-nocal-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a00ddee6-5e43-4657-a42a-5f9ecb577f49/oct-21-the-return-of-the-living-dead-nocal-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-return-of-the-living-dead/nocal/oct-21-the-return-of-the-living-dead-nocal-640x480.png">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-return-of-the-living-dead/nocal/oct-21-the-return-of-the-living-dead-nocal-800x480.png">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-return-of-the-living-dead/nocal/oct-21-the-return-of-the-living-dead-nocal-800x600.png">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-return-of-the-living-dead/nocal/oct-21-the-return-of-the-living-dead-nocal-1024x768.png">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-return-of-the-living-dead/nocal/oct-21-the-return-of-the-living-dead-nocal-1024x1024.png">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-return-of-the-living-dead/nocal/oct-21-the-return-of-the-living-dead-nocal-1152x864.png">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-return-of-the-living-dead/nocal/oct-21-the-return-of-the-living-dead-nocal-1280x720.png">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-return-of-the-living-dead/nocal/oct-21-the-return-of-the-living-dead-nocal-1280x800.png">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-return-of-the-living-dead/nocal/oct-21-the-return-of-the-living-dead-nocal-1280x960.png">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-return-of-the-living-dead/nocal/oct-21-the-return-of-the-living-dead-nocal-1280x1024.png">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-return-of-the-living-dead/nocal/oct-21-the-return-of-the-living-dead-nocal-1366x768.png">1366x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-return-of-the-living-dead/nocal/oct-21-the-return-of-the-living-dead-nocal-1400x1050.png">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-return-of-the-living-dead/nocal/oct-21-the-return-of-the-living-dead-nocal-1440x900.png">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-return-of-the-living-dead/nocal/oct-21-the-return-of-the-living-dead-nocal-1600x1200.png">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-return-of-the-living-dead/nocal/oct-21-the-return-of-the-living-dead-nocal-1680x1050.png">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-return-of-the-living-dead/nocal/oct-21-the-return-of-the-living-dead-nocal-1680x1200.png">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-return-of-the-living-dead/nocal/oct-21-the-return-of-the-living-dead-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-return-of-the-living-dead/nocal/oct-21-the-return-of-the-living-dead-nocal-1920x1200.png">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-return-of-the-living-dead/nocal/oct-21-the-return-of-the-living-dead-nocal-1920x1440.png">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-return-of-the-living-dead/nocal/oct-21-the-return-of-the-living-dead-nocal-2560x1440.png">2560x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-return-of-the-living-dead/nocal/oct-21-the-return-of-the-living-dead-nocal-3840x2160.png">3840x2160</a></li>
</ul>

<p></p><h3>Goddess Makosh</h3><p></p>
<p></p><p>“At the end of the kolodar, as everything begins to ripen, the village sets out to harvesting. Together with the farmers goes Makosh, the Goddess of fields and crops, ensuring a prosperous harvest. What she gave her life and health all year round is now mature and rich, thus, as a sign of gratitude, the girls bring her bread and wine. The beautiful game of the goddess makes the hard harvest easier, while the song of the farmer permeates the field.” — Designed by <a href="https://www.popwebdesign.net/graphic_design.html">PopArt Studio</a> from Serbia.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1a1f6bf8-8622-49ca-be64-91aa92112914/oct-21-goddess-makosh-light-mode-nocal-large-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a2d30a76-3e20-4e2a-9e4b-d80850f439d4/oct-21-goddess-makosh-light-mode-nocal-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a2d30a76-3e20-4e2a-9e4b-d80850f439d4/oct-21-goddess-makosh-light-mode-nocal-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/oct-21/goddess-makosh-light-mode/nocal/oct-21-goddess-makosh-light-mode-nocal-320x480.jpg">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/goddess-makosh-light-mode/nocal/oct-21-goddess-makosh-light-mode-nocal-640x480.jpg">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/goddess-makosh-light-mode/nocal/oct-21-goddess-makosh-light-mode-nocal-800x480.jpg">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/goddess-makosh-light-mode/nocal/oct-21-goddess-makosh-light-mode-nocal-800x600.jpg">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/goddess-makosh-light-mode/nocal/oct-21-goddess-makosh-light-mode-nocal-1024x768.jpg">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/goddess-makosh-light-mode/nocal/oct-21-goddess-makosh-light-mode-nocal-1024x1024.jpg">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/goddess-makosh-light-mode/nocal/oct-21-goddess-makosh-light-mode-nocal-1152x864.jpg">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/goddess-makosh-light-mode/nocal/oct-21-goddess-makosh-light-mode-nocal-1280x720.jpg">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/goddess-makosh-light-mode/nocal/oct-21-goddess-makosh-light-mode-nocal-1280x800.jpg">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/goddess-makosh-light-mode/nocal/oct-21-goddess-makosh-light-mode-nocal-1280x960.jpg">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/goddess-makosh-light-mode/nocal/oct-21-goddess-makosh-light-mode-nocal-1280x1024.jpg">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/goddess-makosh-light-mode/nocal/oct-21-goddess-makosh-light-mode-nocal-1366x768.jpg">1366x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/goddess-makosh-light-mode/nocal/oct-21-goddess-makosh-light-mode-nocal-1400x1050.jpg">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/goddess-makosh-light-mode/nocal/oct-21-goddess-makosh-light-mode-nocal-1440x900.jpg">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/goddess-makosh-light-mode/nocal/oct-21-goddess-makosh-light-mode-nocal-1600x1200.jpg">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/goddess-makosh-light-mode/nocal/oct-21-goddess-makosh-light-mode-nocal-1680x1050.jpg">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/goddess-makosh-light-mode/nocal/oct-21-goddess-makosh-light-mode-nocal-1680x1200.jpg">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/goddess-makosh-light-mode/nocal/oct-21-goddess-makosh-light-mode-nocal-1920x1080.jpg">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/goddess-makosh-light-mode/nocal/oct-21-goddess-makosh-light-mode-nocal-1920x1200.jpg">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/goddess-makosh-light-mode/nocal/oct-21-goddess-makosh-light-mode-nocal-1920x1440.jpg">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/goddess-makosh-light-mode/nocal/oct-21-goddess-makosh-light-mode-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>

<p></p><h3>Bird Migration Portal</h3><p></p>
<p></p><p>“October is a significant month for me because it is when my favorite type of bird travels south. For that reason I have chosen to write about the swallow. When I was young, I had a bird’s nest not so far from my room window. I watched the birds almost every day; because those swallows always left their nests in October. As a child, I dreamt that they all flew together to a nicer place, where they were not so cold.” — Designed by <a href="https://www.behance.net/elineclaeye6ad"> Eline Claeys</a> from Belgium.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/22c08dc4-e293-4f69-a2ad-abc693077f16/oct-20-bird-migration-portal-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8c93b9d2-ef73-482c-93e3-2ad30539c17f/oct-20-bird-migration-portal-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8c93b9d2-ef73-482c-93e3-2ad30539c17f/oct-20-bird-migration-portal-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/oct-20/bird-migration-portal/nocal/oct-20-bird-migration-portal-nocal-1280x1024.jpg">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-20/bird-migration-portal/nocal/oct-20-bird-migration-portal-nocal-1440x900.jpg">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-20/bird-migration-portal/nocal/oct-20-bird-migration-portal-nocal-1600x1200.jpg">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-20/bird-migration-portal/nocal/oct-20-bird-migration-portal-nocal-1680x1050.jpg">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-20/bird-migration-portal/nocal/oct-20-bird-migration-portal-nocal-1680x1200.jpg">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-20/bird-migration-portal/nocal/oct-20-bird-migration-portal-nocal-1920x1080.jpg">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-20/bird-migration-portal/nocal/oct-20-bird-migration-portal-nocal-1920x1200.jpg">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-20/bird-migration-portal/nocal/oct-20-bird-migration-portal-nocal-1920x1440.jpg">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-20/bird-migration-portal/nocal/oct-20-bird-migration-portal-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>

<p></p><h3> Game Night And Hot Chocolate</h3><p></p>
<p></p><p>“To me, October is all about cozy evenings with hot chocolate, freshly baked cookies, and a game night with friends or family.” — Designed by Lieselot Geirnaert from Belgium.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5ddff2f5-0667-472f-8dd1-45338d9dcf1b/oct-20-game-night-and-hot-chocolate-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/64f8726a-ac04-4d72-b048-c0dfcc6fefd7/oct-20-game-night-and-hot-chocolate-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/64f8726a-ac04-4d72-b048-c0dfcc6fefd7/oct-20-game-night-and-hot-chocolate-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/oct-20/game-night-and-hot-chocolate/nocal/oct-20-game-night-and-hot-chocolate-nocal-320x480.png">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-20/game-night-and-hot-chocolate/nocal/oct-20-game-night-and-hot-chocolate-nocal-1024x1024.png">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-20/game-night-and-hot-chocolate/nocal/oct-20-game-night-and-hot-chocolate-nocal-1280x1024.png">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-20/game-night-and-hot-chocolate/nocal/oct-20-game-night-and-hot-chocolate-nocal-2560x1440.png">2560x1440</a></li>
</ul>

<p></p><h3>Magical October</h3><p></p>
<p></p><p>“‘I’m so glad I live in a world where there are Octobers.’ (L. M. Montgomery, <em>Anne of Green Gables</em>)” — Designed by <a href="https://www.instagram.com/lenartlivia/">Lívi Lénárt</a> from Hungary.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8a36a20c-2cda-4395-9a9c-b4eb4dc77009/oct-20-magical-october-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0fdda8cd-7c63-4b61-86f6-f3188d312aaf/oct-20-magical-october-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0fdda8cd-7c63-4b61-86f6-f3188d312aaf/oct-20-magical-october-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/oct-20/magical-october/nocal/oct-20-magical-october-nocal-320x480.png">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-20/magical-october/nocal/oct-20-magical-october-nocal-640x480.png">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-20/magical-october/nocal/oct-20-magical-october-nocal-1024x768.png">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-20/magical-october/nocal/oct-20-magical-october-nocal-1024x1024.png">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-20/magical-october/nocal/oct-20-magical-october-nocal-1280x1024.png">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-20/magical-october/nocal/oct-20-magical-october-nocal-1400x1050.png">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-20/magical-october/nocal/oct-20-magical-october-nocal-1680x1200.png">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-20/magical-october/nocal/oct-20-magical-october-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-20/magical-october/nocal/oct-20-magical-october-nocal-1920x1200.png">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-20/magical-october/nocal/oct-20-magical-october-nocal-2560x1440.png">2560x1440</a></li>
</ul>



<p></p><h3>Hello Autumn</h3><p></p>
<p></p><p>“Did you know that squirrels don’t just eat nuts? They really like to eat fruit, too. Since apples are the seasonal fruit of October, I decided to combine both things into a beautiful image.” — Designed by Erin Troch from Belgium.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0ec017fd-d9c1-4e06-bf96-81693ff5ee05/oct-20-hello-autumn-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b5f4a682-cf25-4c76-80d9-06092b3ba73d/oct-20-hello-autumn-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b5f4a682-cf25-4c76-80d9-06092b3ba73d/oct-20-hello-autumn-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/oct-20/hello-autumn/nocal/oct-20-hello-autumn-nocal-320x480.jpg">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-20/hello-autumn/nocal/oct-20-hello-autumn-nocal-800x480.jpg">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-20/hello-autumn/nocal/oct-20-hello-autumn-nocal-1024x1024.jpg">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-20/hello-autumn/nocal/oct-20-hello-autumn-nocal-1280x800.jpg">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-20/hello-autumn/nocal/oct-20-hello-autumn-nocal-1366x768.jpg">1366x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-20/hello-autumn/nocal/oct-20-hello-autumn-nocal-1600x1200.jpg">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-20/hello-autumn/nocal/oct-20-hello-autumn-nocal-1680x1050.jpg">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-20/hello-autumn/nocal/oct-20-hello-autumn-nocal-1680x1200.jpg">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-20/hello-autumn/nocal/oct-20-hello-autumn-nocal-1920x1440.jpg">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-20/hello-autumn/nocal/oct-20-hello-autumn-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>

<p></p><h3>First Scarf And The Beach</h3><p></p>
<p></p><p>“When I was little, my parents always took me and my sister for a walk at the beach in Nieuwpoort, we didn't really do those beach walks in the summer but always when the sky started to turn grey and the days became colder. My sister and I always took out our warmest scarfs and played in the sand while my parents walked behind us. I really loved those Saturday or Sunday mornings where we were all together. I think October (when it’s not raining) is the perfect month to go to the beach for ‘uitwaaien’ (to blow out), to walk in the wind and take a break and clear your head, relieve the stress or forget one’s problems.” — Designed by <a href="https://www.instagram.com/bogaertgwen/">Gwen Bogaert</a> from Belgium.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0538b839-82b6-442b-82ab-cf9d5ad98b37/oct-19-first-scarf-and-the-beach-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/58d65e6a-4878-49f7-b406-95abb0a70cb0/oct-19-first-scarf-and-the-beach-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/58d65e6a-4878-49f7-b406-95abb0a70cb0/oct-19-first-scarf-and-the-beach-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/oct-19/first-scarf-and-the-beach/nocal/oct-19-first-scarf-and-the-beach-nocal-320x480.jpg">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-19/first-scarf-and-the-beach/nocal/oct-19-first-scarf-and-the-beach-nocal-1280x1024.jpg">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-19/first-scarf-and-the-beach/nocal/oct-19-first-scarf-and-the-beach-nocal-2560x1440.jpg">2560x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-19/first-scarf-and-the-beach/nocal/oct-19-first-scarf-and-the-beach-nocal-2880x1800.jpg">2880x1800</a></li>
</ul>

<p></p><h3>Haunted House</h3><p></p>
<p></p><p>“Love all the Halloween costumes and decorations!” — Designed by <a href="https://www.tazi.com.au">Tazi</a> from Australia.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ed9e47d2-2cf0-457f-bca9-be87b1569314/oct-17-haunted-house-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b3f87bf9-b8cf-4038-8b9a-edbca1d21dc8/oct-17-haunted-house-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b3f87bf9-b8cf-4038-8b9a-edbca1d21dc8/oct-17-haunted-house-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/oct-17/haunted-house/nocal/oct-17-haunted-house-nocal-320x480.jpg">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/haunted-house/nocal/oct-17-haunted-house-nocal-640x480.jpg">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/haunted-house/nocal/oct-17-haunted-house-nocal-800x600.jpg">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/haunted-house/nocal/oct-17-haunted-house-nocal-1024x768.jpg">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/haunted-house/nocal/oct-17-haunted-house-nocal-1152x864.jpg">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/haunted-house/nocal/oct-17-haunted-house-nocal-1280x720.jpg">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/haunted-house/nocal/oct-17-haunted-house-nocal-1280x960.jpg">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/haunted-house/nocal/oct-17-haunted-house-nocal-1600x1200.jpg">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/haunted-house/nocal/oct-17-haunted-house-nocal-1920x1080.jpg">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/haunted-house/nocal/oct-17-haunted-house-nocal-1920x1440.jpg">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/haunted-house/nocal/oct-17-haunted-house-nocal-2560x1440.jpg">2560x1440</a></li></ul>

<p></p><h3>Autumn Gate</h3><p></p>
<p></p><p>“The days are colder, but the colors are warmer, and with every step we go further, new earthly architecture reveals itself, making the best of winters’ dawn.” — Designed by <a href="https://www.creitive.com/">Ana Masnikosa</a> from Belgrade, Serbia.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/01610475-7d0b-4c2b-9f81-a402701cc4b1/oct-17-autumn-gate-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4ed3bfb0-b0fb-4a92-8231-8cfc3521ca16/oct-17-autumn-gate-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4ed3bfb0-b0fb-4a92-8231-8cfc3521ca16/oct-17-autumn-gate-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/oct-17/autumn-gate/nocal/oct-17-autumn-gate-nocal-320x480.png">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/autumn-gate/nocal/oct-17-autumn-gate-nocal-640x480.png">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/autumn-gate/nocal/oct-17-autumn-gate-nocal-800x480.png">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/autumn-gate/nocal/oct-17-autumn-gate-nocal-800x600.png">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/autumn-gate/nocal/oct-17-autumn-gate-nocal-1024x768.png">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/autumn-gate/nocal/oct-17-autumn-gate-nocal-1024x1024.png">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/autumn-gate/nocal/oct-17-autumn-gate-nocal-1152x864.png">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/autumn-gate/nocal/oct-17-autumn-gate-nocal-1280x720.png">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/autumn-gate/nocal/oct-17-autumn-gate-nocal-1280x800.png">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/autumn-gate/nocal/oct-17-autumn-gate-nocal-1280x960.png">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/autumn-gate/nocal/oct-17-autumn-gate-nocal-1280x1024.png">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/autumn-gate/nocal/oct-17-autumn-gate-nocal-1400x1050.png">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/autumn-gate/nocal/oct-17-autumn-gate-nocal-1440x900.png">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/autumn-gate/nocal/oct-17-autumn-gate-nocal-1600x1200.png">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/autumn-gate/nocal/oct-17-autumn-gate-nocal-1680x1050.png">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/autumn-gate/nocal/oct-17-autumn-gate-nocal-1680x1200.png">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/autumn-gate/nocal/oct-17-autumn-gate-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/autumn-gate/nocal/oct-17-autumn-gate-nocal-1920x1200.png">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/autumn-gate/nocal/oct-17-autumn-gate-nocal-1920x1440.png">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/autumn-gate/nocal/oct-17-autumn-gate-nocal-2560x1440.png">2560x1440</a></li>
</ul>

<p></p><h3>Ghostbusters</h3><p></p>
<p></p><p>Designed by <a href="https://www.ricardogimenes.com/">Ricardo Gimenes</a> from Sweden.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8db976cc-7160-4d24-9dfb-c8e7a39b0c3a/oct-18-ghostbusters-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fb08fc1e-0d62-454f-8cf3-0221a2ee23da/oct-18-ghostbusters-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fb08fc1e-0d62-454f-8cf3-0221a2ee23da/oct-18-ghostbusters-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/oct-18/ghostbusters/nocal/oct-18-ghostbusters-nocal-320x480.png">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/ghostbusters/nocal/oct-18-ghostbusters-nocal-640x480.png">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/ghostbusters/nocal/oct-18-ghostbusters-nocal-800x480.png">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/ghostbusters/nocal/oct-18-ghostbusters-nocal-800x600.png">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/ghostbusters/nocal/oct-18-ghostbusters-nocal-1024x768.png">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/ghostbusters/nocal/oct-18-ghostbusters-nocal-1024x1024.png">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/ghostbusters/nocal/oct-18-ghostbusters-nocal-1152x864.png">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/ghostbusters/nocal/oct-18-ghostbusters-nocal-1280x720.png">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/ghostbusters/nocal/oct-18-ghostbusters-nocal-1280x800.png">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/ghostbusters/nocal/oct-18-ghostbusters-nocal-1280x960.png">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/ghostbusters/nocal/oct-18-ghostbusters-nocal-1280x1024.png">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/ghostbusters/nocal/oct-18-ghostbusters-nocal-1366x768.png">1366x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/ghostbusters/nocal/oct-18-ghostbusters-nocal-1400x1050.png">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/ghostbusters/nocal/oct-18-ghostbusters-nocal-1440x900.png">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/ghostbusters/nocal/oct-18-ghostbusters-nocal-1600x1200.png">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/ghostbusters/nocal/oct-18-ghostbusters-nocal-1680x1050.png">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/ghostbusters/nocal/oct-18-ghostbusters-nocal-1680x1200.png">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/ghostbusters/nocal/oct-18-ghostbusters-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/ghostbusters/nocal/oct-18-ghostbusters-nocal-1920x1200.png">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/ghostbusters/nocal/oct-18-ghostbusters-nocal-1920x1440.png">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/ghostbusters/nocal/oct-18-ghostbusters-nocal-2560x1440.png">2560x1440</a></li></ul>

<p></p><h3>Spooky Town</h3><p></p>
<p></p><p>Designed by <a href="https://www.behance.net/xenialatii">Xenia Latii</a> from Germany.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5612781d-646a-4dd3-a4f6-bf6fd797a922/oct-16-spooky-town-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8904f434-8f44-42f6-9c70-dc8316b99e07/oct-16-spooky-town-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8904f434-8f44-42f6-9c70-dc8316b99e07/oct-16-spooky-town-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/oct-16/spooky-town/nocal/oct-16-spooky-town-nocal-320x480.jpg">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-16/spooky-town/nocal/oct-16-spooky-town-nocal-640x480.jpg">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-16/spooky-town/nocal/oct-16-spooky-town-nocal-800x480.jpg">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-16/spooky-town/nocal/oct-16-spooky-town-nocal-800x600.jpg">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-16/spooky-town/nocal/oct-16-spooky-town-nocal-1024x768.jpg">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-16/spooky-town/nocal/oct-16-spooky-town-nocal-1152x864.jpg">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-16/spooky-town/nocal/oct-16-spooky-town-nocal-1280x720.jpg">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-16/spooky-town/nocal/oct-16-spooky-town-nocal-1280x800.jpg">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-16/spooky-town/nocal/oct-16-spooky-town-nocal-1280x960.jpg">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-16/spooky-town/nocal/oct-16-spooky-town-nocal-1280x1024.jpg">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-16/spooky-town/nocal/oct-16-spooky-town-nocal-1366x768.jpg">1366x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-16/spooky-town/nocal/oct-16-spooky-town-nocal-1400x1050.jpg">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-16/spooky-town/nocal/oct-16-spooky-town-nocal-1440x900.jpg">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-16/spooky-town/nocal/oct-16-spooky-town-nocal-1600x1200.jpg">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-16/spooky-town/nocal/oct-16-spooky-town-nocal-1680x1050.jpg">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-16/spooky-town/nocal/oct-16-spooky-town-nocal-1680x1200.jpg">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-16/spooky-town/nocal/oct-16-spooky-town-nocal-1920x1080.jpg">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-16/spooky-town/nocal/oct-16-spooky-town-nocal-1920x1200.jpg">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-16/spooky-town/nocal/oct-16-spooky-town-nocal-1920x1440.jpg">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-16/spooky-town/nocal/oct-16-spooky-town-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>

<p></p><h3>Strange October Journey</h3><p></p>
<p></p><p>“October makes the leaves fall to cover the land with lovely auburn colors and brings out all types of weird with them.” — Designed by Mi Ni Studio from Serbia.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e75e3229-dc11-4b40-9dd1-cda9d7759053/oct-18-strange-october-journey-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5b80137e-9fbb-46d8-a2c2-198d267acf14/oct-18-strange-october-journey-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5b80137e-9fbb-46d8-a2c2-198d267acf14/oct-18-strange-october-journey-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/oct-18/strange-october-journey/nocal/oct-18-strange-october-journey-nocal-320x480.jpg">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/strange-october-journey/nocal/oct-18-strange-october-journey-nocal-640x480.jpg">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/strange-october-journey/nocal/oct-18-strange-october-journey-nocal-800x480.jpg">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/strange-october-journey/nocal/oct-18-strange-october-journey-nocal-800x600.jpg">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/strange-october-journey/nocal/oct-18-strange-october-journey-nocal-1024x768.jpg">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/strange-october-journey/nocal/oct-18-strange-october-journey-nocal-1024x1024.jpg">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/strange-october-journey/nocal/oct-18-strange-october-journey-nocal-1152x864.jpg">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/strange-october-journey/nocal/oct-18-strange-october-journey-nocal-1280x720.jpg">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/strange-october-journey/nocal/oct-18-strange-october-journey-nocal-1280x800.jpg">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/strange-october-journey/nocal/oct-18-strange-october-journey-nocal-1280x960.jpg">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/strange-october-journey/nocal/oct-18-strange-october-journey-nocal-1280x1024.jpg">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/strange-october-journey/nocal/oct-18-strange-october-journey-nocal-1400x1050.jpg">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/strange-october-journey/nocal/oct-18-strange-october-journey-nocal-1440x900.jpg">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/strange-october-journey/nocal/oct-18-strange-october-journey-nocal-1600x1200.jpg">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/strange-october-journey/nocal/oct-18-strange-october-journey-nocal-1680x1050.jpg">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/strange-october-journey/nocal/oct-18-strange-october-journey-nocal-1680x1200.jpg">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/strange-october-journey/nocal/oct-18-strange-october-journey-nocal-1920x1080.jpg">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/strange-october-journey/nocal/oct-18-strange-october-journey-nocal-1920x1200.jpg">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/strange-october-journey/nocal/oct-18-strange-october-journey-nocal-1920x1440.jpg">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/strange-october-journey/nocal/oct-18-strange-october-journey-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>



<p></p><h3>Autumn Deer</h3><p></p>
<p></p><p>Designed by <a href="https://www.amyhamilton.ca">Amy Hamilton</a> from Canada.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9f6fa6be-48ba-4e72-8e9c-78b248e4e02e/october-12-autumn-deer-38-nocal-large-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/eaae6beb-5e6f-4bec-81d1-f0fb20640f29/october-12-autumn-deer-38-nocal-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/eaae6beb-5e6f-4bec-81d1-f0fb20640f29/october-12-autumn-deer-38-nocal-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/october-12/october-12-autumn_deer__38-nocal-1024x768.png">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/october-12/october-12-autumn_deer__38-nocal-1280x720.png">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/october-12/october-12-autumn_deer__38-nocal-1280x800.png">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/october-12/october-12-autumn_deer__38-nocal-1280x960.png">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/october-12/october-12-autumn_deer__38-nocal-1280x1024.png">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/october-12/october-12-autumn_deer__38-nocal-1400x1050.png">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/october-12/october-12-autumn_deer__38-nocal-1440x900.png">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/october-12/october-12-autumn_deer__38-nocal-1600x1200.png">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/october-12/october-12-autumn_deer__38-nocal-1680x1050.png">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/october-12/october-12-autumn_deer__38-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/october-12/october-12-autumn_deer__38-nocal-1920x1200.png">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/october-12/october-12-autumn_deer__38-nocal-2048x1536.png">2048x1536</a>, <a href="https://smashingmagazine.com/files/wallpapers/october-12/october-12-autumn_deer__38-nocal-2560x1440.png">2560x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/october-12/october-12-autumn_deer__38-nocal-2880x1800.png">2880x1800</a></li></ul>

<p></p><h3>Dope Code</h3><p></p>
<p></p><p>“October is the month when the weather in Poland starts to get colder, and it gets very rainy, too. You can’t always spend your free time outside, so it’s the perfect opportunity to get some hot coffee and work on your next cool web project!” — Designed by Robert Brodziak from Poland.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/590480b2-8a92-4475-b85d-58f4df8241ef/oct-14-dope-code-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b752bf3c-d8ad-45fc-b20b-5de9fe272e1b/oct-14-dope-code-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b752bf3c-d8ad-45fc-b20b-5de9fe272e1b/oct-14-dope-code-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/oct-14/dope-code/nocal/oct-14-dope-code-nocal-1024x768.jpg">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-14/dope-code/nocal/oct-14-dope-code-nocal-1024x1024.jpg">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-14/dope-code/nocal/oct-14-dope-code-nocal-1152x864.jpg">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-14/dope-code/nocal/oct-14-dope-code-nocal-1280x720.jpg">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-14/dope-code/nocal/oct-14-dope-code-nocal-1280x800.jpg">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-14/dope-code/nocal/oct-14-dope-code-nocal-1280x960.jpg">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-14/dope-code/nocal/oct-14-dope-code-nocal-1280x1024.jpg">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-14/dope-code/nocal/oct-14-dope-code-nocal-1400x1050.jpg">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-14/dope-code/nocal/oct-14-dope-code-nocal-1440x900.jpg">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-14/dope-code/nocal/oct-14-dope-code-nocal-1600x1200.jpg">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-14/dope-code/nocal/oct-14-dope-code-nocal-1680x1050.jpg">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-14/dope-code/nocal/oct-14-dope-code-nocal-1680x1200.jpg">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-14/dope-code/nocal/oct-14-dope-code-nocal-1920x1080.jpg">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-14/dope-code/nocal/oct-14-dope-code-nocal-1920x1200.jpg">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-14/dope-code/nocal/oct-14-dope-code-nocal-1920x1440.jpg">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-14/dope-code/nocal/oct-14-dope-code-nocal-2560x1440.jpg">2560x1440</a></li></ul>

<p></p><h3>Tea And Cookies</h3><p></p>
<p></p><p>“As it gets colder outside, all I want to do is stay inside with a big pot of tea, eat cookies and read or watch a movie, wrapped in a blanket. Is it just me?” — Designed by Miruna Sfia from Romania.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8e29d8b5-6f10-4bd0-ab24-5835bc906fb7/oct-17-tea-and-cookies-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/53ac53b9-8895-4352-b585-aacd3405bf95/oct-17-tea-and-cookies-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/53ac53b9-8895-4352-b585-aacd3405bf95/oct-17-tea-and-cookies-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/oct-17/tea-and-cookies/nocal/oct-17-tea-and-cookies-nocal-320x480.png">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/tea-and-cookies/nocal/oct-17-tea-and-cookies-nocal-640x480.png">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/tea-and-cookies/nocal/oct-17-tea-and-cookies-nocal-800x480.png">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/tea-and-cookies/nocal/oct-17-tea-and-cookies-nocal-800x600.png">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/tea-and-cookies/nocal/oct-17-tea-and-cookies-nocal-1024x768.png">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/tea-and-cookies/nocal/oct-17-tea-and-cookies-nocal-1024x1024.png">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/tea-and-cookies/nocal/oct-17-tea-and-cookies-nocal-1152x864.png">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/tea-and-cookies/nocal/oct-17-tea-and-cookies-nocal-1280x720.png">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/tea-and-cookies/nocal/oct-17-tea-and-cookies-nocal-1280x800.png">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/tea-and-cookies/nocal/oct-17-tea-and-cookies-nocal-1280x960.png">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/tea-and-cookies/nocal/oct-17-tea-and-cookies-nocal-1280x1024.png">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/tea-and-cookies/nocal/oct-17-tea-and-cookies-nocal-1440x900.png">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/tea-and-cookies/nocal/oct-17-tea-and-cookies-nocal-1440x1050.png">1440x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/tea-and-cookies/nocal/oct-17-tea-and-cookies-nocal-1600x1200.png">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/tea-and-cookies/nocal/oct-17-tea-and-cookies-nocal-1680x1050.png">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/tea-and-cookies/nocal/oct-17-tea-and-cookies-nocal-1680x1200.png">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/tea-and-cookies/nocal/oct-17-tea-and-cookies-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/tea-and-cookies/nocal/oct-17-tea-and-cookies-nocal-1920x1200.png">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/tea-and-cookies/nocal/oct-17-tea-and-cookies-nocal-1920x1440.png">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/tea-and-cookies/nocal/oct-17-tea-and-cookies-nocal-2560x1440.png">2560x1440</a></li></ul>

<p></p><h3>Discovering The Universe!</h3><p></p>
<p></p><p>“Autumn is the best moment for discovering the universe. I am looking for a new galaxy or maybe… a UFO!” — Designed by <a href="https://www.silocreativo.com/en/">Verónica Valenzuela</a> from Spain.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6b1865c0-e710-4289-b3f0-39a3723b91a1/oct-15-discovering-the-universe-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/99368568-d685-4fa9-adeb-036a518e6214/oct-15-discovering-the-universe-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/99368568-d685-4fa9-adeb-036a518e6214/oct-15-discovering-the-universe-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/oct-15/discovering-the-universe/nocal/oct-15-discovering-the-universe-nocal-800x480.png">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-15/discovering-the-universe/nocal/oct-15-discovering-the-universe-nocal-1024x768.png">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-15/discovering-the-universe/nocal/oct-15-discovering-the-universe-nocal-1152x864.png">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-15/discovering-the-universe/nocal/oct-15-discovering-the-universe-nocal-1280x800.png">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-15/discovering-the-universe/nocal/oct-15-discovering-the-universe-nocal-1280x960.png">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-15/discovering-the-universe/nocal/oct-15-discovering-the-universe-nocal-1440x900.png">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-15/discovering-the-universe/nocal/oct-15-discovering-the-universe-nocal-1680x1200.png">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-15/discovering-the-universe/nocal/oct-15-discovering-the-universe-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-15/discovering-the-universe/nocal/oct-15-discovering-the-universe-nocal-2560x1440.png">2560x1440</a></li>
</ul>

<p></p><h3>Transitions</h3><p></p>
<p></p><p>“To me, October is a transitional month. We gradually slide from summer to autumn. That’s why I chose to use a lot of gradients. I also wanted to work with simple shapes, because I think of October as the ‘back to nature/back to basics month’.” — Designed by <a href="https://dribbble.com/dentintheuniverse">Jelle Denturck</a> from Belgium.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/858d73a0-2432-4322-8abd-a7be0cc4ff2c/oct-19-transitions-full-opt.jpg"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1d2b9f18-9994-4a95-af77-91c83d1bb7b7/oct-19-transitions-preview-opt.jpg" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1d2b9f18-9994-4a95-af77-91c83d1bb7b7/oct-19-transitions-preview-opt.jpg">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/oct-19/transitions/nocal/oct-19-transitions-nocal-1600x1200.jpg">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-19/transitions/nocal/oct-19-transitions-nocal-1680x1050.jpg">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-19/transitions/nocal/oct-19-transitions-nocal-1680x1200.jpg">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-19/transitions/nocal/oct-19-transitions-nocal-1920x1080.jpg">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-19/transitions/nocal/oct-19-transitions-nocal-1920x1200.jpg">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-19/transitions/nocal/oct-19-transitions-nocal-1920x1440.jpg">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-19/transitions/nocal/oct-19-transitions-nocal-2560x1440.jpg">2560x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-19/transitions/nocal/oct-19-transitions-nocal-2880x1800.jpg">2880x1800</a></li>
</ul>

<p></p><h3>A Very Pug-o-ween</h3><p></p>
<p></p><p>“The best part of October is undoubtedly Halloween. And the best part of Halloween is dog owners who never pass up an o-paw-tunity to dress up their pups as something a-dog-able. Why design pugs specifically in costumes? Because no matter how you look at it, pugs are cute in whatever costume you put them in for trick or treating. There’s something about their wrinkly snorting snoots that makes us giggle, and we hope our backgrounds make you smile all month. Happy Pug-o-ween from the punsters at Trillion!” — Designed by Trillion from Summit, NJ.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f9ab7d9f-fea8-4e92-a390-ed10656ec580/oct-17-a-very-pug-o-ween-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8b5ed0bd-55de-470f-b3a3-c598a633c05a/oct-17-a-very-pug-o-ween-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8b5ed0bd-55de-470f-b3a3-c598a633c05a/oct-17-a-very-pug-o-ween-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/oct-17/a-very-pug-o-ween/nocal/oct-17-a-very-pug-o-ween-nocal-1024x768.png">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/a-very-pug-o-ween/nocal/oct-17-a-very-pug-o-ween-nocal-1280x720.png">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/a-very-pug-o-ween/nocal/oct-17-a-very-pug-o-ween-nocal-1280x800.png">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/a-very-pug-o-ween/nocal/oct-17-a-very-pug-o-ween-nocal-1280x1024.png">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/a-very-pug-o-ween/nocal/oct-17-a-very-pug-o-ween-nocal-1366x768.png">1366x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/a-very-pug-o-ween/nocal/oct-17-a-very-pug-o-ween-nocal-1440x900.png">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/a-very-pug-o-ween/nocal/oct-17-a-very-pug-o-ween-nocal-1680x1050.png">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/a-very-pug-o-ween/nocal/oct-17-a-very-pug-o-ween-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/a-very-pug-o-ween/nocal/oct-17-a-very-pug-o-ween-nocal-1920x1200.png">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/a-very-pug-o-ween/nocal/oct-17-a-very-pug-o-ween-nocal-2560x1440.png">2560x1440</a></li></ul>

<p></p><h3>Whoops</h3><p></p>
<p></p><p>“A vector illustration of a dragon tipping over a wheelbarrow of pumpkins in a field with an illustrative fox character.” Designed by Cerberus Creative from the United States.</p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/55129e92-5c4a-4230-afdd-6c6fb0431d6b/october-12-whoops-6-nocal-large-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/58a72cf3-28fa-4e3d-9d22-d8fa3f646de3/october-12-whoops-6-nocal-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/58a72cf3-28fa-4e3d-9d22-d8fa3f646de3/october-12-whoops-6-nocal-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/october-12/october-12-whoops__6-nocal-1024x768.jpg">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/october-12/october-12-whoops__6-nocal-1024x1024.jpg">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/october-12/october-12-whoops__6-nocal-1280x800.jpg">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/october-12/october-12-whoops__6-nocal-1280x1024.jpg">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/october-12/october-12-whoops__6-nocal-1440x900.jpg">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/october-12/october-12-whoops__6-nocal-1680x1050.jpg">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/october-12/october-12-whoops__6-nocal-1920x1080.jpg">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/october-12/october-12-whoops__6-nocal-1920x1200.jpg">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/october-12/october-12-whoops__6-nocal-2560x1440.jpg">2560x1440</a></li></ul>

]]></content:encoded>
      <author>hello@smashingmagazine.com (Cosima Mielke)</author>
      <enclosure
        url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5e6453cd-7ad1-45e4-b88c-afe922049104/oct-22-dreamy-autumn-girl-preview-opt.png"
        length="0" type="image/png"/>
    </item>
    <item>
      <title><![CDATA[Unconscious Biases That Get In The Way Of Inclusive Design]]></title>
      <link>https://smashingmagazine.com/2022/09/unconscious-biases-inclusive-design/</link>
      <guid>https://smashingmagazine.com/2022/09/unconscious-biases-inclusive-design/</guid>
      <pubDate>Thu, 29 Sep 2022 21:00:00 GMT</pubDate>
      <description>
        <![CDATA[Throughout the research and design processes, our unconscious biases are the greatest risk to delivering inclusive experiences. From who we include and exclude in our research to how we plan and conduct research, it’s crucial that we understand how our unacknowledged biases can perpetuate systems of exclusion.]]></description>
      <content:encoded><![CDATA[<p>As designers, we want to design optimal experiences for the diverse range of people a product will serve. To achieve this, we take steps in our research and design decisions to minimize the risk of alienating product-relevant social identities, including but not limited to disability, race/ethnicity, gender, skin color, age, sexual orientation, and language.</p>
<p>According to psychologists, we all have <a href="https://royalsociety.org/topics-policy/publications/2015/unconscious-bias/">unconscious biases</a>. So, designs are often biased, just like we are. This article is for anyone involved in the product design and development process — writers, researchers, designers, developers, testers, managers, and stakeholders. We’ll explore how our biases impact design outcomes and what we can do to design more inclusive experiences.</p>
<p>Once we recognize our unconscious biases, we can take steps to reduce their influence on our decision-making, both as individuals and as collective development and design teams. In this article, we will discuss six unconscious biases that commonly result in delivering user experiences that fall short of being inclusive.</p>
<p>Let’s discuss the six most common unconscious biases are:</p>
<ul>
<li><a href="#confirmation-bias">Confirmation Bias</a>,</li>
<li><a href="#optimism-bias">Optimistic Bias</a>,</li>
<li><a href="#omission-bias">Omission Bias</a>,</li>
<li><a href="#false-consensus-bias">False Consensus Bias</a>,</li>
<li><a href="#perceptual-bias-stereotyping">Perception Bias</a>,</li>
<li><a href="#status-quo-bias">Status Quo Bias</a>.</li>
</ul>
Confirmation Bias
<p>This is probably one of the most well-known biases, yet we tend to underestimate how much it impacts our <em>own</em> behavior. <a href="https://www.psychologytoday.com/us/blog/seeing-what-others-dont/201905/the-curious-case-confirmation-bias">Confirmation bias</a> is the tendency to unconsciously look for and give more weight to data, feedback, and users’ behavior that affirms our existing assumptions.</p>
<h3>What Is The Impact?</h3>
<p>When we approach our work with a confirming and validating mindset, we are more likely to skew our research plan and ignore or minimize any findings that contradict our beliefs. These flaws undermine the purpose of doing research — the goal of inclusive design — and can result in building the wrong thing or the right thing the wrong way. It can also create overconfidence in our assumptions and incline us not to conduct any research at all.</p>
<p><a href="https://www.cnn.com/style/article/abercrombie-fitch-exclusion-netflix-documentary/index.html">Abercrombie &amp; Fitch</a> dominated the teen clothing market in the 1990s and early 2000s, promoting a very exclusive, all-American, cool-kid image. In the early 2010s, when consumer preferences shifted, the company failed to listen to consumers and maintain its exclusive brand image. After three years of declining sales and pressure from investors, CEO Mike Jefferies resigned. The new CEO, Fran Horowitz, rebranded the company saying, “We are a much more inclusive company, we are closer to the customer, we’re responding to the customer wants and not what we want them to want.” </p>
<h3>What Can We Do?</h3>
<ul>
<li><strong>Be curious.</strong><br />Approach conversations with users with a curiosity mindset and ask non-leading and open-ended questions. Having someone else take notes can serve as an accountability partner as you may hear things differently and can discuss them to clear up discrepancies. And, as much as possible, document exact quotes instead of inferences.</li>
<li><strong>Be responsive.</strong><br />View each design idea as a hypothesis with a willingness to change direction in response to research findings. Until we conduct primary research with users, our design concepts are merely our best guess based on our own experiences and limited knowledge about our users. We start with that hypothesis as a prototype, then test it with a diverse cross-section of our audience before coding. As quoted by Renee Reid at a UX Research Conference, we should “<a href="https://joinlearners.com/talk/3-ways-to-strengthen-research-influence-and-impact">investigate not validate</a>” our design concepts.</li>
</ul>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/abfaaef4-e92f-4eb6-94e4-3f62cd6457f8/2-unconscious-biases-inclusive-design.png" /></p>
Optimism Bias
<p>While <a href="https://www.verywellmind.com/the-benefits-of-optimism-3144811#toc-impact-of-optimism">optimism</a> has been linked to many health benefits, optimism bias can be detrimental. Our tendency to minimize the potential of negative outcomes and underestimate risks when it comes to our own actions is referred to as <a href="https://www.verywellmind.com/what-is-the-optimism-bias-2795031"><strong>optimism bias</strong></a>. Teams will optimistically think that overlooking socially responsible design will not adversely affect our users’ experience or the bottom line.</p>
<h3>What Is The Impact?</h3>
<p>As a result of optimistic bias, we may skip user research, ignore accessibility, disregard inclusive language, and launch products that don’t account for the diverse people who use the product.</p>
<p>It turns out that people want and expect products to be designed inclusively. A 2021 survey found that 65% of consumers worldwide purchase from <a href="https://medium.com/r/?url=https://vimeo.com/582123657">brands that promote diversity and inclusion</a>. And a study by Microsoft found that 49% of Gen-Z consumers in the US <a href="https://advertiseonbing-blob.azureedge.net/blob/bingads/media/insight/whitepapers/2020/07-july/inclusive-marketing/microsoft-advertising-whitepaper-the-psychology-of-inclusion-and-the-effects-in-advertising-gen-z-final.pdf"> stopped purchasing</a> from a brand that did not represent their values.</p>
<h3>What Can We Do?</h3>
<ul>
<li><strong>Recognize the powerful influence of <a href="https://www.nngroup.com/articles/negativity-bias-ux/">negativity bias</a></strong> for those on the receiving end of our optimistic bias.<br />Psychologists’ research has consistently affirmed that people expect to have good experiences and are more unhappy about bad experiences than good ones. So, one bad interaction has a much greater impact on our users’ perceptions about their experiences than multiple positive interactions. </li>
<li><strong>Prioritize impact over output.</strong><br />Nobel Prize-winning psychologist Daniel Kahneman suggests running a<a href="https://youtu.be/f432ultnPQI"> project premortem</a>. He has extensively researched optimism bias and ways to reduce its influence on our decision-making. Premortem is a loss aversion technique that encourages us to brainstorm potential oversights and identify preventive measures early in our processes.</li>
</ul>
Omission Bias
<p>Similar to optimism bias, omission bias pertains to our expectations of outcomes. <a href="https://thedecisionlab.com/biases/omission-bias"><strong>Omission bias</strong></a> occurs when we judge harmful outcomes worse when caused by action than when caused by inaction. This bias can lead us to believe that intentionally deceptive design is a greater offense than failing to implement inclusive design practices.</p>
<h3>What Is The Impact?</h3>
<p>When we allow our omission bias to prevail, we feel reassured by an illusion of innocence. However, delivering products to market without considering diverse user expectations has the risk of creating<a href="https://www.fastcompany.com/90713854/from-failed-medical-devices-to-wrongful-arrests-this-is-what-happens-when-inclusive-design-takes-a-backseat"> harmful user experiences</a>. </p>
<p>This bias is a possible catalyst for skipping user research or leaving inclusive UX work in the product backlog. Some companies profit off this bias by providing <a href="https://shouldiuseanaccessibilityoverlay.com/">accessibility overlays</a> as a post-production solution. These third-party tools attempt to detect accessibility issues in the code and fix the problem for users on the website in real time. Unfortunately, accessibility overlays have been widely documented as problematic and can worsen access.</p>
<h3>What Can We Do?</h3>
<ul>
<li><strong>Remember that inaction is not without consequence</strong> and<a href="https://www.userinterviews.com/blog/design-failure-examples-caused-by-bias-noninclusive-ux-research"> no less damaging</a> to our users than deliberately harmful actions.<br />When our product or service creates barriers or exclusion for our users, whether intentional or unintentional, the effect of the experience feels the same.</li>
<li><strong>Plan for inclusive research and design</strong> by factoring the necessary time, people, and money into the product roadmap.<br />Studies have found that the <a href="https://comp.anu.edu.au/courses/comp3120/local_docs/readings/Why%20Software%20Fails%20-%20IEEE%20Spectrum.pdf">business cost of going back to fix a design</a> can be 100 times as high as it would have been if the work was addressed during the development stage.</li>
</ul>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8d304fae-f0ab-49ec-92b3-fd2f44541d40/3-unconscious-biases-inclusive-design.png" /></p>
False Consensus Bias
<p>The next two biases, false consensus and perceptual biases, are influential in how we think about others. <a href="https://www.simplypsychology.org/false-consensus-effect.html"><strong>False consensus bias</strong></a> is when we assume that other people think and behave the same as we do. Jakob Nielsen is known for the clever phrase, “<a href="https://www.nngroup.com/articles/false-consensus/">you are not the user</a>,” which is derived from this bias. Our false consensus bias can lead us to think, “well, I’m a user too,” when making design decisions. However, we all have a varied mix of identities — our age, ethnicity, abilities, gender, and so on — which are attributed to our unique needs and expectations. </p>
<h3>What Is The Impact?</h3>
<blockquote>We design for a broad range of people, most of whom are not like us.</blockquote>

<p>That is illuminated when we <strong>consider intersectionality</strong>. Law professor Kimberlé Crenshaw coined the term <a href="https://www.vox.com/the-highlight/2019/5/20/18542843/intersectionality-conservatism-law-race-gender-discrimination">intersectionality</a> “to describe how race, class, gender, and other individual characteristics ‘intersect’ with one another and overlap.”</p>
<p>In early 2022, Olay’s senior design strategist Kate Patterson redesigned the packaging for their facial moisturizer. The new <a href="https://www.olay.com/opentochange">Easy Open Lid</a> not only has side handles allowing a better grip for dexterity challenges but also has the product type in Braille and larger lettering with higher contrast for vision impairments. The product was released as a limited edition, and the company has a feedback form on its website to get feedback from users to make improvements for a second edition. </p>
<h3>What Can We Do?</h3>
<ul>
<li><strong>Avoid relying on personal preferences.</strong><br />Start with conventions and design guidelines, but don’t rely on them solely. Design guidelines are generic, so they don’t, and can’t, address all contextual situations. Optimal user experiences are the result of context-sensitive design.</li>
<li><strong>Let go of the notion of <a href="https://www.youtube.com/watch?v=5nNd7b4SAo0">the average user</a></strong> and engage with users in interviews, accessibility and usability testing, and other empirical research methods.<br />Conducting primary user research is immensely insightful as it allows us to learn how intersecting identities can vary users’ expectations, behavior, and contextual use cases.</li>
</ul>
Perceptual Bias (Stereotyping)
<p>Continuing with biases that distort how we think of others, <a href="https://www.oxfordreference.com/view/10.1093/oi/authority.20110803100316441"><strong>perceptual biases</strong></a> include halo effect, recency bias, primary effect, and stereotyping. Regarding biases that get in the way of inclusive design, we’ll address <a href="https://www.psychologytoday.com/us/basics/bias#bias-and-stereotyping">stereotyping</a>, which is when we have overgeneralized beliefs about people based on group attributes.  </p>
<h3>What Is The Impact?</h3>
<p>How we gather and interpret research can be greatly influenced by stereotyping. Surveys, for example, typically don’t reveal a person’s motivations or intent. This leaves room for our speculations of “why” when interpreting survey responses, which creates many opportunities for relying on stereotyping.</p>
<p>The <a href="https://sites.psu.edu/clairescriticcalanalysis/2019/08/29/terrible-ad-analysis">Mr. Clean Magic Eraser Sponge advertisement</a>, “This Mother’s Day, get back to the job that really matters,” reinforced antiquated gender roles. A<a href="https://www.npr.org/sections/goatsandsoda/2018/12/01/671891818/dolce-gabbana-ad-with-chopsticks-provokes-public-outrage-in-china"> Dolce &amp; Gabbana campaign</a> included an Asian woman wearing one of their dresses and trying to use chopsticks to eat Italian food while a voiceover mocked her and made sexual innuendos. Designing based on stereotypes and tropes is likely to insult and alienate some of our user groups.</p>
<h3>What Can We Do?</h3>
<ul>
<li><strong>Include a broad spectrum of our users</strong> in our participant pool.<br />The more we understand the needs and expectations of our users that are different from us (different ages, ethnicities, abilities, gender identities, and so on), the more we reduce the need to depend on generalizations and offensive constructs about various social identities.</li>
<li><strong>Conduct <a href="https://www.ibm.com/design/thinking/page/toolkit/activity/assumptions-and-questions">assumption mapping</a></strong> which is an activity of documenting our questions and assumptions about users and noting the degree of certainty and risk for each.<br />Assumption mapping can help us uncover how much we’re relying on oversimplified generalizations about people and which segments of the audience our design might not be accounted for and help us prioritize areas to focus our research on.</li>
</ul>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5431dcfc-d7dc-4341-8c64-cab41aed56ec/1-unconscious-biases-inclusive-design.png" /></p>
Status Quo Bias
<p>Lastly, let’s look at a decision-making bias. <a href="https://thedecisionlab.com/biases/status-quo-bias"><strong>Status quo bias</strong></a> refers to our tendency to prefer how things are and to resist change. We perceive current practices as ideal and negatively view what’s unfamiliar, even when changes would result in better outcomes.</p>
<h3>What Is The Impact?</h3>
<p>When we rely on default thinking and societal norms, we run the risk of perpetuating systemic social biases and alienating segments of our users. Failing to get input and critique from people across a diverse spectrum can result in missed opportunities to design broadly-valued solutions.</p>
<p>It took Johnson &amp; Johnson 100 years to redesign their skin-tone colored adhesive bandages. The product was released in 1920 with a Eurocentric design that was optimal for light skin tones, and it wasn’t until 2020 that <a href="https://www.instagram.com/p/CBQdOqOBBve/">Band-aid added more shades</a> “to embrace the beauty of diverse skin.”</p>
<h3>What Can We Do?</h3>
<ul>
<li><strong>Leaders can build non-homogenous teams</strong> and foster a workplace where it’s safe to question the status quo.<br />Having team members with diverse lived experiences creates a wealth of variance and opportunities for divergent perspectives. Teams that are encouraged to challenge the default and propose alternatives have significant potential to minimize the risks of embedding biases in our UX processes.</li>
<li>As individuals, <strong>we can employ our <a href="https://www.youtube.com/watch?v=PirFrDVRBo4">System 2 thinking</a></strong>.<br />Psychologist Daniel Kahneman popularized two modes of thinking in his book <em>Thinking, Fast and Slow</em> to encourage us to move beyond our visceral thoughts to slower, effortful, and analytical thinking. In this mode, we can <strong>question our default System 1 thinking</strong>, which is automatic and impulsive, awaken our curiosity about novel ways to approach design challenges, and find opportunities to learn about and engage with people outside our typical circles.</li>
</ul>
Summary
<p>Designing for many means designing for demographic groups whose needs and expectations differ from ours. Our unconscious biases typically keep us in our comfort zones and stem from systemic social constructs that have historically been an anti-pattern for inclusivity.</p>
<p>Unconscious biases, when unrecognized and unchallenged, seep into our design practices and can insidiously pollute our research and design decisions. </p>
<p>We start to counter our unconscious biases by acknowledging that we have biases. You do. We all do. Next, we can take steps to be more mindful of how our designs impact the people who interact with our products so that we design inclusive experiences.</p>
<h3>Additional Resources</h3>
<ul>
<li>“<a href="https://uxpajournal.org/learning-recognize-exclusion/">Learning to Recognize Exclusion</a>”<br />An article by Lesley-Ann Noel and Marcelo Paiva on what it means to exclude, why we do it, and tips for moving out of our comfort zones.</li>
<li><a href="https://biasedbydesign.com/">Biased by Design</a><br />A website with information about other biases that influence the design and links to additional resources.</li>
<li><a href="https://www.netflix.com/title/81328723">Coded Bias</a><br />A Netflix documentary investigating bias in algorithms after M.I.T. Media Lab researcher Joy Buolamwini uncovered flaws in facial recognition technology. </li>
<li><a href="https://www.amazon.com/gp/product/0374533555">Thinking, Fast and Slow</a><br />A book by Daniel Kahneman about how thinking more slowly can help us reduce biased decision-making.</li>
<li><a href="https://abookapart.com/products/design-for-cognitive-bias">Design for Cognitive Bias</a><br />A book by David Dylan Thomas that discusses how biases influence decision-making and techniques for noticing our own biases so we can design more consciously.</li>
</ul>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Trina Moore Pervall)</author>
      <enclosure
        url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/353aec29-80ea-4143-935a-c24bcd89593f/unconscious-biases-inclusive-design.jpg"
        length="0" type="image/jpg"/>
    </item>
    <item>
      <title><![CDATA[Building Your Security Strategy (Case Study)]]></title>
      <link>
        https://smashingmagazine.com/2022/09/ten-principles-consider-building-security-strategy-case-study/
      </link>
      <guid>
        https://smashingmagazine.com/2022/09/ten-principles-consider-building-security-strategy-case-study/
      </guid>
      <pubDate>Thu, 29 Sep 2022 12:00:00 GMT</pubDate>
      <description>
        <![CDATA[In this article, Wix security experts share ten “security by design” principles that emerged from their work in keeping the Wix platform secure. If you’re a developer, these tried-and-true principles can help you build your own secure applications.]]></description>
      <content:encoded><![CDATA[<p>This article is a sponsored by <a href="https://www.wix.com/?utm_source=affiliate&amp;utm_campaign=bd_smashingmag&amp;experiment_id=0001">Wix</a></p>
<p>What should you focus on when designing your <a href="https://www.wix.com/website-security?utm_source=affiliate&amp;utm_campaign=bd_smashingmag&amp;experiment_id=0001">security strategy</a>? This question becomes more and more tricky as your organization grows and matures. At an initial stage, you might be able to make due with a periodic penetration test. But you will soon find that as you scale up to hundreds and thousands of services, some of the procedures have to change. The focus shifts from project-based assessments to building and maintaining a lasting mindset and framework with security at the core, so you can minimize risk across your environment.</p>
<p>In this article, we’ll share some guiding principles and ideas for incorporating security by design into your own development process, taken from our work at Wix serving 220M+ users.</p>
First And Foremost: Security By Design
<p>Also known as security by default, <strong>security by design</strong> (SbD) is a concept in which we aim to “limit the opportunities” for making security-related mistakes. Consider a case where a developer builds a service to query a database. If the developer is required (or allowed) to build queries “from scratch” writing SQL directly into his code, they can very well end up introducing <strong>SQL Injections</strong> (SQLI) vulnerabilities. However, with a security by default approach, the developer can get a safe <strong>Object-Relational Mapping</strong> (ORM), letting the code focus on logic where the DB interactions are left for the ORM libraries. By ensuring the ORM library is safe once, we are able to block SQLI everywhere (or at least everywhere the library is used). This approach might restrict some developer liberties, but except for specific cases, the security benefits tend to outweigh the cons.</p>
<p>That previous example is rather well known, and if you use a mature application development framework, you’re probably using an ORM anyway. But the same logic can be applied to other types of vulnerabilities and issues. Input validation? Do this by default using your app framework, according to the declared var type. What about <strong>Cross-Site Resource Forgery</strong> (<a href="https://portswigger.net/web-security/csrf">CSRF</a>)? Solve it for everyone in your API gateway server. Authorization confusion? Create a central identity resolution logic to be consumed by all other services.</p>
<p>By following this methodology, we’re able to allow our developers the freedom to move quickly and efficiently, without needing to introduce security as a “blocker” in later stages before new features go live.  </p>
<h3>1. Establish Secure Defaults For Your Services</h3>
<p>Take the time to ensure that your services are served by default with secure settings. For example, users should not need to actively choose to make their data private. Instead, the default should be “private” and users can have the option to make it public if they choose to. This of course depends on product decisions as well, but the concept stands. Let’s look at an example. When you build a site on our platform, you can easily set up a content “Collection”, which is like a simplified database. By default, editing permissions to this collection are restricted to admin users only, and the user has the option to expose it to other user types using the Roles &amp; Permissions feature. The default is secure.</p>
<h3>2. Apply The Principle Of Least Privilege (PoLP)</h3>
<p>Put simply, users shouldn’t have permission for stuff they don’t need. A permission granted is a permission used, or if not needed, then abused. Let’s look at a simple example: When using Wix, which is a secure system with support for multiple users, a website owner can use Roles &amp; Permissions to add a contributor, say with a Blog Writer role, to their site. As derived from the name, you would expect this user to have permissions to write blogs. However, would this new contributor have permissions, for example, to edit payments? When you put it like this, it sounds almost ridiculous. But the “least permission” concept (PoLP) is often misunderstood. You need to apply it not only to users, but also to employees, and even to systems. This way even if you <em>are</em> vulnerable to something like CSRF and your employees are exploited, the damage is still limited.</p>
<p>In a rich microservice environment, thinking about least permission might become challenging. Which permission should Microservice A have? Should it be allowed to access Microservice B? The most straightforward way to tackle this question is simply starting with zero permissions. A newly launched service should have access to nothing. The developer, then, would have an easy, simple way to extend their service permission, according to need. For example, a “self service” solution for allowing developers to grant permissions for services to access non-sensitive databases makes sense. In such an environment, you can also look at sensitive permissions (say for a database holding PII data), and require a further control for granting permissions to them (for example, an OK from the data owner).</p>
<h3>3. Embrace The Principle Of Defense In Depth (DiD)</h3>
<p>As beautifully put by a colleague, security is like an onion — it’s made of many layers built on top of layers, and it can make you cry. In other words, when building a secure system, you need to account for different types of risk and threats, and subsequently you need to build different types of protections on top of others. </p>
<p>Again, let’s look at a simple example of a login system. The first security gateway you can think of in this context is the “user-password” combination. But as we all know, passwords can leak, so one should always add a second layer of defense: <strong>two-factor authentication</strong> (2FA), also known as <strong>multi-factor authentication</strong> (MFA). Wix encourages users to enable this feature for their account security. And by now, MFA is pretty standard — but is it enough? Can we assume that someone who successfully logged into the system is now trusted? </p>
<p>Unfortunately, not always. We looked until now at one type of attack (password stealing), and we provided another layer to protect against it, but there are certainly other attacks. For example, if we don’t protect ourselves, a <strong>Cross Site Scripting</strong> (XSS) attack can be used to hijack a user’s sessions (for example by stealing the cookies), which is as good as a login bypass. So we need to consider added layers of defense: cookie flags to prevent JS access (HTTP only), session timeouts, binding a session to a device, etc. And of course, we need to make sure we don’t expose XSS issues.</p>
<p>You can look at this concept in another way. When writing a feature, you should almost protect it “from scratch”, thinking all defenses might have been broken. That doesnt mean writing every line of code again, it just means being aware that certain assumptions cannot be made. For example, you can’t assume that just because your service does not have an externally reachable endpoint, it has never been accessed by malicious entities. An attacker exploiting <strong>Server-Side Request Forgery</strong> (SSRF) issues can hit your endpoint any minute. Is it protected against such issues? </p>
<p>At Wix, we assume a “breach mindset” at all times, meaning each developer assumes the controls leading up to the application they’re working on have already been breached. That means checking permissions, input validations and even logic — we never assume previous services are sensible.</p>
<h3>4. Minimize Attack Surface Area</h3>
<p>What’s the safest way to secure a server? Disconnect it from the electricity socket. Jokes aside, while we don’t want to turn our services off just to ensure they’re not abused, we certainly don’t want to leave them on if they serve no real function. If something is not needed or being used, it should not be online. </p>
<p>The most straightforward way to understand this concept is by looking at non-production environments (QA, staging, etc). While such environments are often needed internally during the development process, they have no business being exposed such that external users can access them. Being publicly available means they can serve as a target for an attack, as they are not “production ready” services (after all, they are in the testing phase). The probability for them to become vulnerable increases. </p>
<p>But this concept doesn’t apply only to whole environments. If your code contains unused or unnecessary methods, remove them before pushing to production. Otherwise, they become pains instead of assets.</p>
<h3>5. Fail Securely</h3>
<p>If something fails, it should do so securely. If that’s confusing, you’re not alone. Many developers overlook this principle or misunderstand it. Imagining every possible edge case on which your logic can fail is almost impossible, but it is something you need to plan for, and more often than not it’s another question of adopting the right mindset. If you assume there <em>will</em> be failures, then you’re more likely to include all possibilities.</p>
<p>For instance, a security check should have two possible outcomes: allow or deny. The credentials inputted are either correct, or they’re not. But what if the check fails entirely, say, because of an unexpected outage of electricity in the database server? Your code keeps running, but you get a “DB not found” error. Did you consider that? </p>
<p>In this particular instance, the answer is probably “yes”, you thought of it, either because your framework forced you to consider it (such as Java’s “checked exceptions”) or simply because it actually happens often enough that your code failed in the past. But what if it is something more subtle? What if, for example, your SQL query fails due to non-unicode characters that suddenly appeared as input? What if your S3 bucket suddenly had its permissions changed and now you can’t read from it anymore? What if the DNS server you’re using is down and suddenly instead of an NPM repo you’re hitting a compromised host? </p>
<p>These examples might seem ludacris to you, and it would be even more ludacris to expect you to write code to handle them. What you should do, however, is expect things to behave in an expected manner, and make sure if such things occur, you “fail securely”, like by just returning an error and stopping the execution flow. </p>
<p>It would make no sense to continue the login flow if the DB server is down, and it will make no sense to continue the media processing if you can’t store that image on that bucket. Break the flow, log the error, alert to the relevant channel — but don’t drop your security controls in the process. </p>
<h3>6. Manage Your Third-Party Risk</h3>
<p>Most modern applications use third-party services and/or import third-party code to enhance their offering. But how can we ensure secure integrations with third parties? We think about this principle a lot at Wix, as we offer third-party integrations to our user sites in many ways. For example, users can install apps from our App Market or add third-party software to their websites using our full-stack development platform called <a href="https://www.wix.com/velo?utm_source=affiliate&amp;utm_campaign=bd_smashingmag&amp;experiment_id=0001">Velo</a>.</p>
<p>Third-party code can be infiltrated, just like your own, but has the added complication that you have no control over it. MPM node libraries, for instance, are some of the most used in the world. But recently a few well-known cases involved them being compromised, leaving every site that used them exposed.</p>
<p>The most important thing is to be aware that this might happen. Keep track of all your open-source code in a <strong>software bill of materials</strong> (SBOM), and create processes for regularly reviewing it. If you can, run regular checks of all your third-party suppliers’ security practices. For example, at Wix we run a strict <strong>Third-Party Risk Management Program</strong> (TPRM) to vet third parties and assess security while working with them.</p>
<h3>7. Remember Separation Of Duties (SoD)</h3>
<p>Separation of duties really boils down to making sure tasks are split into (and limited to) appropriate user types, though this principle could also apply to subsystems.</p>
<p>The administrator of an eCommerce site, for example, should not be able to make purchases. And a user of the same site should not be promoted to administrator, as this might allow them to alter orders or give themselves free products.</p>
<p>The thinking behind this principle is simply that if one person is compromised or acting fraudulently, their actions shouldn’t compromise the whole environment.</p>
<h3>8. Avoid Security By Obscurity</h3>
<p>If you write a backdoor, it will be found. If you hard-code secrets in your code, they will be exposed. It’s not a question of “if”, but “when” — there is no way to keep things hidden forever. Hackers spend time and effort on building reconnaissance tools to target exactly these types of vulnerabilities (many such tools can be found with a quick Google search), and more often than not when you point at a target, you get a result. </p>
<p>The bottom line is simple: you cannot rely on hidden features to remain hidden. Instead,  there should be enough security controls in place to keep your application safe when these features are found. </p>
<p>For example, it is common to generate access links based on randomly generated UUIDs. Consider a scenario where an anonymous user makes a purchase on your store, and you want to serve the invoice online. You cannot protect the invoice with permissions, as the user is anonymous, but it is sensitive data. So you would generate a “secret” UUID, build it into the link, and treat the “knowledge” of the link as “proof” of identity ownership.  </p>
<p>But how long can this assumption remain true? Over time, such links (with UUID in them) might get indexed by search engines. They might end up on the Wayback Machine. They might be collected by a third-party service running on the end user’s browser (say a BI extension of some sort), then collected into some online DB, and one day accessed by a third party. </p>
<p>Adding a short time limit to such links (based on UUIDs) is a good compromise. We don’t rely on the link staying secret for long (so there’s no security by obscurity), just for a few hours. When the link gets discovered, it’s already no longer valid. </p>
<h3>9. Keep Security Simple</h3>
<p>Also known as KISS, or <em>keep it simple, stupid</em>. As developers, we need to keep users in mind at all times. If a service is too complicated to use, then its users might not know how to use it, and bypass it or use it incorrectly. </p>
<p>Take 2FA for example. We all know it’s more secure, but the process also involves a degree of manual setup. Making it as simple as possible to follow means more users will follow it, and not compromise their own accounts with weaker protections.</p>
<p>Adding new security functionality always makes a system more complex, so it can have an unintended negative impact on security. So keep it simple. Always weigh the value of new functionality against its complexity, and keep security architecture as simple as possible.</p>
<h3>10. Fix Security Issues, Then Check Your Work</h3>
<p>Thoroughly fixing security issues is important for all aspects of a business. At Wix, for example, we partner with ethical hackers through our <a href="https://www.hackerone.com/customer-stories/how-wix-improves-their-security-posture-ethical-hackers">Bug Bounty Program</a> to help us find issues and vulnerabilities in our system, and practice fixing them. We also employ internal security and penetration testing, and the security team is constantly reviewing the production services, looking for potential bugs.</p>
<p>But fixing a bug is just the start. You also need to understand the vulnerability thoroughly before you fix it, and often get whoever spotted it to check your fix too. And then, when a bug is fixed, carry out regression tests to make sure it’s not reintroduced by code rollbacks. This process is crucial to make sure you’re actually advancing your application security posture.</p>
Conclusion
<p>By implementing security by design at Wix, we were able to build a robust and secure platform — and we hope that sharing our approach will help you do the same. We applied these principles not just to security features, but to all components of our system. We recommend considering this, whether you build from scratch or choose to rely on a secure platform like ours.</p>
<p>More importantly, following security by design instilled a security mindset into our company as a whole, from developers to marketing and sales. Cybersecurity should be top priority in everyone’s minds, as attacks increase and hackers find new ways of accessing sensitive information. </p>
<p>Taking a defensive position right from the start will put you at an advantage. Because when thinking about cybersecurity, it’s not <em>if</em> a breach happens. It’s when.</p>
<ul>
<li>For more information on security by design, visit the <a href="https://owasp.org/">Open Web Application Security Project</a>. This non-profit community is dedicated to securing the web, and produces a range of free open-source tools, training and other resources to help improve software security. </li>
<li>To learn more about secure practices at Wix, check out <a href="https://www.wix.com/trust-center/security?utm_source=affiliate&amp;utm_campaign=bd_smashingmag&amp;experiment_id=0001">wix.com/trust-center/security</a>.</li>
</ul>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Wix Security Team)</author>
      <enclosure
        url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1504d71c-665f-4bef-81ff-f09c25cc55eb/building-your-security-strategy.jpg"
        length="0" type="image/jpg"/>
    </item>
    <item>
      <title><![CDATA[Phone Numbers For Web Designers]]></title>
      <link>https://smashingmagazine.com/2022/09/phone-numbers-web-designers/</link>
      <guid>https://smashingmagazine.com/2022/09/phone-numbers-web-designers/</guid>
      <pubDate>Wed, 28 Sep 2022 11:00:00 GMT</pubDate>
      <description>
        <![CDATA[The customer journey is not limited to a website alone. Simply by combining the world of website design and telephony, far better results can be obtained for your organization. And thanks to the similarities and mutual benefits, it is an easy step to take.]]></description>
      <content:encoded><![CDATA[<p>It is exciting how websites are being optimized. Localization, A/B testing, and cross-domain campaign tracking contribute to your bottom line. But why stop there? The customer experience is not determined by your website alone. Take the next step and start to include your telephony in the optimization span. And it is a relatively easy step to take as you are already familiar with the mechanisms. Simply follow these seven considerations.</p>
First Things First: The Basics
<p>Before determining which number type to use and when and how to present them on your website, it helps to know which number types are available, to begin with:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/957fdb7f-318d-49b0-b65a-b7ea867a09d7/number-types.png" /></p>
<p>Each of these numbers can be valid to use, depending on your strategy. It is important to line up the localization, appearance (tone of voice), and other factors of your website and the phone number type you choose. And — like your website — keep testing and optimizing your choice.</p>
<p>Let’s dive into the details of the seven considerations to make.</p>
Localization
<p>A lot has been written about localization. <a href="https://www.forbes.com/sites/forbesbusinesscouncil/2022/01/24/three-important-aspects-of-localization-often-overlooked-by-small-businesses/?sh=ea65f2f2847f">Why</a> it is important and <a href="https://www.smashingmagazine.com/2020/11/internationalization-localization-static-sites/">how</a> to achieve it with your website. All this attention is leading to great results. However, a website and the product are not the only points of contact with the customer and do not fully cover the customer experience domain. So, there is much to be gained here.</p>
<p>The localization of your website and phone number choice needs to be in sync. If your website is tailored per country, the phone number should also be country-specific. It would be weird to have a site for a specific country but not a phone number. And the beauty is that you have already determined the level of localization required for your website. You can simply match the localization needed to the available phone number types.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/69334ba4-8c6f-4c36-8341-6493d942ca9f/number-type-and-matching-localisation.png" /></p>
<p>If your website localization is country-based, then get one of these numbers:</p>
<ul>
<li>National number,</li>
<li>Freephone number,</li>
<li>Premium Rate number.</li>
</ul>
<p>All of these are suitable for country-wide operating businesses. We’ll get back to how to choose which one fits your case best later in this article.</p>
<p>If your website targets specific areas smaller than a country:</p>
<p>Get <strong>local numbers</strong> in the same areas you are targeting with your website. It strengthens your website localization strategy, and you continue to earn trust with the local phone numbers. If you have optimized (an instance of) your website specifically for London, it only makes sense to extend that strategy and present a Local London Phone number.</p>
<p>There are two number types that require additional attention:</p>
<ol>
<li>A <strong>mobile phone number</strong> is technically a number that is valid country-wide. However, it has its value for a very specific type of business: mostly local operating, independent service providers.</li>
<li>An <strong>international freephone number</strong> (officially a <strong>UIFN number</strong>) is a single number that can be activated in multiple countries. If your website strategy is explicitly to express one voice for all, this number type fits that strategy; one single international phone number that can be activated in multiple countries. And it can have its advantages in other areas as well. We’ll dive into those a bit later in this article.</li>
</ol>
Appearance
<p>Every type of number expresses an identity. This should match the identity your target market expects from you. Again, consistency is key. Make sure to align the tone of voice and the image you are projecting with your website with the appearance of the phone number(s) you choose.</p>
<p>If you are trying to generate a familiar feel on your website, a <strong>local number</strong> is your best option. You are calling someone close by, your neighbor. It gives the feeling you know them and that they are trustworthy.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/01d5bc0a-20af-4aa6-9774-0b78ae250faa/appearance.png" /></p>
<p>If you want to provide a more corporate or formal impression, a <strong>national number</strong> is your choice. Bigger companies need a lot of phone numbers, and in many cases, they have offices in different cities. National Numbers have been created to overcome the issue of local numbers being snagged away from consumers. And as stated earlier, they can be used in multiple cities, which enables a company to be reachable in multiple cities via the same phone number. Not for nothing, National phone numbers are also called corporate numbers.</p>
<p>Only use a <strong>mobile number</strong> if you have to exhume mobility while it is ok that you are an independent service provider. Like an independent courier.</p>
<p><strong>Freephone numbers</strong> are by far the most effective phone number types for sales lines and support lines for high-end services and products. If you want to welcome your callers with open arms, this is the number type to opt for, without a doubt.</p>
<p>If the phone call is the medium via which you provide your services, <strong>premium rate numbers</strong> can provide financial compensation for the services provided. In some cases, these numbers are also used as support lines with the goal of building a threshold for the customer to call and some compensation for the cost of the time spent. Note that this will negatively impact your customer experience. In most countries, it is not even allowed to offer a premium rate number for the support line on services under contract or products under warranty.</p>
<p>An <strong>international freephone number</strong> is counterproductive in localization but has other advantages. This number type has been defined by the<a href="https://www.itu.int/en/ITU-T/inr/unum/Pages/uifn.aspx"> ITU</a> as an international alternative for the regular in-country freephone number and has the calling code +800. Having the same number available in multiple countries has its advantages: You only have to print one number on documentation to be used in multiple countries. And if you have international traveling callers, they only have to memorize one number.</p>
Caller And Operational Cost
<p>Each number type has its own caller and operational cost profile.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5b6110d6-114d-4e22-ad6f-b35017f0a60e/cost.png" /></p>
<p>The most cost-effective numbers for both callers and you are <strong>local, national, and mobile numbers</strong>. These number types are mostly called from the caller bundle and have the lowest operational cost.</p>
<p>The purpose of a <strong>freephone number</strong> is to shift the caller cost from caller to operational. Therefore, the operational cost is relatively high.</p>
<p>A <strong>premium rate number</strong> is a payment method; therefore, caller cost is high and provides an operational source of income.</p>
<p>The cost model for an <strong>international freephone number</strong> is similar to the model of a normal freephone number. The cost is shifted to the operation. </p>
<p><strong>Note</strong>: <em>Since this is a globally defined phone number type, it is not regulated by the various in-country regulators to whom the caller operators have to answer.</em></p>
<p>Most fixed line operators do respect the 0-caller tariff. However, some mobile operators use this loophole to charge their customers for calls to these numbers.</p>
Reachability
<p>Not all number types can be called from everywhere. Obviously, you need to make sure your phone number is reachable by your target audience.</p>
<p><strong>Local, national, mobile and international freephone numbers</strong> are usually internationally reachable.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a29823d5-3f93-411c-a2be-6ba12f56f65b/international-reachability.png" /></p>
<p>Normal freephone and premium rate numbers are not. As discussed before, these numbers do have their added value for many organizations. If you use these types of numbers, it is important to make sure you get a number in every target market or at least an alternative number for your local customer who just happened to travel outside of your country.</p>
A/B And Campaign Testing
<p>With these guidelines, you can make educated choices and proceed with confidence. But do you stop tweaking your website at this point? No, you don’t! This is where you start with optimization via methods like <a href="https://www.smashingmagazine.com/2010/06/the-ultimate-guide-to-a-b-testing/">A/B Testing</a>.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5d728bb5-61a2-40e1-97bc-97eac98db738/campaign-and-ab-testing.png" /></p>
<p>So why not include the phone number options in the scope of testing? All tools are available. All you have to do is include the phone numbers as an A/B parameter. And by adding the call statistics to the test evaluation, you can get to a more educated and accurate conclusion. Now, instead of the website, you are optimizing the website-phone number combination.</p>
<p>That also brings us to the next optimization. When evaluating an ad campaign or mailing, the evaluation usually stops with the clicks. But using different phone numbers (the same type of phone numbers to keep the evaluation clean) on both legs makes it very easy to add the call and call result statistics to the evaluation, enabling you to make even more educated decisions.</p>
<h3>Conclusion</h3>
<p>A/B testing can be used to evaluate and tweak your phone number choices. And by using different phone numbers (of the same type), you can make your Campaign evaluations more accurate.</p>
Website And Phone Number Integration
<p>Online communication and telephony are often regarded as two distinct domains, but they shouldn’t be. They are both customer contact points, and each can benefit greatly from the other.</p>
<p>Traditionally, just the phone number of the central office was presented. Once the realization set is that localization was also relevant for phone numbers, at least a block with multiple phone numbers was shown.</p>
<p>At the moment (hopefully even more after this article), the phone number shown is an integral part of the localization.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a501a1d9-d151-4239-83e7-74ebf36b4933/phone-number-and-website-integration.png" /></p>
<p>Best practice, however, is taking it a step further. Whatever you do, the goal should be to reach the goal as fast and efficiently as possible for your customer and you. This is valid for your website, your <a href="https://www.mcxess.com/how-to-make-your-callers-happy/">phone support</a>, and both combined. The best results can be obtained when information gathered on the website is not wasted but put to the benefit of the following phone call. By simply presenting a phone number based on the information gathered, you skip the necessity of an (extensive) phone menu and have call screening in place. The image shows a chat setup, but obviously, the same result can be achieved with other setups as well.</p>
<p>And in many cases, that information can be used to present relevant self-service alternatives to the visitor. That could mean even higher efficiency for both your customers and you. Do note that it is essential to offer the options to the visitor — do not hide the possibility of calling. That will lead to frustration, negatively impact customer satisfaction, and cost you leads and customers.</p>
Phone Number Presentation
<p>The last consideration is the presentation of the phone number on your website. Obviously, the presentation depends highly on your website design, but here are a couple of pointers from the phone number perspective:</p>
<ul>
<li><a href="#link">Link</a></li>
<li><a href="#flags">Flags</a></li>
<li><a href="#caller-tariffs">Caller Tariffs</a></li>
</ul>
<h3>Link</h3>
<p>Always link your phone numbers! Anything you do should contribute to making the life of your audience easier. Most devices are smart and connected, so link your phone number and enable your audience to place the call via a click.</p>
<p>Linking a phone number is easy with the ‘tel’ HTML tag, but what is important is always to use the <a href="https://www.mcxess.com/country-calling-codes/">international format</a>. If you link the local format, visitors from another country will not be able to call the number. In the link, do not place spaces or dashes, just the phone number, for example, tel:+31201234567.</p>
<h3>Flags</h3>
<p>It does help to present the flag or ISO code of the country of the number presented. It confirms the localization to the caller. The caller recognizes the flag and feels confident to call the number. If it is someone from another country, at least they are aware they will call internationally. This way, you’ll prevent possible surprises for the caller afterward.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3c5bf20f-9f8c-4480-b0b2-f90d6822d469/alternative-numbers.png" /></p>
<p>Furthermore, it gives you the opportunity to offer alternatives. If you have alternative phone numbers, it is possible to present the flag (combined with the number) in a dropdown. This way, in case the localization of the website is off, any visitor can find their relevant phone number. Note: When having alternatives, do not show all options, but show one (the one that should be relevant according to your site’s localization) and show there are alternatives. That way, you keep it simple.</p>
<h3>Caller Tariffs</h3>
<p><strong>Important:</strong> When presenting a premium rate phone number, always present the caller’s cost as well. </p>
<p>Besides that, it is the right thing to do, and it is also obligatory in most countries. In most countries, it is even obligatory to present the cost with the same font type, size, and color as the phone number, to avoid any room misinterpretation.</p>
<p>On the other hand, when presenting a freephone number, it is good to make it explicit as well as you want to avoid any chance your visitor does not recognize the number is free to call. What is important in this case is to make sure to use the right language which is understood by your audience. Other names for a “freephone number” are, for instance, a “green number” or “toll-free number”; it has many different names in many other languages. Check with your target audience before naming your number.</p>
<p>The other number types usually fall within everybody’s calling bundle, and there is not really a reason to state the number type. The only thing important for your audience is the country of the phone number. Those numbers are internationally callable, which could impact the caller’s cost.</p>
Takeaway
<p>It could help to see phone numbers like URLs. They have — on an abstract level — the same dynamics and statistics.</p>
<table>
  <tbody>
    <tr>
      <td>Visits</td>
      <td>vs</td>
      <td>Calls</td>
    </tr>
    <tr>
      <td>Session duration</td>
      <td>vs</td>
      <td>Call duration</td>
    </tr>
    <tr>
      <td>Conversion result</td>
      <td>vs</td>
      <td>Conversion result</td>
    </tr>
  </tbody>
</table>

<p>The customer journey is not limited to a website alone. Simply by combining the world of website design and telephony, far better results can be obtained for your organization. And thanks to the similarities and mutual benefits, it is an easy step to take.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/73bcdf75-1c5c-406b-b2bc-52ed058b6ecc/infographic-phone-numbers-web-designers.png" /></p>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Onno Westra)</author>
      <enclosure
        url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/20a14bbc-76a0-49f8-828b-0718c7c1f5a8/phone-numbers-web-designers.jpg"
        length="0" type="image/jpg"/>
    </item>
    <item>
      <title><![CDATA[Five Data-Loading Patterns To Boost Web Performance]]></title>
      <link>
        https://smashingmagazine.com/2022/09/data-loading-patterns-improve-frontend-performance/
      </link>
      <guid>
        https://smashingmagazine.com/2022/09/data-loading-patterns-improve-frontend-performance/
      </guid>
      <pubDate>Tue, 27 Sep 2022 14:00:00 GMT</pubDate>
      <description>
        <![CDATA[You don’t need a framework for everything, but if you use one, this article will help you use it in the most performant way.]]></description>
      <content:encoded><![CDATA[<p>When it comes to performance, you shouldn’t be stingy. There are millions of sites, and you are in close competition with every one of those Google search query results. Research shows that users <a href="https://www.marketingdive.com/news/google-53-of-mobile-users-abandon-sites-that-take-over-3-seconds-to-load/426070/">will abandon sites</a> that take longer than three seconds to load. Three seconds is a very short amount of time. While many sites nowadays load in less than one second, there is no one size fits all solution, and the first request can either be the do or die of your application. </p>
<p>Modern frontend applications are getting bigger and bigger. It is no wonder that the industry is getting more concerned with optimizations. Frameworks create unreasonable build sizes for applications that can either make or break your application. Every unnecessary bit of JavaScript code you bundle and serve will be more code the client has to load and process. The rule of thumb is the less, the better.</p>
<p>Data loading patterns are an essential part of your application as they will determine which parts of your application are directly usable by visitors. Don’t be the site that slows their entire site because they chose to load a 5MB image on the application’s homepage and understand the issue better. You need to know about the resource loading waterfall.</p>
Loading Spinner Hell And The Resource Loading Waterfall
<p>The resource loading waterfall is a cascade of files downloaded from the network server to the client to load your website from start to finish. It essentially describes the lifetime of each file you download to load your page from the network. </p>
<p>You can see this by opening your browser and looking in the <strong>Networking</strong> tab. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/09a956d7-14db-4f6f-bdbd-d54f01f67187/4-data-loading-patterns-improve-frontend-performance.png" /></p>
<p>What do you see there? There are two essential components that you should see:</p>
<ol>
<li>The chart shows the timeline for each file requested and loaded. You can see which files go first and follow each consecutive request until a particular file takes a long time to load. You can inspect it and see whether or not you can optimize it.</li>
<li>At the bottom of the page, you can check how many kB of resources your client consumes. It is important to note how much data the client needs to download. On your first try, you can use it as a benchmark for optimizations later.</li>
</ol>
<p>No one likes a white blank screen, especially your users. Lagging resource loading waterfalls need a basic placeholder before you can start building the layout on the client side. Usually, you would use either a spinner or a skeleton loader. As the data loads one by one, the page will show a loader until all the components are ready. </p>
<p>While adding loaders as placeholders is an improvement, having it on too long can cause a “spinner hell.” Essentially, your app is stuck on loading, and while it is better than a blank HTML page, it could get annoying, and visitors would choose to exit your site.</p>
<p>But isn’t waiting for the data the point?</p>
<p>Well, yes, but you can load it <strong>faster</strong>.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/03081f4f-a430-4acc-987c-74683c86c738/5-data-loading-patterns-improve-frontend-performance.png" /></p>
<p>Assuming you want to load a social media layout, you might add a loading spinner or a skeleton loader to ensure that you don’t load an incomplete site. The skeleton loader will usually wait for:</p>
<ul>
<li>The data from the backend API;</li>
<li>The build layout according to the data.</li>
</ul>
<p>You make an asynchronous call to an API, after which you get the URL for the asset on the CDN. Only then can you start building the layout on the client side. That’s a lot of work to show your face, name, status, and Instagram posts on the first try.</p>
The Five Data-Loading Patterns You Need to Know
<p>Developing software is becoming easier as frameworks like React, Vue, or Angular become the go-to solution for creating even the simplest applications. But using these bulky frameworks filled with a ton of magical functions you don’t even use isn’t what you should be going for.</p>
<p>You’re here to optimize. Remember, the less, the better.</p>
<p>But what if you can’t do less? How will you serve blazingly fast code, then? Well, it’s good that you’re about to learn five data-loading patterns that you can use to get your site to load quickly or, as you would say, <strong>blazingly fast</strong>.</p>
Client Side Rendering, Server Side Rendering And Jamstack
<p>Modern JavaScript frameworks often use client-side rendering (CSR) to render webpages. The browser <a href="https://web.dev/rendering-on-the-web/">receives a JavaScript bundle</a> and static HTML in a payload, then it will render the DOM and add the listeners and events triggers for reactiveness. When a CSR app is rendered inside the DOM, the <a href="https://web.dev/rendering-on-the-web/">page will be blocked</a> until all components are rendered successfully. Rendering makes the app reactive. To run it, you have to make another API call to the server and retrieve any data you want to load.</p>
<p>Server-side rendering (SSR) is when an application serves plain HTML to the client. SSR can be divided into two types: SSR with hydration and SSR without hydration. SSR is an old technique used by older frameworks such as WordPress, Ruby on Rails, and ASP.NET. The main goal of SSR is to give the user a static HTML with the prerequisite data. Unlike CSR, SSR doesn’t need to make another API call to the backend because the server generates an HTML template and loads any data within it.</p>
<p>Newer solutions like Next.js uses hydration, where the static HTML will be hydrated on the client side using JavaScript. Think of it like instant coffee, the coffee powder is the HTML, and the water is the JavaScript. What happens when you mix instant coffee powder with water? You get — wait for it — <em>coffee</em>.</p>
<p>But what is a Jamstack? Jamstack is similar to SSR because the client retrieves plain HTML. But during SSR, the client retrieves the HTML from the server. However, Jamstack apps serve pre-generated HTML directly from the CDN. Because of this, Jamstack apps usually load faster, but it’s harder for developers to make dynamic content. Jamstack apps are good with pre-generating HTML for the client, but when you use heavy amounts of JavaScript on the client side, it becomes increasingly harder to justify using Jamstack compared to Client Side Rendering (CSR).</p>
<p>Both SSR and Jamstack have their own differences. What they do have in common is they don’t burden the client with rendering the entire page from scratch using JavaScript. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1ef038a2-c189-4de0-8994-226b81c4e86b/1-data-loading-patterns-improve-frontend-performance.png" /></p>
<p>When you optimize your site’s SEO, using SSR and Jamstack are recommended because, compared to CSR, both return HTML files that search bots can easily traverse. But search bots can still traverse and compile JavaScript files for CSR. However, rendering every JavaScript file in a CSR app can be time-consuming and make your site’s SEO less effective.</p>
<p>SSR and Jamstack are very popular, and more projects are moving to SSR frameworks like Next.js and Nuxt.js compared to their vanilla CSR counterparts, React and Vue, mainly because SSR frameworks provide better flexibility when it comes to SEO. Next.js has <a href="https://nextjs.org/learn/seo/introduction-to-seo">a whole section talking about SEO</a> optimizations on their framework. </p>
<p>An SSR application will generally have templating engines that inject the variables into an HTML when given to the client. For example, in Next.js, you can load a student list writing:</p>
<pre><code>export default function Home({ studentList }) {
  return (
    &lt;Layout home&gt;
        &lt;ul&gt;
          {studentList.map(({ id, name, age }) =&gt; (
            &lt;li key={id}&gt;
              {name}
              &lt;br /&gt;
              {age}
            &lt;/li&gt;
          ))}
        &lt;/ul&gt;
    &lt;/Layout&gt;
  );
}
</code></pre>

<p>Jamstack is popular with documentation sites that usually compile code to HTML files and host them on the CDN. Jamstack files usually use Markdown before being compiled to HTML, for example:</p>
<pre><code>---
author: Agustinus Theodorus
title: ‘Title’
description: Description
---
Hello World
</code></pre>



Active Memory Caching
<p>When you want to get data that you already had quickly, you need to do caching — caching stores data that a user recently retrieved. You can implement caching in two ways: using a super-fast key-value store like Redis to save data keys and values for you and using a simple browser cache to store your data locally.</p>
<p>Caching partially stores your data and is not used as permanent storage. Using the cache as permanent storage is an anti-pattern. Caching is highly recommended for production applications; new applications will start using caches as they gradually mature.</p>
<p>But when should you choose between a Redis cache (server cache) and a browser cache (local cache)? Both can be used simultaneously but will ultimately serve a different purpose.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/15d39d15-4a9c-4306-9bf2-2fc9936cacf8/3-data-loading-patterns-improve-frontend-performance.png" /></p>
<p>Server caches help lower the latency between a Frontend and Backend; since key-value databases are faster than traditional relational SQL databases, it will significantly increase an API’s response time. However, a local cache helps improve app state management, enabling the app to persist state after a page refresh, and helps future visits.</p>
<p>In summary, if you want to increase the performance of your application, you can use server caches to speed up your APIs, but if you want to persist your app state, you should use the local storage cache. While local caches might not seem helpful at all, it does help reduce <a href="https://blog.bitsrc.io/9-best-practices-for-optimizing-frontend-loading-time-763211621061#f761">the number of API calls</a> to the backend by persisting state that doesn’t frequently change. However, local caches will be better when combined with live data.</p>
Data Event Sourcing
<p>You can make a real-time live connection between the Front-end and Backend via WebSockets. WebSockets are a two-way communication mechanism that relies on events. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/22eb2f7f-ea5d-490b-a923-027c3e8184d2/6-data-loading-patterns-improve-frontend-performance.png" /></p>
<p>In a common WebSocket architecture, the Front-end application will connect to a WebSocket API, an event bus, or a database. Most WebSocket architectures utilize it as a substitute to REST, especially in use cases like chat applications; polling your Backend service every few seconds becomes a very inefficient solution. WebSockets allow you to receive updates from the other end without needing to create a new request via the two-way connection.</p>
<p>WebSockets make a tiny, keep-alive connection compared to normal HTTP requests. Combining WebSockets with local browser cache creates a real-time application. You can update the app’s state based on the events received from the WebSocket. However, <a href="https://blog.bitsrc.io/event-sourcing-pattern-for-real-time-frontends-42359e6dd957">some caveats</a> regarding performance, scalability, and potential data conflicts exist.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/62dcb109-f31c-4418-9fcd-4c442d0aed04/7-data-loading-patterns-improve-frontend-performance.png" /></p>
<p>A pure WebSocket implementation still has a lot of faults. Using WebSockets instead of regular HTTP calls changes how your entire application behaves. Just a slight connection issue can affect your overall UX. For example, a WebSocket cannot have real-time performance when it needs to query the database every time there is a get request. There are bottlenecks in the backend that needs to be optimized for better real-time results to make WebSockets feasible and a more reasonable answer.</p>
<p>There needs to be an underlying architectural pattern that can support it. <a href="https://blog.bitsrc.io/event-sourcing-pattern-for-real-time-frontends-42359e6dd957">Event sourcing is a popular data pattern</a> you can use to create reliable real-time applications. While it doesn’t guarantee overall app performance, it will give your customers better UX by having a real-time UI.</p>
<p>Modern JavaScript has WebSocket providers that you can use. The <code>WebSocket</code> class opens a connection to a remote server and enables you to listen when the WebSocket opens a connection, closes a connection, returns an error, or returns an event:</p>
<pre><code>const ws = new WebSocket('ws://localhost');
ws.addEventListener('message', (event) =&gt; {
    console.log('Message from server ', event.data);
});
</code></pre>

<p>Do you want to react to server events? Add an <code>addEventListener</code> function and insert a callback that it will use:</p>
<pre><code>ws.send('Hello World');
</code></pre>

<p>Want to send a message? WebSockets got you. Use the <code>send</code> function to get a message out to the server. It’s as easy as printing “Hello World.” The examples are from <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSocket?retiredLocale=id">the MDN Docs</a>.</p>
Prefetching And Lazy Loading
<p>Prefetching and lazy loading has become common knowledge among frontend developers. Efficient use of a client’s resources and bandwidth can greatly improve your application’s performance.</p>
<h3>Prefetching</h3>
<p>Prefetching gives developers more granular control over the client’s <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Link_prefetching_FAQ">idle bandwidth</a>, loading resources, and pages that the client might need next. When a website has a prefetch link, the browser will <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Link_prefetching_FAQ">silently download</a> the content and store it within its cache. Prefetched links can have significantly faster loading times when the user clicks them.</p>
<pre><code>&lt;link rel="prefetch" href="https://example.com/example.html"&gt;
</code></pre>

<p>You specify prefetch URLs within the <code>link</code> HTML element, more specifically, the <code>rel</code> attribute. Prefetching has a few pros and cons:</p>
<ul>
<li><strong>Pros:</strong> Prefetching waits until the browser’s network is idle and is no longer in use and will stop when you trigger usage by clicking a link or triggering a lazy loading function.</li>
<li><strong>Pros:</strong> Prefetching caches data within the browser, making page transitions faster when redirecting to a link.</li>
<li><strong>Cons:</strong> It can be used to download trackers, compromising user privacy.</li>
</ul>
<h3>Lazy Loading</h3>
<p>Lazy loading is a common data-loading pattern that makes the client load à la carte results, not loading everything until the client needs it. Lazy loading will make the client fetch the latter parts of a website after they’ve scrolled into view.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/906d0c28-d8a9-49ad-aee5-d69ec21b44ee/8-data-loading-patterns-improve-frontend-performance.png" /></p>
<p>Lazy loading makes your site load faster by allowing the browser to concentrate on more important, on-screen resources. You won’t need to load all the images/text on a given site when you can’t see it. But lazy loading can only help you delay downloading resources and doesn’t make your resources smaller and more cost-efficient.</p>
<p>However, if you are looking to make a more cost-efficient solution that is similar to lazy loading, try looking for Resumability.</p>
Resumability
<p>Many developers have never heard of the Resumability concept before. Resumability <a href="https://github.com/BuilderIO/qwik/blob/main/packages/docs/src/routes/docs/concepts/resumable/index.mdx#introducing-resumability">renders JavaScript partially in the server</a>, the final state of the render will be serialized and sent to the client with the corresponding HTML payload. Then the client will finish the rendering, saving time and resources on the client side. Essentially, Resumability uses the server to do the heavy lifting and then gives the client a minimal amount of JavaScript to execute via serialization.</p>
<p>The main idea of Resumability is to serialize the application state from the server to the client. Instead of loading everything (HTML, JS) and hydrating them on the Front-end, Resumability serializes the JavaScript parsing in stages and sends them to the client in HTML.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/56b6144c-5e7a-43c5-8320-d1042b50a812/9-data-loading-patterns-improve-frontend-performance.png" /></p>
<p>Page startups will be instantaneous because the client doesn’t have to reload anything and can deserialize the state injected into the HTML. Resumability is a very foreign concept and is not common in many projects. It was coined by the founder of Qwik, Misko Hevery.</p>
<p><a href="https://github.com/BuilderIO/qwik">Qwik is a JavaScript framework</a> that relies on Resumability under the hood. Unlike other frameworks, Qwik is built from the ground up with Resumability in mind. Frameworks like <a href="https://github.com/BuilderIO/qwik/blob/main/packages/docs/src/routes/docs/think-qwik/index.mdx#why-not-fix-existing-frameworkstools">React and Vue can never utilize Resumability</a> without sacrificing backward compatibility. It is because the lazy loading component of Qwik uses asynchronous lazy loading compared to the synchronous nature of most JavaScript frameworks.</p>
<p>The <a href="https://github.com/BuilderIO/qwik">goal of Qwik</a> is to load as minimal JavaScript as possible. Lazy loading JavaScript is hard and, in some instances, impossible. The less you need it, the better. Resumability allows developers to have fine-grained lazy loading and decreased memory usage for mobile applications optimizing your site for the mobile web.</p>
<p>Using Qwik is similar in some ways to React, specifically, its syntax. Here is a <a href="https://qwik.builder.io/examples/introduction/hello-world/">code snippet example</a> of how Qwik works in code. The root of the application will be in the form of HTML:</p>
<pre><code>import { App } from './app';
export const Root = () =&gt; {
  return (
    &lt;html&gt;
      &lt;head&gt;
        &lt;title&gt;Hello Qwik&lt;/title&gt;
      &lt;/head&gt;
      &lt;body&gt;
        &lt;App /&gt;
      &lt;/body&gt;
    &lt;/html&gt;
  );
};
</code></pre>

<p>The root has a dependency on <code>App</code>. It will be the lazy loaded Qwik component:</p>
<pre><code>import { component$ } from '@builder.io/qwik';
export const App = component$(() =&gt; {
  return &lt;p&gt;Hello Qwik&lt;/p&gt;;
});
</code></pre>

<p>Qwik and React have similarities at the component level. But it differentiates when you get into the server side of things.</p>
<pre><code>import { renderToString, RenderOptions } from '@builder.io/qwik/server';
import { Root } from './root';
export default function (opts: RenderOptions) {
  return renderToString(&lt;Root /&gt;, opts);
}
</code></pre>

<p>The code snippet above shows you how the server-side of Qwik serializes the root component using the <code>renderToString</code> method. The client will then only need to parse pure HTML and deserialize the JavaScript state without needing to reload them.</p>
Summary
<p>Application performance is essential for the client. The more resources you have to load on startup, the more time your app will need to bootstrap. Loading times expectations are getting lower and lower. The less time you need to load a site, the better.</p>
<p>But if you are working on large enterprise applications, how you can optimize your apps are not obvious. Data-loading patterns are one way you can optimize your applications’ speed. In this article, you reviewed five data-loading patterns that may be of use:</p>
<ol>
<li>Server Side Rendering (SSR) and Jamstack;</li>
<li>Active Memory Caching;</li>
<li>Data Event Sourcing;</li>
<li>Prefetching and Lazy Loading;</li>
<li>Resumability.</li>
</ol>
<p>All five of which are useful in their own circumstances.</p>
<p>SSR and Jamstack are generally good choices for applications that require less client-side state management. With the advent of modern JavaScript frameworks like React, more people have tried Client Side Rendering (CSR), and it seems that the community has come full circle back to SSR. SSR is the technique used by old MVC web frameworks to use template engines to generate HTML based on the data on the backend. Jamstack is an even older depiction of the original web, where everything was using just HTML.</p>
<p>Active memory caching helps users load data from APIs faster. Active memory caching solves the important issues around data loading by either caching the results on a remote cache server (Redis) or your local browser cache. Another data-loading pattern even uses it, prefetching.</p>
<p>Next, event sourcing is an architectural pattern that supplements the real-time event-based WebSocket APIs. Plain old WebSockets are not enough to become completely efficient because even though the WebSocket itself is real-time, the recurring API call to the database can cause a bottleneck. Event sourcing removes this problem by creating a separate database for retrieving data.</p>
<p>Prefetching and lazy loading are the easiest solutions to implement. The goal of prefetching is to load data silently during network idle times. Clients will save the prefetched link inside their browser caches, making it instantaneous on contact. </p>
<p>Lazy loading reduces the number of resources you need to load on the first click. You only need the resources that you see directly after the page loads. However, Resumability takes lazy loading to the extreme. Resumability is a method of lazy loading JavaScript components by rendering them in the server and then serializing the state to continue the render on the client via HTML.</p>
Where To Go From Here?
<p>Learning to optimize your Frontend applications is an ongoing process; you need to be proactive about what you implement daily. Data-loading patterns are only one of a few ways you can use to improve your application performance.</p>
<p>But it is best to consider the common pitfalls before making any drastic changes to how your application is structured and consumes and loads data.</p>
<p>If you’re interested in exploring the references, you can check out:</p>
<ul>
<li><a href="https://qwik.builder.io/docs/overview/">Qwik overview</a></li>
<li>“<a href="https://medium.com/@inverita/frontend-optimization-8-tips-to-improve-web-performance-29af4b00efe7">Frontend Optimization: 8 Tips to Improve Web Performance</a>”, inVerita</li>
<li>“<a href="https://blog.bitsrc.io/event-sourcing-pattern-for-real-time-frontends-42359e6dd957">Event Sourcing Pattern for Real-Time Frontends</a>”, Pasan Missaka</li>
<li>“<a href="https://medium.com/geekculture/12-front-end-performance-patterns-you-need-to-know-def550620464">12 Front End Performance Patterns You Need to Know</a>”, Chris Staudinger</li>
<li>“<a href="https://blog.speedvitals.com/web-performance-mistakes/#Over_Utilizing_Preloading">23 Web Performance Mistakes to Avoid in 2022</a>”, Kashish Kumawat</li>
</ul>
<p>I hope you found this article helpful. Please join the forum discussion below if you have any questions or comments.</p>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Agustinus Theodorus)</author>
      <enclosure
        url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b4b98819-8676-4a35-b3a1-ab5428b36784/data-loading-patterns-boost-web-performance.jpg"
        length="0" type="image/jpg"/>
    </item>
    <item>
      <title><![CDATA[Meet SmashingConf New York 🇺🇸 (Oct 10&ndash;13)]]></title>
      <link>https://smashingmagazine.com/2022/09/meet-smashingconf-new-york/</link>
      <guid>https://smashingmagazine.com/2022/09/meet-smashingconf-new-york/</guid>
      <pubDate>Mon, 26 Sep 2022 10:30:00 GMT</pubDate>
      <description>
        <![CDATA[<a href="https://smashingconf.com/ny-2022">SmashingConf NYC</a> is back! A friendly, inclusive conference for designers and front-end engineers who can’t wait to learn and be inspired. October 10–13, 2022. <a href="https://smashingconf.com/ny-2022/registration/?mc_cid=6e0174dcff&mc_eid=c2259fc0cc">Get your ticket!</a>]]></description>
      <content:encoded><![CDATA[<p><strong>We’re so happy to be back</strong> after all these years! Let’s brush up our front-end and design skills, together — at the wonderful <a href="https://smashingconf.com/ny-2022">SmashingConf New York</a>, with plenty of practical sessions and hands-on workshops all around <strong>design systems</strong>, UX, CSS, JavaScript, performance and <strong>accessibility</strong>. And it’s not just about the content: it’s inclusive environment, memorable experiences and fun activities  along the way as well. (<a href="https://photos.google.com/share/AF1QipM9OiDHOomVpPkZapmVTVNKOMoVJLDKHfyBe6Z8GU2lDFeGdwkUlYuiwChlMk3ftg?mc_cid=6e0174dcff&amp;mc_eid=c2259fc0cc&amp;key=VFFId3dtSDV2WHlrSHNkdl85OW8zRnBIS0dZdFBR">Check what SmashingConfs are like</a>).</p>

<p>Here’s the gist: <strong>single track</strong>, 2 practical days, 5 hands-on workshops, 12 experienced speakers, loads of mysteries and friendly networking! <a href="https://smashingconf.com/ny-2022/registration/">Get your ticket!</a></p>

<a href="https://smashingconf.com/ny-2022"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a8a6c3e7-7f0c-46e9-8607-2424c603ee0e/smashingconf-discussion.jpg" /></a>

<a href="https://smashingconf.com/ny-2022"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/34378719-8878-4b6f-a784-1aadc31b1b4f/smashingconf-audience.jpg" /></a>

<a href="https://smashingconf.com/ny-2022"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/478e580f-223f-4a27-8ce4-1c3b322efb30/smashingconf-tobi.jpg" /></a>Tobi the DJ will be back in <a href="https://smashingconf.com/ny-2022/">New York</a> as well, of course! Wonderful photos by <a href="https://www.flickr.com/photos/marcthiele/albums/72157708275324135/">Marc Thiele</a>.


<div><div><ul><li><a href="https://smashingconf.com/ny-2022/registration/">
Online + In-Person</a></li><li><a href="https://smashingconf.com/ny-2022/registration/">
Online only</a></li></ul><div><h3>Online + In-Person</h3>$ 699.00
<a href="https://smashingconf.com/ny-2022/registration/">
SmashingConf In-Person + Online</a><p><strong>Oct 10–13, 2022</strong>. New World Stages, NYC.<br />Save up to 25% with <a href="/membership/">Smashing Membership</a>.</p></div><div><h3>Online only</h3><div>$ 200.00</div>
<a href="https://smashingconf.com/ny-2022/registration/">
SmashingConf Online</a><p>With all <strong>video recordings,</strong> of course.<br />Save up to 25% with <a href="/membership/">Smashing Membership</a>.</p></div></div></div>

<p>Ah, your <strong>boss needs a little bit convincing</strong>? We’ve got your back! Download the <a href="https://smashingconf.com/files/convinceyourboss-NY2022.pdf"><strong>Convince Your Boss PDF</strong></a> to tip the scales in your favor. And we’ve prepared a <a href="https://smashingconf.com/ny-2022/convince-your-boss">“letter to the boss” template</a> for you as well.</p>

Meet The Speakers
<p>Our speakers are not just knowledgeable and amongst the best in their fields. They are also <a href="https://smashingconf.com/ny-2022/speakers">excellent speakers and teachers</a>, smart and kind friends, and wonderfully nice and approachable.</p>
<p>Meet <strong>Jason Pamental</strong>, <strong>Cassie Evans</strong>, Harrison Wheeler, <strong>Una Kravets</strong>, Laura Kalbag, Steve Schoger, Eva Fereirra, Guillaume Kurkdjian and of course the <em>Mystery Speaker</em>. Topics range from SVG animation to design systems and from Figma to web performance, and beyond.</p>

<a href="https://smashingconf.com/ny-2022"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/795031fe-cf85-4b58-8119-f322f923e36c/new-york-speakers-800-opt.png" /></a>

<a href="https://smashingconf.com/ny-2022"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/016965b1-6c4b-4bdd-b44d-7a716e299f64/smashingconf-speaker.jpg" /></a>

Practical Workshops
<p>If you attend a conference, why not join a <a href="https://smashingconf.com/ny-2022/workshops">practical workshop</a> as well? The day before and the day after the conference, we run a  full-day training focusing around tangible, applicable insights that you can use right after the workshop. We’ll be diving into <strong>SVG animation</strong>, accessibility testing and <strong>complex interface design patterns</strong>. Plenty of topics to choose from, and <a href="https://smashingconf.com/ny-2022/registration#bundles">bundle discounts are available</a>, too!</p>

<a href="https://smashingconf.com/ny-2022/workshops"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0ab760f2-2c09-4e7f-be53-f18953a763a1/smashingconf-workshops.jpg" /></a>All <a href="https://smashingconf.com/ny-2022/workshops">workshops</a> are hands-on and practical, so you can apply your new skills immediately.

Side Events
<p>It’s not all business at SmashingConf, of course! We have many friendly side events before, during, and after the conference. The evening before the conference kicks off, join us for some <strong>drinks, lightning talks</strong>, and meet some new friends already.</p>

<p>Want to start the conference fit and fresh? Every day, we’ll have a <strong>morning run in Central Park</strong>. And for all the photo enthusiasts, we are closing the conference with a lovely Photo Walk around the city. Our little side events are all <strong>friendly, fun, and a great way to meet people</strong> and hang out!</p>

Team Tickets? 👫👭
<p><strong>Bring the entire team to the SmashingConf</strong>, and save some of your training budget along the way as well. With our <strong><a href="https://smashingconf.com/ny-2022/registration">friendly bundle tickets</a></strong> and <strong>team discounts</strong>, we’ve got your back! If you want to come with a large team, or are interested in something special, <a href="mailto:hello@smashingconf.com">please send us a short email</a> and we’ll get back to you right away!</p>

SmashingConf NYC Online
<p>If you can’t travel to New York, that’s no problem either. We run a <a href="https://smashingconf.com/ny-2022/online">SmashingConf Live Stream Online</a> for the main stage talks. Plus, you get some  behind-the-scenes footage and backstage interviews with speakers, organizers, and friends. 🎉🥳</p>

<a href="https://smashingconf.com/ny-2022"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2c4b696b-2606-4538-975a-c585e0ea0045/smashingconf-online-800.png" /></a>

<div><div><ul><li><a href="https://smashingconf.com/ny-2022/registration/">
Online + In-Person</a></li><li><a href="https://smashingconf.com/ny-2022/registration/">
Online only</a></li></ul><div><h3>Online + In-Person</h3>$ 699.00
<a href="https://smashingconf.com/ny-2022/registration/">
SmashingConf In-Person + Online</a><p><strong>Oct 10–13, 2022</strong>. New World Stages, NYC.<br />Save up to 25% with <a href="/membership/">Smashing Membership</a>.</p></div><div><h3>Online only</h3><div>$ 200.00</div>
<a href="https://smashingconf.com/ny-2022/registration/">
SmashingConf Online</a><p>With all <strong>video recordings,</strong> of course.<br />Save up to 25% with <a href="/membership/">Smashing Membership</a>.</p></div></div></div>

COVID-19
<p>Let’s stay healthy and safe, everyone! You need to be <strong>fully vaccinated</strong> to access the conference venue, workshops, and parties. Please check our <a href="https://smashingconf.com/covid-19">COVID-19 guidelines</a>, <a href="https://smashingconf.com/accessibility">accessibility statement</a>, <a href="https://smashingconf.com/codeofconduct">Code of Conduct</a>.</p>

We Can’t Wait To See You!
<p>As we are getting ready for the event, we can’t be more excited to see you again after all these years. Let’s boost our skills in-person, together, and creating <strong>memorable experiences</strong> that will last for a while. ❤️</p>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Vitaly Friedman)</author>
      <enclosure
        url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6b0218f4-6266-412a-ace8-ea05b1ad688d/smashingconf-ny-banner.png"
        length="0" type="image/png"/>
    </item>
    <item>
      <title><![CDATA[Lessons Learned As A Designer-Founder]]></title>
      <link>https://smashingmagazine.com/2022/09/lessons-learned-designer-founder/</link>
      <guid>https://smashingmagazine.com/2022/09/lessons-learned-designer-founder/</guid>
      <pubDate>Fri, 23 Sep 2022 11:30:00 GMT</pubDate>
      <description>
        <![CDATA[In this article, Dave Feldman shares his lessons learned and the experiments has done as a multidisciplinary designer-founder-CEO at an early-stage startup. Let’s take a look at what it is that makes a great design process for teams of any size.]]></description>
      <content:encoded><![CDATA[<p>In the quarter-century I’ve been a product designer, design has matured. We’ve developed tools and practices that allow us to work faster, better, and more in concert with engineers and product managers. Things are a lot less chaotic than they used to be.</p>
<p>But with that change comes the <em>process</em>. I’ve written elsewhere about the <a href="https://uxdesign.cc/five-rants-from-a-cranky-designer-4c572f27aef0">dangers of too much process</a>; in the years I spent building the design practice at <a href="https://heap.io">Heap</a>, I tested and evolved my ideas around <a href="https://uxdesign.cc/the-pragmatic-design-manifesto-efaa260e8c4a">Pragmatic Design</a> and its potential to reduce process. I encouraged lower-fidelity artifacts; <a href="https://uxdesign.cc/save-time-and-get-aligned-with-a-design-brief-ec95f2f1762f">design briefs</a> instead of endless mockups; <a href="https://dfeldman.medium.com/what-is-product-quality-a-practical-definition-990d3ca6827">product-quality reviews</a> instead of design reviews; and I pushed for early, ongoing collaboration between Design, Product, and Engineering. The results were encouraging: we got more done with a smaller, scrappier team.</p>
<p>In 2020 I left Heap to found <a href="https://miter.co">Miter</a>, a startup whose mission is deceptively simple: make meetings better. And if Heap was a testing ground for pragmatic design, Miter’s been a crucible for <em>extreme</em> pragmatism: nothing is scrappier than being the only designer, the only PM, and the only engineer. What process is worth keeping? What can be optimized and what can’t? And what needs to change <em>again</em> as we build a team?</p>
<p>That’s useful context if you’re a designer-founder yourself. Still, even if you’re not, it’s valuable to think about why each part of the design process exists and how (and whether) we can optimize it in various ways to be more efficient and better collaborators. So whether you’re designing on a team of ten or ten thousand, this post is for you.</p>
Multiple Hats
<p>Founder or not, designers are often multidisciplinary. Many of us do some PM’ing or make a little prototype if we’re technical. If you’re like me, you <em>enjoy</em> that breadth and chafe a bit when forced to wear just one hat.</p>
<p>What makes being multidisciplinary an advantage? To begin with, it represents a broader design toolkit. With a little engineering knowledge, you can build working prototypes or even design directly in the codebase if that’s the most efficient way to experiment. And small, straightforward projects can sometimes go straight from brain to product:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1838314b-5d31-4ba6-b157-87e734b90e5d/4-lessons-from-designer-founder.png" /></p>
<p>As a team grows, understanding diverse perspectives can improve collaboration and results. We can’t predict all the twists and turns our designs will take as they’re built, no matter how diligent we are at thinking through edge cases. I’ve always advocated for design and engineering to proceed in lockstep <em>throughout</em> the process; being a lone designer-engineer has reminded me just how powerful that is. My designs can change radically long after they’re “done.” That’s easy to deal with when it’s just me but feasible to manage as a team, too. </p>
<p>To put it simply, you can substitute a little conversation for a lot of process. And that’s easier when your designers speak a little Engineer, your engineers speak a little Designer, and everybody speaks a little Product. In a quick conversation, you can make trade-offs, generate creative solutions, and reprioritize the backlog as your understanding of ROI evolves.</p>
<p>For example, <a href="https://miter.co">Miter</a> was built to work whether you’re signed in or not: if you have the URL for a meeting, you can join and participate without an account. That’s a strength for us, and when we set out to build our new <a href="https://miter.co/#dynamics">Dynamics</a> facilitation feature, we figured that would remain true. But during one sprint planning, Nico — our first engineer — raised some questions about how we’d distinguish among anonymous users given we’re unable to identify them; doing so is central to Dynamics in a way it’s not elsewhere. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dc7ffa32-cd4a-4888-a3a2-6f6c2814241d/2-lessons-from-designer-founder.png" /></p>
<p>It was doable, but none of the options was easy, so I made the call (Product hat) to make the feature signed-in-only. Nico disabled the button for signed-out users; I recognized we needed to give users a bit more feedback (Design hat), decided that was worth doing before launch (Product hat), and spent a couple of hours implementing it (Engineering hat).</p>
<h3>Wear Your Hats Carefully</h3>
<p>Designing in code can be efficient, but be careful: it can hurt the design, too. You know all those arguments designers have with engineers? There’s a reason for them. When wearing your engineer hat, you’re looking to simplify: reducing code paths, avoiding async situations that could yield race conditions, and so on. But sometimes, those are the very things that make a design great. As I implement, I find myself pushing back on my designer self, and (because the engineer self is doing the work) the designer self tends to lose. I have to step back periodically, put the design hat on, and consider.</p>
<p>That separation is easy to maintain if you do all your design in design tools, but I don’t recommend going that far. Sometimes things are straightforward enough (as in the Add Task example above) that it’s just not worth the time to design separately. The key is to recognize when you need to be <em>thinking</em> in design mode vs. engineer mode.</p>
<h3>Broadcast Your Hats</h3>
<p>It’s valuable not only to understand which hat you’re wearing but also to communicate it to others.</p>
<p>One afternoon my co-founder wanted help with a marketing email. I started with the usual designer questions: what’s the goal of this project? What does success look like? All good questions, but he didn’t realize which hat I was wearing. Instead of the curious designer understanding project requirements, he heard the skeptical CEO challenging them. After a few tense moments, we figured it out, and I’ve been more careful to clarify my hat up front.</p>
<p>This matters most when you’re in a leadership role since power dynamics are at play. The CEO of a startup I advised once took this a step further with actual hats: on his desk, he had two baseball caps, one labeled “CEO” and one labeled “Product.”</p>
<h3>Know Your Environment</h3>
<p>A multidisciplinary approach isn’t <em>always</em> a path to success. Some teams value specialization and want people to stay in their lanes, especially at larger companies. I once received feedback that I needed to “act more like a designer.” It was hard to hear at the moment, but ultimately I concluded it was more about my fit with that team than anything I was doing wrong.</p>
<h3>Takeaway</h3>
<p>On any team, it’s valuable for everyone to understand each other’s specialties. Actually <em>wearing</em> all those hats may be less valuable at larger companies, but the fastest way to understand is doing. I’d encourage any designer to learn to code and to think holistically about roadmaps and launches as a PM would. How you deploy that knowledge will depend on your team’s dynamic.</p>
The Bare Minimum Design Process
<p>As designers, so much of what we do is <em>communicating</em> and <em>convincing</em>. We run user tests to justify our decisions. We create multiple options because it’s expected. We write up specs, make flow diagrams, or mock every state, so engineers get the details right. We present in critique to get feedback, but also because our peers want a venue to question our decisions.</p>
<p>But for much of Miter’s existence, none of that has been necessary — the only person I really need to communicate with or convince has been myself. So what’s left? What pieces of the process are still valuable?</p>
<h3>Rapid Sketching</h3>
<p>In general, the design goes from broad and low-fidelity to detailed and high-fidelity: bullet points to sketches to wireframes to mockups to prototypes to implementation. Though, of course, we rarely do <em>all</em> of that.</p>
<p>In the early stages, I’m a big fan of paper sketches. It’s been years since I accepted their messiness and realized how much faster and more powerful they can be than wireframes (which I rarely use anymore). I even advocate for their use in executive reviews.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c9fcdb98-2bdf-4b81-abe4-ff67e4dd23c6/5-lessons-from-designer-founder.png" /></p>
<p>In some ways, sketches are <em>more</em> powerful when you are your only audience because they don’t even have to be legible. What’s that weird blob in the corner? Doesn’t matter, as long as <em>you</em> know. You can tear through permutations quickly, which means I sketch regularly but briefly before moving on to higher-fidelity methods.</p>
<h4>Design Briefs</h4>
<p>I conceived of the <a href="https://heap.io/blog/save-time-and-get-aligned-with-a-design-brief">Design Brief</a> when I was at Heap as a substitute both for longer design docs and unnecessarily-exhaustive mockups. We used it (along with sketches) as a fast, early artifact to ground cross-functional discussions — from scoping to prioritization to leadership reviews — before spending significant time on the details.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b7dc6814-1887-41e9-9b1c-9a1cdc634c31/1-lessons-from-designer-founder.png" /></p>
<p>I still use design briefs on larger projects. They don’t take long, and the act of writing them helps me think — taking high-level, hand-wavy ideas to a more practical level. They serve as a record of what I was thinking and why to help clarify for my future self. And we do sometimes conduct design reviews.</p>
<p>I also write <a href="https://heap.io/blog/pms-clarify-the-problem-not-the-solution-heres-how">product briefs</a> and encourage engineers to write engineering briefs. Both have worked well. The key is not to go overboard, as they’re called “briefs” for a reason. And while it’s useful to have templates for them, I treat those as guidelines rather than requirements.</p>
<h3>Hero Mockups</h3>
<p>I find mockups to be an indispensable part of the design process. For significant changes and new functionality, it’s much faster to mock it up than to build even a semi-functional prototype. But I only do “hero” mockups — key states of whatever I’m designing rather than a comprehensive set.</p>
<p>As our team grows, those will probably expand, but — just as we did at Heap — I’ll continue to rely on the design brief, real-time conversations, and design-minded engineers rather than go crazy with mocks.</p>
<h3>Design System</h3>
<p>Miter does have a design system of sorts. I’ve built an extensive set of reusable Figma components, as well as global colors and text styles that I try to use consistently across mocks.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/34f2a11a-7b1f-4fd8-984d-f996f9145ff6/3-lessons-from-designer-founder.png" /></p>
<p>Why bother, with nobody else on the team? Because change is easier, safer, and — most importantly — faster when it’s centralized. If I want to make all our buttons square tomorrow, I can do it once and have it propagate everywhere.</p>
<p>Not everything deserves a component. Sometimes it’s just too early, too prone to change. So when’s the right time to turn one-off work into components? I try to do it when I recognize that a component I built for Project N is needed in Project N+1. (This would be much easier if Figma behaved as advertised, and one could cut-and-paste components from individual files to your library. Hint hint.)</p>
<p>This sort of centralization is even more important in code, and when our mocks and codebase disagree, it’s often the code that wins. To be clear: I don’t see that as a problem. Our canonical style guide is the <code>Global.less</code> file with all our CSS variables. We have one and <em>only</em> one button component, and we use it everywhere. When I write and review code, I’m ruthless about centralization because it’s what will ensure things remain consistent and easy to change. </p>
<p>Five years from now, I don’t want to be a company where simple design improvements get killed because they’d have to be implemented five times over.</p>
<h3>Critiques &amp; Reviews</h3>
<p>I thrive on feedback; I can’t do my job without it. We don’t have designers on the team, but we <em>do</em> have design-minded engineers and a COO who can critique our UX from both a product and a go-to-market perspective. I do a lot of “What do you think about this?” on Slack, and occasionally, I schedule design reviews.</p>
<p>That said, I miss having other designers around when we brainstorm or critique. I look forward to the point when I can justify hiring a designer to fill out that conversation. In the meantime, there’s no silver bullet. I love the idea of gathering a group of solo designers to review each other’s work across companies, but it’s not something I’ve actually found the time to do. What I <em>do</em> do is take the time to explain my rationale — and design principles in general — to the rest of the team, so over time, they’ll be critiquing from a more and more informed perspective.</p>
<h3>Research: Focus On The 20%</h3>
<p>Working elsewhere, I’ve been frustrated by the state of user research. It’s underfunded. It’s used to settle cross-functional debates rather than to answer real questions about users. Foundational work takes a back seat to tactical studies. Usability tests are misinterpreted as feedback, so we end up doing what users tell us rather than determining what they need. And too often, research findings are dropped on the floor due to timelines.</p>
<p>At Miter, we’re still too small to hire a dedicated researcher, so I’m responsible for whatever research we do. And because my time is so split, that research really, <em>really</em> needs to count. In making those trade-offs, I rely on a simple truth: designers know how to design. That may seem self-evident, but I think we all forget it sometimes and assume anything that hasn’t been tested has an equal probability of being a disaster. </p>
<p>80% of what a good designer does should be usable. Just as importantly, a good designer has a sense of what lies in that other 20%. I like to think in terms of “UX Risk”: what are the bits of my design that need testing? What’s bold, unique, unknown, ambiguous?</p>
<p>Of <em>course</em> I make mistakes in the other 80%, and it’s essential to watch for unexpected usability issues in the data. For instance, a couple of months ago, we noticed several users had interacted with Miter’s pre-meeting screen but never hit the Start button to start the meeting. We came up with a hypothesis: people thought our topic list was a note-taking UI. Digging into user sessions and looking at average topic length confirmed it. Thankfully, it was an easy fix: make the topics more topic-like and less note-like. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a08ec963-0c8f-485f-82ca-d15f77afbb89/topics-before-after.png" /></p>
<p>I suspect we’ve done more user research than a typical early-stage startup, and other founders might question that. Still, as we head into our next round of fundraising, I can tell you it’s given me the ability to speak about our target audience and their needs with far more confidence.</p>
<h3>Takeaway</h3>
<p>What strikes me about my “bare minimum” design process is, in fact, how <em>many</em> of the traditional artifacts I still use. There’s very little that I would do as part of a larger team that I <em>don’t</em> do on my own. The tools I use to explore and iterate are the same ones I’d use to communicate and convince. The biggest difference is in comprehensiveness. So, what can that tell us?</p>
<ol>
<li><strong>We have a broad array of tools at our disposal. Use them!</strong><br />But, use the right tool for the job. Not every project needs every type of artifact. (This is true whether your team uses Agile, “waterfall,” or some other approach.)</li>
<li><strong>Low fidelity can be better than no fidelity.</strong><br />I’ve always advocated for low fidelity. It’s faster, easier, and in cross-functional situations, can help focus stakeholders on the forest rather than the trees. But skipping over this phase altogether, while tempting when you’re on your own, can be dangerous. A few minutes spent sketching or writing bullet points can clarify and solidify your design at a stage where that’s extremely low cost.</li>
<li><strong>Know your reasons.</strong><br />Are you mocking this up because you need it or because your stakeholders do? Neither is necessarily bad, but you might want to approach the work differently depending. Or put another way: a mockup whose target audience is <em>you</em> has very different requirements than one whose target is a slide in an All-Hands meeting.</li>
</ol>
Pitfalls Of The Designer-Founder
<p>The designer’s curse is we <em>see pixels</em>: if the alignment is off, if the border is fuzzy, if the context is lost without an animated transition, and so on. We <em>see</em> it when nobody else does, and it <em>bothers</em> us.</p>
<p>The curse of the early-stage founder, meanwhile, is a lack of resources. My team has greater agility than it will ever have again, but we can’t do more than one or two things at a time.</p>
<p>Those curses come into conflict. On the one hand, nobody can stop you from polishing your product into oblivion. And our industry is littered with the corpses of “design-led” companies that built beautiful things nobody wanted.</p>
<p>On the other hand, a design-led company’s superpower <em>is</em> great design. Unlike your competitors, you can present a polished, elegant, usable face to the world, and that’s worth doing.</p>
<p>So it’s a balance. Wear the design hat, revel in it, and sweat the details. And then swap it for the product hat and keep that detail work under control. I’ve hired engineers who are design-centric enough that I’ve had to stop <em>them</em> from polishing things further, and honestly, that’s probably a good dynamic. </p>
<p>As the leader, if you nitpick the details, then the details will get fixed. And that’s marvelous, but it also carries a cost.</p>
<p><em>What’s your experience been optimizing the design process? Have you found success, or challenges, as a multidisciplinary designer? <a href="https://twitter.com/dfeldman">I’d love to hear about it!</a> And of course, if you wish your meeting could be better, check out <a href="https://miter.co">Miter</a> and let me know what you think!</em></p>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Dave Feldman)</author>
      <enclosure
        url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/273285f3-018f-4ce0-9c9c-06310070caaf/lessons-learned-designer-founder.jpg"
        length="0" type="image/jpg"/>
    </item>
    <item>
      <title><![CDATA[Things I Wish I Had Known About Angular When I Started]]></title>
      <link>https://smashingmagazine.com/2022/09/angular-guide/</link>
      <guid>https://smashingmagazine.com/2022/09/angular-guide/</guid>
      <pubDate>Thu, 22 Sep 2022 13:00:00 GMT</pubDate>
      <description>
        <![CDATA[If you’re considering learning Angular, this article sums up what William Juan wished he knew when he started, including the mistakes made and lessons learned the hard way.]]></description>
      <content:encoded><![CDATA[<p>I’ve been using Angular since version 2, and it has come a long way since those days to what it is right now. I’ve worked on various Angular projects over the years, yet I keep finding new things. It goes to say how massive the framework is. Here are some things I wish I had known about Angular when I started so you don’t have to learn it the hard way.</p>
Modularize Your Application
<p>Angular has <a href="https://angular.io/guide/styleguide">detailed documentation</a> outlining the recommended approach to structure your application. Angular also provides a <a href="https://angular.io/cli">CLI</a> to help scaffold your application that adheres to their recommendations.</p>
<p>I’ve had my fair share of mistakes when it comes to structuring the application. As you follow tutorials, you’re guided through where you should put your files and which modules the components or services belong to. However, when you venture beyond the tutorial, you sometimes end up with a structure that doesn’t scale well. This could lead to issues down the road.</p>
<p>Below are some mistakes I’ve made that came back and bit me.</p>
<h3>Split Your Components Into Modules</h3>
<p>The release of Standalone Components in Angular 14 makes <code>NgModules</code> no longer a requirement when creating components. You can choose not to use modules for your components, directives, and pipes. However, you could still follow the folder structure outlined below, omitting the module files.</p>
<p>Initially, I put all the components into the default module you get when creating a new Angular app. As the application grew, I ended up with a lot of components in the same module. They were separate components and didn’t have any need to be in the same module.</p>
<p>Split your components into separate modules, so you can import and load only the required modules. The common approach is to divide your application into the following modules:</p>
<ul>
<li><strong>Core module</strong> for singleton services and components that are used once at the app level (example: navigation bar and footer).</li>
<li><strong><a href="https://angular.io/guide/feature-modules">Feature modules</a></strong> for each feature — code related to the specific functionality of your application. For example, a simple e-commerce application could have a feature module for products, carts, and orders.</li>
<li><strong>Shared module</strong> for the module that is referenced across different parts of the application. These can include components, directives, and pipes.</li>
</ul>
<p>Dividing the application into separate modules helps partition your application into smaller, more focused areas. It creates clear boundaries between the different types of modules and each feature module. This separation helps maintain and scale the application as different teams can work on separate parts with a lower risk of breaking another part of the application.</p>
<h3>Lazy Load Your Routes</h3>
<p>This is a result of my first mistake of putting everything in a single module. Because all the components were in the same module, I couldn’t <a href="https://angular.io/guide/lazy-loading-ngmodules">lazy load the modules</a>. All the modules were imported at the root level, eventually affecting the initial load time. After separating your components into modules, lazy load your routes, so the modules only get loaded when you navigate to the route that requires them.</p>
<h3>Single Responsibility</h3>
<p>This applies to all types of files in an Angular app. I’ve let my service and component files grow beyond their scope, which made them difficult to work with. The general rule is to keep each component/service/pipe/directive performing a specific set of tasks. If a component is trying to do more than what it was initially made for, it might be worth refactoring and splitting it into several smaller components. This will make testing and maintenance a lot easier.</p>
Use The Angular CLI
<p>You’ve probably used the <code>ng serve</code> command either directly in your command line or through a script in your <code>package.json</code> file. This is one of Angular CLI’s commands. However, the CLI comes with more handy commands that can speed up your development especially when it comes to initializing and scaffolding.</p>
<p>Initially, I did most of these manually as I didn’t understand how to use the CLI except for starting and stopping the local server. I would create component files manually, add the boilerplate code, and add them to the right modules. This was okay for smaller projects but became a tedious task as the project grew. That’s when I learned how to use the CLI and use it to automate most of the manual work I do. For example, instead of creating all the boilerplate for a card component, the following command will create them for you:</p>
<pre><code>ng g c card
</code></pre>

<p>You can use the CLI by installing it globally via npm using the command below:</p>
<pre><code>npm install -g @angular/cli
</code></pre>

<p>To view the available commands, execute the code below:</p>
<pre><code>ng help
</code></pre>

<p>Most projects have custom configurations that are project-specific, and you have to do some modifications to the code generated by the CLI. Angular provides an elegant solution for these scenarios, such as <a href="https://angular.io/guide/schematics"><strong>schematics</strong></a>. A schematic is a template-based code generator — a set of instructions to generate or modify code for your project. Similar to Angular CLI, your custom schematics are packaged and can be installed via <code>npm</code> in whichever project needs it.</p>
Path Aliases And Barrel Exports
<p>As I was learning Angular, I tried to keep my project neat by putting all the services into a <code>services</code> folder, models in a <code>models</code> folder, and so on. However, after some time, I end up with a growing list of <code>import</code> statements like this:</p>
<pre><code>import { UserService } from '../../services/user.service';
import { RolesService } from '../../services/roles.service';
</code></pre>

<p><a href="https://fireship.io/snippets/improving-long-relative-paths-imports/">Typescript path alias</a> can help simplify your import statements. To setup path aliases, open your <code>tsconfig.json</code> and add the desired path name and its actual path:</p>
<pre><code>{
 "compilerOptions": {
 "paths": {
 "@services/*": ["src/app/services/*"],
 }
 }
}
</code></pre>

<p>Now the import statements above can be re-written as:</p>
<pre><code>import { UserService } from '@services/user.service';
import { RolesService } from '@services/roles.service';
</code></pre>

<p>An added benefit of using path aliases is that it allows you to move your files around without having to update your <code>imports</code>. You’d have to update them if you were using relative paths.</p>
<p>This can be further simplified by using <a href="https://github.com/basarat/typescript-book/blob/master/docs/tips/barrel.md">barrel <code>exports</code></a>. Barrels are a handy way to export multiple files from a single folder (think of it as a proxy for your files). Add an <code>index.ts</code> in the <code>services</code> folder with the following contents:</p>
<pre><code>export * from './user.service';
export * from './roles.service';
</code></pre>

<p>Now, update the <code>tsconfig.json</code> to point to the <code>index.ts</code> file instead of the asterisk (<code>*</code>). </p>
<pre><code>{
 "compilerOptions": {
 "paths": {
 "@services": ["src/app/services/index.ts"],
 }
 }
}
</code></pre>

<p>The import statements can now be further simplified into:</p>
<pre><code>import { UserService, RolesService } from '@services';
</code></pre>

Embrace Typescript’s Features
<p>I started by learning JavaScript, so I wasn’t used to the type system and the other features that TypeScript offers. My exposure to TypeScript was through Angular, and it was overwhelming to learn both a new language (although it’s a superset of JavaScript, some differences trip me up every time) and a new framework. I often find TypeScript slowing me down instead of helping me with the development. I avoided using TypeScript features and overused the <code>any</code> type in my project.</p>
<p>However, as I got more acquainted with the framework, I began to understand the benefits of TypeScript when used correctly. TypeScript offers a lot of useful features that improve the overall developer experience and make the code you write cleaner. One of the benefits of using TypeScript that I’ve grown accustomed to is the IntelliSense or autocomplete it provides in your IDE. Their <a href="https://www.typescriptlang.org/docs/handbook/typescript-from-scratch.html#typescript-a-static-type-checker">type safety and static type checking</a> have also helped catch potential bugs at compile time that could have snuck in.</p>
<p>The nice thing about TypeScript is its <a href="https://www.typescriptlang.org/docs/handbook/tsconfig-json.html">flexible configuration</a>. You can toggle their settings easily via their <code>tsconfig.json</code> as per your project’s needs. You can change these settings again if you decide on a different setting. This allows you to set the rules as loose or strict as you’d like.</p>
Improve Performance By Using <code>trackBy</code>
<p>Performance is crucial for applications, and Angular provides various ways to optimize your applications. This is often a problem that you won’t run into at the beginning as you are probably working with small data sets and a limited number of components. However, as your application grows and the number of components being rendered grows and becomes increasingly complex, you’ll start to notice some performance degradation. These performance degradations are usually in the form of slowness in the app: slow to respond, load, or render and stuttering in the UI.</p>
<p>Identifying the source of these problems is an adventure on its own. I’ve found that most of the performance issues I’ve run into in the applications are UI related (this doesn’t mean that other parts of the application don’t affect performance). This is especially prominent when rendering components in a loop and updating an already rendered component. This usually causes a flash in the component when the components are updated.</p>
<p>Under the hood, when a change occurs in these types of components, Angular needs to remove all the DOM elements associated with the data and re-create them with the updated data. That is a lot of DOM manipulations that are expensive.</p>
<p>A solution I’ve found to fix this issue is to use the <a href="https://angular.io/api/core/TrackByFunction"><code>trackBy</code></a> function whenever you’re rendering components using the <code>ngFor</code> directive (especially when you’re frequently updating the rendered components). </p>
<p>The <code>ngFor</code> directive needs to uniquely identify items in the iterable to correctly perform DOM updates when items in the iterable are reordered, new items are added, or existing items are removed. For these scenarios, it is desirable only to update the elements affected by the change to make the updates more efficient. The <code>trackBy</code> function lets you pass in a unique identifier to identify each component generated in the loop, allowing Angular to update only the elements affected by the change.</p>
<p>Let’s look at an example of a regular <code>ngFor</code> that creates a new <code>div</code> for each entry in the <code>users</code> array.</p>
<pre><code>@Component({
 selector: 'my-app',
 template: `
 &lt;div *ngFor="let user of users"&gt;
 {{ user.name }}
 &lt;/div&gt;
 `,
})

export class App {
 users = [
 {id: 1, name: 'Will'},
 {id: 2, name: 'Mike'},
 {id: 3, name: 'John'},
 ]
}
</code></pre>

<p>Keeping most of the code the same, we can help Angular keep track of the items in the template by adding the <code>trackBy</code> function and assigning it to a function that returns the unique identifier for each entry in the array (in our case, the user’s <code>id</code>).</p>
<pre><code>@Component({
 selector: 'my-app',
 template: `
 &lt;div *ngFor="let user of users; trackBy: trackByFn"&gt;
 {{ user.name }}
 &lt;/div&gt;
 `,
})

export class App {
 users = [
 {id: 1, name: 'Will'},
 {id: 2, name: 'Mike'},
 {id: 3, name: 'John'},
 ]
 trackByFn(index, item) {
 return item.id;
 }
}
</code></pre>

Use Pipes For Data Transformations
<p>Data transformations are inevitable as you render data in your templates. My initial approach to this was to:</p>
<ul>
<li>Bind the template to a function that accepts the data as the input:</li>
</ul>
<pre><code>interface User {
 firstName: string,
 middleName: string,
 lastName: string
}
@Component({
 selector: 'my-app',
 template: `
 &lt;h1&gt;{{ formatDisplayName(user) }}&lt;/h1&gt;
 `,
})

export class App {
 user: User = {
 firstName: 'Nick',
 middleName: 'Piberius',
 lastName: 'Wilde'
 }
 formatDisplayName(user: User): string {
 return `${user.firstName} ${user.middleName.substring(0,1)}. ${user.lastName}`;
 }
}
</code></pre>

<ul>
<li>Create a new variable, assign the formatted data to the variable, and bind the new variable in the template:</li>
</ul>
<pre><code>interface User {
 firstName: string,
 middleName: string,
 lastName: string
}
@Component({
 selector: 'my-app',
 template: `
 &lt;h1&gt;{{ displayName }}&lt;/h1&gt;
 `,
})

export class App {
 user: User = {
 firstName: 'Nick',
 middleName: 'Piberius',
 lastName: 'Wilde'
 }
 displayName = `${this.user.firstName} ${this.user.middleName.substring(0,1)}. ${this.user.lastName}`;
}
</code></pre>

<p>Neither approach was clean nor performant and wasn’t what Angular recommends to perform data transformations. For these scenarios, angular recommends using <a href="https://angular.io/guide/pipes"><strong>pipes</strong></a>. Pipes are functions specifically designed to be used in templates.</p>
<p>Angular provides built-in pipes for common data transformations such as internationalization, date, currency, decimals, percentage, and upper and lower case strings. In addition, Angular also lets you create custom pipes that can be reused throughout your application.</p>
<p>The data transformation above can be re-written using a pipe as follows:</p>
<pre><code>@Pipe({name: 'displayName'})
export class DisplayNamePipe implements PipeTransform {
 transform(user: User): string {
 return `${user.firstName} ${user.middleName.substring(0,1)}. ${user.lastName}`;
 }
}
</code></pre>

<p>The pipe can then be used in the template by using the pipe (<code>|</code>) character followed by the pipe name.</p>
<pre><code>@Component({
 selector: 'my-app',
 template: `
 &lt;h1&gt;{{ user | displayName }}&lt;/h1&gt;
 `,
})

export class App {
 user: User = {
 firstName: 'Nick',
 middleName: 'Piberius',
 lastName: 'Wilde'
 }
}
</code></pre>



Improve Performance With <code>OnPush</code> Change Detection
<p>Angular applications are made up of a tree of components that rely on their change detectors to keep the view and their corresponding models in sync. When Angular detects a change in the model, it immediately updates the view by walking down the tree of change detectors to determine if any of them have changed. If the change detector detects the change, it will re-render the component and update the DOM with the latest changes.</p>
<p>There are two <a href="https://angular.io/guide/change-detection">change detection</a> strategies provided by Angular:</p>
<ul>
<li><strong>Default</strong><br />The change detection cycle runs on every event that occurs inside the component.</li>
<li><strong>OnPush</strong><br />The change detection cycle only runs when a component’s event handler is triggered, an async pipe is used in the template, a new value is emitted, and when any of the component’s input reference changes.</li>
</ul>
<p>In addition to the reduced number of change detection cycles and its performance boost, the restrictions imposed by using the <code>OnPush</code> change detection strategy also make you architect your app better by pushing you to create more modular components that utilize one of the three recommended ways mentioned above to update the DOM. </p>
RxJS Is Your Friend
<p><a href="https://rxjs.dev/">RxJS</a> is a JavaScript library that uses observables for <a href="https://www.techtarget.com/searchapparchitecture/definition/reactive-programming">reactive programming</a>. While RxJS isn’t exclusively used in Angular, it plays a big role in the Angular ecosystem. Angular’s core features, such as <code>Routing</code>, <code>HttpClient</code>, and <code>FormControl</code>, leverage observables by default. </p>
<p>RxJS is a part of Angular that has been largely unexplored for me as I was learning the framework. I’ve avoided using it unless I had to. It was a new concept, and I found it quite hard to wrap my head around it. I’ve worked with JavaScript Promises, but observables and streams are a new paradigm for me.</p>
<p>After working for a while with Angular, I eventually took the time to learn and understand RxJS and try to use them in my projects. It wasn’t long before I realized the numerous benefits of RxJS that I’ve been missing out on all this time. RxJS, with its large collection of chainable operators, excels in handling async tasks.</p>
<p>I’ve been using RxJS with Angular for a few years now, and my experience has been nothing less than positive. The <a href="https://rxjs.dev/guide/operators">set of operators</a> RxJS offers is really handy. They seem to have an operator (or a chain of operators) for every use case. Commonly used operators include:</p>
<ul>
<li><code>map</code>: passes each source value through a transformation function to get corresponding output values.</li>
<li><code>tap</code>: modify the outside state when the observable emits a new value without altering the stream.</li>
<li><code>switchMap</code>: maps each value to an Observable, then flattens all of these inner Observables.</li>
<li><code>filter</code>: emits a value from the source if it passes a criterion function.</li>
<li><code>combineLatestWith</code>: create an observable that combines the latest values from all passed observables and the source into an array and emits them.</li>
</ul>
Learn How To Spot And Prevent Memory Leaks
<p><a href="https://www.geeksforgeeks.org/what-is-memory-leak-how-can-we-avoid/">Memory leaks</a> are one of the worst types of issues you run into — hard to find, debug, and often hard to solve. This might not be a concern initially, but it becomes crucial when your application reaches a certain size. Common symptoms of memory leaks are degrading performance the longer the app is being used or the same events being fired multiple times. Two of the most common source of memory leaks I’ve run into are:</p>
<h3>1. Subscriptions That Are Not Cleaned Up</h3>
<p>Unlike the <a href="https://angular.io/api/common/AsyncPipe"><code>async</code></a> pipe, listening to an observable using the <code>subscribe</code> method won’t get cleaned up automatically. You will have to manually clean up the subscriptions by calling <code>unsubscribe</code> on the subscription or using the <code>takeUntil</code> operator.</p>
<p>The example below shows a memory leak introduced by listening to the route params observable. Every new instance of <code>MyComponent</code> creates a new subscription which will continue to run even after the component is destroyed.</p>
<pre><code>export class MyComponent {
 constructor(private route: ActivatedRoute){
 this.route.params.subscribe((params) =&gt; {
 // Do something
 });
 }
}
</code></pre>

<p>As mentioned above, you can fix the memory leak by either calling <code>unsubscribe</code> or using the <code>takeUntil</code> operator.</p>
<ul>
<li>Fixing the memory leak using the <code>unsubscribe</code> method:</li>
</ul>
<pre><code>export class MyComponent {
 private routeSubscription;
 constructor(private route: ActivatedRoute){
 this.routeSubscription = this.route.params.subscribe((params) =&gt; {
 // Do something
 });

 }
 ngOnDestroy() {
 this.routeSubscription.unsubcribe();
 }
}
</code></pre>

<ul>
<li>Fixing the memory leak using the <code>takeUntil</code> operator:</li>
</ul>
<pre><code>export class MyComponent {
 private componentDestroyed$ = new Subject&lt;boolean&gt;();
 constructor(private route: ActivatedRoute){
 this.route.params.pipe(
 takeUntil(this.componentDestroyed$)
 ).subscribe((params) =&gt; {
 // Do something
 });

 }
 ngOnDestroy() {
 this.componentDestroyed$.next(true);
 this.componentDestroyed$.complete();
 }
}
</code></pre>

<h3>2. Event Listeners That Are Not Cleaned Up</h3>
<p>Another common source of memory leaks is event listeners that aren’t unregistered when no longer used. For example, the <code>scroll</code> event listener in the code below gets instantiated on every new instance of <code>MyComponent</code> and continuously runs even after the component is destroyed unless you unregister it. </p>
<pre><code>export class MyComponent {
 constructor(private renderer: Renderer2) {}
 ngOnInit() {
 this.renderer.listen(document.body, 'scroll', () =&gt; {
 // Do something
 });
 }
}
</code></pre>

<p>To fix this and stop listening to the event after the component is destroyed, assign it to a variable and unregister the listener on the <code>ngOnDestroy</code> lifecycle method.</p>
<pre><code>export class MyComponent {
 private listener;
 constructor(private renderer: Renderer2) {}
 ngOnInit() {
 this.listener = this.renderer.listen(
 document.body,
 ‘scroll’,
 () =&gt; {
 // Do something
 });

 }
 ngOnDestroy() {
 this.listener();
 }
}
</code></pre>

Consider Using A State Management Library (If Applicable)
<p><a href="https://blog.nrwl.io/managing-state-in-angular-applications-22b75ef5625f">State management</a> is another part of the stack that you don’t usually think about until you need it. Most small and simple applications don’t need any external state management library. However, as the project grows and managing your application’s state gets more complicated, it might be time to re-think if the project could benefit from implementing more robust state management.</p>
<p>There is no correct solution for state management as every project’s requirements are different. Luckily, there are a few state management libraries for Angular that offer different features. These are a few of the commonly used state management libraries in the Angular ecosystem:</p>
<ul>
<li><a href="https://ngrx.io/">NgRx</a></li>
<li><a href="https://www.ngxs.io/">NGXS</a></li>
<li><a href="https://opensource.salesforce.com/akita/">Akita</a></li>
</ul>
Wrapping Up
<p>If you’ve just started to learn Angular and it hasn’t quite clicked yet, be patient! It will eventually start to make sense, and you’ll see what the framework has to offer. I hope my personal experience can help you accelerate your learning and avoid the mistakes I’ve made.</p>
]]></content:encoded>
      <author>hello@smashingmagazine.com (William Juan)</author>
      <enclosure
        url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ef27939e-040f-49bc-bd4e-1af6d80a84ac/angular-guide.jpg"
        length="0" type="image/jpg"/>
    </item>
    <item>
      <title><![CDATA[Designing Better Inline Validation UX]]></title>
      <link>https://smashingmagazine.com/2022/09/inline-validation-web-forms-ux/</link>
      <guid>https://smashingmagazine.com/2022/09/inline-validation-web-forms-ux/</guid>
      <pubDate>Wed, 21 Sep 2022 11:30:00 GMT</pubDate>
      <description>
        <![CDATA[Inline validation in web forms is useful when it works, but frustrating when it fails. Too often it leads to an endless stream of disruptive error messages or dead-ends without any chance of getting out. Let’s fix it.]]></description>
      <content:encoded><![CDATA[<p>Undoubtedly, there are major <strong>advantages of inline validation</strong>. We validate input as users type, and so as people move from one green checkmark to another, we boost their confidence and create a sense of progression. If an input expects a particular type of content, we can <strong>flag errors immediately</strong>, so users can fix them right away. This is especially useful when choosing a secure password, or an available username.</p>
<a href="https://www.nngroup.com/articles/errors-forms-design-guidelines/"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/52200522-e541-4a63-b807-84f3b745030b/password-reset.gif" /></a>Sometimes inline validation works really well, for example with a <a href="https://www.nngroup.com/articles/errors-forms-design-guidelines/">password strength meter</a>, as used by Slack. (Image credit: <a href="https://www.nngroup.com/articles/errors-forms-design-guidelines/">Error Forms Design Guidelines</a>)

<p>However, <a href="https://adamsilver.io/blog/live-validation-is-problematic/">inline validation can be problematic</a>. Mostly because we can’t really show an error at just the right time when it occurs. And the reason for that is that we can’t <em>really</em> know for sure when a user has actually <em>finished</em> their input, unless they explicitly tell us that they have.</p>
<p>Clicking on a “Submit” button is a <strong>very clear signal</strong> that users <em>think</em> they are done, but our implementations usually consider leaving an input field as a <strong>strong enough signal</strong> to kick off the validation for that input field. Often it will be a correct assumption, but since it’s merely an assumption, eventually it will be wrong for <em>some</em> users — we just don’t know how many people, and how often, will be affected by it.</p>
<p>Surely we don’t want to show <strong>“wrong” errors</strong>; nor do we want to confuse and frustrate users with flashing error messages as they type. We want to show errors as they happen, and we want to replace them with friendly green checkmarks once they are fixed. How challenging can that be to implement? As it turns out, it is indeed quite challenging.</p>

<p>This article is <strong>part of our ongoing series</strong> on <a href="/category/design-patterns">design patterns</a>. It’s also a part of the <a href="https://smashingconf.com/online-workshops/workshops/vitaly-friedman-ux/">4-weeks live UX training</a> 🍣 and will be in our recently released <a href="https://smart-interface-design-patterns.com/">video course</a> soon.</p>

The Many Faces Of Inline Validation
<p>There are surprisingly many flavours of <strong>inline validation</strong>. Over the years, we’ve learned to avoid <a href="https://baymard.com/blog/inline-form-validation#pitfall-1-premature-inline-validation">premature validation</a> — inline validation that happens when a user just focuses on an empty input field. In that case, we would display errors way too early, before users even have a chance to type anything. This isn’t helpful, and it is frustrating.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0cb224ad-dc05-4105-bde6-dc7fe2913719/premature-validation.jpg" /></p>
<p>Eventually we moved to <strong>real-time validation</strong> which happens as users are typing. To do that, for every single field, we define a threshold of entered characters, after which we start validating. This doesn’t really <em>remove</em> frustration entirely, but rather <em>delays</em> it. As users eventually reach the threshold, if the input isn’t complete or properly formatted yet, they start getting confronted with flashes of premature error messages.</p>
<p>Inline validation also typically requires quite elaborate and <strong>strict formatting rules</strong>. For example, at which point should we validate a day and a month for a date input? Would we validate them separately, or validate the date as a whole? Because both day and month inputs are interdependent, getting inline validation right there is difficult. From testing, it seems that validating the date <em>at once</em> helps avoid premature errors for good. In practice, each input, and each type of input, requires a conversation about custom validation rules. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f4af5e8d-012f-4b84-ac27-f66ed20443a1/validate-on-submit-or-not.jpg" /></p>
<p>The most common type of inline validation is <strong>late validation</strong>: we validate input once a user has <em>left</em> the input field (on <code>blur</code>), and just let them be as they are filling in the data or copy-paste it. This surely helps us avoid flashes of errors. However, we assume a particular order of progression from one field to another. We also prompt users to interrupt their progression and head back to fix an error once it has happened.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/911bfc2b-89a4-4c4c-9637-fc0910891852/no-inline-validation.jpg" /></p>
<p>So which inline validation technique works best? As it turns out in usability testing, <strong>users sincerely appreciate both</strong> — the <em>live</em> validation and the <em>late</em> validation — if things go perfectly smoothly. Ironically, they also feel utterly frustrated by <em>any</em> kind of inline validation once errors start showing up one after another.</p>
The Downsides Of Inline Validation
<p>This frustration shows up in different ways, from the task abandonment to the increased frequency of errors. And usually it’s related to a few well-known issues that inline validation always entails:</p>
<ul>
<li><strong>Inline validation always interrupts users</strong>.<br />A user might be just trying to answer a question, but error messages keep flashing in front of them as they type. That’s annoying, <a href="https://www.frontiersin.org/articles/10.3389/fpsyg.2014.00841/full">disruptive</a> and <a href="https://www.sciencedirect.com/science/article/abs/pii/S074756320500107X">expensive</a>.</li>
<li><strong>Inline validation often kicks in too early or too late</strong>.<br />Errors appear either when the user is typing, or once they have moved to the next input field. Both of these options aren’t ideal: the user is interrupted as they type, or they are focused on the <strong>next question</strong>, yet we prompt them to fix their previous answer.</li>
<li><strong>Inline validation isn’t reliable enough</strong>.<br />Even though an inline validator might give the user’s input green light, it can still flash an error message once the input has been re-checked on the server. A correct format of the input doesn’t mean that the input is also accurate.</li>
</ul>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dc78fa4c-56b0-449c-acae-30e9cfd766a9/when-live-validation-fails-ux.jpg" /></p>
<p>This applies, for example, to ill-formatted VAT-numbers, which always start with a 2-digit-prefix, such as <code>DE</code> or <code>LT</code>. But it also helps with any standardized input such as IBAN number, credit card number, prefixed policy insurance number or lengthy digits-only gift-coupon-codes.</p>
<p>We also want to avoid wrong assumptions or wasted time between pages that potentially don’t even apply to users. The more severe an error is, the more likely it is that users might want to see it <strong>sooner, rather than later</strong>. However, when we do display errors, we need to ensure users will appreciate the interruption.</p>

2. Late Validation Is Almost Always Better
<p>Especially for complex forms, with plenty of columns, view switchers and filters, <strong>premature error messages</strong> are often perceived as an annoyance, and a very distracting one. As users are typing, any kind of distraction in such environments is highly unwanted and counter-productive. In fact, distraction often leads to even more errors, but also reduced accuracy of data and increased completion times.</p>
<p>Late validation almost always performs better. It’s just that by validating late, we can be more confident that the user isn’t still in the process of typing the data in the input field. The main exception would be any kind of input, for which users can benefit from real-time feedback, such as <strong>password strength meter</strong>, or a choice of an available username, or the character count limit. There we need to respond to user’s input immediately, as not doing so would only slow down users desperately trying to find they way around system’s requirements.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bc97e285-e9b4-4c78-befe-949032b8057f/password-strenght-meter-airbnb.png" /></p>
<p>In practical terms, that means that for every input in a form, we need to review just what kind of feedback is needed, and design the interaction accordingly. It’s unlikely that one single rule for all inputs will work well: to be effective, we need a more granular approach, with a few <strong>validation modes</strong> that could be applied separately for each individual input.</p>
3. Validate Empty Fields Only On Submit
<p>Not all errors are <strong>equally severe</strong>, of course. Surely sometimes input is just ill-formatted or erroneous, but how do we deal with <strong>empty form fields</strong> or indeterminate radio buttons that are required? Users might have left them empty accidentally or intentionally, and there isn’t really a sure way for us to predict it. Should we throw an error <em>immediately</em> once the user has left the field empty? The answer isn’t obvious at all.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fa0bbe70-6b6d-4a27-bc96-1fc62e4a388a/premature-validation.png" /></p>
<p>The user might have indeed overlooked the input field, but that’s not the only option. They might as well just have <strong>jumped in a wrong field</strong> by mistake, and left it right away. Or they had to <strong>jump back</strong> to the previous field to correct an error triggered by the validator. Or they skipped the input field because they just wanted to get something else out of the way. Or maybe they just had to clear up their input and then move to another browser’s tab to copy-paste a string of text.</p>
<p>In practice, getting the UX around empty fields right is <strong>surprisingly difficult</strong>. Yet again, we can’t predict the context in which a user happens to find themselves. And as it turns out, they don’t always have a perfectly linear experience from start to finish — it’s often chaotic and almost unpredictable, with plenty of jumps and spontaneous corrections, especially in complex multi-column forms. And as designers, we <strong>shouldn’t assume a particular order</strong> for filling out the form, nor should we expect and rely on a particular tabbing behavior.</p>
<p>In my experience, whenever we try to flag the issues with empty fields, too often we will be pointing out mistakes prematurely. A calmer option is to validate empty fields <strong>only on submit</strong>, as it’s a clear indicator that a user indeed has overlooked a required input as they wish to proceed to the next step.</p>
<p>The earliest time to show an error message is when a user leaves a <strong>non-empty input field</strong>. Alternatively, depending on the input at hand, we might want to define a minimum threshold of characters, after which we start validating.</p>

4. Reward Early, Punish Late
<p>Another issue that shows up eventually is what should happen if a user chooses to <strong>change an input field that’s already been validated</strong>? Do we validate immediately as they edit the input, or do we wait until they leave the input field?</p>
<p>As Mihael Konjević wrote in his article on the <a href="https://medium.com/wdstack/inline-validation-in-forms-designing-the-experience-123fb34088ce">Reward Early, Punish Late pattern</a>, if a user edits an <strong>erroneous field</strong>, we should be validating immediately, removing the error message and confirming that the mistake has been fixed as soon as possible (<em>reward early</em>). However, if the input was valid already and it is being edited, it’s probably better to wait until the user moves to the next input field and flag the errors then (<em>punish late</em>).</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7b146191-97c9-4a90-bbd2-6fcb32c64b1c/reward-early-inline-validation-ux.png" /></p>
<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/33c6712e-4bb1-4979-a9d4-0c0a8ad71970/reward-early-punish-late-ux.gif"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/33c6712e-4bb1-4979-a9d4-0c0a8ad71970/reward-early-punish-late-ux.gif" /></a>Reward users early if they fixed a mistake, and punish them later, once they’ve left the input field. A solution by <a href="https://medium.com/wdstack/inline-validation-in-forms-designing-the-experience-123fb34088ce">Mihael Konjević</a>.

<p>In technical terms, we need to <strong>track the state and contents of each input field</strong>, and have thresholds for when we start validating, and then have rules for changing input fields that have been validated already, or that contain errors.</p>
<p>As it turns out, the <a href="https://medium.com/@shanplourde/inline-form-validations-ux-design-considerations-and-react-examples-c2f53f89bebc">implementation isn’t trivial</a>, and making it work in a complex form will require quite a bit of <strong>validation logic</strong>. Beware that this logic might also be difficult to maintain if some fields have dependencies or show up only in certain conditions.</p>
5. Prioritize Copy-Paste UX Over Inline Validation
<p>For pretty much any form, <strong>copy-paste is almost unavoidable</strong>. To many users, this seems like a much more accurate way of typing data as they are less likely to make mistakes or typos. While this is less typical for simple forms such as eCommerce checkout or sign up forms, it is a common strategy for complex enterprise forms, especially when users complete repetitive tasks.</p>
<p>However, <strong>copy-paste is often inaccurate</strong>, too. People tend to copy-paste too few or too many characters, sometimes with delimeteres, and sometimes with “too many” empty spaces or line breaks. Sadly, this often doesn’t work as expected as the input gets truncated, causes a flash of error messages or breaks the form altogether. Not to mention friendly websites that sometimes conveniently attach a string of text (URL or something similar) to the copied string, making copy-pasting more difficult.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/64066efe-71fa-45b6-8e86-caf46c423b64/clean-up-input-ux-pattern.jpg" /></p>
<p>In all of these situations, inline validation will flag errors, and rightfully so. Of course, in an ideal world, pasting would automatically remove all unnecessary characters. However, as text strings sometimes get appended to copied text automatically, even it wouldn’t really help. So if it’s not possible, an interesting alternative would is to add the <strong>“clean-up” feature</strong> that would cleanse the input and remove all unnecessary characters from it. Surely we’d also need to confirm with the user if the input is still right.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4f648fc6-5723-4f2e-b908-6e9819f18acb/clean-up-auto-fix-ux.jpg" /></p>
<p>If instead, after copy-pasting, some parts of the input are <strong>automatically removed</strong>, or auto-formatted in a wrong way, it can become quite a hassle to correct the input. If we can auto-correct reliably, it’s a good idea to do so; but often getting it right can be quite difficult. Rather than correcting their own mistakes, users now have to correct <em>system’s mistakes</em>, and this rarely results in improved user satisfaction. In such situations, users sometimes would remove the entire input altogether, then take a deep breath and start re-typing from scratch. </p>
<p>Typically, wrong auto-correct happens because the validator expects a <strong>very specific format of input</strong>. But should it actually? As long as the input is unambiguous, shouldn’t we accept pretty much <em>any</em> kind of input, in a form that users would prefer, rather than the one that the system expects?</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4dadd25b-f6e8-456d-a45c-0c856e2a73a5/drop-down-countries-number-codes.png" /></p>
<p>A good example of that is a <strong>phone number input</strong>. In most implementations, one would often integrate fancy drop-downs and country selectors, along with auto-masking and auto-formatting in the phone number input field. Sometimes they work beautifully, but sometimes they fail miserably — mostly because they <strong>collide with the copy-paste</strong>, literally breaking the input. Not to mention that carefully selecting a country’s international code from a drop-down is much slower than just typing the number directly.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9151e1f3-9397-41f7-8a8e-0886d69bbf4e/phone-international-numbers.png" /></p>
<p>What’s wrong with the <strong>auto-formatting</strong>, by the way? Just like inline validation is never reliable, so is auto-formatting. The phone number, for example, could start with <code>+49</code>, or <code>0049</code> or just the country code <code>49</code>. It might contain an extension code, and it might be a mobile phone number or a landline number. The question is, how can we <strong>auto-format reliably and correctly</strong> most of the time? This requires a sophisticated validator, which isn’t easy to build. In practical terms, for a given implementation, we need to test just how often auto-formatting fails and how exactly it fails, and refine the design (and implementation) accordingly.</p>
<p>One more thing that’s worth mentioning: <strong>disabling copy-paste is never a good idea</strong>. When we disable copy-paste for the purpose of security (e.g. email confirmation), or to prevent mistakes, people often get lost in the <em>copy-paste-loop</em>, wasting time trying to copy-paste multiple times, or in chunks, until they eventually give up. This doesn’t leave them with a thrilling sense of accomplishment, of course. And it does have an impact on the user satisfaction KPI.</p>
<p>In general, we should always allow users to type in data <strong>in their preferred way</strong>, rather than imposing a particular way that fits us well. The validation rules should support and greenlight <em>any</em> input as long as it’s unambiguous and not invalid (e.g. containing letters for phone input doesn’t make sense). The <strong>data cleaning</strong>, then, can be done either with late validation or on the server-side in a post-processing step.</p>
6. Allow Users to Override Inline Validation
<p>Because inline validation is never bulletproof, there will be situations when users will be locked-out, without any option to proceed. That’s not very different from <a href="https://www.smashingmagazine.com/2021/08/frustrating-design-patterns-disabled-buttons/">disabled buttons</a>, which often cause nearly 100% abandonment rates. To avoid it, we always need to provide users with <strong>a way out</strong> in situations when inline validation fails. That means adding an option to <strong>override validation</strong> if the user is confident that they are right.</p>
<p>To support overrides, we can simply add a note next to the input that seems to be erroneous, prompting users to review their input and <strong>proceed despite the inline validation error</strong>, should they want to do so.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9770475b-2563-460d-861f-815f2714f4d1/german-street-house-number.png" /></p>
<p>We surely will end up with <em>some</em> wrong input in our database, but it might be quite manageable and easy to correct — and also worth it, if we manage to <strong>boost conversion</strong> as a result of that. Eventually, it’s all about making a case around the value of that design decision. </p>
<p>To get there, we need to <strong>measure the impact of overrides</strong> for a few weeks. We need to understand just how much more revenue is coming through with the override and just how much inaccurate input and expenses or costs we produce because of it. The decision, then, should be based on these metrics and data, captured by <a href="https://www.smashingmagazine.com/2022/04/boosting-ux-with-design-kpis/">design KPIs</a>. This will give you a comparison to see <strong>how costly inline validation actually is</strong> and make a case about having one, getting a buy-in to adjust it, or making a case for abandoning it.</p>
7. Just-In-Time Validation
<p>It might feel perfectly obvious that inline validation is a perfect tool to <strong>validate complex input</strong>. If a user types in a 16-digits-gift-code, or a lengthy insurance policy number, providing them with confidence about their input is definitely a good idea.</p>
<p>But typing complex data takes time and effort. For lengthy input, users often copy-paste or type chunks of data in multiple steps, often with inline validation flashing left and right as they enter and leave input fields. And because the input isn’t simple, they often <strong>review their input</strong> before proceeding to ensure that they haven’t made any mistakes. This might be one of the cases where <strong>inline validation is too much of a distraction</strong> at the time when users are heavily focused on a task at hand.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/742c7358-7afd-4a92-b7b3-9b4ec3456e2b/vat-number-validation.jpg" /></p>
<p>So what do we do? Well, again, we could allow users to validate their input only when they are confident that it is complete. That’s the case with the <strong>just-in-time validation</strong>: we provide users with a <strong>“Validate” button</strong> that kicks off the validation on request, while the other fields are validated live, immediately.</p>
<p>However, whenever many pieces of content are <strong>compounded in a large group</strong> and have restrictive rules — like the credit card details, for example — it’s better to live validate them all immediately. This can help users avoid unnecessary input and change the type of input if needed.</p>
8. For Short Forms, Consider Validation on Submit Only
<p>Once we validate <em>just-in-time</em>, we can of course go even further and validate only on submit. The benefit of it is obvious: users are <strong>never distracted or annoyed</strong> by validation, and have full control over when their input is validated.</p>
<p>However, the pattern <strong>doesn’t seem to work well</strong> for lengthy pages with dozens and dozens of input fields. There, users often end up typing a lot of unnecessary data before they realize that their initial input isn’t really applicable. But perhaps we could avoid the issue altogether.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/aa18b524-2af1-4e52-a3e1-5274ecdc43b2/service-name-apply-application.jpeg" /></p>
<p>As it turns out, <strong>shorter pages usually perform better than one long page</strong>. In fact, for sophisticated forms, a better way to deal with complex journeys is to simplify them. We product a sort of a dashboard of tasks that a user has to complete in our complex journey, and dedicate single pages for single tasks. In details, it works like this:</p>
<ul>
<li>We split a complex form into small tasks = pages (with the <a href="https://www.smashingmagazine.com/2017/05/better-form-design-one-thing-per-page/">one-thing-per-page pattern</a>);</li>
<li>For every page, we <strong>validate (mostly) on submit</strong>, as users are moving from one page to the next;</li>
<li>We provide users with a <a href="https://design-system.service.gov.uk/patterns/task-list-pages/">task list pattern</a> and support navigation between them, with the option to save input and continue later.</li>
</ul>
<p>Not only does the approach make form much simpler to manage; because each part of the journey is quite simple and predictable, users are also <strong>less likely to make mistakes</strong>, but if they do make these mistakes, they can recover from them quickly — without jumping all over the entire form. Definitely an approach worth testing once you end up with a slightly more complex user journey.</p>
When Inline Validation Works
<p>We’ve gone all the way from the issues around inline validation towards the option to abandon it altogether. However, it’s worth stating that <strong>inline validation can be very helpful</strong> as well. It seems to be most effective when mistakes are common and quite severe.</p>
<p>For example, inline validation is very useful with a <strong>password strength meter</strong>. When we describe and live-update password rules as users type, it helps users choose a password that matches all requirements, is secure and won’t trigger any error messages.</p>
<p>Users also appreciate <strong>immediate help</strong> with any kind of complex input. And, with inline validation, users woul never fill out entire sections in the form just to realize that these sections do not apply to them.</p>
<p>All of these advantages make inline validation a thrilling and thriving UX technique — especially in situations when most form fields are likely to be completed by <a href="https://web.dev/learn/forms/autofill/">browser’s autofill</a>. However, if the inline validation is too eager, users quickly get utterly frustrated by it when errors start creeping out.</p>
Wrapping Up
<p>Inline validation is useful, but when it fails, its costs can be quite high. With just-in-time validation, <em>reward-early-punish-late</em>-pattern and validating on submit, we <strong>avoid unnecessary distractions</strong>, complex logic and layout shifts altogether, and communicate errors without annoying users too early or too late.</p>
<p>The downside is, of course, the <strong>error recovery speed</strong>, which certainly will be slower, yet in the end, the number of errors might be lower as well because we’ve simplified the form massively. It’s just much more difficult to make mistakes if you have just 3–4 input fields in front of you. And that might be just enough to reduce the frequency of errors and increase completion rates.</p>
Meet “Smart Interface Design Patterns”
<p>If you are interested in similar insights around UX, take a look at <a href="https://smart-interface-design-patterns.com/"><strong>Smart Interface Design Patterns</strong></a>, our shiny new <strong>8h-video course</strong> with 100s of practical examples from real-life projects. Plenty of design patterns and guidelines on everything from accordions and dropdowns to complex tables and intricate web forms — with 5 new segments added every year. <em>Just sayin’!</em> <a href="https://www.youtube.com/watch?v=aSP5oR9g-ss">Check a free preview</a>.</p>
<a href="https://smart-interface-design-patterns.com/"><img src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7cc4e1de-6921-474e-a3fb-db4789fc13dd/b4024b60-e627-177d-8bff-28441f810462.jpeg" /></a>Meet <a href="https://smart-interface-design-patterns.com/">Smart Interface Design Patterns</a>, our new video course on interface design &amp; UX.

<div><a href="https://smart-interface-design-patterns.com/">Jump to the video course →</a></div>

<p>100 design patterns &amp; real-life
examples.<br />8h-video course + live UX training. <a href="https://www.youtube.com/watch?v=aSP5oR9g-ss">Free preview</a>.</p>

Related UX Articles
<ul>
<li><a href="https://www.smashingmagazine.com/2022/08/error-messages-ux-design/">Designing Better Error Messages UX</a></li>
<li><a href="https://www.smashingmagazine.com/2022/08/authentication-ux-design-guidelines/">Rethinking Authenticaiton UX</a></li>
<li><a href="https://www.smashingmagazine.com/2021/08/frustrating-design-patterns-disabled-buttons/">Disabled Buttons UX</a></li>
<li><a href="https://www.smashingmagazine.com/2022/03/designing-better-infinite-scroll/">Designing A Perfect Infinite Scroll</a></li>
<li><a href="https://www.smashingmagazine.com/category/ux/">Design Patterns and UX on SmashingMag</a></li>
</ul>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Vitaly Friedman)</author>
      <enclosure
        url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/64066efe-71fa-45b6-8e86-caf46c423b64/clean-up-input-ux-pattern.jpg"
        length="0" type="image/jpg"/>
    </item>
    <item>
      <title>
        <![CDATA[Smashing Podcast Episode 53 With Rémi Parmentier: Can HTML Email Use Modern CSS?]]></title>
      <link>https://smashingmagazine.com/2022/09/smashing-podcast-episode-53/</link>
      <guid>https://smashingmagazine.com/2022/09/smashing-podcast-episode-53/</guid>
      <pubDate>Tue, 20 Sep 2022 13:00:00 GMT</pubDate>
      <description>
        <![CDATA[In this episode of the Smashing Podcast, we’re talking about HTML email. Do we still have to design like we would for IE5? Vitaly talks to expert Rémi Parmentier to find out.]]></description>
      <content:encoded><![CDATA[<p>In this episode of The Smashing Podcast, we’re talking about HTML email. Do we still have to design like we would for IE5? Vitaly talks to expert Rémi Parmentier to find out.</p>


<h3>Show Notes</h3>
<ul>
<li>Rémi Parmentier <a href="https://twitter.com/HTeuMeuLeu">on Twitter</a></li>
<li><a href="https://www.caniemail.com">Can I Email?</a></li>
</ul>
<h4>Weekly Update</h4>
<ul>
<li><a href="https://www.smashingmagazine.com/2022/09/smart-interface-design-checklist-cards-release/">Meet “Smart Interface Design Patterns Checklists”</a> <em>written by</em> Vitaly Friedman</li>
<li><a href="https://www.smashingmagazine.com/2022/09/wai-aria-guide/">Making Sense Of WAI-ARIA: A Comprehensive Guide</a> <em>written by</em> Kate Kalcevich</li>
<li><a href="https://www.smashingmagazine.com/2022/09/javascript-api-guide/">JavaScript APIs You Don’t Know About</a> <em>written by</em> Juan Diego Rodríguez </li>
<li><a href="https://www.smashingmagazine.com/2022/09/accessibility-times-headless/">Accessibility In Times Of Headless</a> <em>written by</em> Josefine Schaefer</li>
<li><a href="https://www.smashingmagazine.com/2022/09/rethinking-star-ratings-readers/">Rethinking Star Ratings For Readers</a> <em>written by</em> Matt Athanasiou</li>
</ul>
<h3>Transcript</h3>
<p></p><p><a href="https://twitter.com/HTeuMeuLeu"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0a9109d9-00d0-4aba-a8b1-b7a704ad0119/remi-parmentier-profile-200x200-opt.jpg" /></a> Vitaly Friedman: He’s an email and web developer based in the north of France, near Lille and goes by HTeuMeuLeu on the internet. He works in his own small web development agency, Tilt Studio, since 2008. And he also runs workshops, gives talks, and writes articles on his blog all around HTML emails. Now Rémi also likes collecting Game Boy consoles and listening to, Sufjan Stevens. My Smashing friends, please welcome Rémi Parmentier. Hello, Rémi. How are you doing today?</p>
<p>Rémi Parmentier: I’m smashing.</p>
<p>Vitaly: Oh, that’s so wonderful to hear, Rémi. I don’t know when we know we saw each other maybe, I don’t know, 27 years ago now?</p>
<p>Rémi: Ah, yeah, that feels like it. Yeah, I think we met in person for the first and last time in Smashing conference in Freiberg in 2019, I think.</p>
<p>Vitaly: I think so. This seems like it was a very, very long time ago.</p>
<p>Rémi: Yeah, it’s not even this decade, so.</p>
<p>Vitaly: Yeah, no. So Rémi, this is coming here maybe the questions from the audience, coming already. So if it was 27 years ago, was it the same back then, writing TL emails, like it is today? Or have things changed since then?</p>
<p>Rémi: You are already teasing me. No, I would say things have changed somehow. There are differences like mobile emails, we do responsive emails nowadays, that wasn’t the case 27 years ago. So, yeah, there are lots of differences like this.</p>
<p>Vitaly: Yeah. So it’s always interesting for me because there is an ongoing joke about HTML emails and people who have to do HTML emails and people who are forced to do emails. And you love to do HTML emails.</p>
<p>Rémi: Yeah.</p>
<p>Vitaly: You have to explain yourself, Rémi.</p>
<p>Rémi: Yeah, I don’t know how it came to be exactly, but I wouldn’t have had the repulsion that most web developers have these days when they get asked to code an HTML email.</p>
<p>Rémi: And I think one of the reason might be that I’m old and so when I started at my very first gig in a web agency, it was around 2006. And back then emails were coded pretty much the same way that webpages were coded. So we use tables for layouts for webpages and so did we for HTML email. So it wasn’t so different back then. And so it’s just that with time, we saw that web evolved to something different. To as a semantic web first with a growing introduction of CSS and growing use of CSS for layouts. And then we got responsive web. And nowadays we’ve got all sorts of web applications and stuff like this. And yeah, it’s true that emails didn’t catch on to all of these steps, at least not at the same ease, at the same timeframe than the web did.</p>
<p>Rémi: But I feel like somehow it’s catching up every now and then. And we do get to use nice and modern stuff, as well, in HTML emails. So yeah, I really like HTML emails. And I think one part of it is that’s whenever I stumble upon a really weird the bug or behavior or something that’s really maddening for the normal person, I like to just dig in and try to figure things out, try to understand why this happens this way, why things are this way? And so I think that’s really an interesting niche of HTML development nowadays.</p>
<p>Vitaly: But it’s probably keeps you... I don’t know, it keeps you on your toes and keeps you awake at night, thinking about all this incredible, wonderful bugs happening in, I don’t know, in Microsoft Outlook and, God for a forbid, Lotus Notes. Are you still testing Lotus Notes?</p>
<p>Rémi: No, no, no. I haven’t tested that for years now, so.</p>
<p>Vitaly: Okay. That makes me a bit happier at this point. But every time I think about HTML emails, I do remember your wonderful talk where you say that, well, we actually have to think about email development as being a slightly different way, a slightly different mindset that is required to actually get it right. And I remember you speaking about thinking in the Email Geek, which really takes a slightly different turn, I guess, or perspective on what it even means to be designing and developing emails. So if somebody’s very, let’s say unfamiliar, with this territory, if you had to explain how building, designing HTML emails is different from a regular website... I mean, it’s hard to say regular... From websites and applications. Regular always has a little of undertone in it. How are they actually different? And what are some of the important skills that are absolutely required to even make sense of building and designing for HTML email?</p>
<p>Rémi: Yeah, so I think the differences can fall down to two things. The first may be the email client’s landscape. So we’ve got tons of email clients existing and used by people all around the world, while in the browsers nowadays we pretty much sadly have only one browser, which is Chrome and Chromium used by Edge and WebKit used by Safari, which is very similar, as well. And unfortunately, there’s not much diversity in the browser world right now. And so that’s actually a good thing that I enjoy about the email space is that we have got a lot of diversity, tons of email clients. And of course, the bad part of this is that each client comes with its own bugs and quirks and weird behaviors and features that you might not expect and that can be surprising. But I think it’s really the same thing to have such an environment with so many difference email clients.</p>
<p>Rémi: And the second thing that’s really pretty different, I think, is people, it’s users. And on the web, even if you don’t really know beforehand who will visit your websites, you can know it afterwards. If you use any sorts of analytics or if you just look at your server statistics, you will know how many pages, were viewed, how many people came to your website and such. On the email world, it’s really hard to have such statistics because we cannot use JavaScript for this and we cannot use server stats because emails are never on our own server. They’re on the email service server, so we need to rely on invisible tracking pixels. But these are not really reliable because not everyone display images in emails and sometimes you have got image proxying like in Gmail or Apple Mail and so you end up with statistics that are very biased and I think kind of wrong because you miss a lot of the population.</p>
<p>Rémi: So you don’t really know who is opening your emails and how and when. And so you can’t really design and code an email with the expectations that, "Oh, okay. I know that my user base is 90% Apple Mail so I don’t need to care about Outlook." You can’t really do this. So you need to have a more extended view and be really humble and realize that you won’t be able to code for everyone, but you need to do it as good as you can, get close to this. Because you really don’t know who’s going to open your emails.</p>
<p>Vitaly: But despite all of that, despite all this unpredictability, and I remember you mentioning in your session at... Also, one thing that actually quite happens quite a bit, and that’s something that we just don’t have on regular web pages or applications is that email clients also change the way HTML email works. They add links, they change links, they obfuscate things, they change markup for security and privacy reasons. And all those things are very often out of control. And not to mention all the different quirks that go in all the different email clients, as well.</p>
<p>Vitaly: But despite all of that, I’m very surprised, every now and again, to see an enormous, I would even say extraordinary level of creativity when it comes to what people turn HTML emails into. I don’t know, from shopping cart experiences within an email, to games and everything else.</p>
<p>Vitaly: What are some of the most impressive things that you saw built within HTML email?</p>
<p>Rémi: I think it has to be an email made quite a few years ago now. That was an email called Superman Request and it’s actually a mini game. I think it calls this a Night Beat adventure and it’s a choose-your-own-path game where you’re a small character that adventures in the land of tables and TDs and you need to find your path to the best emails. And it’s really such a clever use of all the CSS possibilities with checked input and radio buttons and things like this. That one really blew my mind at the time and it’s still stuck in my mind. Because not only is this really clever in the first place, but it also, I guess, took a huge amount of time and patience to do something like this. Yeah, that was really impressing.</p>
<p>Vitaly: Yeah, I think you mentioned this at some point as well. It looked absolutely incredible just to be able to do that in an email. It’s just something out of control. For me personally, it was, I think when Mark Robbins, I think, he was giving a presentation once. He’s working in one of the email companies.</p>
<p>Rémi: Yes, he’s working in Salesforce now.</p>
<p>Vitaly: Salesforce now. All right. And I remember him giving a talk about the HTML email and it all felt very natural. And then in the end of the session he showed that this was actually within HTML email where the entire presentation and slides and highlighting and everything. That was very, very impressive.</p>
<p>Vitaly: One thing though that really keeps impressing me, I guess, about these things is that there seem to be differences even within the same platform. So if I look at Outlook and outlook.com, if I look at Gmails across different devices and gmail.com, if look, I look at Yahoo web mail and Yahoo applications, it seems like even although they have the same vendor, basically, they operate differently.</p>
<p>Vitaly: So could you maybe shed a bit of light? Are they often very different or what should we as developers and keep in mind when we are, let’s say, dealing with Gmail? Because are there 50,000 versions of Gmail or is it just a few?</p>
<p>Rémi: So maybe they’re not that much. But yeah, there are a few differences and valuations across what we can call a family of email clients, so as you said, like Gmail or Outlook. And it’s not always clear why this is, but perhaps one of the most annoying at the moment is in Gmail. For example, you will get a different level of CSS support whether you are using the desktop web mail, which usually has the best CSS support across Gmail clients, versus if you’re using the mobile apps. And even if you’re using the mobile apps, you would get a different level of CSS supports, whether you are using Gmail address or whether you’re using third-party email address, like if you’re using your outlook.com email address inside the Gmail app on Android or iOS.</p>
<p>Rémi: In that case, you will get what is perhaps the worst CSS support possible. Because Gmail, I think for security purposes, strips a lot of styles and a lot of things. It doesn’t support style tags, it doesn’t support media queries. So you end up with a really bare and really raw HTML with just a few styles, just what you need to get your colors and a few things like this in there. But it’s a really minimalistic approach that you need to get your email to look good in that kind of circumstances. Yeah.</p>
<p>Vitaly: Yeah. So it’s always such a story and you probably can hear the very disappointed voices from the dark corners of the internet talking about, "What’s the deal with Outlook?"</p>
<p>Vitaly: We’ve been making fun of Outlook for, I don’t know how many years now, and I don’t know when it was a 2012 or '11 or maybe even earlier than that where there was a big switch to use the Microsoft Word rendering engine, I heard. And it stayed like this, well, since then, if I’m not mistaken.</p>
<p>Rémi: Yeah, exactly.</p>
<p>Vitaly: So, Rémi, what are we going to do about this? Is there any, I don’t know, any help in sight, Are we just going to have to deal with Word rendering engine forever?</p>
<p>Rémi: So this is actually a very hot topic at the moment because something is happening at Microsoft. They might have heard all the complaints for the years and it looks like they are doing something. So as you mentioned in 2007, Microsoft decided to move Outlook on Windows from Internet Explorer rendering engine to Word rendering engine.</p>
<p>Rémi: And this has been really the bane of all email developers because Word is really terrible at rendering HTML and CSS. Not only does it just support very limited CSS features and HTML, but oftentimes it does it really wrong. So it doesn’t calculate weight from images correctly in CSS or it doesn’t... A lot of stuff happening that’s really intimidating for a web developer. So what’s changing at the moment is that just a few months ago, I think it was last month or just month before, Microsoft released is the first public beta version of Outlook on Windows, using Edge rendering engine.</p>
<p>Rémi: So they’re making a brand new Outlook on Windows and it’s basically just a web app, embedded as a desktop application. So now it’s going to mean to fix almost all the problems that Outlook had created in the first place. So it’s staying better for now, but I’m in good faith that Microsoft is really committed to push this to their end users and see how things go from there. And if they deploy this as the real update and replacement of the actual Outlook versions running on Word, it’s going to be a really big change because this means that we may no longer need to use tables for layouts. Because the only reason we use tables in HTML emails is because of the Outlook on Windows, because Word doesn’t really understand anything else than tables for layouts. So that’s really what we can out now is that Microsoft is going to push all this update and that all of the users are going to move to it. And yeah, that’s really what we need to do.</p>
<p>Vitaly: Well, I can hear a lot of enthusiasm and hope and I don’t know, I would say excitement about this. This seems like a very interesting move that we should probably be really watching out for, so that’s neat.</p>
<p>Vitaly: But given the scenario then, so with tables or without, what do you think then would be... Maybe actually looking back, look at your work specifically, how would you go around building HTML emails? So there are many solutions out there, obviously there are plenty of templates, very different kinds of templates, there’s also MGML and so on and so forth.</p>
<p>Vitaly: I’m wondering where do you stand in terms of what it takes, so what does it mean to be building HTML emails today? Is it still cool to be, I don’t know, coding HTML emails from scratch or do other particular templates that are normalizing things across email clients? What’s your take on this?</p>
<p>Rémi: So I’m definitely in from scratch camp right here. But I’m also there in for the web, as well. I like to do things from scratch.</p>
<p>Rémi: I think that a way to see this is that it’s not so different from the web. If you were to code a website, would you use something like Bootstrap or maybe start with a WordPress default theme and build your website from there on? Or would you rather build something from scratch? And so yeah, that’s really a way to see things. And both approaches can be good. It really depends on the time that you have, the knowledge that you have, and the will and patience that you have, as well.</p>
<p>Rémi: So yeah, I really, usually myself, I prefer to cut everything from scratch. But for any newcomers then if it’s good for them to start from an already made template that they found from their ESP, then go for it and maybe start learning from there and see how you can improve things from there and see what problems you encounter with the default templates and see how you can improve things and build something better from there. That’s a good approach as well.</p>
<p>Vitaly: Right. And in your case, where would you start? Are starting with... I mean obviously, I guess, I assume. I don’t know if I should be assuming that or not.</p>
<p>Vitaly: Will you be starting with HTML tables, or what is your take? Do you then build mobile first, desktop first, or how does it work for you?</p>
<p>Rémi: Yeah, so for a few in the years now, I think the start I approach in the email development industry and community has been more about doing things fluid, or hybrid, as we go them. So this means that we’re going to build the layouts that can adjust to any screen sizes with our media queries first. So by just using divs for example, a div is responsive by default. If you don’t set any fixed weight from it’ll adjust to your window’s size. And then from there, you can use media queries, whether targeting mobile or targeting desktop to improve things. So that’s really what we call progressive enhancements and graceful degradation. So that’s the whole mindset here, I think, is really important in the email world.</p>
<p>Rémi: So yeah, the approach regarding table and my approach at least, has been more to put the tables in conditional comments for Outlook because that’s really only Outlook that needs them. And then for other clients, use divs and use regular HTML semantics like H1, H2 tags, paragraphs, and such to create your elements and lay them out. And but I’ve been coding like this for, I don’t know, for how long, but for quite long now, and it’s still working well. So I think that’s a really valued approach, as well.</p>
<p>Vitaly: Oh, interesting. So that means that basically... Am correct to assume that you then would be having one markup specifically for Outlook, and then the rest will be getting the good old div or even potential section article. Is it even viable as well there?</p>
<p>Rémi: So regarding some of the semantics like article or editor and photo tags, it’s usually not appropriate because your email might get included in a more complex application like Gmail. And Gmail is web mail and its HTML itself. So when Gmail inserts your HTML newsletter in its interface, you end up with Gmail’s HTML code all around your own HTML code. So then the semantic might not make sense there. And on top of that, Gmail specifically doesn’t support these tags, so you need to find a proper fallback for years.</p>
<p>Rémi: But as far as Outlook is concerned, as the idea is not that much to create a separate, isolated code for the whole email, but more to add small chunks of code just for Outlook, that will say, "Okay, I’m going to open a table for Outlook right now." And then I will have the rest of my concerns come on for both Outlook and other email clients. And then at the end of my email or of my blog, I will just add another block I’ve got just for Outlook that will say, "Okay, I’m closing the table that I opened." And that’s it for tables and just for Outlook.</p>
<p>Vitaly: Okay. Is it actually still a good idea to inline styles in email?</p>
<p>Rémi: Yes. Yeah, it is because even though lot of clients do support style tags and even Outlook on Windows, actually, that’s something often surprising to people. It’s usually a good idea because some clients don’t support style tag. So earlier, I mentioned the Gmail apps on mobile when you don’t use the Gmail accounts. So this is what we Email Geeks often call GANGA, for Gmail apps with non-Gmail accounts.</p>
<p>Vitaly: This is quite an acronym word right there.</p>
<p>Rémi: Yeah, I love this acronym. And so in GANGA, you don’t get style tag support, so you need to inline your style there. So it’s really a good way to make sure that in these very restrictive conditions, at least your email looks properly styled for text and for font sizes and such and such things.</p>
<p>Rémi: But you can have some of your styles in separate style texts. And, in fact, that’s what we can do for responsive emails. When we use media queries, we cannot inline media queries, so we do have to use style tags. So we do a bit of both.</p>
<p>Rémi: And regarding inline styles, it’s also important because whenever you’re going to reply to an email or forward an email, which is something very unique to emails, some of this is really not something that happens on websites... Email clients, and that’s pretty much the case for all email clients, will really remove all the style tags of your code when you do this. And so if you don’t have in an inline style, suddenly your emails will look like something completely broken. So it’s always safer to have at least a bare minimum of times inline so that your emails looks good in this, when it happens.</p>
<p>Vitaly: Right. What about the font phase, by the way? So when we’re talking about embedding fonts, obviously, these font need to live somewhere. You’re not going to attach them to the email. And then sometimes I see that there are code errors appearing where you’re trying to fetch fonts from one place and then it doesn’t know where it’s going to be loaded from. So you cannot just, let’s say, whitelist a couple of domains and call it a day. So it needs to be just public to everyone.</p>
<p>Rémi: Yeah.</p>
<p>Vitaly: Right. What is a common way to deal with this?</p>
<p>Rémi: So, yeah. But that’s a very specific problem. And this happened to me a few times, especially when working with clients who have their own phones hosted on their own server, but they’re using CORS rules for security, so the font cannot be called from a specific web mail. I think in the end, it kind of falls apart because it then is working okay, because CORS restrictions like this do not apply to email applications.</p>
<p>Rémi: So for example, Apple Mail does support font face, and it doesn’t behave to CORS rules. So even if you have CORS restrictions, your fonts will still be available in Apple Mail. And for font face, Apple Mail is really just one of the few that supports it because there’s almost no web mail, so no Gmail, no outlook.com that supports font face like this no Yahoo, either. And there’s just I think a few international or local email clients that do support font face in that case.</p>
<p>Rémi: So yeah, whenever you are using font face, you need to realize that not a lot of people might see your fonts and because it might be stripped from the email clients, like Gmail or outlook.com. And you might have CORS errors like this. So it’s always a question of progressive enhancement and graceful degradation just... I like to use font face in emails when it’s part of the design and it’s a great enhancement, but you always need to realize that that’s not going work for 100% of your subscribers. So just you always have to think about what happens if it doesn’t work.</p>
<p>Vitaly: Right. What do you think in general about things like MGML. Do you use anything like that, sort of a templating language for writing coding, I would say, faster and still distant HTML emails? Or maybe using something else? What’s your take on it?</p>
<p>Rémi: So yeah, MGML is very popular and it’s always interesting to see. And the fun fact, I was actually hired as a consultant by Mailjet when we launched MGML in 2015 or '16, I think. And so I worked with them to make sure that the HTML output by MDML is on par with our industry standards and just works well in all environments, including Outlook. And so it’s really fun to see that still up to this day it holds up pretty well, and even though I know there has been updates to MGML and such. But the basic way of doing things, which is mobile first, has been holding well across all these years.</p>
<p>Rémi: And so I don’t use MGML myself, but I do use a few of our tools. And this year, in particular, I’ve been really digging into Parcel, which is an online code editor dedicated to HTML emails. And so there are a lot of fun stuff in it, to really help you code emails maybe faster. There’s components, there are styles inlining, and you can send tests to your inbox from the editor. So that’s really great.</p>
<p>Rémi: And I’ve also been walking with Mazo, which is a node framework to build HMTL emails, as well. I kind see it like JQL or Ivanti, which is not so much that it impose a way to code to you, but you can bring your own code and it just helps you output things easier and faster and do all sorts of small routines that like styles inlining or things like this.</p>
<p>Rémi: So yeah, I think over the past few years, we are really starting to see tools appearing like this and really catching on across email developers. So you can... Yeah. Yeah, I think that’s a good sign of maturity among the-</p>
<p>Vitaly: Right, and while they’re talking about sending emails to yourself from Parcel, which I think is actually pretty cool, what would be then your strategy to test and debug emails? So do you literally send it to yourself via email and then you check on your phone, let’s say, if it looks okay, and then you go back to the editor, and then you fix, and then you resend it? Or is there any other way or approach to do that? What’s your take?</p>
<p>Rémi: Yeah, that’s usually my first approach, it’s just testing and sending to myself. And by sending to myself, I mean sending to the dozens and dozens of email addresses that I’ve created pretty much everywhere so that I can see how email code behaves in different email clients.</p>
<p>Vitaly: What a fun place it is for all those email addresses to be in. Probably tons of different tests and spam and everything else coming together in one, fun place.</p>
<p>Rémi: Yeah. That would be a weird thing if these email inboxes were ever to leak as part of, I don’t know, any data leak. People would be wondering, "What is this inbox doing exactly? There’s been 20 emails just this past hour about this thing. I’m not sure why."</p>
<p>Rémi: But on top of that, we’ve got the chance to have email screenshot tools. So that’s kind of like browser stack for email. So where you just copy your HTML email code, just send your HTML email to, and then you will get screenshots on many, many different email clients. So you will get a quick preview of what your email looks like on Apple Mail, on iOS, on Gmail, on Outlook, on Windows, and all of this in just a few clicks. And it’s really a good way to make sure, as well, that your code works well in all these different environments.</p>
<p>Vitaly: And of course there is, CanIEmail.com, but which you wonderfully announced during the SmashingConf Freiburg. What was it like two years ago?</p>
<p>Rémi: Yeah, that was in Freiburg in 2019. So that’s already almost three years now.</p>
<p>Vitaly: Yeah. I mean, maybe you can also talk a bit about this and maybe any new features that are coming up and what it is. But for me personally, this is just a really ultimate great resource to just find out how well particular feature is supported. Think about it CanIUse.com, just for email?.</p>
<p>Rémi: That really was the idea. And I think that’s part of this sentiment that the email community is maturing and growing, is that we’ve got places like this where not only can we learn more publicly about what email clients do, what do they support and such things, but we can also contribute to it. And that was really, I think, the missing part. Because before that, we had a few websites that gave you the state of support for a few CSS properties in a few email clients, but it was most of the time just part of blog articles that were really outdated or on website that you couldn’t really interact with.</p>
<p>Rémi: So the idea with CanIEmail was really to make this available and open source and so that anyone can contribute to it. And if you see that an email client doesn’t support something, then you can report it on website and so everyone benefits from it, from them. So it’s really a great knowledge base that everyone can benefit from.</p>
<p>Vitaly: Yeah. Yeah, sure. Well, I do have to ask a question. I ask it every single time and I know what your answer is going to be like, but I do want to be... Oh, well these things have changed and I want you just to explain to our wonderful listeners here why we are where we are.</p>
<p>Vitaly: Now, obviously again, there is this large conversation about HTML email being such an outdated thing and HTML tables and everything and all of that. But we have this incredible, growing bloom of CSS features, grid, container queries, cascade layers. CSS is blooming like never. But when we are looking at this HTML email, we should be probably a bit of skeptical, I guess, of when we even would be able to use those things and do so reliably, and if it’s even an option at all.</p>
<p>Vitaly: So I’m wondering, and I think that many people are, should we be expecting at some point now in the future, at any point, really some sort of inter... Oh, this is a very difficult word... Interoperability sanitization around HTML emails and the features that are supported across Yahoo and Outlook. And with Edge moving, oh, well, not moving... It’s Outlook moving to Edge, no Edge moving into Outlook, That’s probably the better way of putting this.</p>
<p>Vitaly: Is it happening? Are we getting there or-</p>
<p>Rémi: So that’s a very interesting question because this is also a hot topic in the email world. Because I think it was just last month, there’s a new group that was formed in the past year that was announced and that’s called the Email Markup Consortium, so EMC for short. And basically, it’s a bunch of email developers and marketers and designers like me, who decided to gather together and try to really get things down to make email betters for everyone. So that means better for developers, with more standardizations and more uniformity across email clients. And also better for users because if email clients get support for all your roles, for example, or all your properties, then we can make some parts of emails more accessible for people who need it. And same thing goes for some things related to performance. If we get support to picture tags and responsive images, we could deliver more efficient and more performance email because we can have smaller image sizes and things like this.</p>
<p>Rémi: So this is really a work in progress. And I haven’t done much of it. So I think it’s mostly Marc Robbins and Alice Li, and I’m sorry I forgot his name, but a few people who are really active in the Email Geeks community. I think they are the main core members, but there are also a lot of members around who will contribute to the launch of this. And so now, it’s really about trying to catch the email clients’ developers attention and get them to improve things. And the good news is that there’s already been a few email clients that said they were interested in doing things better. So I know that there’s been a German email clients like this.</p>
<p>Rémi: So yeah, it’s really something new. So I’m really eager to see where this can go because there’s been attempts to improve things in the past, but that have never really caught on or that fell flat after a few months. So I know that this group has been around for a year secretly and trying to get things done, so it’s really great to see that now this is public and I’m really eager to see where this will lead. And hopefully it will lead to better standards and uniformity across email clients.</p>
<p>Vitaly: Oh, this does sound very exciting and it almost makes me feel like the future of HTML email is bright. However, I should probably curb my enthusiasm a little bit just because I don’t think we should be expecting, I don’t know, CSS sub grid and React or JavaScript getting into the world of HTML email anytime soon. Or am I wrong there?</p>
<p>Rémi: As for JavaScript, I think it’s nothing something you should expect and it’s really not something you should want because first, do you really want your emails to have flashy carousel and things like this? I’m not sure about that.</p>
<p>Vitaly: I mean, you can also do this with CSS and interactive, I don’t know.</p>
<p>Rémi: Yeah, yeah. But I’m not fully sure about this. But the main problem with JavaScript is really security because if you let any single line of JavaScript inside an email client, then some actors could really get your whole inbox and just download all your data and things like this with what you even knowing it. So there’s really a great danger with JavaScript. And so you should never expect full JavaScript support in email clients. But as for you mentioned a sub grid, and I think this is something that I haven’t heard of it exactly, but I think this is something we should expect in the next release of Apple Mail because if I’m not wrong, it’s coming in the next Safari.</p>
<p>Vitaly: Safari 16, yes.</p>
<p>Rémi: Yeah, iOS 16. And usually every time Apple adds some new features in WebKits and Safari, Apple Mail also benefits from it. So this is something that should come in Apple Mail this fall. So in some way if you really need to use CSS sub grids, you should be able to do it by the end of the year. But you just need to remind yourself that it will only work in Apple Mail from now. So, yeah.</p>
<p>Vitaly: But at the same time, I mean, you dismiss a wonderful, beautiful carousel just like that. However, I do remember vividly this time, maybe for a very brief period of time, while there was a huge excitement about this notion of interactive emails. And I think that still is, where you had AMP for Email?</p>
<p>Rémi: Yeah, AMP for email.</p>
<p>Vitaly: And you have all the beautiful carousels and everything else that you ever wanted, without having to write a single line of JavaScript because it would be just embedded into the platform and then you could reuse one of those components. Do you think that this is still a thing or where are we going with this?</p>
<p>Rémi: So yeah, interactive emails is still a thing and everyone talks about it every now and then. But there’s really two approaches to it. So the most traditional one is to use CSS and to ask CSS to use small interactions possible in CSS, like with the checked pseudo selector or hover pseudo selector. And from there you can do things where if you hover specific zone and some other content will appear, so you can do some image swap on hover or stuff like this. And we’ve checked, you can do much more detailed interactions where if you click on something, something else will appear on your email and you can do these sorts of things. So this is quite limitating because you are just limitating with these two sorts of interactions. But it does some decent support, like in Outlook.com, you can do things like this in Yahoo desktop one mail, as well. And Gmail does support hover interactions, as well. So that’s always interesting to do this for Gmail.</p>
<p>Rémi: But the hover approach, as you mentioned, was that Google announced a few years ago now AMP for email, and the idea was to bring the AMP JavaScript framework into the world of HTML emails, which is an interesting thought in the first place. But I think now it’s been quite a few years now that they did this, and I think now looking back that it was probably not the best approach to have because the way they did this is that they added a new mine type inside your email. So when you send an HTML email, you are not just really sending an HTML file to people, you’re sending an email code that’s actually a multi part code where there is a plain text version of the email, the HTML part, and all sorts of editor saying who you are sending your email to and things like this.</p>
<p>Rémi: And what Google did with AMP for email is that they brought a whole new AMP for email section in the email code like this. But this meant that if you wanted to send an AMP for email, then still if you want to send now an AMP for email email, for your ESP, or your email sending service, to support this specific mine types or else you cannot go code this and send it. So this was the whole email industry was really, really eager to look at who is going to support this and who will not. And a few years after, right now, it looks like most email providers and services didn’t really support this. So, for example, MailChimp doesn’t support this, so a lot of famous email services do not support AMP for email. So you cannot send for AMP for email easily.</p>
<p>Rémi: And I think another respect that makes AMP for email quite difficult is that even if you manage to send an AMP for email email, you need to get whitelisted from each clients that supports AMP for email. So if you want to send an AMP for email, you need to get whitelisted from Google so that people using Google desktop one mail will see it, and you need to get whitelisted from mail dot ?? that also supports it. And so it’s quite a difficult process, in my opinion. And it’s also quite opposite to the basic nature of email, which is a very open standard. Anyone can send email, any email clients can read email. So they try to act around the email format to get interactivity inside it, but I think that made things more difficult.</p>
<p>Rémi: So yeah, I still think that that can be exciting uses. I don’t know if you’ve ever used Google Docs and received an email where someone commented on your Google Docs and you can, inside Gmail, answer in the email, it’s an AMP for email email and you can answer right from your Gmail inbox to the comment that was left on your document. I think that’s an amazing use of AMP for email. But it’s hard to see how this could be made more popular. And, yeah, it’s hard to imagine this catching on and to find good uses like this for more traditional emails.</p>
<p>Vitaly: Well, maybe as we’re wrapping up here this point, I do have to ask one question that has been bothering me for a while. If there was a dream feature that you’d love HTML email to have, something that could be appearing in all the email clients everywhere tomorrow, if you just desired that to be in there, what would that feature be?</p>
<p>Rémi: So I think it wouldn’t necessarily be an HTML CSS feature, but I’d love to see something like reactions for emails, like you’ve got on Slack or on GitHub issues or just on messages on iOS and Android. And that would be a fun feature and I think that could spare a lot of emails because every time you need to just send an email to them saying "So, okay, I got this," you could just send a reaction and that would be way faster. But again, this would require a lot of standardization and implementation. So I think we are not really very hit at all.</p>
<p>Vitaly: If you, dear listener, would like to hear more from Rémi, you can find him on Twitter where he is HTeuMeuLeu, or we’ll have to put that link in the notes. And on his website at HTeuMeuLeu.com, as well. But also at SmashingConf, he often runs HTML email workshops. We will be discussing when the next one is coming up.</p>
<p>Vitaly: Do you have any parting words with our wonderful audience, Rémi, for today? We’ve been learning today all about HTML email, but what have you been learning from this session or in general? What are the parting words you’d like to hand over for people who might be excited to join this dark side of the world and design and build a HTML email together with you?</p>
<p>Rémi: Well, I hope that I convinced a few of you that yeah, email development is a thing and it can be. If you’re frustrated with how a website works nowadays, join us. It’s really fun in here. And yeah, there’s a whole community, as well. So yeah, feel free to reach me and just join us. There are dozens of us.</p>
<p>Vitaly: Of course. And if you are, dear friends, interested in the community of HTML Email Geeks, as far as I understood. Rémi, please correct me if I’m wrong. There are Email Geeks, there is a Slack channel. And you can also talk to Rémi and I’m sure that he’ll be very happy to point you to the group where all the cool kids talking about HTML emails hang out.</p>
<p>Rémi: Absolutely.</p>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Drew McLellan)</author>
      <enclosure
        url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3eaf789d-a932-4d1f-a811-3406e0c63644/smashing-podcast-episode-53.png"
        length="0" type="image/png"/>
    </item>
    <item>
      <title><![CDATA[What’s New In Gatsby 2022?]]></title>
      <link>https://smashingmagazine.com/2022/09/new-gatsby-2022/</link>
      <guid>https://smashingmagazine.com/2022/09/new-gatsby-2022/</guid>
      <pubDate>Tue, 20 Sep 2022 08:00:00 GMT</pubDate>
      <description>
        <![CDATA[Gatsby has evolved quite dramatically in the last two years. In this article, Paul Scanlon explains what Gatsby can do today, and how he used some of the new features when upgrading his personal website from Gatsby 2 to Gatsby 4.]]></description>
      <content:encoded><![CDATA[<p>This article is a sponsored by <a href="https://www.gatsbyjs.com/">Gatsby</a></p>
<p>You may have heard things about Gatsby a few years ago, and if you’re not keeping an eye on what we’re doing today, it’s entirely understandable for you to assume nothing has changed. </p>
<p>Naturally, given Gatsby operates in the JavaScript space, things have not only changed in the last few years, but they’ve also likely changed in the last few weeks. This is why I’ve written this article explaining what Gatsby can do today, and how I used some of our new features when upgrading my personal website: <a href="https://paulie.dev/">paulie.dev</a> from Gatsby 2 to Gatsby 4.</p>
<p>Let’s dive in! </p>
Server-Side Rendering (SSR)
<p>In the fall of 2021, Gatsby launched Gatsby 4 with <a href="https://www.gatsbyjs.com/docs/how-to/rendering-options/using-server-side-rendering/">SSR support</a>. I’ve used this on <a href="https://paulie.dev/dashboard/">paulie.dev/dashboard</a>. There are three features on my dashboard that are ideally suited to SSR</p>
<p>Now let’s dive into each of these and how Gatsby 4 enabled me to build them easily! </p>
<h3>All Reactions</h3>
<p>The reaction data is requested from a <a href="https://fauna.com/">Fauna Database</a>, and displayed in an interactive Accordion component. The reactions are first grouped by type (e.g. Happy, Cool, Tongue, and so on) and then listed by slug (URL), and a count is also displayed for each of the grouped properties. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/666de1ea-e517-4801-aed9-677f46634822/1-new-gatsby-2022.png" /></p>
<h3>Visitors By Country And Visitors By Location</h3>
<p>The Visitors By Country data is requested from the new <a href="https://developers.google.com/analytics/devguides/reporting/data/v1">Google Analytics Data API (GA4)</a> and listed in order by the amount of visits per country. <em>Visitors By Location</em> data is requested from the soon-to-be deprecated <a href="https://developers.google.com/analytics/devguides/reporting/core/v3">Google Analytics Core Reporting API (UA)</a>, and each location is plotted around a 3D globe that I created using <a href="https://github.com/mrdoob/three.js/">three.js</a> / <a href="https://github.com/pmndrs/react-three-fiber">@react-three/fiber</a>. It’s made interactive using Orbit Controls from <a href="https://github.com/pmndrs/drei">@react-three/drei</a>. You might be wondering why I didn’t plot the GA4 data around the globe, too. The lat/long required to plot the points isn’t part of the new GA4 API. See for yourself in the <a href="https://ga-dev-tools.web.app/ga4/dimensions-metrics-explorer/">GA4 Dimensions &amp; Metrics Explorer</a> (Built with Gatsby) </p>
<p>Here’s an <a href="https://github.com/googleanalytics/ga-dev-tools/issues/962">issue on the ga-dev-tools</a> GitHub Repo… fingers crossed it’ll get looked into at some point. 🤞</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6f44dee2-9412-43cb-88e2-9051d789d54b/2-new-gatsby-2022.png" /></p>
<p>The data displayed in these two features is up to date as of the last time the page loaded. The Visitors By Country data will also be displayed if JavaScript is disabled in the browser. The Interactive globe, sadly, will not because three.js needs JavaScript. </p>
SSR/CSR Hybrid
<p>SSR is a good option for data that changes relatively quickly, but when using SSR, the data will only be "fresh" when a user first visits the page. If data were to change after the page has loaded, users would need to refresh the page to see the latest updates. This is where a hybrid SSR with CSR (Client-side request) can help. </p>
<h3>Latest Reaction</h3>
<p>The Latest Reaction Feature uses this hybrid SSR/CSR approach. If Javascript is disabled in the browser, the Latest Reaction is rendered using SSR. However, if JavaScript is enabled, I poll the Fauna database using a Gatsby <a href="https://www.gatsbyjs.com/products/cloud/functions/">Serverless Function</a> every 60 seconds and retrieve the latest reaction. This means the Latest Reaction is never more than 60 seconds out-of-date and will refresh without users needing to reload the page. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2946d4ac-aa3c-4317-bc8a-bd28240fe9d7/6-new-gatsby-2022.png" /></p>
SSR/SSG Hybrid
<p>Again, whilst SSR is a good option, is it always needed? Some of the data changes that occur on my site happen because of something I change. E.g I write a new post, commit the changes and trigger a build. In this instance, I’ve opted for a hybrid SSR with SSG (Static Site Generation) approach. The page is still Server-side rendered but the charts are statically generated. (Yes, a page can be both SSR and SSG.)</p>
<h3>Data Charts</h3>
<p>I’ve used this hybrid approach and created 4 data visualizations to help me better understand the frequency with which I write and the kind of content I’m writing about, and who for. Each of these charts is populated by data from around my site that has been extracted from the frontmatter in my <code>.mdx</code> files and then queried from Gatsby’s data layer using GraphQL. </p>
<p>These charts allow me to plot or count the number of posts or articles I’ve posted each month over the last four years, the amount of posts or articles I’ve posted on each day of the week, the external publications I’ve written for (excluding Gatsby) and how many times, and then finally, a chart to show the total count for each tag used in all of the posts and articles.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5971b2d1-b602-48d2-b65e-711cd57b4696/3-new-gatsby-2022.png" /></p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a94a9514-aa94-476b-943a-6b3f2d11dd59/4-new-gatsby-2022.png" /></p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/83518778-2fcd-4a0e-b602-c7b255b58156/5-new-gatsby-2022.png" /></p>
<p>As mentioned, the <a href="https://paulie.dev/dashboard/">dashboard</a> of my site is Server-side rendered, but all of the above can be considered "static," and generally speaking, when folks refer to a static site, they’re probably talking about text and images on a page.</p>
<p>The SSG data for the charts can’t really go out of sync because each time I write a new post or article, I commit the <code>.mdx</code> file to <a href="https://github.com/PaulieScanlon/paulie-dev-2019">my repository</a>, which in turn kicks off a new build in <a href="https://www.gatsbyjs.com/products/cloud/hosting">Gatsby Cloud</a>.</p>
<p>This data can therefore be considered up to date as of the time the page loaded and likely won’t change during the duration of a page view. </p>
<p>The way I’ve created these charts uses the same technique, but because I like data, I chose to turn it into something more visually interesting. (fun fact, none of these charts were created using a charting library). </p>
<p>They are all hand-crafted using good ol' mathematics, the SVG element, and with help from the following folks and their great tutorials — all will work with JavaScript disabled in the browser! 💅. </p>
<ul>
<li><a href="https://heyoka.medium.com/scratch-made-svg-donut-pie-charts-in-html5-2c587e935d72">Donut Chart | Mark Caron</a></li>
<li><a href="https://www.headway.io/blog/building-a-svg-line-chart-in-react">Line Chart | Kelsey Leftwich</a></li>
<li><a href="https://egghead.io/lessons/javascript-build-a-bar-chart-with-svg-from-scratch-with-react">Bar Chart | Kyle Shevlin</a></li>
<li><a href="https://medium.com/@brianfoody/jogging-your-geometry-memory-by-building-an-svg-radar-chart-in-react-native-4aeee555809f">Radar Chart | Brian Foody</a></li>
</ul>
<p>I prefer this hand-crafted approach as I found I have more control over the final output. When I’ve used charting libraries in the past I always seem to be hacking over the top of something to get the desired look, and not all charting libraries will work if JavaScript is disabled in the browser.</p>
Deferred Static Generation (DSG)
<p>With the release of Gatsby 4 (October 2021), <a href="https://www.gatsbyjs.com/blog/whats-new-in-gatsby-4/#gatsby-skip-here">Gatsby announced DSG</a>. This page rendering method is similar to the tried and tested SSG approach (where pages are statically rendered on the server at build time), but the key difference is <strong>when</strong>. </p>
<p>Historically speaking, all Gatsby pages were SSG, and all pages would have to be built ahead of time. Whilst this often results in better SEO and a faster user experience than SSR, it can have adverse effects on build times. </p>
<p>Builds tend to fall into two main categories, and then there are a few subcategories for each:</p>
<ol>
<li>Local Development<ol>
<li>Content changes</li>
<li>Code changes<ol>
<li>Changes that affect every page (e.g. Header/Footer)</li>
<li>Changes that affect a single page</li>
</ol>
</li>
</ol>
</li>
<li>Production Deployment.<ol>
<li>Content changes</li>
<li>Code changes<ol>
<li>Changes that affect every page (e.g. Header/Footer)</li>
<li>Changes that affect a single page</li>
</ol>
</li>
</ol>
</li>
</ol>
<p>When <strong>developing a Gatsby site locally</strong>, it’s not always advisable to build every page, fortunately, while developing locally you probably won’t need to build all the pages.</p>
<p>You can use this "trick" if you like, it works a treat!: <a href="https://paulie.dev/posts/2021/07/gatsby-slow-local-build-times/">How to "fix" Gatsby’s slow local build times</a>.</p>
<p>For <strong>production</strong>, however, Gatsby will need to build every page and if your content is changing quickly or you have multiple content creators working on your site, they’ll need to see the built page in a timely fashion. </p>
<p>Content creators typically won’t be using local <code>.mdx</code> files as I have on my site to write content, so Gatsby/Gatsby Cloud has a number of super fast preview options for popular <a href="https://support.gatsbyjs.com/hc/en-us/articles/1500000907821">CMSs such as Contentful, WordPress, Sanity, and many more!</a>.</p>
<p>Specifically, in the case of production sites and content changes, DSG can be configured to defer the static generation of any page or type of page. </p>
<p>In short, by using DSG, Gatsby hands control of Static Site Generation over to you, the developer. By choosing which pages to defer, you have more control over your build times. After all, you know your site better than anyone, so you’ll be able to create a custom defer strategy that works best for your needs. </p>
<h3>How Does Gatsby’s DSG Work?</h3>
<p>Let’s start with the output. A page created using DSG is the same as a page that has been created using SSG. Meaning: it’s a fully constructed HTML page that’s been pre-built and cached on the server ahead of time and is sent to the browser when a user visits that page. </p>
<p>It contains all the important metadata that Google needs to index your site and since the page is pre-built, it’s super fast and provides the best user experience for end users. </p>
<p><strong>When</strong> this page is rendered, however, is where DSG comes in. </p>
<p>If a page is deferred using DSG, then Gatsby won’t pre-build it when you deploy your site. Instead, the first time a user visits that page Gatsby will build it on the fly, or just-in-time, and then send it to the browser when it’s ready. How is this different from SSR, then? </p>
<h3>How Is DSG Different From SSR?</h3>
<p><strong>The above will only happen the first time a page is visited</strong>. When one user has visited a page once, the next user will be served an ahead-of-time pre-built SSG page from the cache, and every visitor after the first will experience the same speed as if the page were rendered using SSG. </p>
<p>With SSR, every visitor gets the same, sometimes slow experience, as they have to wait for the Server to generate the page before it’s sent to the browser. Typically, this leads development teams to optimize then cache headers, which is error-prone and oftentimes complex. This leads to pain for teams, and I prefer to minimize my own!</p>
<h3>When To Defer Using DSG</h3>
<p>I’ve seen some really interesting defer strategies from a number of our customers. Some choose to defer pages that aren’t visited that often and this strategy is determined using Google Analytics and page view statistics. Others defer based on the date a post or article has been published; some defer based on the popularity or stock level of a product. The options you have available to you, are quite frankly endless, each business has its own use case and Gatsby is flexible enough to accommodate any and all eventualities. </p>
<p>Here’s a <code>diff</code> of the classic <code>createPage</code>; with DSG, you could defer all but the latest 100 posts (<em>provided the posts have been sorted by date first, of course!</em>)</p>
<div>
 <pre><code>const posts = result.data.allMdx.nodes

posts.forEach((post, index) =&gt; {
  createPage({
    path: post.slug,
    component: path.join(__dirname, <code>./src/templates/posts.js</code>),
    context: {
      id: post.id,
    },
    // index is zero-based index
+    defer: index + 1 &gt; 100,
  })
})
</code></pre>
</div>

<p>...and for the curious, you can also enable DSG in our alternative page creation method: <a href="https://www.gatsbyjs.com/docs/reference/routing/file-system-route-api/">File System Route API</a>.</p>
<pre><code>export async function config() {
  return ({ params }) =&gt; {
    return {
      defer: // your defer strategy
    };
  };
}
</code></pre>

<p>This one small change typically results in a quite drastic reduction in build times. Of course, it depends upon the use case, but some of our customers have reduced their build times by over 50%, which means that each and every build gives them time back in their day to do more interesting things than wait for a build! </p>
Serverless Functions
<p>In the summer of 2021 <a href="https://changelog.gatsbyjs.io/#3.7.0">Gatsby released Functions</a>, I’ve used Functions for each of my; post, article, demo, or stream pages to capture visitors' reactions. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/801eab8d-9efe-49fe-99c6-a539ccd98f17/7-new-gatsby-2022.png" /></p>
<p>Using a set of SVG emojis, I invite users to leave a reaction to my content. When any of the emojis are clicked, I post to a Serverless Function from the client with the following payload.</p>
<pre><code>await fetch('/api/add-reaction', {
  method: 'POST',
  body: JSON.stringify({
    title: title,
    slug: slug,
    reaction: reaction,
    date: new Date()
  })
});
</code></pre>

<p>The Serverless Function, in turn, securely posts to a <a href="https://fauna.com/">Fauna</a> Database where the data is stored and ready to be retrieved and counted on the SSR page as mentioned above.  </p>
<pre><code>const faunadb = require('faunadb');

export default async function handler(req, res) {
  const { title, slug, reaction, date } = JSON.parse(req.body);

  const q = faunadb.query;

  const client = new faunadb.Client({ secret: process.env.FAUNA_KEY });

  try {
    await client.query(
      q.Create(q.Collection(`reactions_${process.env.NODE_ENV}`), {
        data: { title: title, slug: slug, reaction: reaction, date: date }
      })
    );
    res.status(200).json({ message: 'Lovely stuff, your reaction has been added!' });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
}
</code></pre>

Framework Improvements
<p>We’ve made improvements to the core framework by adding a few new APIs too! The new <a href="https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-script/">Script API</a>, available from <a href="https://changelog.gatsbyjs.io/#4.15.0">4.15.0</a>, among other things, comes with an <code>off-main-thread</code> script loading strategy which can be used to offload third-party scripts (such as Google Analytics) using <a href="https://www.builder.io/">Builder.io</a> ’s Partytown 🎉. </p>
<p>Offloading third-party scripts to a Web Worker is a nice way to speed up page loads. I wrote a little more about this on my site: <a href="https://paulie.dev/posts/2022/07/how-to-use-gatsbys-script-api-with-google-analytics/">How to use Gatsby’s Script API with Google Analytics</a>.</p>
<p>We also have the new <a href="https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-head/">Head API</a>. Historically speaking, the recommended way to add metadata to your HTML page with Gatsby was to use <code>react-helmet</code> and <code>gatsby-plugin-react-helmet</code>. </p>
<p>Not anymore; from release <a href="https://www.gatsbyjs.com/docs/reference/release-notes/v4.19/">4.19.0</a>, this functionality is included in the framework. I’ve written a post detailing a common migration pattern if you’re interested to know more. <a href="https://paulie.dev/posts/2022/07/how-to-use-gatsbys-head-api-with-mdx/">How to use Gatsby’s Head API with MDX</a>.</p>
<p><em>Stay tuned for Slices API 🍕. There’s an open RFC here on the Gatsby GitHub: <a href="https://github.com/gatsbyjs/gatsby/discussions/36339">RFC: Slices API</a>.</em></p>
Gatsby Cloud
<p>The Gatsby framework is free and open source and can be deployed on any number of hosting providers. We have created Gatsby Cloud as a convenient way to streamline your developer experience, with no additional plugins or configuration required. Put simply: it’s the best place to build, preview, and deploy your Gatsby site.  </p>
<p>Whilst many in the past have complained about Gatsby’s slow build speeds, I often ask, have you tried Gatsby Cloud?</p>
<p>Here are some build speed benchmarks for my site, which is currently ~110 pages. These are all  <code>.mdx</code> with the exception of the dashboard, which, as mentioned, is Server-side rendered. </p>
<p>Many of these pages contain code block syntax highlighting, featured and embedded images, embedded Tweets, Code Sandboxes, and YouTube videos. All of this adds to build times, not to mention MDX taking a little longer to transform than good ol' Markdown (<code>.md</code>).</p>
<p><strong>Note</strong>: <em>These results are from the free tier of <a href="https://www.gatsbyjs.com/products/cloud/hosting">Gatsby Cloud</a> (running in Pro mode for the 14-day trial).</em></p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/88413db5-d9a9-485a-8680-7b29d8bb9920/8-new-gatsby-2022.png" /></p>
<p>From bottom to top, I’ll explain the results:</p>
<ol>
<li><strong>Triggered by Gatsby Cloud</strong>: <code>03.22</code><br />This is the first time I deployed, and the site is built from a cold cache.</li>
<li><strong>Triggered by a manual Build</strong>: <code>03.48</code><br />This is a manual build, triggered by me, and is built from a cold cache.</li>
<li><strong>test: content change 1</strong>: <code>55s</code><br />This build was triggered by a commit to GitHub after making a change to one of my posts and is built from a warm cache. </li>
</ol>
<p>Cold cache builds usually take longer as Gatsby Cloud has nothing to intelligently compare "what’s changed." However, when there is a cache and the brains behind Gatsby Cloud do their thing, the build speeds are great! Personally, as a <em>hobbyist developer</em>, I’m fine with waiting 55 seconds for my site to be built and deployed.</p>
(Re) Introducing Gatsby, A Reactive Site Generator
<p>If the above isn’t enough to prove Gatsby is a lot more than simply a Static Site Generator, have a read of Gatsby’s CTO’s recent post that describes how Gatsby takes advantage of a reactive approach to regenerating a "static site" when content changes occur:  <a href="https://www.gatsbyjs.com/blog/re-introducing-gatsby-a-reactive-site-generator">(Re-) Introducing Gatsby, A Reactive Site Generator</a>.</p>
<p>TLDR; When a Gatsby 4 site is deployed to Netlify or Vercel, it can only behave as if it were an SSG. When deployed to Gatsby Cloud, it can behave as though it were an RSG, decreasing build speeds in static page re-generation by 100x! </p>
<p>In this video, Gatsby’s CTO Kyle Mathews demonstrates Gatsby Cloud reactively generating and then deploying a static page in <strong>~2 seconds</strong> and all from the push of a single button, our <a href="https://support.gatsbyjs.com/hc/en-us/articles/360055676874-CMS-Previews">CMS previews</a> have been able to do something similar for a while but never before has it been this fast!</p>
<p>Gatsby has evolved quite dramatically in the last two years. If your experience is with Gatsby 2, you may be surprised at how much faster and more flexible it has become with new page rendering modes and capabilities like DSG and SSR, and we’ve got way more updates to come!</p>
<p>I think you’ll like what the hard-working folks over here have been doing, and if you do have any questions, <a href="https://twitter.com/PaulieScanlon">please come say hello on Twitter</a>. 😊</p>
<h3>Further Reading</h3>
<ul>
<li>“<a href="https://github.com/gatsbyjs/gatsby/discussions/36609">Gatsby 5 Umbrella Discussion</a>,” Gatsby </li>
<li>“<a href="https://www.gatsbyjs.com/blog/re-introducing-gatsby-a-reactive-site-generator">(Re-) Introducing Gatsby, A Reactive Site Generator</a>,” Kyle Mathews</li>
<li>“<a href="https://www.gatsbyjs.com/blog/scripts-and-the-head-what-goes-where">Scripts and the Head: What Goes Where?</a>,” Ty Hopp</li>
<li>“<a href="https://www.gatsbyjs.com/blog/introducing-the-gatsby-head-api">Introducing the Gatsby Head API</a>,” Jude Agboola</li>
<li>“<a href="https://paulie.dev/posts/2022/07/how-to-use-gatsbys-script-api-with-google-analytics/">How to use Gatsby’s Script API with Google Analytics</a>,” Paul Scanlon</li>
<li>“<a href="https://paulie.dev/posts/2022/07/how-to-use-gatsbys-head-api-with-mdx/">How to use Gatsby’s Head API with MDX</a>,” Paul Scanlon</li>
<li>“<a href="https://www.netlify.com/blog/2021/03/08/incremental-static-regeneration-its-benefits-and-its-flaws">Incremental Static Regeneration: Its Benefits and Its Flaws</a>,” Cassidy Williams</li>
</ul>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Paul Scanlon)</author>
      <enclosure
        url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/34359e66-8433-419e-9ea1-ab4c3becac46/new-gatsby-2022.jpg"
        length="0" type="image/jpg"/>
    </item>
    <item>
      <title><![CDATA[Building A Retro Draggable Web Component With Lit]]></title>
      <link>https://smashingmagazine.com/2022/09/building-retro-draggable-web-component-using-lit/
      </link>
      <guid>https://smashingmagazine.com/2022/09/building-retro-draggable-web-component-using-lit/
      </guid>
      <pubDate>Mon, 19 Sep 2022 18:00:00 GMT</pubDate>
      <description>
        <![CDATA[In today’s article, Andrico Karoulla explains how to create a cool draggable effect by listening to the drag events and writing some custom logic inside the handlers.]]></description>
      <content:encoded><![CDATA[<p>Back in the 90s, my first operating system was Windows. Now in the 2020s, I work primarily on building web applications using the browser. Over the years, the browser’s transformed into a wonderful and powerful tool that supports a wide world of rich applications. Many of these <a href="https://web.dev/ps-on-the-web/">applications</a>, with their complex interfaces and breadth of capabilities, would make even the hardiest turn-of-the-millennium programs blush.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4defce19-0fed-4347-a75d-cb2061af57db/social-media-image-draggable.png" /></p>
<p>Native browser features like web components are being adopted and used across the web by multinational companies and individual developers alike.</p>
<blockquote><p>In case you’re wondering if anyone is using Web Components:<br /><br />- GitHub<br />- YouTube<br />- Twitter (embedded tweets)<br />- SalesForce<br />- ING<br />- Photoshop web app<br />- Chrome devtools<br />- the complete Firefox UI<br />- Apple Music web client</p>— Danny Moerkerke (@dannymoerkerke) <a href="https://twitter.com/dannymoerkerke/status/1555682991413907456?ref_src=twsrc%5Etfw">August 5, 2022</a></blockquote>



<p>So, why not embrace the technology of the present by paying homage to the interfaces of the past?</p>
<p>In this article, I hope to teach you just that by replicating the iconic <em>broken window</em> effect.</p>
<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/35ca0325-f2c6-46f8-a707-fbb2ef38bdb8/1-creating-draggable-gifs-web-components-lit.gif"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/35ca0325-f2c6-46f8-a707-fbb2ef38bdb8/1-creating-draggable-gifs-web-components-lit.gif" /></a>

<p>We’ll be using <a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components">web components</a>, the browser’s native component model, to build out this interface. We’ll also use the <a href="https://lit.dev/">Lit</a> library, which simplifies the native web component APIs.</p>
<p>A lot of the concepts I talk about here are lessons I’ve learnt from building <a href="https://a2000.netlify.app/">A2k</a>, a UI library designed to help you create retro UI with modern tooling.</p>
<p>In this article, we’ll cover:</p>
<ul>
<li>the basics of creating web components using Lit;</li>
<li>how to easily customize your component’s behavior using Lit’s built-in tools;</li>
<li>how to encapsulate reusable functionality;</li>
<li>how to dispatch and respond to events using advanced data flow methods.</li>
</ul>
<p>It’s worth knowing your core HTML, CSS, and some basic JavaScript to follow along with this tutorial, but no framework-specific knowledge is required.</p>
Getting Started
<p>You can follow allow along in the browser using <a href="http://githubblitz.com/andrico1234/draggable-window-smashing-article">StackBlitz</a>. </p>
<p>Once StackBlitz finishes setting up, you should see the following in the browser window:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5877c236-84f9-4a6a-a0c1-29c9ce4b5acb/2-creating-draggable-gifs-web-components-lit.png" /></p>
<p><strong>Note:</strong> <em>If you don’t want to use StackBlitz, you can clone the <a href="https://www.notion.so/Two-object-pronouns-23d61b1fcb9a487bad6540e94b7e058d">repo</a> and run the instructions inside of the <a href="http://README.md"><code>README.md</code></a> file. You can also use the <a href="https://marketplace.visualstudio.com/items?itemName=runem.lit-plugin">Lit VSCode</a> for syntax highlighting and features.</em></p>
<p>Next, open up the project in your editor of choice. Let’s have a quick look to see what our starter code looks like.</p>
<h3><code>index.html</code></h3>
<p>We have a very barebones HTML file that does little more than import some CSS and a JavaScript file.</p>
<p>You may have also spotted a brand new element, the <code>a2k-window</code> element. You won’t have seen this before because this is the custom element we’ll be building ourselves. Since we haven’t created and registered this component yet, the browser will fall back to display the inner HTML content.</p>
<h3>The Various <code>.js</code> Files</h3>
<p>I’ve added a little boilerplate for some of the components and functions, but we’ll fill in the gaps over the course of this article(s). I’ve imported all of the necessary first and third-party code we’ll use throughout this article.</p>
<h3>Bonus: Fonts</h3>
<p>I’ve also added some retro fonts for fun! It’s a wonderful MS-2000-inspired font created by <a href="https://www.notion.so/Smashing-Article-Draft-cd2335ccbe004b84a177c85d9ef966bd">Lou</a>. You can download it and use it in your own projects if you’re looking to inject a little millennium flavor into your designs.</p>
Part 1: Building Our First Web Component
<h3>Writing Our Markup</h3>
<p>The first thing we want to do is get a convincing-looking window element going. With just a few lines of code, we’ll have the following.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8ef15616-ec29-43bb-9680-fe4e09860065/3-creating-draggable-gifs-web-components-lit.png" /></p>
<p>Let’s start by jumping into our <code>a2k-window.js</code> file. We’ll write a little boilerplate to get our component up and running.</p>
<p>We’ll need to define a class that extends Lit’s <code>LitElement</code> base class. By extending from <code>LitElement</code>, our class gets the ability to manage reactive states and properties. We also need to implement a <code>render</code> function on the class that returns the markup to render.</p>
<p>A really basic implementation of a class will look like this:</p>
<pre><code>class A2kWindow extends LitElement {
  render() {
    return html`
      &lt;div id="window"&gt;
        &lt;slot&gt;&lt;/slot&gt;
      &lt;/div&gt;
    `;
  }
}
</code></pre>

<p>There are two things worth noting:</p>
<ul>
<li>We can specify an element ID which is then encapsulated within the web component. Just like the top-level document, duplicate IDs are not allowed within the same component, but other web components or external DOM elements can use the same ID.</li>
<li>The <code>slot</code> element is a handy tool that can render custom markup passed down from the parent. For those familiar with React, we can liken it to a React portal that renders where you set the <code>children</code> prop. There’s more that you can do with it, but that’s beyond the scope of this article.</li>
</ul>
<p>Writing the above doesn’t make our web component available in our HTML. We’ll need to define a new custom element to tell the browser to associate this definition with the <code>a2k-window</code> tag name. Underneath our component class, write the following code:</p>
<pre><code>customElements.define("a2k-window", A2kWindow);
</code></pre>

<p>Now let’s jump back to our browser. We should expect to see our new component render to the page, but… </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a5f34246-fe74-4d8b-bf29-fa2b20516392/4-creating-draggable-gifs-web-components-lit.png" /></p>
<p>Even though our component has been rendered, we see some plain unstyled content. Let’s go ahead and add some more HTML and CSS:</p>
<pre><code>class A2kWindow extends LitElement {
  static styles = css`
    :host {
      font-family: var(--font-primary);
    }

    #window {
      width: min(80ch, 100%);
    }

        #panel {
      border: var(--border-width) solid var(--color-gray-400);
      box-shadow: 2px 2px var(--color-black);
      background-color: var(--color-gray-500);
    }

    #draggable {
      background: linear-gradient(
        90deg,
        var(--color-blue-100) 0%,
        var(--color-blue-700) 100%
      );
      user-select: none;
    }

    #draggable p {
      font-weight: bold;
      margin: 0;
      color: white;
      padding: 2px 8px;
    }

    [data-dragging="idle"] {
      cursor: grab;
    }

    [data-dragging="dragging"] {
      cursor: grabbing;
    }
  `;

  render() {
    return html`
      &lt;div id="window"&gt;
        &lt;div id="panel"&gt;
          &lt;slot&gt;&lt;/slot&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    `;
  }
}
</code></pre>

<p>There are a couple of things worth noting in the above code:</p>
<ul>
<li>We define the styles scoped to this custom element via the <code>static styles</code> property. Due to how styles encapsulation works, our component won’t be affected by any external styles. However, we can use the CSS variables we’ve added in our <code>styles.css</code> to apply styles from an external source.</li>
<li>I’ve added some styles for DOM elements that don’t exist just yet, but we’ll add them soon.</li>
</ul>
<p><strong>A note on styles:</strong> <em>Styling in Shadow DOM is a topic too large to delve into in this article. To learn more about styling in Shadow DOM, you can refer to the <a href="https://lit.dev/docs/components/styles/#shadow-dom">Lit documentation</a>.</em></p>
<p>If you refresh, you should see the following:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1e650e33-e9a3-4e87-a120-000361792da0/5-creating-draggable-gifs-web-components-lit.png" /></p>
<p>Which is starting to look more like our Windows-inspired web component. 🙌</p>
<p><strong>Pro tip:</strong> <em>If you’re not seeing the browser apply the changes you’re expecting. Open up the browser’s dev tools. The browser might have some handy error messages to help you work out where things are failing.</em></p>
<h3>Making Our Web Component Customizable</h3>
<p>Our next step is to create the heading for our window component. A core feature of web components is HTML element properties. Instead of hardcoding the text content of our window’s heading, we can make it a property input on the element. We can use Lit to make our properties <a href="https://lit.dev/docs/components/properties/"><em>reactive</em></a>, which triggers lifecycle methods when changed.</p>
<p>To do this, we need to do three things:</p>
<ol>
<li>Define the reactive properties,</li>
<li>Assign a default value,</li>
<li>Render the value of the reactive property to the DOM.</li>
</ol>
<p>First off, we need to specify the reactive properties we want to enable for our component:</p>
<pre><code>class A2kWindow extends LitElement {
  static styles = css`...`;

  static properties = {
    heading: {},
  };

  render() {...}
}
</code></pre>

<p>We’ll do this by specifying the static <code>properties</code> object on our class. We then specify the names of the properties we want, along with some options passed through as an object. Lit’s default options handle string property conversion by default. This means we don’t need to apply any options and can leave <code>heading</code> as an empty object.</p>
<p>Our next step is to assign a default value. We’ll do this within the component’s constructor method.</p>
<pre><code>class A2kWindow extends LitElement {
  static styles = css`...`;

  static properties = {...};

    constructor() {
    super();

    this.heading = "Building Retro Web Components with Lit";
  }

  render() {...}
}
</code></pre>

<p><strong>Note:</strong> <em>Don’t forget to call <code>super()</code>!</em></p>
<p>And finally, let’s add a little more markup and render the value to the DOM:</p>
<pre><code>class A2kWindow extends LitElement {
  static styles = css`...`;

  static properties = {...};

    constructor() {...}

    render() {
    return html`
      &lt;div id="window"&gt;
        &lt;div id="panel"&gt;
          &lt;div id="draggable"&gt;
            &lt;p&gt;${this.heading}&lt;/p&gt;
          &lt;/div&gt;
          &lt;slot&gt;&lt;/slot&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    `;
  }
}
</code></pre>

<p>With that done, let’s jump back to our browser and see how everything looks:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bad9523d-a9f3-44d0-9901-89634263cb37/6-creating-draggable-gifs-web-components-lit.png" /></p>
<p>Very convincing! 🙌</p>
<h3>Bonus</h3>
<p>Apply a custom heading to the <code>a2k-element</code> from the <code>index.html</code> file.</p>
<h3>Brief breather 😮‍💨</h3>
<p>It’s wonderful to see how easily we can build UI from 1998 with modern primitives in 2022!</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/61ad2565-326c-4769-8631-19e41ba3b2a3/7-creating-draggable-gifs-web-components-lit.png" /></p>
<p>And we haven’t even gotten to the fun parts yet! In the next sections, we’ll look into using some of Lit’s intermediate concepts to create drag functionality in a way that’s reusable across custom components.</p>
Part 2: Making Our Component Draggable
<p>This is where things get a little tricky! We’re moving into some intermediate Lit territory, so don’t sweat if not everything makes perfect sense.</p>
<p>Before we start writing the code, let’s have a quick rundown of the concepts we’ll be playing with.</p>
<h3>Directives</h3>
<p>As you’ve seen, when writing our HTML templates in Lit, we write them inside the <code>html</code> literals tag. This allows us to use JavaScript to alter the behavior of our templates. We can do things like evaluating expressions:</p>
<pre><code>html`&lt;p&gt;${this.heading}&lt;/p&gt;`
</code></pre>

<p>We can return specific templates under certain conditions:</p>
<pre><code>html`&lt;p&gt;
${this.heading ? this.heading : “Please enter a heading”}
&lt;/p&gt;`
</code></pre>

<p>There will be times when we’ll need to step out of the normal rendering flow of Lit’s rendering system. You might want to render something at a later time or extend Lit’s template functionality. This can be achieved through the use of <em>directives.</em> Lit has a handful of built-in directives.</p>
<p>We’ll use the <code>styleMap</code> directive, which allows us to apply styles directly to an element via a JavaScript object. The object is then transformed into the element’s inline styles. This will come in handy as we adjust the position of our window element since the element’s position is managed by CSS properties. In short, <code>styleMap</code> turns:</p>
<div>
<pre><code>const top = this.top // a variable we could get from our class, a function, or anywhere

styleMap({
    position: "absolute",
    left: "100px",
    top
})
</code></pre>
</div>

<p>into </p>
<pre><code>"position: absolute; top: 50px; left: 100px;"
</code></pre>

<p>Using <code>styleMap</code> makes it easy to use variables to change styles.</p>
<h3>Controllers</h3>
<p>Lit has a number of handy ways to compose complex components from smaller, reusable pieces of code. </p>
<p>One way is to build components from lots of smaller components. For example, an icon button that looks like this:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/13809bf9-f0ea-4a93-8b29-054079ce3ebf/8-creating-draggable-gifs-web-components-lit.png" /></p>
<p>The markup may have the following markup:</p>
<pre><code>class IconButton extends LitElement {
    render() {
        return html`
            &lt;a2k-button&gt;
                &lt;a2k-icon icon="windows-icon"&gt;&lt;/a2k-icon&gt;
                &lt;slot&gt;&lt;/slot&gt;
            &lt;/a2k-button&gt;
        `
    }
}
</code></pre>

<p>In the above example, we’re composing our <code>IconButton</code> out of two pre-existing web components.</p>
<p>Another way to compose complex logic is by encapsulating specific state and behavior into a class. Doing so allows us to decouple specific behaviors from our markup. This can be done through the use of controllers, a cross-framework way to share logic that can trigger re-renders in a component. They also have the benefit of hooking into the component’s lifecycle.</p>
<p><strong>Note:</strong> <em>Since controllers are</em> <strong><em>cross-framework,</em></strong> <em>they can be used in React and Vue with small adapters.</em></p>
<p>With controllers, we can do some cool things, like managing the drag state and position of its host component. Interestingly enough, that’s exactly what we plan to do!</p>
<p>While a controller might sound complicated, if we analyse its skeleton, we’ll be able to make sense of what it is and what it does.</p>
<pre><code>export class DragController {
    x = 0;
    y = 0;
    state = "idle"

    styles = {...}

  constructor(host, options) {
    this.host = host;
    this.host.addController(this);
  }

  hostDisconnected() {...}

  onDragStart = (pointer, ev) =&gt; {...};

  onDrag = (_, pointers) =&gt; {...};
}
</code></pre>

<p>We begin by initialising our controller by registering it with the host component and storing a reference to the host. In our case, the host element will be our <code>a2k-window</code> component.</p>
<p>Once we’ve done that, we can hook into our host’s lifecycle methods, like <code>hostConnected</code>, <code>hostUpdate</code>, <code>hostUpdated</code>, <code>hostDisconnected</code>, and so on, to run drag-specific logic. In our case, we’ll only need to hook into <code>hostDisconnected</code> for clean-up purposes.</p>
<p>Finally, we can add our own methods and properties to our controller that will be available to our host component. Here we’re defining a few private methods that will get called during the drag actions. We’re also defining a few properties that our host element can access.</p>
<p>When <code>onDrag</code> and <code>onDragStart</code> functions are invoked, we update our <code>styles</code> property and request that our host component re-renders. Since our host component turns this style object into inline CSS (via the <code>styleMap</code> directive), our component will apply the new styles.</p>
<p>If this sounds complicated, hopefully, this flowchart better visualises the process.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b5d4a690-2dfd-459b-badc-0a420d69fe5e/9-creating-draggable-gifs-web-components-lit.png" /></p>
<h3>Writing Our Controller</h3>
<p>Arguably the most technical part of the article, let’s wire up our controller!</p>
<p>Let’s begin by completing the initialisation logic of our controller:</p>
<pre><code>export class DragController {
    x = 0;
    y = 0;
    state = "idle";

  styles = {
    position: "absolute",
    top: "0px",
    left: "0px",
  };

  constructor(host, options) {
        const {
      getContainerEl = () =&gt; null,
      getDraggableEl = () =&gt; Promise.resolve(null),
    } = options;

    this.host = host;
    this.host.addController(this);
    this.getContainerEl = getContainerEl;

    getDraggableEl().then((el) =&gt; {
      if (!el) return;

      this.draggableEl = el;
      this.init();
    });
  }

    init() {...}

  hostDisconnected() {...}

  onDragStart = (pointer) =&gt; {...};

  onDrag = (_, pointers) =&gt; {...};
}
</code></pre>

<p>The main difference between this snippet and the skeleton from earlier is the addition of the options argument. We allow our host element to provide callbacks that give us access to two different elements: the container and the draggable element. We’ll use these elements later on to calculate the correct position styles.</p>
<p>For reasons I’ll touch on later, <code>getDraggableEl</code> is a promise that returns the draggable element. Once the promise resolves, we store the element on the controller instance, and we’ll fire off the initialize function, which attaches the drag event listeners to the draggable element.</p>
<pre><code>init() {
  this.pointerTracker = new PointerTracker(this.draggableEl, {
    start: (...args) =&gt; {
      this.onDragStart(...args);
      this.state = "dragging";
      this.host.requestUpdate();
      return true;
    },
    move: (...args) =&gt; {
      this.onDrag(...args);
    },
    end: (...args) =&gt; {
      this.state = "idle";
      this.host.requestUpdate();
    },
  });
}
</code></pre>

<p>We’ll use the <code>PointerTracker</code> library to track pointer events easily. It’s much more pleasant to use this library than to write the cross-browser, cross-input mode logic to support pointer events.</p>
<p><code>PointerTracker</code> requires two arguments, <code>draggableEl</code>, and an object of functions that act as the event handlers for the dragging events:</p>
<ul>
<li><code>start</code>: gets invoked when the pointer is pressed down on <code>draggableEl</code>;</li>
<li><code>move</code>: gets invoked when dragging <code>draggableEl</code> around;</li>
<li><code>end</code>: gets invoked when we release the pointer from <code>draggableEl</code>.</li>
</ul>
<p>For each, we’re either updating the dragging <code>state</code>, invoking our controller’s callback, or both. Our host element will use the <code>state</code> property as an element attribute, so we trigger <code>this.host.requestUpdate</code> to ensure the host re-renders. </p>
<p>Like with the <code>draggableEl</code>, we assign a reference to the <code>pointerTracker</code> instance to our controller to use later.</p>
<p>Next, let’s start adding logic to the class’s functions. We’ll start with the <code>onDragStart</code> function:</p>
<pre><code>onDragStart = (pointer, ev) =&gt; {
  this.cursorPositionX = Math.floor(pointer.pageX);
  this.cursorPositionY = Math.floor(pointer.pageY);
};
</code></pre>

<p>Here we’re storing the cursor’s current position, which we’ll use in the <code>onDrag</code> function.</p>
<pre><code>onDrag = (_, pointers) =&gt; {
    this.calculateWindowPosition(pointers[0]);
};
</code></pre>

<p>When the <code>onDrag</code> function is called, it’s provided a list of the active pointers. Since we’ll only cater for one window being dragged at a time, we can safely just access the first item in the array. We’ll then send that through to a function that determines the new position of the element. Strap in because it’s a little wild:</p>
<div>
<pre><code>calculateWindowPosition(pointer) {
  const el = this.draggableEl;
  const containerEl = this.getContainerEl();

  if (!el || !containerEl) return;

  const oldX = this.x;
  const oldY = this.y;

  //JavaScript’s floats can be weird, so we’re flooring these to integers.
  const parsedTop = Math.floor(pointer.pageX);
  const parsedLeft = Math.floor(pointer.pageY);

  //JavaScript’s floats can be weird, so we’re flooring these to integers.
  const cursorPositionX = Math.floor(pointer.pageX);
  const cursorPositionY = Math.floor(pointer.pageY);

  const hasCursorMoved =
    cursorPositionX !== this.cursorPositionX ||
    cursorPositionY !== this.cursorPositionY;

  // We only need to calculate the window position if the cursor position has changed.
  if (hasCursorMoved) {
    const { bottom, height } = el.getBoundingClientRect();
    const { right, width } = containerEl.getBoundingClientRect();

    // The difference between the cursor’s previous position and its current position.
    const xDelta = cursorPositionX - this.cursorPositionX;
    const yDelta = cursorPositionY - this.cursorPositionY;

    // The happy path - if the element doesn’t attempt to go beyond the browser’s boundaries.
    this.x = oldX + xDelta;
    this.y = oldY + yDelta;

    const outOfBoundsTop = this.y &lt; 0;
    const outOfBoundsLeft = this.x &lt; 0;
    const outOfBoundsBottom = bottom + yDelta &gt; window.innerHeight;
    const outOfBoundsRight = right + xDelta &gt;= window.innerWidth;

    const isOutOfBounds =
      outOfBoundsBottom ||
      outOfBoundsLeft ||
      outOfBoundsRight ||
      outOfBoundsTop;

    // Set the cursor positions for the next time this function is invoked.
    this.cursorPositionX = cursorPositionX;
    this.cursorPositionY = cursorPositionY;

    // Otherwise, we force the window to remain within the browser window.
    if (outOfBoundsTop) {
      this.y = 0;
    } else if (outOfBoundsLeft) {
      this.x = 0;
    } else if (outOfBoundsBottom) {
      this.y = window.innerHeight - height;
    } else if (outOfBoundsRight) {
      this.x = Math.floor(window.innerWidth - width);
    }

    this.updateElPosition();
    // We trigger a lifecycle update.
    this.host.requestUpdate();
  }
}

updateElPosition(x, y) {
    this.styles.transform = <code>translate(${this.x}px, ${this.y}px)</code>;
}
</code></pre>
</div>

<p>It’s certainly not the prettiest code, so I’ve tried my best to annotate the code to clarify what’s going on.</p>
<p>To summarize:</p>
<ul>
<li>When the function gets invoked, we check to see that both the <code>draggableEl</code> and <code>containerEl</code> are available.</li>
<li>We then access the element’s position and the cursor’s position.</li>
<li>We then calculate whether the cursor’s moved. If it hasn’t, we do nothing.</li>
<li>We set the new <code>x</code> and <code>y</code> position of the element.</li>
<li>We determine whether or not the element tries to break the window’s bounds.<ul>
<li>If it does, then we update the <code>x</code> or <code>y</code> position to bring the element back within the confines of the window.</li>
</ul>
</li>
<li>We update <code>this.styles</code> with the new <code>x</code> and <code>y</code> values.</li>
<li>We then trigger the host’s update lifecycle function, which causes our element to apply the styles.</li>
</ul>
<p>Review the function several times to ensure you’re confident about what it does. There’s a lot going on, so don’t sweat if it doesn’t soak in straight away.</p>
<p>The <code>updateElPosition</code> function is a small helper in the class to apply the styles to the <code>styles</code> property.</p>
<p>We also need to add a little clean-up to ensure that we stop tracking if our component happens to disconnect while being dragged.</p>
<pre><code>hostDisconnected() {
  if (this.pointerTracker) {
    this.pointerTracker.stop();
  }
}
</code></pre>

<p>Finally, we need to jump back to our <code>a2k-window.js</code> file and do three things:</p>
<ul>
<li>initialize the controller,</li>
<li>apply the position styles,</li>
<li>track the drag state.</li>
</ul>
<p>Here’s what these changes look like:</p>
<pre><code>class A2kWindow extends LitElement {
  static styles = css`...`;

  static properties = {...};

  constructor() {...}

  drag = new DragController(this, {
    getContainerEl: () =&gt; this.shadowRoot.querySelector("#window"),
        getDraggableEl: () =&gt; this.getDraggableEl(),
  });

    async getDraggableEl() {
        await this.updateComplete;
        return this.shadowRoot.querySelector("#draggable");
    }

  render() {
    return html`
      &lt;div id="window" style=${styleMap(this.drag.styles)}&gt;
        &lt;div id="panel"&gt;
          &lt;div id="draggable" data-dragging=${this.drag.state}&gt;
            &lt;p&gt;${this.heading}&lt;/p&gt;
          &lt;/div&gt;
          &lt;slot&gt;&lt;/slot&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    `;
  }
}
</code></pre>

<p>We’re using <code>this.shadowRoot.querySelector(selector)</code> to query our shadow DOM. This allows us controller to access DOM elements across shadow DOM boundaries.</p>
<p>Because we plan to dispatch events from our dragging element, we should wait until after rendering has completed, hence the <code>await this.updateComplete</code> statement.</p>
<p>Once this is all completed, you should be able to jump back into the browser and drag your component around, like so:</p>
<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/589f0abc-febe-4746-93a6-c21eef0dcdc4/10-creating-draggable-gifs-web-components-lit.gif"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/589f0abc-febe-4746-93a6-c21eef0dcdc4/10-creating-draggable-gifs-web-components-lit.gif" /></a>(<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/589f0abc-febe-4746-93a6-c21eef0dcdc4/10-creating-draggable-gifs-web-components-lit.gif">Large preview</a>)



Part 3: Creating The <em>Broken Window</em> Effect
<p>Our component is pretty self-contained, which is great. We could use this window element anywhere on our site and drag it without writing any additional code.</p>
<p>And since we’ve created a reusable controller to handle all of the drag functionality, we can add that behavior to future components like a desktop icon.</p>
<p>Now let’s start building out that cool <em>broken window</em> effect when we drag our component.</p>
<p>We could bake this behavior into the window element itself, but it’s not really useful outside of a specific use case, i.e., making a cool visual effect. Instead, we can get our drag controller to emit an event whenever the <code>onDrag</code> callback is invoked. This means that anyone using our component can listen to the drag event and do whatever they want.</p>
<p>To create the broken window effect, we’ll need to do two things:</p>
<ul>
<li>dispatch and listen to the drag event;</li>
<li>add the broken window element to the DOM.</li>
</ul>
<h3>Dispatching and listening to events in Lit</h3>
<p>Lit has a handful of different ways to handle events. You can add event listeners directly within your templates, like so:</p>
<pre><code>handleClick() {
    console.log("Clicked");
}

render() {
    html`&lt;button @click="${this.handleClick}"&gt;Click me!&lt;/button&gt;`
}
</code></pre>

<p>We’re defining the function that we want to fire on button click and passing it through to the element which will be invoked on click. This is a perfectly viable option, and it’s the approach I’d use if the element and callback are located close together.</p>
<p>As I mentioned earlier, we won’t be baking the <em>broken window</em> behavior into the component, as passing down event handlers through a number of different web components would become cumbersome. Instead, we can leverage the native window event object to have a component dispatch an event and have any of its ancestors listen and respond. Have a look at the following example:</p>
<pre><code>// Event Listener
class SpecialListener extends LitElement {
    constructor() {
        super()

        this.specialLevel = '';
        this.addEventListener('special-click', this.handleSpecialClick)
    }

    handleSpecialClick(e) {
        this.specialLevel = e.detail.specialLevel;
    }

    render() {
        html`&lt;div&gt;
            &lt;p&gt;${this.specialLevel}&lt;/p&gt;
            &lt;special-button&gt;
        &lt;/div&gt;`
    }
}

// Event Dispatcher
class SpecialButton extends LitElement {
    handleClick() {
        const event = new CustomEvent("special-click", {
      bubbles: true,
      composed: true,
      detail: {
                specialLevel: 'high',
            },
    });

        this.dispatchEvent(event);
    }

    render() {
        html`&lt;button @click="${this.handleClick}"&gt;Click me!&lt;/button&gt;`
    }
}
</code></pre>

<p><strong>Note:</strong> <em>Don’t forget to check out the MDN resources if you need a refresher on native <a href="https://developer.mozilla.org/en-US/docs/Web/Events">DOM Events</a>.</em></p>
<p>We have two components, a listener and a dispatcher. The listener is a component that adds an event listener to itself. It listens to the <code>special-click</code> event and outputs the value the event sends through.</p>
<p>Our second component, <code>SpecialButton</code>, is a descendant of <code>SpecialListener</code>. It’s a component that dispatches an event on click. The code inside of the <code>handleClick</code> method is interesting, so let’s understand what’s going on here:</p>
<ul>
<li>We create an event object by creating an instance of <code>CustomEvent</code>.</li>
<li>The first argument of <code>CustomEvent</code> is the name of the event we want to dispatch. In our case, it’s <code>special-click</code>.</li>
<li>The second argument of <code>CustomEvent</code> is the options argument. Here we’re setting three options: <code>bubbles</code>, <code>composed</code>, and <code>detail</code>.</li>
<li>Setting <code>bubbles</code> to true allows our event to flow up the DOM tree to the component’s ancestors.</li>
<li>Setting <code>composed</code> to true allows our event to propagate outside our element’s shadow root.</li>
<li>Finally, we dispatch our event by firing off <code>this.dispatchEvent(event)</code>.</li>
</ul>
<p>Once this happens, the listener will react to the event by invoking the <code>handleSpecialClick</code> callback.</p>
<p>Let’s go ahead and dispatch events from our drag controller. We’ll want to create an instance of <code>CustomEvent</code> with an event name of <code>window-drag</code>. We’ll want to set the <code>composed</code> and <code>bubbles</code> options to true.</p>
<p>We’ll then create the <code>detail</code> option with a single property: <code>containerEl</code>. Finally, we’ll want to dispatch the event.</p>
<p>Go ahead and try to implement this logic inside of the <code>onDrag</code> function.</p>
<p><strong>Hint:</strong> <em>We’ll want to dispatch the event from our dragging element. Don’t forget that we saved a reference to the element on the controller’s instance.</em></p>
<p>Before I go ahead and spoil the answer, let’s get our listener set up. That way, we’ll be able to determine whether we’ve wired up our event dispatcher correctly.</p>
<p>Jump into the <code>script.js</code> file and add the following lines:</p>
<pre><code>function onWindowDrag() {
    console.log('dragging');
}

window.addEventListener('window-drag', onWindowDrag);</code></pre>

<p>You can now jump into your browser, drag your element, and view the logs in the console. </p>
<p>You can check your solution against mine below:</p>
<pre><code>onDrag = (_, pointers) =&gt; {
  this.calculateWindowPosition(pointers[0]);

    const event = new CustomEvent("window-drag", {
      bubbles: true,
      composed: true,
      detail: {
        containerEl: this.getContainerEl(),
      },
    });

  this.draggableEl.dispatchEvent(event);
};
</code></pre>

<p>Great! The only thing left to do is add the broken window element to the DOM every time we receive a drag event.</p>
<p>We’ll need to create a new broken window component that looks like the following:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1bbf56a9-99c8-4c93-8def-e8a4c3c28cba/11-creating-draggable-gifs-web-components-lit.png" /></p>
<p>Our broken window should look a little more than our regular window without any content. The markup for the component is going to be very straightforward. We’ll have nested <code>divs</code>, each responsible for different aspects of the element:</p>
<ul>
<li>The outer-most <code>div</code> will be responsible for positioning.</li>
<li>The middle <code>div</code> will be responsible for appearance.</li>
<li>The inner-most <code>div</code> will be responsible for width and height.</li>
</ul>
<p>Here’s the entire code for our broken window. Hopefully, by this point, nothing in the snippet below should be new to you:</p>
<pre><code>export class BrokenWindow extends LitElement {
  static properties = {
    height: {},
    width: {},
    top: {},
    left: {},
  };

  static styles = css`
    #outer-container {
      position: absolute;
      display: flex;
    }

    #middle-container {
      border: var(--border-width) solid var(--color-gray-400);
      box-shadow: 2px 2px var(--color-black);
      background-color: var(--color-gray-500);
    }
  `;

  render() {
    return html`
      &lt;div
        style=${styleMap({
          transform: `translate(${this.left}px, ${this.top}px)`,
        })}
        id="outer-container"
      &gt;
        &lt;div id="middle-container"&gt;
          &lt;div
            style=${styleMap({
              width: `${this.width}px`,
              height: `${this.height}px`,
            })}
          &gt;&lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    `;
  }
}

window.customElements.define("a2k-broken-window", BrokenWindow);
</code></pre>

<p>Once you’ve created the component, we can check that it’s working correctly by adding the following to our <code>index.html</code> file:</p>
<div>
<pre><code>&lt;a2k-broken-window top="100" left="100" width="100" height="100"&gt;&lt;/a2k-broken-window&gt;
</code></pre>
</div>

<p>If you see the following in your browser, then congratulations! Your broken window is working perfectly.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bd8774e3-6cd4-4e9b-ac1a-fae386468caf/12-creating-draggable-gifs-web-components-lit.png" /></p>
<h3>Bonus</h3>
<p>You may have noticed that both our <code>a2k-window</code> component and our <code>a2k-broken-window</code> component share a lot of the same styles. We can leverage one of Lit’s composition techniques to abstract out the repeated markup and styles into a separate component, <code>a2k-panel</code>. Once we’ve done that, we can reuse <code>a2k-panel</code> in our window components.</p>
<p>I won’t give away the answer here, but if you want to give it a shot, the <a href="https://lit.dev/docs/composition/component-composition/">Lit documentation</a> will help if you get stuck.</p>
<h3>Rendering Our Broken Window On Drag</h3>
<p>We’re at the last stop on our retro web component journey.</p>
<p>To create our broken window effect, we only need to do a handful of things:</p>
<ul>
<li>Listen to the <code>window-drag</code> event;</li>
<li>Get access to the container’s styles;</li>
<li>Create a new <code>a2k-broken-window</code> element;</li>
<li>Set the <code>top</code>, <code>left</code>, <code>height</code>, <code>width</code> attributes to our new element;</li>
<li>Insert the broken window into the DOM.</li>
</ul>
<p>Let’s jump into our <code>script.js</code> file:</p>
<pre><code>function onWindowDrag(e) {
    ...
}

window.addEventListener("window-drag", onWindowDrag);
</code></pre>

<p>We’re listening to the <code>window-drag</code> event and setting up a callback that receives the event object when invoked.</p>
<pre><code>function onWindowDrag(e) {
    const { containerEl } = e.detail;
  const { width, top, left, height } = containerEl.getBoundingClientRect();
}

window.addEventListener("window-drag", onWindowDrag);
</code></pre>

<p>The above bit of code is doing two things:</p>
<ul>
<li>Accessing the <code>containerEl</code> from the detail object.</li>
<li>We’re then using the <code>containerEl</code>’s <code>getBoundingClientRect</code> function to get the element’s CSS properties.</li>
</ul>
<pre><code>function onWindowDrag(e) {
  const { containerEl } = e.detail;
  const { width, top, left, height } = containerEl.getBoundingClientRect();

  const newEl = document.createElement("a2k-broken-window");

  newEl.setAttribute("width", width);
  newEl.setAttribute("top", top);
  newEl.setAttribute("left", left);
  newEl.setAttribute("height", height);
}
</code></pre>

<p>Here we’re imperatively creating our broken window element and applying our styles. For anyone familiar with writing HTML with JavaScript (or even jQuery), this shouldn’t be a foreign concept. Now we’ll add our component to the DOM.</p>
<p>We need to be very specific about where we want to place the element. We can’t just append it to the body; otherwise, it’ll cover our main window element.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3f73e50d-7cba-48c5-baaf-01c1d582afdc/13-creating-draggable-gifs-web-components-lit.png" /></p>
<p>We also can’t write it as the first element of <code>body</code>; otherwise, the oldest window will appear above the newer windows.</p>
<p>One solution is to add our component into the DOM just before our container element. All the JavaScript devs out there might be eager to write their own script to manage this but luckily the window has the perfect function for us:</p>
<pre><code>containerEl.insertAdjacentElement("beforebegin", newEl);
</code></pre>

<p>The above is a very handy function that gives us control over where an element gets added. This script inserts our new element before our container element.</p>
<p>Our finished script looks like this:</p>
<pre><code>function onWindowDrag(e) {
  const { containerEl } = e.detail;
  const { width, top, left, height } = containerEl.getBoundingClientRect();

  const newEl = document.createElement("a2k-broken-window");

  newEl.setAttribute("width", width);
  newEl.setAttribute("top", top);
  newEl.setAttribute("left", left);
  newEl.setAttribute("height", height);

  containerEl.insertAdjacentElement("beforebegin", newEl);
}

window.addEventListener("window-drag", onWindowDrag);
</code></pre>

<p>Jump back to the browser and start dragging your window. You should now be seeing your cool window effect!</p>
<p>If your script isn’t working, then don’t worry! Open up your console and see if you can debug the problem(s). You can even run through the code snippets above and ensure everything’s been copied correctly.</p>
<h3>Bonus</h3>
<p>We’ve made a cool draggable effect by listening to the drag events and writing some custom logic inside the handlers.</p>
<p>But Microsoft did this 20 years ago. I’d love to see what cool effects the creative Smashing community can whip up instead! Here’s me having a little fun:</p>
<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/38744974-5740-4a6b-abae-e2db3d069e05/rainbow-drag.gif"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/38744974-5740-4a6b-abae-e2db3d069e05/rainbow-drag.gif" /></a>(<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/38744974-5740-4a6b-abae-e2db3d069e05/rainbow-drag.gif">Large preview</a>)

<p>Please bombard my <a href="https://twitter.com/andricokaroulla">Twitter</a> with what you’ve created using this article. 😄 </p>
Conclusion
<p>Thanks for making it to the end! We covered a lot of ground. I hope it’s helped you get comfortable writing web components with the wonderful Lit library. Most importantly, I hope you’ve enjoyed joining me in building something fun.</p>
<p>The draggable window is part of my web component UI library, <a href="https://a2000.netlify.app/">A2k</a>, which you can use in your own projects. You can give it a whirl by heading over to the <a href="https://github.com/andrico1234/a2k">GitHub repo</a>.</p>
<p>If you’d like to support the project, you can follow me on <a href="https://twitter.com/andricokaroulla">Twitter</a> for updates or leave the repo a GitHub star.</p>
<p><em>I would also love to offer a shout-out to <a href="https://twitter.com/techytacos">Elliott Marquez</a>, Lit Developer at Google, for being a technical reviewer.</em></p>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Andrico Karoulla)</author>
      <enclosure
        url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c1d9b905-3c76-4125-a9b1-91c8db791a06/building-retro-draggable-web-component-using-lit.jpg"
        length="0" type="image/jpg"/>
    </item>
    <item>
      <title><![CDATA[Rethinking Star Ratings For Readers]]></title>
      <link>https://smashingmagazine.com/2022/09/rethinking-star-ratings-readers/</link>
      <guid>https://smashingmagazine.com/2022/09/rethinking-star-ratings-readers/</guid>
      <pubDate>Fri, 16 Sep 2022 10:00:00 GMT</pubDate>
      <description>
        <![CDATA[How can companies change their rating and review systems to better benefit users? Matt Athanasiou shares some steps to improve the experience of reviewing literature and other products &mdash; while also building stronger connections.]]></description>
      <content:encoded><![CDATA[<p>Product ratings and reviews should provide clarity about a product’s qualities. Unfortunately, the nearly ubiquitous star rating scale can foster assumptions; it often lacks clearly defined measurements and fails to encourage written reviews. Context is important, and in this article, we will discuss a solution to improve communication among readers for finding and sharing literature.</p>
The Setting: Ratings And Reviews
<p>There is no shortage of <a href="https://www.theguardian.com/lifeandstyle/2021/apr/21/the-positivity-problem-why-online-star-ratings-are-too-good-to-be-true">articles</a> <a href="https://hbr.org/2019/07/the-problems-with-5-star-rating-systems-and-how-to-fix-them">criticizing</a> <a href="https://bettermarketing.pub/the-fault-in-amazons-stars-why-we-shouldn-t-care-about-star-ratings-2e247643e0b8">star ratings</a>. Many, myself included, have considered reimagining the ubiquitous star rating system. I might have continued ignoring those thoughts, disregarding the inconsistent and often bewildering star ratings that I encountered on apps until my frustrations mounted with Goodreads.</p>
<p>I love literature, and I believe it deserves better than a grading scale that elicits confusion and degrades communication among readers. In this article, we’ll imagine a better one to practice thinking and building more satisfying experiences.</p>
The Inciting Incident: User Dissonance
<p>The rating and review that inspired me to dig deeper into the star rating system can be paraphrased like this:</p>
<blockquote>“The author’s writing is lyrical, and the story is lovely and haunting. However, this is not a genre I typically enjoy. Three stars.”</blockquote>

<p>My brain stuttered when I read this comment. Had I written the review, even if I preferred other genres, I would have rated the book five stars. I expected anyone who said a book was lyrical, lovely, and haunting would feel the same; I expected that the original reviewer and I would share an understanding of what makes a book three stars versus five stars. The rating seemed at odds with the review, and I kept wondering how the original reviewer and I could be on such different pages.</p>
Rising Action: Surmounting Problems
<p>The reason users can have different definitions of star ratings is that the current rating system affords <a href="https://www.goodreads.com/topic/show/17895147-what-is-your-rating-system-on-goodreads">individual interpretations</a>. The system inherently lacks clarity because it is based on glyphs, pictures representing words and ideas, but representations require interpretations. These idiosyncratic definitions can vary based on how someone’s experiences tell them to decipher a depiction — as shown in the aforementioned rating example, <a href="https://www.nngroup.com/articles/icon-usability/">as mentioned by the Nielsen Norman Group</a>, or as seen in the clown face emoji.</p>
<p>The system’s vagueness allows it to be applied to every disparate thing, from books to bras to brooms. Said another way, star ratings are not optimized for any one thing.</p>
<p>In an attempt to prevent individual interpretations, many companies uniquely define what each star category means on their sites. However, with a widely used glyph scale, this puts an unreasonable onus on users to learn the differences between every site to ensure correct usage—the equivalent of learning a homonym with hundreds of definitions. As there are few reasons to think one five-star scale broadly differs from another, companies reusing the system should anticipate that:</p>
<ul>
<li>Individuals have acquired their own understanding of the scale;</li>
<li>Individuals will use their loose translation of the scale across the web.</li>
</ul>
<p>Unfortunately, this creates countless little inconsistencies among user ratings that add up.</p>
<p>You can notice some of these inconsistencies if you scroll through ratings and reviews on a site like Goodreads, where there are a variety of interpretations of each star category. For instance:</p>
<ul>
<li>One-star reviews ranging from DNF (Did Not Finish) to <a href="https://time.com/6078993/goodreads-review-bombing/">extortion scams</a>;</li>
<li>Two-stars reviews ranging from unwilling to read more of the author’s work to being okay;</li>
<li>Three-star reviews ranging from a genre not typically enjoyed to being recommendation worthy.</li>
</ul>
<p>The only way to understand the intention behind most ratings is to read a corresponding review, which brings another problem to light. After gathering and averaging data from a mix of 100 popular classic and modern books on Goodreads — 50 of these are based on <a href="https://www.goodreads.com/blog/show/2306-the-60-most-reviewed-new-books-of-the-past-five-years?">their most reviewed</a> from the past five years — I learned that less than 5% of people who give a star rating write a review. We have to guess what the rest mean.</p>
<p>The inherent impreciseness and guesswork attributed to the system can hinder the overall goal of people using a social literature app. That goal can be summarized from <a href="https://www.goodreads.com/about/us#:~:text=Goodreads%20is%20the%20world’s%20largest,Goodreads%20launched%20in%20January%202007">Goodreads’ own mission statement</a>:</p>
<blockquote>“For readers to find and share books that they can fall in love with.”</blockquote>

<p>Without speaking a common language through standardized rating definitions, readers relying on one another to discuss and discover meaningful literature becomes exceedingly difficult.</p>
Additional Rising Action: Counter Arguments
<p>However, let’s pretend everyone using a site like Goodreads agrees on what each star category means. The problem remains that a rating still tells us nothing about what a reader liked or disliked. Without personalized context, well-defined star ratings mainly act as a filtering system. People can choose to disregard books below a specific number of stars, but even they need to learn more about the books within their read-worthy range to decide what to read. On a social literature site, users should be able to depend on others for insight.</p>
<p>You might argue that algorithms can learn what everyone’s ratings mean and dispense recommendations. Let’s ignore the red flags from Goodreads oddly suggesting that I read <a href="https://www.goodreads.com/book/show/5986375-this-is-water">a collected speech about compassion</a> and <a href="https://www.goodreads.com/book/show/51284872-the-ox">a biography about The Who’s bassist</a>, because I read a superhero novel, and let’s agree that this could work. <a href="https://www.nature.com/articles/s41598-021-87480-9">People do trust algorithms</a> more these days to accomplish tasks, but there is a tradeoff: socialization declines. If you overemphasize a machine finding and sharing books, users have fewer reasons to interact to achieve that goal as well. That is counterproductive to creating a social literature site.</p>
<p>In a world where quarantines are easily imagined possibilities and remote work spreads, the social aspect is becoming increasingly important. <a href="https://www.forbes.com/sites/davidrock/2020/03/27/we-all-need-to-stay-connected-to-one-another-heres-how-science-says-to-do-it/?sh=594f03381665">Studies show us</a> that connection between people is more of a basic need than previously thought, and the improvements mentioned in this article will keep human interaction in mind.</p>
The Climax: A Contextual Solution In Three Parts
<p>What follows is one solution, among many, that addresses the aforementioned issues by observing three guiding principles:</p>
<ul>
<li>Building trust,</li>
<li>Respecting time,</li>
<li>Creating clarity.</li>
</ul>
<p>The focus will be on a social literature app, but you can imagine some of these concepts applied anywhere star ratings are used. Let’s discuss each part of the solution.</p>
<h3>Part One: Building Trust</h3>
<p>The first piece of our solution primarily centers on trust, although it is not novel: readers are required to “Shelve” a book as “Read” before writing a review.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9ae26978-cda4-4e0f-abd4-70816583a5e0/2-rethinking-star-ratings-readers.png" /></p>
<p>This feature is a step toward assuring readers that reviews are genuine. It also builds reviewers’ confidence that they will contribute to a credible conversation. Although users can lie to bypass the gate, honesty has more incentives on an app to find and share literature. A liar has little use for the former, and for the latter, if their intent is to gain attention for a book, they risk getting caught in a discussion that uncovers them, per the upcoming suggestions.</p>
<h3>Part Two: Respecting Time and Creating Clarity</h3>
<p>Simple and familiar, being mindful of people’s time, and contributing to clearness: once a reader shelves a book as “Read,” they can “Favorite” it.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/177444b5-1d32-4db2-90f2-601d1fc808c7/6-rethinking-star-ratings-readers.png" /></p>
<p>Because this is a  straightforward input, it requires less effort than deciphering the differences within anyone’s five-point star scale. Not favoriting a book does not indicate that you disliked it, and that is not the purpose. Favoriting tells people this is a noteworthy book for you, which may inspire them to learn why, read reviews, and interact with others. The number of times a book is favorited can be tallied to rank it in lists and garner extra attention.</p>
<p>In addition, vastly improving on our principle of clarity, once readers shelve a book as “Read,” the app also prompts them to mention what they enjoyed.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f327d4bb-6bd7-4e0d-8f74-6b9099eeeffa/3-rethinking-star-ratings-readers.png" /></p>
<p>Respecting a reader’s time and developing a common language for users, the prompt provides a list of predefined answers to choose from. The options are mostly based on conventional literary characteristics, such as “Fast-paced plot,” “Lyrical language,” “Quirky characters,” and dozens of others.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9bfa38d9-83d6-490a-970b-ae3ea2b3e033/4-rethinking-star-ratings-readers.png" /></p>
<p>Every quality a reader chooses gets added to traits others have chosen. On a book’s overview page, the selected qualities are ranked in descending order, equipping prospective readers with a clearer sense of if they might like a text based on top traits. The number of qualities a reviewer can choose is limited to encourage thoughtful selections and discourage abuse by selecting every trait on the list.</p>
<p>Similarly, there could also be a “Wished” list that follows the same structure as the “Enjoyed” list. “Wished” would create opportunities for people to mention what else they would have liked from a book, and the collective traits of reviewers could further assist in someone’s decision to read a work.</p>
<h3>Part Three: Building Trust, Respecting Time, And Creating Clarity</h3>
<p>Every feature mentioned so far is enhanced by the final piece of our solution: written reviews. Allowing users to explain their thoughts, such as why they chose the qualities they enjoyed, gives potential readers a deeper understanding of the book they are considering.</p>
<p>However, remember the aforementioned stat that, on average, less than 5% of raters write reviews on Goodreads. That number becomes easier to understand when you consider that imparting meaningful feedback is a learned skill—you can find popular lessons on sites like <a href="https://www.udemy.com/course/delivering-constructive-criticism-the-assertive-way/">Udemy</a>, <a href="https://www.masterclass.com/articles/how-to-give-creative-feedback">MasterClass</a>, and others. Plus, add to that the fact that writing reviews can be more time-consuming than choosing ratings. Despite these hurdles, a site can offer guidance that motivates people to provide additional context about their thoughts.</p>
<p>In our solution, users are not merely given a blank text box and asked to write a review. The users are prompted to share their thoughts and receive suggestions to hone their feedback. The suggestions range dynamically, depending on a reader’s earlier choices. If they favorited a book, the prompt might ask why. If they chose the “Well-developed characters” option from the Enjoyed list, the prompt might ask how the characters are well developed. The prompt might also nudge users to read other people’s reviews for ideas.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b0ec2f8a-0795-4416-a75d-4b900e566d37/5-rethinking-star-ratings-readers.png" /></p>
<p>The dynamic suggestions will particularly benefit books with sobering subject matter. For instance, only 1% of raters have written reviews for Anne Frank’s <a href="https://www.goodreads.com/book/show/48855.The_Diary_of_a_Young_Girl"><em>The Diary of a Young Girl</em></a> on Goodreads. This is unsurprising when you consider the devastating historical context surrounding the book.</p>
<p>Commenting on typical story elements like pacing feels disingenuous to a book like Anne Frank’s — like giving a star rating to a friend telling you a story about themselves — but we should not shy away from talking about difficult literature, because <a href="https://artincontext.org/why-is-art-important/">discussing art</a> can lessen our prejudices and expand our empathy. Prompts for these types of books might supply tips for close-reading a passage, mentioning what a story means to a reader, or asking how a book made a reader feel.</p>
<p>Finally, these features require regular usage to benefit readers. Growing an active community around them can be accomplished by building healthy communal habits, which hinge on voices having the capacity to be heard. Thankfully, one of the oldest features of the Internet can do a lot of the heavy lifting to solve this: commenting. Many sites offer the ability to comment on reviews, but several also employ a “Like” feature — the ability to press a button that “Likes” a review or comment — and liking comments can weaken the voices of a community.</p>
<p>Scammers can abuse the feature with bots to garner large amounts of likes and attention, people can waste time and emotional energy chasing likes, and the feature discourages people from using their words: all issues that fail our guiding principles, and even the <a href="https://www.ted.com/talks/jack_dorsey_how_twitter_needs_to_change/transcript?language=en">ex-Twitter CEO admitted</a> the like button compromises dialogue. Generating trust, meaningful usage of time, and clarity among users builds a safer environment for genuine conversation to spread, so comments should be protected from elements that detract from them.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ac1ad99b-8958-467b-bc65-6d33e7bd0fe8/1-rethinking-star-ratings-readers.png" /></p>
Falling Action And Resolution: Let’s Be Thoughtful
<p>Why any company utilizes a star rating system is a question for them. Reflecting on how easy to use and almost expected the scale has become, it’s likely companies simply copied a system that they believe is “good enough.” Maybe they were enthralled by the original <a href="https://en.wikipedia.org/wiki/Michelin_Guide">Michelin Guide</a> or <a href="https://en.wikipedia.org/wiki/Mariana_Starke">Mariana Starke</a> using exclamations points to denote special places of interest in guidebooks, but mimicry often flatters the originator more than the mimicker. Either way, the perks of ubiquity do not outweigh the vagueness that engenders numerous problems. At the forefront of those is stunting stronger connections between people trying to speak a shared language.</p>
<p>This article shows one solution for those problems, but there are others. Companies like <a href="https://app.thestorygraph.com/">The StoryGraph</a> already provide alternatives to achieve thoughtful interactions around discussing literature, and <a href="https://onezero.medium.com/almost-everything-about-goodreads-is-broken-662e424244d5">people have additional ideas</a>. Thoughtfulness can take a little longer to solve, but:</p>
<p>If we encourage people to not solely judge a book by its cover, we should extend that advice to its star ratings.</p>
<p>Let’s look beneath the surface of things and use our hearts — just as Antoine de Saint-Exupéry’s eponymous <em>Little Prince</em> had to learn to do — to discover meaningful new territories in books and elsewhere. A good place to start would be reading or rereading that story, marveling at the stars dotting its illustrated skies, and writing a review to share what we each found buried within the pages.</p>
Epilogue: What Readers Can Do Today
<p>While the recommendations throughout this article are focused on how a company can change its rating and review system, companies can be slow to change. Fortunately, there are steps readers can take to be more thoughtful when reviewing the literature. A simple process today might look like this:</p>
<ul>
<li><strong>Leave a star rating.</strong><ul>
<li>Both users and algorithms pay attention to these ratings. If you ignore leaving a rating, you lessen the chance of readers discovering books they may love.</li>
</ul>
</li>
<li><strong>Write a review.</strong> Consider some of these elements to streamline the process:<ul>
<li>Explain why you chose your rating.</li>
<li>List common story qualities you enjoyed—these can vary depending on genre, but <a href="https://blog.reedsy.com/elements-of-a-story/">here is a starter list</a>. Even better, write a sentence to say why you enjoyed specific qualities.</li>
<li>Discuss a passage (or several) from the book that you found important.</li>
<li>Mention what you wish you had known before reading a book and mark the review with “Spoilers” at the start if you include any.</li>
<li>Link to other reviews that you think best sum up your perspective.</li>
</ul>
</li>
<li><strong>Share your review.</strong><ul>
<li>Not only will this help people find new literature, but it will also encourage them to write and share reviews.</li>
</ul>
</li>
</ul>
<p>You can use variations of this process to review other products, too. Remember that the most important part is that we use our words. This helps reduce confusion that might come from a lone star rating, and it helps us build stronger connections.</p>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Matt Athanasiou)</author>
      <enclosure
        url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4c500c4a-f0b4-4348-9136-951d1b38afde/rethinking-star-ratings-readers.jpg"
        length="0" type="image/jpg"/>
    </item>
    <item>
      <title><![CDATA[Headless In Times Of Accessibility]]></title>
      <link>https://smashingmagazine.com/2022/09/accessibility-times-headless/</link>
      <guid>https://smashingmagazine.com/2022/09/accessibility-times-headless/</guid>
      <pubDate>Thu, 15 Sep 2022 10:00:00 GMT</pubDate>
      <description>
        <![CDATA[Do you want to make your new website as accessible as possible? Amazing, that’s a great mindset! Let’s have a closer look at the factors you should take into consideration when choosing a content management system (CMS) in terms of web accessibility.]]></description>
      <content:encoded><![CDATA[<p>This article is a sponsored by <a href="https://www.storyblok.com/">Storyblok</a></p>
<p>We should all care more about web accessibility. It’s the best tool to make the web a more inclusive, equal space — and, in my opinion, it’s our responsibility as developers, UX specialists, and designers to support this mission. While the CMS might, at first glance, seem like a small piece of the puzzle, it’s really the baseline to set your project up for success.</p>
<p>Let’s have a closer look at the basics of web accessibility, the difference between monolithic and headless content management systems, and how to make the most of your CMS in terms of accessibility. </p>
What Is Web Accessibility?
<p>Web accessibility means, in short, that we design and implement our projects in a way that people with disabilities can use them and participate as equally as possible. There are many different kinds of disabilities like physical, auditory, cognitive, speech, neurological, or visual disabilities. In the <a href="https://www.who.int/teams/noncommunicable-diseases/sensory-functions-disability-and-rehabilitation/world-report-on-disability">World Report on Disabilities by the WHO from 2011</a>, it was found that over 15% of the global population experiences some form of disability throughout their lifetime — that’s 1 billion people in total; and with the global population generally growing older, it will only continue to rise. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/52452b3f-3af0-45c2-807f-f42ebdc155e2/inclusive-design-accessibility.png" /></p>
<p>But the applications for web accessibility are even broader: making your website accessible benefits not only people with permanent disabilities but also those with situational or temporary impairments, like folks with a broken arm or new parents holding their baby (and only having one hand free to use a device). Looking at your phone in bright sunlight, you probably rely on sufficient color contrast, and captions enable you to watch videos without turning to volume up in a quiet environment. </p>
<p>In short: Web Accessibility benefits all of us. </p>
But What Does That Mean In Practice?
<p>Web Accessibility takes many shapes and forms, but it could mean, for example, including alternative texts for your images, adding captions to videos, and ensuring enough contrast between background and foreground for texts. Keyboard navigation is also essential in making your website more accessible, as many users rely on their keyboard or assistive technology to navigate the web. The same is true for writing semantic code — making sure you are using the right HTML elements and structure gives assistive tech lots of valuable context — while simultaneously improving your code. </p>
<p>While the whole task of making your website accessible may seem daunting at first, there are many good resources out there, like the <a href="https://www.w3.org/WAI/standards-guidelines/wcag/">Web Content Accessibility Guidelines </a>(WCAG) for instance. These guidelines were developed to promote a unified, international standard for web accessibility. They include three <a href="https://www.w3.org/WAI/WCAG21/Understanding/conformance#levels">different levels of accessibility</a> (A, AA &amp; AAA), A being the least and AAA the most inclusive. </p>
Why Does The CMS Matter?
<p>Ideally, your content management system is where it all comes together, right? And having the right tool for the job will make it much easier for everyone involved to create an accessible website. In short: once you have found the ‘right’ CMS, you have plenty more headspace to take care of overarching issues. Your content management system should not hinder you in developing accessible content, it should support you in doing so. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c643c097-a0c8-4aa6-96ab-24adee6e2739/2-accessibility-times-headless.png" /></p>
<h3>What Are Your Options?</h3>
<p>In the world of CMSes, there are <a href="https://www.storyblok.com/tp/coupled-decoupled-and-headless-content-management-systems">two big categories</a>: monolithic and <a href="https://www.storyblok.com/tp/headless-cms-explained">headless CMS</a>. While radically different in their approach and architecture, they both have a lot of things going for them — it’s basically a matter of finding the right fit. </p>
<h4>Monolithic CMS</h4>
<p>Monolithic CMS, sometimes also called ‘traditional’ or ‘coupled’ content management systems, are ‘where it all started.’ In the early 2000s, open-source platforms like WordPress, Drupal and Joomla emerged — providing an easy way for people to create websites or personal blogs quickly. </p>
<p>The idea of a monolithic CMS is a ‘one-stop shop’ — usually, you have a database where the content is stored, an admin interface, and the frontend that combines the data from the database with the styling and logic — you don’t have to worry about hosting or writing code. </p>
<p>This might mean a few compromises: Since you are buying into the ‘package deal’ for all these solutions, your solution might not excel at <em>every</em> task. There are likely some features in the mix that really suit your approach (which is probably why you chose it in the first place) and others that are not really a good match or which you simply don’t need but which are just part of the whole package. </p>
<p>In terms of the tech stack, you probably highly depend on the CMS’ default — not much flexibility here. What attracts many people to platforms like WordPress, for example, are the ready-made templates and plugins to choose from — these tools make it relatively easy to extend your website’s functionality or change the styling. </p>
<p>All in all, not a terrible solution if you are looking to get started quickly and have little experience in setting up your own website from scratch. </p>
The New Kid On The Block: Headless CMS
<p>With the rise of mobile devices, the demands on the CMS ecosystem changed as well — an omnichannel approach became the new norm, and traditional systems weren’t fit to cope, at least not effectively. Out of this need, headless systems were born: </p>
<p>A headless content management system means decoupling the ‘head’ (aka ‘frontend’) from the ‘body’ (backend or content repository). The focus of a headless CMS is solely on storing and delivering structured content. Due to this approach, omnichannel becomes second nature: through an API, you can access your data and distribute it wherever you like — be it in a mobile app, on a website, or in an e-commerce store.  </p>
<p>Headless follows the best-of-breed approach: connect the tools and services that fit your needs through the API but don’t worry about unnecessary baggage. And as a developer, headless gives you the freedom to choose any kind of tech stack that you would like for the frontend. Even if you need to change frameworks in the future, it won’t affect your headless CMS in the slightest. </p>
Headless vs. Monolithic: What’s The Best Fit For You?

<p>So, in the end, as always — it comes down to your needs. There is no definite answer. A headless CMS might likely be an excellent fit for you, especially if you are working with multiple output channels and are experienced with creating your own frontend. There has been a massive shift in the last couple of years towards headless — with <a href="https://www.storyblok.com/mp/agency-learning-why-replace-monolithic-with-headless">good reason</a>. If you prefer an out-of-the-box solution with little programming effort on the other hand and don’t mind working with templates, a monolithic approach could be the solution for you. </p>
What’s More Accessible: Monolithic Or Headless CMSs?
<p>The short answer is again: it depends. </p>
<p>Both monolithic and headless solutions are not inherently accessible, unfortunately. Many platforms make some effort to meet minimum requirements when it comes to web accessibility, but there is still a long way to go. </p>
How Accessible Is A Monolithic CMS?
<p>When it comes to monolithic platforms, generally speaking, your frontend can only be as accessible as your least accessible plugin. Let me expand a little here, using WordPress as an example: </p>
<p>How accessible or inaccessible your site is largely depends on what data is stored and how it is displayed. This is massively affected by the themes and plugins you may use. And while there are many themes that claim to be ‘accessibility ready’, not all of them are. And even if you manage to select an accessibility theme, it can become inaccessible if you install an inaccessible plugin. So it’s not impossible, but there are definitely some obstacles in your way. </p>
<p>One thing to keep in mind: when working with a monolithic CMS, you are generally limited to the accessibility features provided by the CMS (or plugins) itself — customizing the editing experience will be a lot more challenging than when working with a headless CMS. </p>
<h3>Creating Your Own Themes</h3>
<p>If you want to be in more control, it might be feasible to create your own themes — you could even use a base theme for the underlying HTML structure. By creating your own theme, you can ensure sufficient color contrast and solid keyboard navigation, make sure there aren’t exclusively visual cues to alert the user to changes, test for screen reader users, and implement things like motion control. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5a9b19ff-3fe3-46ce-939c-20caf65aef65/3-accessibility-times-headless.png" /></p>
<h3>Plugins: Curse Or Blessing?</h3>
<p>The beauty (and the danger) of plugins is, that you can choose from over 55.000 plugins in WordPress and install them at the click of a button. Each gives new functionality to your site — many being interactive. Especially these interactive plugins are full of potential accessibility pitfalls and need to be tested thoroughly. </p>
<h3>Accessibility Plugins</h3>
<p>There are also plugins that claim to make your website accessible. And while it’s tempting to fix your accessibility needs just by quickly installing a plugin, don’t be fooled. These tools promise you to fix issues like color contrast, enable zoom or add alt text to images — all good ideas in theory. But in most cases, trying to solve accessibility issues with quick fixes like plugins creates more issues than it solves. These tools usually create an overlay of your website, not actually fixing the issues but — well, painting over them. </p>
<p>While there have been significant advances in technology, automatically generated (alt) texts still need to be checked manually and are not always accurate, causing confusion for the users. Another big issue is that these automated tools often clash with the assistive technologies people might already be using. Before using an accessibility plugin in production, make sure to test it thoroughly — if it seems too good to be true, it usually is.</p>
<blockquote> “I will recommend staying away from any plug-in that claims or implies that it will fix your site to help you meet accessibility guidelines—no plug-in is going to be able to seriously achieve that goal.” <br /><br />— Joe Dolson</blockquote>

Accessibility In Times Of Headless CMS
<p>Now you might wonder: is a headless CMS the answer? Well, again: it depends. </p>
<p>A headless CMS will give you a lot more freedom than a traditional CMS. You’ll have a lot more flexibility when it comes to: </p>
<ul>
<li>Choosing the best tools for the job</li>
<li>Working with a tech stack you’re comfortable with</li>
<li>Set up your project in ways that help all team members create accessible content</li>
</ul>
<p>That being said, it is also not inherently accessible — and not every headless CMS gives you the same degree of freedom — so choose wisely. Luckily, there are things you can do to make your content more accessible and set your team up for success. </p>
How Can I Make My CMS As Accessible As Possible?
<p>As always, there is no one-size-fits-all approach here. But there are many things you can do, both when working with a headless CMS as well as when working with a custom theme in a monolithic approach. Let’s have a closer look at how you can implement more accessibility in your project: </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/811b1801-2607-4152-a2b5-768dfab46f6b/1-accessibility-times-headless.png" /></p>
<h3>Education Is Key</h3>
<p>Make accessibility part of every discussion and educate each other on an ongoing basis. The more we talk about the things we learn, we can improve as a team. Provide resources and time to make sure web accessibility is not an afterthought in your project. </p>
<h4>Semantic HTML</h4>
<p>Start by ensuring semantic structure in your components — double check the HTML elements you are using and whether there might be more suitable ones that can give (screen reader) users context. Also, extend this to your CMS: when creating new Content Types or Pages, keep the HTML structure in mind when allowing specific components to these pages. Ensure you have only one <code>&lt;main&gt;</code> element, watch out for the headline hierarchy and ensure the right use of landmarks, for example. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b99cd96d-3a46-42ad-a977-888002af3b85/9-accessibility-times-headless.png" /></p>
<p>In a headless CMS, the idea is to fully decouple the frontend from the content structure. That’s also why it’s strongly advisable to prevent people from writing markup in the content fields — it’s prone to error and difficult to maintain, making it less accessible in the long run. All your code should live in your codebase — where it can easily be tested and maintained. </p>
<h4>Visual Context</h4>
<p>Provide as much context as you can for people who are visually impaired. This could mean, for example: </p>
<ul>
<li>Making alternative texts a requirement for image fields</li>
<li>Including an option for increasing Zoom to up to 200%</li>
<li>Work with an accessible color palette and limit the use of colors to predefined brand colors with sufficient contrast. </li>
</ul>
<p>Also, make sure to alert users to changes not only by color cues (e.g., when hovering or clicking a button, not only the color changes but the size changes, or there is another effect). </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8dc5e7f6-cca2-4ed2-b623-d922ae1f0523/8-accessibility-times-headless.png" /></p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c1d560bc-2bd1-44a0-9946-e1dad41384c7/5-accessibility-times-headless.png" /></p>
<h4>Create A Coherent Structure</h4>
<p>Having consistency not only enforces your brand’s visual identity across your page but it also helps people navigate it — especially folks who are neurodivergent. This could, for example, mean using dedicated styles for specific CTAs or improving your UI to make it as easy as possible to find information in different ways. Reflect on the importance of topics in style and size, and stay away from flashy or very distracting animations. </p>
<p>To ensure everybody keeps these brand guidelines in mind, include descriptions and notes for editors. These friendly reminders will help people comply with accessibility requirements and understand why it’s important. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/df68416d-d039-477e-aa99-230e87440ad8/7-accessibility-times-headless.png" /></p>
<h4>Extend Your Experience</h4>
<p>In many headless systems, you are able to add any kind of field you need — and you can make these fields a requirement for accessibility purposes. Like in this example showing <a href="https://www.storyblok.com/tp/create-an-accessible-website-with-storyblok#accessible-iframes">how to set up an accessible iframe</a> with a required title field. Setting fields as ‘required’ will make it a lot easier to ensure that they will not be forgotten when things get hectic in day-to-day life. </p>
<p>Besides creating your own field types, you can also easily extend the content management system by connecting any kind of tool you need to your headless architecture or even <a href="https://www.storyblok.com/docs/plugins/introduction">creating your own extensions and plugins</a>. This could also include your own solutions to specific accessibility needs. One example could be an extension to run an accessibility check to flag any issues before publication. While it will be difficult to cover <em>all</em> potential issues, it might be a good addition to automated and manual testing. </p>
<h3>Wrapping Up</h3>
<p>When it comes to finding the right CMS, there is no cookie cutter answer — as always, it <em>depends</em>. It depends on your requirements, the accessibility needs you are aiming to fulfill, and how much time and resources you have. Neither a monolithic nor a headless system are inherently 100% accessible — but there are many things you can do to improve that.</p>
<p>While there might be some already predefined tools in monolithic CMS’ to help you out, you also heavily rely on other people not making false claims. With headless CMS, on the other hand, there is a lot more freedom and flexibility in setting your project up to be as accessible as possible. And that’s exactly how a content management system should be, right? Enabling you to focus on the tasks at hand and making it as easy as possible to meet your accessibility goals. </p>
<p>Feeling adventurous?<a href="https://www.storyblok.com/docs/guide/getting-started">Give it a go</a> and see how quickly you can put together a headless project with your favorite tech stack. </p>
<p>Regardless of which system you choose, always remember: 10% done is better than nothing in the case of accessibility — every little step towards a more inclusive web counts. </p>
<h3>Useful Resources</h3>
<ul>
<li>“<a href="https://www.storyblok.com/tp/create-an-accessible-website-with-storyblok">Creating An Accessible Website With Storyblok</a>,” Christian Zoppi</li>
<li>“<a href="https://www.deque.com/blog/wordpress-accessibility/">The Complete Guide To Accessibility For WordPress Websites</a>,” Ross Johnson</li>
<li>“<a href="https://rianrietveld.com/2017/06/wceu17/">Accessibility In The Age Of The Headless CMS</a>,” Rian Rietveld</li>
<li>“<a href="https://bhmbizsites.com/beware-wordpress-accessibility-plugins-can-make-your-site-less-accessible/">Beware: WordPress Accessibility Plugins Can Make Your Site LESS Accessible</a>,” Lindsay L.</li>
<li><a href="https://www.cms.co.uk/cms-and-accessibility/#:~:text=Accessibility%20means%20enabling%20people%20with,due%20to%20the%20ageing%20process">CMS And Accessibility</a></li>
<li>Automated Accessibility Audits by <a href="https://www.deque.com/axe/devtools/">axe Dev Tools</a> or <a href="https://web.dev/accessibility-scoring/">Lighthouse Accessibility Scoring</a></li>
</ul>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Josefine Schaefer)</author>
      <enclosure
        url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a37e3c90-45e7-4553-b425-346edfcd48af/headless-in-times-of-accessibility.jpg"
        length="0" type="image/jpg"/>
    </item>
    <item>
      <title><![CDATA[JavaScript APIs You Don’t Know About]]></title>
      <link>https://smashingmagazine.com/2022/09/javascript-api-guide/</link>
      <guid>https://smashingmagazine.com/2022/09/javascript-api-guide/</guid>
      <pubDate>Wed, 14 Sep 2022 10:00:00 GMT</pubDate>
      <description>
        <![CDATA[In this article, Juan Diego covers the least known yet extremely useful APIs, such as the Page Visibility API, Web Sharing API, Broadcast Channel API and Internationalization API. Together we will see what they are, where we should use them, and how to use them.]]></description>
      <content:encoded><![CDATA[<p>A couple of days ago, I revisited the awesome <a href="https://2021.stateofjs.com/en-US/">2021 State of JS Survey</a>. The state of JS is an online survey that collects data from developers around the world to see the most recent and upcoming trends in the JavaScript community. Among the data it collects, a section is dedicated to the native features JavaScript provides, listed by their usage and awareness. As you can imagine, among the most used features are popular ones like <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining">Optional chaining</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator">Nullish coalescing</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API">Websockets</a>, and so on.</p>
<p>However, I wasn’t interested in the most used or known APIs. Instead, I was looking for the least known ones. I wanted to know which APIs we aren’t talking about enough, and among them, I found four pretty different APIs that are extremely useful:</p>
<ul>
<li><a href="#page-visibility-api">Page Visibility API</a></li>
<li><a href="#web-share-api">Web Share API</a></li>
<li><a href="#broadcast-channel-api">Broadcast Channel API</a></li>
<li><a href="#internationalization-api">Internationalization API</a></li>
</ul>
<p>In this article, we will see what they are, where we should use them, and how to use them.</p>
<p><strong>Note</strong>: <em><a href="https://monknow.github.io/apis-you-didnt-know-about/">These APIs are all available in this demo</a>.</em></p>
Page Visibility API
<p>This is a little-known web API that rates last fourth in awareness in the <a href="https://2021.stateofjs.com/en-US/features">State of JS Survey</a>. It lets you know when a user has left the page. To be precise, the API triggers an event whenever the page visibility status changes, either when the user minimizes or maximizes the window or switches the tab.</p>
<p>In the past, you had to use gimmicks to know if a user had switched tabs or minimized the window. The most popular was using the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event"><code>blur</code></a> and <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event"><code>focus</code></a> browser events. Using these events would result in something like the following:</p>
<pre><code>window.addEventListener("focus", function () {
    // User is back on the page
    // Do Something
});

window.addEventListener("blur", function () {
    // User left the page
    // Do Something
});
</code></pre>

<p>The previous code works but not as intended. Since the <code>blur</code> event is triggered when the page loses focus, it can be triggered when the user clicks the search bar, an alert dialog, the console, or the window border. So, <code>blur</code> and <code>focus</code> only tell us if the page is active but not if the content of the page is hidden or visible.</p>
<h3>Use Cases</h3>
<p>In general, we want to use the Page Visibility API to stop unnecessary processes when the user doesn’t see the page or, on the other hand, to perform background actions. Some specific cases can be:</p>
<ul>
<li>to pause videos, image carousels, or animations when the user leaves the page;</li>
<li>if the page displays live data from an API, stop this behavior temporarily while the user is away;</li>
<li>to send user analytics.</li>
</ul>
<h3>How To Use It?</h3>
<p>The Page Visibility API brings two properties and an event to access the page visibility status:</p>
<ul>
<li><code>document.hidden</code><br />It is globally available and read-only. Try to avoid it since it is now deprecated, but when accessed, it returns <code>true</code> if the page is hidden and <code>false</code> if it is visible.</li>
<li><code>document.visibilityState</code><br />It is the updated version of <code>document.hidden</code>, but when accessed, it returns four possible values depending on the page visibility status: - <code>visible</code><br /> The page is visible, or to be exact, it isn’t minimized nor in another tab. - <code>hidden</code><br /> The page isn’t visible; it is minimized or in another tab. - <code>prerender</code><br /> This is the initial state of a visible page when it is prerendering. A page’s visibility status may start at <code>prerender</code> and then change to another state, but it can’t change from another state to <code>prerender</code>. - <code>unloaded</code><br /> The page is being unloaded from memory.</li>
<li><code>visibilitychange</code><br />It’s an event provided by the <code>document</code> object that is triggered when the page <code>visibilityState</code> changes.</li>
</ul>
<pre><code>document.addEventListener("visibilitychange", () =&gt; {
    if (document.visibilityState === "visible") {
        // page is visible
    } else {
        // page is hidden
    }
});
</code></pre>

<p>To see how to use the Page Visibility API, let’s use it to pause a video and stop fetching resources from an API when the user leaves the page. To start, I will be using <a href="https://vitejs.dev/guide/#scaffolding-your-first-vite-project">vite.js</a>, which is an amazing tool to start a new project quickly:</p>
<pre><code>npm create vite@latest unknown-web-apis</code></pre>

<p>When asked to select a framework, select vanilla to create a vanilla javascript project. And once finished, go to the new folder, install the necessary <code>npm</code> packages and start the developer server:</p>
<pre><code>  cd unknown-web-apis
  npm install
  npm run dev</code></pre>

<p>Go to <a href="http://localhost:3000/">localhost:3000/</a>, and you will see your Vite project up and running!</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/af373d72-bc9b-49c5-994d-a92fb1e781f1/vite-new-project.png" /></p>
<p>Firstly, we will direct to the <code>/main.js</code> file and delete all the boilerplate. Secondly, we will open <code>/index.html</code>, and inside the <code>#app</code> div tag, we will add a video element with any video file you want. I used a dancing Yoshi one. :)</p>
<pre><code>&lt;div id="app"&gt;
    &lt;video controls id="video"&gt;
        &lt;source src="./yoshi.mp4" /&gt;
    &lt;/video&gt;
&lt;/div&gt;</code></pre>

<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/526008ab-f9d4-4deb-b384-2a5d74709b96/yoshi-screenshot.png" /></p>
<p>Back to <code>/main.js</code>, we will add an event listener to the <code>document</code> object listening to the <code>visibilitychange</code> event. We then can access the <code>document.visibilityState</code> property to see when the page is visible or hidden.</p>
<pre><code>document.addEventListener("visibilitychange", () =&gt; {
    console.log(document.visibilityState);
});</code></pre>

<p>You can go to the page’s console and see the page visibility status change when you minimize the window or switch to another tab. Now, inside the event listener, we can check the <code>document.visibilityState</code> property, pause the video when it is <code>hidden</code>, and play it when <code>visible</code>. (Of course, we first select the <code>video</code> element using <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector"><code>document.querySelector()</code></a>.)</p>
<pre><code>const video = document.querySelector("#video");

document.addEventListener("visibilitychange", () =&gt; {
    if (document.visibilityState === "visible") {
        video.play();
    } else {
        video.pause();
    }
});</code></pre>

<p>Now the video stops whenever the user leaves the page. Another use of the Page Visibility API is to stop fetching unnecessary resources when the user doesn’t see the page. To see this, we will write a function to constantly fetch a random quote from the <a href="https://github.com/lukePeavey/quotable">quotable.io</a> API and pause this behavior when the page is hidden. Firstly, we will create a new div tag to store the quote in <code>/index.html</code>.</p>
<pre><code>&lt;div id="app"&gt;
    &lt;video controls id="video"&gt;
        &lt;source src="./yoshi.mp4" /&gt;
    &lt;/video&gt;
    &lt;div id="quote"&gt;&lt;/div&gt;
&lt;/div&gt;</code></pre>

<p>Back in <code>/main.js</code>, we will use the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"><strong>Fetch API</strong></a> to make a call to the <code>quotable.io</code> endpoint <a href="https://api.quotable.io/random">https://api.quotable.io/random</a> and then insert it into the <code>quote</code> div.</p>
<div>
<pre><code>const quote = document.querySelector("#quote");

const getQuote = async () =&gt; {
try {
const response = await fetch("<a href="https://api.quotable.io/random&quot;)">https://api.quotable.io/random")</a>;
const {content, author, dateAdded} = await response.json();
const parsedQuote = <code>&amp;lt;q&amp;gt;${content}&amp;lt;/q&amp;gt; &amp;lt;br&amp;gt; &amp;lt;p&amp;gt;- ${author}&amp;lt;/p&amp;gt;&amp;lt;br&amp;gt; &amp;lt;p&amp;gt;Added on ${dateAdded}&amp;lt;/p&amp;gt;</code>;
quote.innerHTML = parsedQuote;
} catch (error) {
console.error(error);
}
};

getQuote();</code></pre>

</div>

<p>Let’s shortly explain what is happening right here. We first select the <code>quote</code> element from the DOM. We then declare the <code>getQuote</code> function, which is an <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function"><code>async</code> function</a> that allows us to use the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await"><code>await</code></a> keyword to wait until we fetch the data from the API. The data fetched is in JSON format, so we use the <code>await</code> keyword one more time to wait until the data is parsed into a JavaScript object. The <code>quotable.io</code> API gives us—among other things—the <code>content</code>, <code>author</code>, and <code>dateAdded</code> properties that we will inject and display into the <code>quote</code> div. This works, but the quote is only fetched once, so we can use <a href="https://developer.mozilla.org/en-US/docs/Web/API/setInterval"><code>setInterval()</code></a> to call the function every 10 seconds.</p>
<div>
<pre><code>const quote = document.querySelector("#quote");

const getQuote = async () =&gt; {
try {
const response = await fetch("<a href="https://api.quotable.io/random&quot;)">https://api.quotable.io/random")</a>;
const {content, author, dateAdded} = await response.json();
const parsedQuote = <code>&amp;lt;q&amp;gt;${content}&amp;lt;/q&amp;gt; &amp;lt;br&amp;gt; &amp;lt;p&amp;gt;- ${author}&amp;lt;/p&amp;gt;&amp;lt;br&amp;gt; &amp;lt;p&amp;gt;Added on ${dateAdded}&amp;lt;/p&amp;gt;</code>;
quote.innerHTML = parsedQuote;
} catch (error) {
console.error(error);
}
};

getQuote();

setInterval(getQuote, 10000);</code></pre>

</div>

<p>If the user minimizes the window or switches the tab, the page would still fetch the quotes, creating an unnecessary network load. To solve this, we can check if the page is visible before fetching a quote.</p>
<div>
<pre><code>const getQuote = async () =&gt; {
    if (document.visibilityState === "visible") {
        try {
            const response = await fetch("<a href="https://api.quotable.io/random&quot;)">https://api.quotable.io/random")</a>;
            const {content, author, dateAdded} = await response.json();
            const parsedQuote = <code>&amp;lt;q&amp;gt;${content}&amp;lt;/q&amp;gt; &amp;lt;br&amp;gt;
            &amp;lt;p&amp;gt;- ${author}&amp;lt;/p&amp;gt;&amp;lt;br&amp;gt;
            &amp;lt;p&amp;gt;Added on ${dateAdded}&amp;lt;/p&amp;gt;</code>;
            quote.innerHTML = parsedQuote;
        } catch (error) {
            console.error(error);
        }
    }
};

getQuote();

setInterval(getQuote, 10000);</code></pre>

</div>

<p>Now, we will only fetch the quote if the page is visible to the user.</p>
<h3>Support</h3>
<p><a href="https://caniuse.com/pagevisibility">Widely supported</a></p>
Web Share API
<h3>What Is It?</h3>
<p>The <strong>Web Share API</strong> is also among the least-known APIs but is extremely useful. It lets you access the operative system’s native sharing mechanism, which is especially useful to mobile users. With this API, you can share text, links, and files without the need to create your own sharing mechanisms or use third-party ones.</p>
<h3>Use Cases</h3>
<p>They are pretty self-explanatory. You can use it to share content from your page to social media or copy it to the user’s clipboard.</p>
<h3>How To Use It?</h3>
<p>The Web Share API gives us two interfaces to access the user’s sharing system:</p>
<ol>
<li><code>navigator.canShare()</code><br />Accepts the data you want to share as an argument and returns a boolean argument depending on whether it is shareable.</li>
<li><code>navigator.share()</code><br />Returns a promise that will resolve if the sharing is successful. It invokes the native sharing mechanism and accepts the data you want to share as an argument. Note that it can only be called if a user has pressed a link or button, i.e., it requires <a href="https://developer.mozilla.org/en-US/docs/Glossary/Transient_activation"><strong>transient activation</strong></a>. The share data is an object that can have the following properties:</li>
</ol>
<pre><code>-   `url`: URL to be shared,
-   `text`: text to be shared,
-   `title`: title to be shared,
-   `files`: array of `File` objects representing files to be shared.
</code></pre><p>To see how to use this API, we will recycle our prior example and make an option to share our quotes using the Web Sharing API. To start, we first have to make a share button in <code>/index.html</code>:</p>
<pre><code>&lt;div id="app"&gt;
    &lt;video controls id="video"&gt;
        &lt;source src="./yoshi.mp4" /&gt;
    &lt;/video&gt;
    &lt;div id="quote"&gt;&lt;/div&gt;
    &lt;button type="button" id="share-button"&gt;Share Quote&lt;/button&gt;
&lt;/div&gt;</code></pre>

<p>We direct to <code>/main.js</code> and select the share button from the DOM. Then, we create an <code>async</code> function to share the data we want.</p>
<pre><code>const shareButton = document.querySelector("#share-button");

const shareQuote = async (shareData) =&gt; {
    try {
        await navigator.share(shareData);
    } catch (error) {
        console.error(error);
    }
};</code></pre>

<p>Now, we can add a click event listener to the <code>shareButton</code> element to callback the <code>shareQuote</code> function. Our <code>shareData.text</code> value will be the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent"><code>quote.textContent</code></a> property and the <code>shareData.url</code> will be the page URL i.e the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Location/href"><code>location.href</code></a> property.</p>
<pre><code>const shareButton = document.querySelector("#share-button");

const shareQuote = async (shareData) =&gt; {
    try {
        await navigator.share(shareData);
    } catch (error) {
        console.error(error);
    }
};

shareButton.addEventListener("click", () =&gt; {
    let shareData = {
        title: "A Beautiful Quote",
        text: quote.textContent,
        url: location.href,
    };

    shareQuote(shareData);
});</code></pre>

<p>Now you can share your quotes with anyone through your native operative system. However, it is important to note that the Web Share API will only work if the context is secure, i.e., if the page is served over <code>https://</code> or <code>wss://</code> URLs.</p>
<h3>Support</h3>
<p><a href="https://caniuse.com/web-share">Poorly supported</a></p>
Broadcast Channel API
<h3>What Is It?</h3>
<p>Another API I want to talk about is the <strong>Broadcast Channel API</strong>. It allows browsing contexts to send and receive basic data from each other. Browsing contexts are elements like a tab, window, iframe, or anywhere a page can be displayed. Due to security reasons, communication between browsing contexts isn’t allowed unless they are of the same origin and use the Broadcast Channel API. For two browsing contexts to be of the same origin, they must share in their URL the same protocol (e.g. <code>http/https</code>), domain (e.g. <code>example.com</code>), and port (e.g. <code>:8080</code>).</p>
<h3>Use Cases</h3>
<p>The Broadcast Channel API is generally used to keep a page’s state synced across different tabs and windows to enhance user experience or for security reasons. It can also be used to know when a service is finished in another tab or window. Some examples are:</p>
<ul>
<li>Log a user in or out across all tabs.</li>
<li>Detect when an asset is uploaded and show it across all pages.</li>
<li>Instruct a service worker to do some background work.</li>
</ul>
<h3>How To Use It?</h3>
<p>The Broadcast Channel API involves a <code>BroadcastChannel</code> object that can be used to send messages to other contexts. Its constructor has only one argument: a string that will work as an identifier to connect to the channel from other contexts.</p>
<pre><code>const broadcast = new BroadcastChannel("new_channel");</code></pre>

<p>Once we have created a <code>BroadcastChannel</code> object with the same identifier across two contexts, the new <code>BroadcastChannel</code> object will have two available methods to start communicating:</p>
<ul>
<li><code>BroadcastChannel.postMessage()</code> to send a message across all connected contexts. It takes any kind of object as its only argument so that you can send a wide variety of data.</li>
</ul>
<pre><code>broadcast.postMessage("Example message");</code></pre>

<ul>
<li><code>BroadcastChannel.close()</code> to close the channel and indicate to the browser that it won’t receive any more messages so it can collect them into the garbage.</li>
</ul>
<p>To receive a message, the <code>BroadcastChannel</code> has a <code>message</code> event that we can listen to using an <code>addEventListener</code> or its <code>onmessage</code> property. The <code>message</code> event has a <code>data</code> property with the data sent and other properties to identify the context that sent the message, such as <code>origin</code>, <code>lastEventId</code>, <code>source</code>, and <code>ports</code>.</p>
<pre><code>broadcast.onmessage = ({data, origin}) =&gt; {
    console.log(`${origin} says ${data}`);
};</code></pre>

<p>Let’s see how to use the Broadcast Channel API by using our prior example. Our goal would be to make another browsing context with the same origin and display the same quote in both contexts. To do this, we will create a new folder named <code>new-origin</code> with a new <code>/index.html</code> and <code>/main.js</code> files inside.</p>
<p>The <code>/new-origin/index.html</code> will be a new HTML boilerplate with a <code>#quote</code> div inside:</p>
<div>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
    &lt;head&gt;
        &lt;meta charset="UTF-8" /&gt;
        &lt;link rel="icon" type="image/svg+xml" href="../favicon.svg" /&gt;
        &lt;meta name="viewport" content="width=device-width, initial-scale=1.0" /&gt;
        &lt;title&gt;Vite App&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div id="quote"&gt;&lt;/div&gt;
        &lt;script type="module" src="./main.js"&gt;&lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;</code></pre>
</div>

<p>In the <code>/new-origin/main.js</code> file, we will create a new broadcast channel and select the <code>#quote</code> element from the DOM:</p>
<pre><code>const broadcast = new BroadcastChannel("quote_channel");
const quote = document.querySelector("#quote");</code></pre>

<p>And in our prior <code>/main.js</code> file, we will create a new <code>BroadcastChannel</code> object and connect it to the <code>"quote_channel"</code>. We will also modify the <code>getQuote</code> function to send the quote as a message to other contexts.</p>
<div>
<pre><code>const broadcast = new BroadcastChannel("quote_channel");

//...

const getQuote = async () =&gt; {
try {
const response = await fetch("<a href="https://api.quotable.io/random&quot;)">https://api.quotable.io/random")</a>;
const {content, author, dateAdded} = await response.json();
const parsedQuote = <code>&amp;lt;q&amp;gt;${content}&amp;lt;/q&amp;gt; &amp;lt;br&amp;gt; &amp;lt;p&amp;gt;- ${author}&amp;lt;/p&amp;gt;&amp;lt;br&amp;gt; &amp;lt;p&amp;gt;Added on ${dateAdded}&amp;lt;/p&amp;gt;</code>;
quote.innerHTML = parsedQuote;
broadcast.postMessage(parsedQuote);
} catch (error) {
console.error(error);
}
};</code></pre>

</div>

<p>Back in the <code>/new-origin/main.js</code> file, we will listen to the <code>message</code> event and change the <code>quote.innerHTML</code> each time a new quote is sent.</p>
<pre><code>const broadcast = new BroadcastChannel("quote_channel");
const quote = document.querySelector("#quote");

broadcast.onmessage = ({data}) =&gt; {
    quote.innerHTML = data;
};</code></pre>

<p>Now you can see how the quote in <a href="http://localhost:3000/origin/">http://localhost:3000/new-origin/</a> changes to the quote in <a href="http://localhost:3000">http://localhost:3000</a>. You can also notice how the quote doesn’t change when the <a href="http://localhost:3000">http://localhost:3000</a> tab is hidden since it only fetches a quote when its page visibility status is visible.</p>
<h3>Support</h3>
<p><a href="https://caniuse.com/mdn-api_broadcastchannel_name">Widely supported</a></p>
Internationalization API
<h3>What It Ss?</h3>
<p>When developing a web page or app, it’s extremely common to need to translate its content across other languages to reach a wider audience. However, just translating your page’s text to whichever language you need isn’t enough to make your content available to speakers of that language since things like dates, numbers, units, and so on are different across countries and may cause confusion to your users.</p>
<p>Let’s say you want to display the date “November 8, 2022” on your webpage like “11/8/22”. This data can be read in three distinct ways depending on the reader’s country:</p>
<ul>
<li>“November 8, 2022” or MM/DD/YY by people from the US.</li>
<li>“August 11, 2022” or DD/MM/YY by people from Europe and Latam.</li>
<li>“August 22, 2011” or YY/MM/DD by people from Japan, China, and Canada.</li>
</ul>
<p>This is where the <strong>Internationalization API</strong> (Or <strong>I18n API</strong>) comes to solve formatting issues across different languages and regions. The I18n API is an amazing tool that has several uses, but we won’t delve into them to not overcomplicate this article.</p>
<h3>How To Use It?</h3>
<p>The I18n API uses locale identifiers to work. A locale identifier is a string that expresses the user’s language, country, region, dialect, and other preferences. To be precise, a locale identifier is a string that consists of subtags separated by hyphens. Subtags represent user preferences like language, country, region, or script and are formatted in the following way:</p>
<ol>
<li>“zh”: Chinese (language);</li>
<li>“zh-Hant”: Chinese (language) written in traditional characters (script);</li>
<li>“zh-Hant-TW”: Chinese (language) written in traditional characters (script) as used in Taiwan (region).</li>
</ol>
<p>There are more subtags to address more users’ preferences (if you want to learn more, you can check the <a href="https://datatracker.ietf.org/doc/html/rfc5646">RFC definition</a> of language tags), but to keep it short, the I18n API uses these locale identifiers to know how to format all the language-sensitive data.</p>
<p>To be more precise, the I18n API provides an <code>Intl</code> object that brings a bunch of specialized constructors to work with language-sensitive data. In my opinion, some of the most useful <code>Intl</code> constructors for internationalization are:</p>
<ul>
<li><code>Intl.DateTimeFormat()</code><br />Used to format dates and times.</li>
<li><code>Intl.DisplayNames()</code><br />Used to format language, region, and script display names.</li>
<li><code>Intl.Locale()</code><br />Used to construct and manipulate locale identifier tags.</li>
<li><code>Intl.NumberFormat()</code><br />Used to format numbers.</li>
<li><code>Intl.RelativeTimeFormat()</code><br />Used to format relative time descriptions.</li>
</ul>
<p>For our example, we will focus on the <code>Intl.DateTimeFormat()</code> constructor to format the quote’s <code>dateAdded</code> property depending on the user locale. The <code>Intl.DateTimeFormat()</code> constructor takes two arguments: the <code>locale</code> string that defines the date formatting convention and the <code>options</code> objects to customize how to format the dates.</p>
<p>The <code>Intl.DateTimeFormat()</code> created object has a <code>format()</code> method that takes two arguments: the <code>Date</code> object we want to format and the <code>options</code> object to customize how to display the formatted date.</p>
<pre><code>const logDate = (locale) =&gt; {
    const newDate = new Date("2022-10-24"); // YY/MM/DD
    const dateTime = new Intl.DateTimeFormat(locale, {timeZone: "UTC"});
    const formatedDate = dateTime.format(newDate);
    console.log(formatedDate);
};

logDate("en-US"); // 10/24/2022
logDate("de-DE"); // 24.10.2022
logDate("zh-TW"); // 2022/10/24</code></pre>

<p><strong>Note:</strong> <em>On the <code>Intl.DateTimeFormat</code> constructor’s <code>options</code> argument, we set the <code>timeZone</code> property to <code>"UTC"</code> so the date isn’t formatted to the user’s local time. In my case, the date is parsed to “10/23/2022” without the <code>timeZone</code> option.</em></p>
<p>As you can see, the <code>dateTime.format()</code> changes the date depending on the locale’s date formatting convention. We can implement this behavior on the quotes’ date using the <code>navigator.language</code> global property, which holds the user’s preferred locale. To do this, we will create a new function that takes a date string (in YYYY-MM-DD format) and returns the date formatted depending on the user’s locale.</p>
<div>
<pre><code>const formatDate = (dateString) =&gt; {
    const date = new Date(dateString);
    const locale = navigator.language;
    const dateTimeFormat = new Intl.DateTimeFormat(locale, {timeZone: "UTC"});

    return dateTimeFormat.format(date);

};</code></pre>

</div>

<p>We can add this function inside the <code>getQuote()</code> function to parse the <code>dateAdded</code> date.</p>
<div>
<pre><code>const getQuote = async () =&gt; {
    if (document.visibilityState === "visible") {
        try {
            const response = await fetch("<a href="https://api.quotable.io/random&quot;)">https://api.quotable.io/random")</a>;
            const {content, author, dateAdded} = await response.json();
            const parsedQuote = <code>&amp;lt;q&amp;gt;${content}&amp;lt;/q&amp;gt; &amp;lt;br&amp;gt;
            &amp;lt;p&amp;gt;- ${author}&amp;lt;/p&amp;gt;&amp;lt;br&amp;gt;
            &amp;lt;p&amp;gt;Added on ${formatDate(dateAdded)}&amp;lt;/p&amp;gt;</code>;
            quote.innerHTML = parsedQuote;
            broadcast.postMessage(parsedQuote);
        } catch (error) {
            console.error(error);
        }
    }
};</code></pre>
</div>

<p>With this, our quotes are localized to the user’s preferred language! In my case, my <code>navigator.language</code> value is <code>"en"</code>, so my dates are formatted to MM/DD/YY.</p>
<h3>Support</h3>
<p><a href="https://caniuse.com/internationalization">Widely supported</a></p>
Conclusion
<p>After reading this article, you can now flex about knowing the existence of these APIs and how to use them. Even though they were ranked last in awareness in the <a href="https://2021.stateofjs.com/en-US/features">State of JS Survey</a>, they are extremely useful, and knowing how to use them will definitely enhance your developing experience. The fact that these powerful APIs aren’t very known means that there are still useful APIs you and I still don’t know about, so it’s the perfect time to explore and find that API that will simplify your code and save you a ton of time developing.</p>
<p>I hope you liked this article and until the next time!</p>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Juan Diego Rodríguez)</author>
      <enclosure
        url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b583db40-b8c0-46c4-9893-5a7ae3d00453/api-page-visibility-web-sharing-broadcast-channel-internationalization.jpg"
        length="0" type="image/jpg"/>
    </item>
    <item>
      <title><![CDATA[Making Sense Of WAI-ARIA: A Comprehensive Guide]]></title>
      <link>https://smashingmagazine.com/2022/09/wai-aria-guide/</link>
      <guid>https://smashingmagazine.com/2022/09/wai-aria-guide/</guid>
      <pubDate>Tue, 13 Sep 2022 10:00:00 GMT</pubDate>
      <description>
        <![CDATA[In this article, Kate Kalcevich explains when to use ARIA and how to use it properly so that you can use ARIA in a way that’s helpful to the many disabled people who use [assistive technology](https://makeitfable.com/glossary/?utm_source=Smashing+Magazine&utm_medium=sponsored+content&utm_campaign=Upskill&utm_term=Fable&utm_content=Sept2022) to navigate the Internet. Let’s dive in!]]></description>
      <content:encoded><![CDATA[<p>This article is a sponsored by <a href="https://makeitfable.com/?utm_source=Smashing+Magazine&amp;utm_medium=sponsored+content&amp;utm_campaign=Upskill&amp;utm_term=Fable&amp;utm_content=Sept2022">Fable</a></p>
<p>The <a href="https://www.w3.org/TR/wai-aria-1.1/">Web Accessibility Initiative — Accessible Rich Internet Applications (WAI-ARIA)</a> is a technical specification that provides direction on how to improve the accessibility of web applications. Where the Web Content Accessibility Guidelines (WCAG) focus more on static web content, <strong>WAI-ARIA focuses on making interactions more accessible.</strong></p>
<p>Interactions on the web are notorious for being inaccessible and are often part of the most critical functions such as:</p>
<ul>
<li>submitting a job application,</li>
<li>purchasing from an online store, or </li>
<li>booking a healthcare appointment.</li>
</ul>
<p>I’m currently the Head of Accessibility Innovation at Fable, a company that connects organizations to people with disabilities for user research and accessibility testing and provides custom training for digital teams to gain the skills to build inclusive products.</p>
<p>As an instructor for accessible web development, I spend a lot of time examining the source code of websites and web apps and ARIA is one of the things I see developers misusing the most.</p>
HTML
<p>When you use HTML elements like <code>input</code>, <code>select</code>, and <code>button</code>, there are two things you’ll get for accessibility: information about the element is passed to the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction">DOM (Document Object Model)</a> and into an <a href="https://developer.mozilla.org/en-US/docs/Glossary/Accessibility_tree">Accessibility Tree</a>. Assistive technologies can access the nodes of the accessibility tree to understand: </p>
<ul>
<li>what kind of element it is by checking its role, e.g., checkbox;</li>
<li>what state the element is in, e.g., checked/not checked;</li>
<li>the name of the element, e.g., “Sign up for our newsletter.”</li>
</ul>
<p>The other thing you get when using HTML elements is keyboard interactivity. For example, a checkbox can be focused using the tab key and selected using the spacebar (specific interactions can vary by browser and operating system, but the point is they are available and standardized across all websites when you use HTML elements).</p>
<p>When you don’t use HTML, for example, if you build your own custom select using <code>&lt;div&gt;</code>s and <code>&lt;span&gt;</code>s or you use a component library, you need to do extra work to provide information about the element and build keyboard interactivity for assistive technology users. This is where ARIA comes into play.</p>
ARIA
<p>Accessible Rich Internet Applications (ARIA) include a set of roles and attributes that define ways to make web content and web applications more accessible to people with disabilities.</p>
<p>You can use ARIA to pass information to the accessibility tree. ARIA roles and attributes don’t include any keyboard interactivity. Adding <code>role="button”</code> to a <code>&lt;div&gt;</code> doesn’t make it respond when you press the Enter key — that you have to build using JavaScript or another language. However, the <a href="https://www.w3.org/WAI/ARIA/apg/patterns/">ARIA Authoring Practices Guide</a> does include a list of <em>what</em> keyboard interactivity should be added to various components such as accordions, buttons, carousels, etc.</p>
Roles
<p>Let’s start with roles. What the heck is this thing in the code below? </p>
<pre><code>&lt;div className="dd-wrapper"&gt;
  &lt;div className="dd-header"&gt;
    &lt;div className="dd-header-title"&gt;&lt;/div&gt;
  &lt;/div&gt;
  &lt;div className="dd-list"&gt;
    &lt;button className="dd-list-item"&gt;&lt;/button&gt;
    &lt;button className="dd-list-item"&gt;&lt;/button&gt;
    &lt;button className="dd-list-item"&gt;&lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
</code></pre>

<p>This is actually a snippet of code I found online from a select element for React. The fact that the element is completely unrecognizable from the code is exactly the issue that any assistive technology would have — it can’t tell the user what it is or how to interact with it because there’s no ARIA role.</p>
<p>Watch what we can do here:</p>
<pre><code>&lt;div className="dd-wrapper" role="listbox"&gt;
</code></pre>

<p>You might not be familiar with a <code>listbox</code>, but it’s a type of <code>select</code> that a screen reader user could recognize and know how to interact with. Now you could just use <code>&lt;select&gt;</code>, and you wouldn’t have to give it a role because it’s already got one that the DOM and accessibility tree will recognize, but I know that’s not always a feasible option.</p>
<p>A role tells an assistive technology user what the thing is, so make sure you use the correct role. A button is very different from a banner. Choose a role that matches the function of the component you’re building.</p>
<p>Another thing you should know about ARIA roles is that they override an HTML element’s inherent role.</p>
<pre><code>&lt;img role="button"&gt;
</code></pre>

<p>This is no longer an image but a button. There are very few reasons to do this, and unless you exactly knew what you’re doing and why, I’d stay away from overriding existing HTML roles. There are many other ways to achieve this that make more sense from accessibility and a code robustness perspective:</p>
<pre><code>&lt;button&gt;&lt;img src="image.png" alt="Print" /&gt;&lt;/button&gt;
&lt;input type="image" src="image.png" alt="Print" /&gt;
&lt;button style="background: url(image.png)" /&gt;Print&lt;/button&gt;
</code></pre>

<p>If you’re building a component, you can look up the pattern for that component in the <a href="https://www.w3.org/WAI/ARIA/apg/patterns/">ARIA Authoring Practices Guide</a> which includes information on which role(s) to use. You can also look up all <a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles">available roles in the mdn web docs</a>.</p>
<p>In summary, if you’re building something that doesn’t have a semantic HTML tag that describes it (i.e., anything interactive built using <code>&lt;div&gt;</code> or <code>&lt;span&gt;</code>), it needs to have an ARIA role so that assistive technology can recognize what it is.</p>
States And Properties (Aka ARIA Attributes)
<p>In addition to knowing what an element is, if it has a state (e.g., <code>hidden</code>, <code>disabled</code>, <code>invalid</code>, <code>readonly</code>, <code>selected</code>, and so on) or changes state (e.g., <code>checked</code>/<code>not checked</code>, <code>open</code>/<code>closed</code>, and so on), you need to tell assistive technology users what its current state is and its new state whenever it changes. You can also share certain properties of an element. The <a href="https://www.w3.org/TR/wai-aria-1.0/states_and_properties">difference between states and properties isn’t really clear or important</a>, so let’s just call them attributes.</p>
<p>Here are some of the most common ARIA attributes you might need to use:</p>
<ul>
<li><code>aria-checked</code><br />It’s used with <code>="true"</code> or <code>="false"</code> to indicate if checkboxes and radio buttons are currently checked or not.</li>
<li><code>aria-current</code><br />It’s used with <code>="true"</code> or <code>="false"</code> to indicate the current page within breadcrumbs or pagination.</li>
<li><code>aria-describedby</code><br />It’s used with the id of an element to add more information to a form field in addition to its label. <code>aria-describedby</code> can be used to give examples of the required format for a field, for example, a date, or to add an error message to a form field.</li>
</ul>
<pre><code>&lt;label for="birthday"&gt;Birthday&lt;/label&gt;
&lt;input type="text" id="birthday" aria-describedby="date-format"&gt;
&lt;span id="date-format"&gt;MM-DD-YYYY&lt;/span&gt;
</code></pre>

<ul>
<li><code>aria-expanded</code><br />It’s used with <code>="true"</code> or <code>="false"</code> to indicate if pressing a button will show more content. Examples include accordions and navigation items with submenus.</li>
</ul>
<pre><code>&lt;button aria-expanded="false"&gt;Products&lt;/button&gt;
</code></pre>

<p>This indicates that the Products menu will open a submenu (for example, of different product categories). If you were to code it like this:</p>
<pre><code>&lt;a href="/products/"&gt;Products&lt;/a&gt;
</code></pre>

<p>You’re setting the expectation that it’s a link, and clicking it will go to a new page. If it’s not going to go to a new page, but it actually stays on the same page but opens a submenu, that’s what button plus <code>aria-expanded</code> says to an assistive technology user. That simple difference between <code>&lt;button&gt;</code> and <code>&lt;a&gt;</code> and the addition of <code>aria-expanded</code> communicates so much about how to interact with elements and what will happen when you do.</p>
<ul>
<li><code>aria-hidden</code><br />It’s used with <code>="true"</code> or <code>="false"</code> to hide something that is visible, but you don’t want assistive technology users to know about it. Use it with extreme caution as there are very few cases where you don’t want equivalent information to be presented.</li>
</ul>
<p>One interesting use case I’ve seen is a card with both an image and the text title of the card linking to the same page but structured as two separate links. Imagine many of these cards on a page. For a screen reader user, they’d hear every link read out twice. So the image links used <code>aria-hidden="true"</code>. The ideal way to solve this is to combine the links into one that has both an image and the text title, but real-life coding isn’t always ideal, and you don’t always have that level of control.</p>
<p>Note that this breaks the fourth rule of ARIA (which we’ll get to in a bit), but it does it in a way that doesn’t break accessibility. Use it with extreme caution when there are no better workarounds, and you’ve tested it with assistive technology users.</p>
<ul>
<li><code>aria-required</code><br />It’s used with <code>="true"</code> or <code>="false"</code> to indicate if a form element has to be filled out before the form can be submitted.</li>
</ul>
<p>If you’re building a component, you can look up the attributes for that component on the <a href="https://www.w3.org/WAI/ARIA/apg/patterns/">ARIA Authoring Practices Guide</a>. The <a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes#states_and_properties_defined_on_mdn">mdn web docs covers states and properties</a> as well as ARIA roles.</p>
<p>Keep in mind that all these ARIA attributes tell a user something, but you still have to code the thing you’re telling them. <code>aria-checked="true"</code> doesn’t actually check a checkbox; it just tells the user the checkbox is checked, so that better be true or you’ll make things worse and not better for accessibility. The exception would be <code>aria-hidden="true"</code> which removes an element from the accessibility tree, effectively hiding it from anyone using assistive technology who can’t see.</p>
<p>So now we know how to use ARIA to explain what something is, what state it’s in, and what properties it has. The last thing I’ll cover is focus management.</p>
Focus Management
<p>Anything interactive on a website or web app must be able to receive focus. Not everyone will use a mouse, trackpad, or touch screen to interact with sites. Many people use their keyboard or an assistive technology device that emulates a keyboard. This means that for everything you can click on, you should also be able to use the tab key or arrow keys to reach it and the Enter key, and sometimes the spacebar, to select it.</p>
<p>There are three concepts you’ll need to consider if you use <code>&lt;div&gt;</code> and <code>&lt;span&gt;</code> to create interactive elements:</p>
<ol>
<li>You need to add <code>tabindex="0"</code> so that a keyboard or emulator can focus on them.</li>
<li>For anything that accepts keyboard input, you need to add an event listener to listen for key presses.</li>
<li>You need to add the appropriate role so that a screen reader user can identify what element you’ve built.</li>
</ol>
<p>Remember that native HTML controls already accept keyboard focus and input and have inherent roles. This is just what you need to do when creating custom elements from non-semantic HTML. </p>
<p>Ben Myers does a deep dive into <a href="https://benmyers.dev/blog/clickable-divs/">turning a <code>div</code> into a button</a>, and I’ll share parts of his example here. Notice the tabindex and the role:</p>
<pre><code>&lt;div tabindex="0" role="button" onclick="doSomething();"&gt;
    Click me!
&lt;/div&gt;
</code></pre>

<p>And you’ll need JavaScript to listen to the key presses:</p>
<div>
<pre><code>const ENTER = 13;
const SPACE = 32;
// Select your button and store it in ‘myButton’
myButton.addEventListener('keydown', function(event) {
    if (event.keyCode === ENTER || event.keyCode === SPACE) {
        event.preventDefault(); // Prevents unintentional form submissions, page scrollings, the like
        doSomething(event);
    }
});
</code></pre>
</div>

<p>When it comes to figuring out which keys to listen for, I suggest looking up the component you’re building in the <a href="https://www.w3.org/WAI/ARIA/apg/patterns/">ARIA Authoring Practices Guide</a> and following the keyboard interaction recommendations.</p>
Common Mistakes
<p>Having looked at a lot of code in my lifetime, I see some accessibility errors being made repeatedly. Here’s a list of the most common mistakes I find and how to avoid them:</p>
<h3>Using An <code>aria-labelledby</code> Attribute That References An ID That Doesn’t Exist</h3>

<p>For example, a modal that has a title in the modal but <code>aria-labelledby</code> is referencing something else that no longer exists. It’s probably something removed by another developer who didn’t realize the <code>aria-labelledby</code> connection was there. Instead, the modal title could’ve been an <code>&lt;h1&gt;</code> and either <code>aria-labelledby</code> could reference the <code>&lt;h1&gt;</code> or you could set the focus on the <code>&lt;h1&gt;</code> when the modal opens and a screen reader user would know what’s going on as long as <code>role="dialog”</code> was also used. Try to avoid fragile structures that, if someone else came along and edited the code, would break easily.</p>
<h3>Not Moving The Focus Into The Modal When It Opens</h3>
<p>Countless times I’ve seen a screen reader user navigating the page behind the modal either unaware a modal has opened or confused because they can’t find the contents of the modal. There are several ways to trap focus within a modal, but one of the newer methods is to add <code>inert</code> to the <code>&lt;main&gt;</code> landmark (and, of course, make sure the modal isn’t inside <code>&lt;main&gt;</code>). <a href="https://caniuse.com/?search=inert"><code>Inert</code> is getting better support across browsers</a> lately. To learn more, check out Lars Magnus Klavenes’ <a href="https://larsmagnus.co/blog/accessible-modal-dialogs-using-inert">Accessible modal dialogs using <code>inert</code></a>.</p>
<h3>Adding Roles That Duplicate HTML</h3>
<p>In general, doing something like this <code>&lt;button role="button”&gt;</code> is pointless. There is one case where it <em>might</em> make sense to do this. VoiceOver and Safari remove <code>list</code> element semantics when <code>list-style: none</code> is used. This was done on purpose because if there is no indication to a sighted user that the content is a list, why tell a screen reader user that it’s a list? If you want to override this, you can add an explicit ARIA <code>role="list"</code> to the <code>&lt;ul&gt;</code>.</p>
<p>Adrian Roselli says an unstyled list not being announced as a list “…may not be a big deal unless user testing says you really need a list.” I agree with him on that point, but I’m sharing the fix in case your user testing shows it’s beneficial.</p>
<h3>Adding <code>tabindex="0"</code> To Every Element</h3>

<p>Sometimes developers start using a screen reader and assume that tabbing is the only way to navigate; therefore, anything without tabindex isn’t accessible. This is NOT true. Remember, if you don’t know how to use a screen reader, you can’t troubleshoot usability issues. Meet with an everyday screen reader user to figure those out.</p>
<h3>Using Child Roles Without Parent Roles</h3>
<p>For example, <code>role="option"</code> must have a direct parent with <code>role="listbox"</code>.</p>
<pre><code>&lt;div role="listbox"&gt;
    &lt;ul&gt;
      &lt;li role="option"&gt;
</code></pre>

<p>The above code isn’t valid because there’s a <code>&lt;ul&gt;</code> between the parent and child elements. This can be fixed by adding a presentation role to essentially hide the <code>&lt;ul&gt;</code> from the accessibility tree, like <code>&lt;ul role="presentation”&gt;</code>.</p>
<h3>Using <code>role="menu"</code> For Navigation</h3>

<p>Website navigation is really a table of contents and not a menu. ARIA menus are not meant to be used for navigation but application behavior like the menus in a desktop application. Instead, use <code>&lt;nav&gt;</code>, and if you have child navigation links, those should be hidden until a button is pressed to show them:</p>
<pre><code>&lt;nav aria-label="Main menu"&gt;
    &lt;button aria-expanded="false"&gt;Products&lt;/button&gt;
    &lt;ul hidden&gt;
       &lt;li&gt;Cat pyjamas&lt;/li&gt;...
</code></pre>

<p>If you want to learn more, Heydon Pickering does a deep dive into <a href="https://www.smashingmagazine.com/2017/11/building-accessible-menu-systems/">Building Accessible Menu Systems</a> in his Smashing Magazine article.</p>
<p>Regarding navigation, using <code>&lt;nav&gt;</code> more than once on a page without giving each instance a unique label means that screen reader users will have to explore each navigation region to find the one they’re looking for. A simple <code>aria-label</code> on each <code>&lt;nav&gt;</code> will make it much easier.</p>
<pre><code>&lt;nav aria-label="Customer service"&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href="#"&gt;Help&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="#"&gt;Order tracking&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="#"&gt;Shipping &amp; Delivery&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="#"&gt;Returns&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="#"&gt;Contact us&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="#"&gt;Find a store&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
</code></pre>

How To Validate ARIA
<p>Use automated accessibility checkers like <a href="https://www.deque.com/axe/browser-extensions/">Axe</a> or <a href="https://wave.webaim.org/extension/">WAVE</a> extensions when you run your code in a browser. Accessibility linters like <a href="https://marketplace.visualstudio.com/items?itemName=deque-systems.vscode-axe-linter">Axe for Visual Studio Code</a> or <a href="https://github.com/jsx-eslint/eslint-plugin-jsx-a11y">ESLint for JSX elements</a> will check your code as you write it.</p>
<p>Listen to your code with a screen reader. You’d never ship code without running it in a browser to make sure it works, and using a screen reader can be the same kind of check. <a href="https://www.nvaccess.org/">NVDA</a> is free for Windows, and <a href="https://www.apple.com/ca/accessibility/vision/">VoiceOver</a> comes built into Macs and iPhones. <a href="https://support.google.com/accessibility/android/topic/3529932?hl=en&amp;ref_topic=9078845">TalkBack</a> is built into Android phones.</p>
<p>Test with assistive technology users. I consider this mandatory for any large organization that has a budget for accessibility (and they all should). There are companies that can recruit assistive technology users for testing or run user testing for you, and the company I work for can provide 2-day turnarounds on user testing that is facilitated by you or unmoderated to support accessibility testing at scale.</p>
Frameworks And Component Libraries
<p>If you’re using a web framework, one way to make the lift of building for accessibility a bit lighter is to use a component library with accessibility built in. I’ll add the caveat that accessibility can be complex and not everything that claims to be accessible is truly usable by assistive technology users. The best way to ensure accessibility is to always test with the users you are building for. </p>
<p>Here are some starting points for your search:</p>
<ul>
<li><a href="https://react-spectrum.adobe.com/react-aria/index.html">React Aria</a></li>
<li><a href="https://vue-a11y.com/">Vue A11y</a></li>
<li><a href="https://m3.material.io/">Material Design 3</a></li>
<li><a href="https://lion-web.netlify.app/">Lion</a></li>
<li><a href="https://open-ui.org/">Open UI</a></li>
</ul>
Conclusion
<p>Hopefully, this has demystified ARIA for you. Like a secret language that only the most elite accessibility geeks know, it has its own Fight Club-esque rules.</p>
<ol>
<li>The first rule of ARIA is “Don’t use ARIA.” A <code>&lt;button&gt;</code> will always be better than <code>&lt;div role="button"&gt;</code>.</li>
<li>Secondly, don’t override native semantics. Instead of <code>&lt;button role="heading"&gt;</code>, use <code>&lt;h3&gt;&lt;button&gt;</code>.</li>
<li>Also, always remember that all ARIA interactive elements must work with the keyboard.</li>
<li>Don’t use <code>role="presentation"</code> or <code>aria-hidden="true"</code> on a focusable element. <code>&lt;button role="presentation”&gt;</code> means you’re hiding that button only from assistive technology users. That’s not just inaccessible; it’s outright excluding certain users.</li>
<li>Last but not least, all interactive elements must have an accessible name. There are many ways to do that, and here are some of them:</li>
</ol>
<pre><code>&lt;button&gt;Print&lt;/button&gt; (the name is the button text)

&lt;div aria-label="Settings"&gt;&lt;svg&gt;&lt;/div&gt; (the aria-label assigns a name)

&lt;div aria-labelledby="myName"&gt;
  &lt;h1 id="myName"&gt;Heading&lt;/h1&gt;
&lt;/div&gt;

&lt;label for="name"&gt;Name&lt;/label&gt;
&lt;input type="text" id="name" /&gt;
</code></pre>

<p>I like to think of ARIA as a tool used by the most elite Special Ops Team that you call in for your most difficult accessibility challenges. Well, maybe I just always wanted to do one-arm pushups like Emily Blunt in Edge of Tomorrow, and this is the closest I can get. Anyhow, I hope this was helpful and that you are no longer confused about ARIA. Go forth and build accessible things!</p>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Kate Kalcevich)</author>
      <enclosure
        url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b5f0e5d2-bebc-4ea0-bf42-5557f79ab433/wai-aria-guide.jpg"
        length="0" type="image/jpg"/>
    </item>
    <item>
      <title>
        <![CDATA[Meet “Smart Interface Design Patterns Checklists” (Deck With 166 Cards)]]></title>
      <link>https://smashingmagazine.com/2022/09/smart-interface-design-checklist-cards-release/
      </link>
      <guid>https://smashingmagazine.com/2022/09/smart-interface-design-checklist-cards-release/
      </guid>
      <pubDate>Mon, 12 Sep 2022 13:00:00 GMT</pubDate>
      <description>
        <![CDATA[Meet “Smart Interface Design Patterns Checklists”, a deck of 166 checklist cards to help you design and build better interfaces, faster. With accordions, mega-drop-downs, data tables, carousels, and everything in-between.]]></description>
      <content:encoded><![CDATA[<p>Every UI component brings along its <strong>unique challenges</strong>. Inventing a new solution to every problem takes time, and very often it’s really not necessary. We can rely on <strong>smart design patterns</strong> and ask the right questions ahead of time to avoid issues down the line.</p>
<p>As a little celebration for our <strong>16th birthday</strong>, we are happy to finally release our <em>Smart Interface Design Checklists</em> — a deck of <strong>166 cards</strong> that are here to help us all keep track of the things we need to consider. <a href="/printed-books/checklist-cards/#bookTOC">Jump to table of contents.</a></p>

<ul>
<li><strong><a href="#about-the-checklist-cards">Jump to the details ↓</a></strong></li>
<li><a href="https://smashed.by/deck-preview">Check the free preview</a> (PDF, 825KB)</li>
<li>Shipping worldwide now.</li>
<li><a href="/printed-books/checklist-cards/"><strong>Get the deck of cards right away!</strong></a></li>
</ul>

<img src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/228ff9a3-0d50-47c4-bf6b-7a1efdcd08f4/smashing-checklist-cards-box.jpg" />


About The Checklist Cards
<p>Meet the deck of <strong>166 checklist cards</strong> with common questions to ask when tackling <em>any</em> interface challenge. Curated and compiled by yours truly to help us all keep track of all the fine little details to <strong>design and build better interfaces, faster</strong>. Plus, a good way to not forget anything critical, and avoid costly mistakes down the line.</p>

<p>The cards are beautifully designed by our dear illustrator <a href="https://www.ricardogimenes.com/">Ricardo Gimenes</a> and <em>jam-packed</em> with everything you need to keep in mind when designing UI components. This <strong>deck of checklist cards</strong> is always by your side — on your desk or on your phone when you’re on the go. <a href="https://smashed.by/deck-preview">Check the free preview.</a> (PDF, 825KB)</p>


    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/906fafdc-5e6f-44b6-9e34-140a420455b9/smashing-checklist-cards-box-sneak-peek.jpg">
    <img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/906fafdc-5e6f-44b6-9e34-140a420455b9/smashing-checklist-cards-box-sneak-peek.jpg" />
    </a>



    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/630a121e-3f95-405a-96e0-afba0d4caf7b/smashing-checklist-cards-coffee.jpg">
    <img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/630a121e-3f95-405a-96e0-afba0d4caf7b/smashing-checklist-cards-coffee.jpg" />
    </a>The Smart Interface Design Patterns Checklists are a trusty companion on any designer’s desk. <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/630a121e-3f95-405a-96e0-afba0d4caf7b/smashing-checklist-cards-coffee.jpg">Large view</a>.



What’s Inside The Box?
<p>The cards are here to help you make the <strong>right design decisions</strong>. They don’t provide ultimate answers; you can see them as helpful <strong>conversation starters</strong> for your design/dev teams to help avoid misunderstandings or confusion down the line. They remind you of things that often get forgotten, overlooked or dismissed.</p>
<p>Here’s an overview of all the topics covered by the deck of checklists:</p>

<div>


              <div>
                <div>
                  Designing For Touch Checklist
                </div>
              </div>
              <div>
                  +
              </div>


              <div>
                <ul>
                <li>Are all our icons large enough to avoid rage taps/clicks (50×50px)?</li>
                <li>Can users double tap on the same spot to undo/restore actions?</li>
                <li>Have we tested for frequency of rage clicks/taps?</li>
                <li><em>...and 23 more questions</em>.</li>
                </ul>
             </div>


              <div>
                <div>
                  Accordion Checklist
                </div>
              </div>
              <div>
                  +
              </div>


              <div>
                <ul>
                <li>What icon do we choose to indicate expansion?</li>
                <li>Should expanded section collapse automatically?</li>
                <li>Should the user be scrolled automatically when expanded?</li>
                <li><em>...and 11 more questions</em>.</li>
                </ul>
             </div>


              <div>
                <div>
                  Navigation Checklist
                </div>
              </div>
              <div>
                  +
              </div>


              <div>
                <ul>
                <li>Do drop-downs appear/disappear on hover, tap/click, or both?</li>
                <li>Do nav items appear in a full page/partial overlay or slide-in?</li>
                <li>Can we split the nav vertically for sub-menus on mobile?</li>
                <li><em>...and 27 more questions</em>.</li>
                </ul>
             </div>


              <div>
                <div>
                  Hamburger Menu Checklist
                </div>
              </div>
              <div>
                  +
              </div>


              <div>
                <ul>
                <li>Can we avoid a hamburger icon and show navigation as is?</li>
                <li>What happens when the user opens both search and hamburger?</li>
                <li>Do we expose critical navigation by default on desktop/mobile?</li>
                <li><em>...and 20 more questions</em>.</li>
                </ul>
             </div>


              <div>
                <div>
                  Filtering Checklist
                </div>
              </div>
              <div>
                  +
              </div>


              <div>
                <ul>
                <li>Do we expose popular or relevant filters by default?</li>
                <li>Do we display the number of expected results for each filter?</li>
                <li>Do we apply filters automatically or manually on “Apply” button?</li>
                <li><em>...and 22 more questions</em>.</li>
                </ul>
             </div>


              <div>
                <div>
                  Sorting Checklist
                </div>
              </div>
              <div>
                  +
              </div>


              <div>
                <ul>
                <li>Do we repeat sorting at the bottom of the content list?</li>
                <li>Do we include the “Sort by” label separately from the buttons/dropdown?</li>
                <li>Does the default sorting reflect the diversity of all major product types?</li>
                <li><em>...and 29 more questions</em>.</li>
                </ul>
             </div>


              <div>
                <div>
                  Search Autocomplete Checklist
                </div>
              </div>
              <div>
                  +
              </div>


              <div>
                <ul>
                <li>Do we surface frequent hits, popular searches, products or categories at the top of autosuggestions?</li>
                <li>At what characater do we start displaying autosuggestions?</li>
                <li>Do we use look-ahead pattern for search queries?</li>
                <li><em>...and 30 more questions</em>.</li>
                </ul>
             </div>


              <div>
                <div>
                  Carousels Checklist
                </div>
              </div>
              <div>
                  +
              </div>


              <div>
                <ul>
                <li>Can we display thumbnails or a grid instead of a carousel?</li>
                <li>Is there a way to pause a carousel if it’s auto-rotating?</li>
                <li>How do we choose the sequence of slides?</li>
                <li><em>...and 29 more questions</em>.</li></ul>
             </div>


              <div>
                <div>
                  Tables Checklist
                </div>
              </div>
              <div>
                  +
              </div>


              <div>
                <ul>
                  <li>Do we add steppers to navigate through columns or rows predictably?</li>
                  <li>Do we highlight the cell, row or column on user’s tap/click?</li>
                  <li>With rows as cards on mobile, do we expose relevant data for comparison?</li>
                  <li><em>...and 25 more questions</em>.</li>
                </ul>
             </div>


              <div>
                <div>
                  Pricing Plans Checklist
                </div>
              </div>
              <div>
                  +
              </div>


              <div>
                <p>How many features do we want to display per plan?</p><ul>
                  <li>Do we want to allow customers to switch currency (€/$/£)?</li>
                  <li>Can we avoid requiring credit card data for the free trial period?</li>
                  <li><em>...and 48 more questions</em>.</li>
                </ul>
             </div>


              <div>
                <div>
                  Sliders Checklist
                </div>
              </div>
              <div>
                  +
              </div>


              <div>
                <ul>
                  <li>Do we provide a text input fallback for precise input?</li>
                  <li>Are there any values on a slider that shouldn’t be accepting?</li>
                  <li>Should users be able to “lock” some values?</li>
                  <li><em>...and 16 more questions</em>.</li>
                </ul>
             </div>


              <div>
                <div>
                  Date Pickers Checklist
                </div>
              </div>
              <div>
                  +
              </div>


              <div>
                <ul>
                  <li>What presets (‘prev day’/’current day’) do we need for faster navigation?</li>
                  <li>Do we use dots color coding for different rates or days?</li>
                  <li>How do we avoid displaying unavailable dates or zero-results?</li>
                  <li><em>...and 17 more questions</em>.</li>
                </ul>
             </div>


              <div>
                <div>
                  Configurators Checklist
                </div>
              </div>
              <div>
                  +
              </div>


              <div>
                <ul>
                  <li>What’s the entry point to the configurator?</li>
                  <li>Should the user automatically move to the next step when finished?</li>
                  <li>For every step, do we explain and highlight dependencies?</li>
                  <li><em>...and 31 more questions</em>.</li>
                </ul>
             </div>


              <div>
                <div>
                  Feature Comparison Checklist
                </div>
              </div>
              <div>
                  +
              </div>


              <div>
                <ul>
                  <li>Can users switch to see only differences/similarities/all?</li>
                  <li>Can the user move columns left and right?</li>
                  <li>Should we ask customers to choose preferred attributes?</li>
                  <li><em>...and 24 more questions</em>.</li>
                </ul>
             </div>


              <div>
                <div>
                  Timelines Checklist
                </div>
              </div>
              <div>
                  +
              </div>


              <div>
                <ul>
                  <li>How do we expose/highlight critical events (e.g. now/coming up next)?</li>
                  <li>Should some events or time segments be available/fixed at all times?</li>
                  <li>Do we communicate changes over time with an underlying histogram?</li>
                  <li><em>...and 21 more questions</em>.</li>
                </ul>
             </div>


              <div>
                <div>
                  Schedule And Calendars Checklist
                </div>
              </div>
              <div>
                  +
              </div>


              <div>
              <ul>
              <li>Do we provide quick jumps between tracks?</li>
              <li>Should we consider flipping the timing header by 90 degrees?</li>
              <li>Do we display what’s happening now and coming up next?</li>
              <li><em>...and 21 more questions</em>.</li>
              </ul>
             </div>


              <div>
                <div>
                  Maps Checklist
                </div>
              </div>
              <div>
                  +
              </div>


              <div>
                <ul>
                  <li>Do we provide zooming?</li>
                    <li>How many levels of depth will zoom provide?</li>
                    <li>Would an autocomplete search help users find information faster?</li>
                    <li>For charts, can we flip axis to make use of available space?</li>
                    <li><em>...and 23 more questions</em>.</li>
                  </ul>
             </div>


              <div>
                <div>
                  Seating Plans Checklist
                </div>
              </div>
              <div>
                  +
              </div>


              <div>
                <ul>
                  <li>What kinds of pricing tiers and discounted tickets (senior, student) do we have?</li>
                  <li>Do we have any planes or floors that users need to navigate between?</li>
                  <li>Do we calculate and display an experience score for each seat?</li>
                  <li><em>...and 23 more questions</em>.</li>
                </ul>
             </div>


              <div>
                <div>
                  Privacy Checklist
                </div>
              </div>
              <div>
                  +
              </div>


              <div>
                <ul>
                  <li>Can we group user data according to low/medium/high priority?</li>
                  <li>Can we gradually request more user permissions when we need them?</li>
                  <li>Do we ask for permissions only if we are likely to get them?</li>
                  <li><em>...and 41 more questions</em>.</li>
                </ul>
             </div>


              <div>
                <div>
                  Onboarding Checklist
                </div>
              </div>
              <div>
                  +
              </div>


              <div>
                <ul>
                  <li>Can we avoid intro tours, tooltips, wizards and slideshows as they are usually skipped?</li>
                  <li>Do we use empty state to indicate our features?</li>
                  <li>When is the right timing to show a particular feature?</li>
                  <li><em>...and 12 more questions</em>.</li>
                </ul>
             </div>


              <div>
                <div>
                  Reviews and Testimonials Checklist
                </div>
              </div>
              <div>
                  +
              </div>


              <div>
                <ul>
                  <li>Can we group testimonials by a feature/impact and highlight them together?</li>
                  <li>Do we highlight the number of testimonials/reviews prominently?</li>
                  <li>Do we display name, photo, title, age, location, role, company, brand logo?</li>
                  <li><em>...and 33 more questions</em>.</li>
                </ul>
             </div>


              <div>
                <div>
                  Web Forms Checklist
                </div>
              </div>
              <div>
                  +
              </div>


              <div>
                <ul>
                  <li>Will we be using floating labels? If so, are they accessible?</li>
                  <li>For a country selector, do we display some countries as frequently used?</li>
                  <li>Do we show the number of errors above the "Submit" button and in the tab title as a prefix?</li>
                  <li><em>...and 73 more questions</em>.</li>
                </ul>
             </div>


              <div>
                <div>
                  Donation Form Checklist
                </div>
              </div>
              <div>
                  +
              </div>


              <div>
                <ul>
                  <li>Do we include any testimonials or stories next to the donation form?</li>
                  <li>What suggested donation amounts do we display, and how many?</li>
                  <li>Which types of donations do we have: one-off, monthly, quarterly, annually?</li>
                  <li><em>...and 29 more questions</em>.</li>
                </ul>
             </div>


              <div>
                <div>
                  Authentication Checklist
                </div>
              </div>
              <div>
                  +
              </div>


              <div>
                <ul>
                  <li>What password requirements do we want/need to implement?</li>
                  <li>Do we really need CAPTCHA, or can we use honeypot/time traps instead?</li>
                  <li>Do we limit the frequency of password recovery attempts?</li>
                  <li><em>...and 31 more questions</em>.</li>
                </ul>
             </div>


              <div>
                <div>
                  Product Page Checklist
                </div>
              </div>
              <div>
                  +
              </div>


              <div>
                <ul>
                  <li>What layout do we use for the page (tabs, accordions, one long page, floating bar)?</li>
                  <li>Do we display the final price (incl. standard shipping, taxes, payment fees, currency)?</li>
                  <li>What do we display when an item is out of stock (notification via SMS/email)?</li>
                  <li><em>...and 73 more questions</em>.</li>
                </ul>
             </div>


              <div>
                <div>
                  Video Player Checklist
                </div>
              </div>
              <div>
                  +
              </div>


              <div>
                <ul>
                  <li>How do we optimize for precise input and fast-forwards (keyboard, buttons)?</li>
                  <li>Do we use preview clips, popularity bar, key moments preview?</li>
                  <li>Do we persist the position of the video track on refresh?</li>
                  <li><em>...and 30 more questions</em></li>
                </ul>
             </div>


              <div>
                <div>
                  Disabled Buttons Checklist
                </div>
              </div>
              <div>
                  +
              </div>


              <div>
                <ul>
                  <li>When should the button become disabled?</li>
                  <li>What happens when the user hovers or taps on the disabled button?</li>
                  <li>Do we prevent the click via JavaScript by using <code>aria-disabled</code>?</li>
                  <li><em>...and 32 more questions</em>.</li>
                </ul>
             </div>


              <div>
                <div>
                  Inline Validation Checklist
              </div>
              <div>
                  +
              </div>
          </div>

              <div>
                <ul>
                  <li>For every input, do we have exact validation requirements?</li>
                  <li>What happens when a user refreshes the page?</li>
                  <li> When editing a field that was invalid, do we validate immediately during data entry?</li>
                  <li><em>...and 47 more questions</em>.</li>
                </ul>
             </div>


              <div>
                <div>
                  Back Button UX Checklist
                </div>
              </div>
              <div>
                  +
              </div>


              <div>
                <ul>
                  <li>Can we make the URL more helpful, structured, and human-readable?</li>
                  <li>For a sorting direction, does the “Back” button restore the previously set sorting direction?</li>
                  <li>If a user jumps abruptly on the page, does the “Back” button bring them to the previous spot on the same page?</li>
                  <li><em>...and 28 more questions</em>.</li>
                </ul>
             </div>


              <div>
                <div>
                  Modals Checklist
                </div>
              </div>
              <div>
                  +
              </div>


              <div>
                <ul>
                  <li>When do we absolutely need to interrupt the user (modal)?</li>
                  <li>Do we want to use a modal for critical notifications?</li>
                  <li>When do we want to dim the background (modal, lightbox)?</li>
                  <li><em>...and 55 more questions</em>.</li>
                </ul>
             </div>


              <div>
                <div>
                  Mega-Dropdowns Checklist
                </div>
              </div>
              <div>
                  +
              </div>


              <div>
                <ul>
                  <li>How many levels of navigation should be accessible directly from the mega-dropdown?</li>
                  <li>Do we highlight a selected section (e.g. underlined/background change)?</li>
                  <li>How do we extend navigation of necessary (e.g. if more items need to be added)?</li>
                  <li><em>...and 27 more questions</em>.</li>
                </ul>
             </div>


</div>

<p><strong>166 checklist cards</strong> in a sturdy box. The <a href="/ebooks/checklist-cards-digital/">digital version</a> is available as PDF.</p>

About the Author
<p><a href="https://twitter.com/smashingmag"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c1dda88d-056e-4fdf-9827-76237a824556/vitaly-friedman.jpg" /></a><em>Vitaly Friedman</em> loves beautiful content and doesn’t like to give in easily. When he is not writing, he’s most probably running <a href="https://www.smashingmagazine.com/smashing-workshops/">front-end &amp; UX workshops</a>. He loves solving complex UX, front-end, and performance problems.</p>

You’ll get:
  <ul>
   <li><strong>166 checklist cards</strong> on everything from hamburger navigation and carousels to web forms and tables, carefully curated by Vitaly Friedman and designed by Ricardo Gimenes and Ari Stiles,</li>
   <li><strong>Practical examples</strong> and guidelines (400 slides),</li>
   <li><strong>Editable text file</strong> to adjust for your needs,</li>
   <li>Life-time access to the deck, updated regularly (digital version).</li>
  </ul>

Team Bundle Discounts 🎉
<p>Do you want to equip your entire team with the card deck? Now, that’s a great ide! If you plan to get <strong>5+ decks</strong>, you’ll get a friendly <strong>15% discount</strong>. Get in touch with <a href="mailto:help@smashingmagazine.com?subject=Cards Bundle Discount">help@smashingmagazine.com</a>, and we’ll make it happen!</p>


    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3b9d9276-7450-4c9f-8e3c-b95e9f0ddf6f/smashing-checklist-cards-stack.jpg">
    <img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3b9d9276-7450-4c9f-8e3c-b95e9f0ddf6f/smashing-checklist-cards-stack.jpg" />
    </a>



    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/61fcde46-f228-4dfd-b240-a242a4e5c6c5/smashing-checklist-cards-closeup.jpg">
    <img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/61fcde46-f228-4dfd-b240-a242a4e5c6c5/smashing-checklist-cards-closeup.jpg" />
    </a>166 checklist cards to help you ask the right questions at the right time. <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/61fcde46-f228-4dfd-b240-a242a4e5c6c5/smashing-checklist-cards-closeup.jpg">Large view</a>.




Technical Details
<ul>
<li>166 checklist cards in a sturdy box.</li>
<li>Practical examples and action points (400 slides).</li>
<li>Editable text file.</li>
<li>Life-time access to the updated deck (digital version).</li>
<li>Free worldwide <strong>shipping from Germany</strong>.</li>
<li><a href="/printed-books/checklist-cards/">Get the checklist cards right away.</a></li>
</ul>



More Smashing Books &amp; Goodies
<p>Promoting best practices and providing you with practical tips to master your daily coding and design challenges has always been (and will be) at the <strong>core of everything we do</strong> at Smashing.</p>

<p>In the past few years, we were very lucky to have worked together with some talented, caring people from the web community to publish their wealth of experience as <a href="/printed-books/">printed books that stand the test of time</a>. Steven, Stefan, and Adam are three of these people. Have you checked out their books already?</p>

<div>
<div><a href="/printed-books/touch-design-for-mobile-interfaces/"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b14658fc-bb2d-41a6-8d1a-70eaaf1b8ec8/touch-design-book-shop-opt.png" /></a></div><h4><a href="/printed-books/touch-design-for-mobile-interfaces/">Touch Design for Mobile Interfaces</a></h4><p>How do we design for touch in 2022?</p><p><a href="/printed-books/touch-design-for-mobile-interfaces/">Add to cart $44</a></p>

<div><a href="/printed-books/typescript-in-50-lessons/"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c2f2c6d6-4e85-449a-99f5-58bd053bc846/typescript-shop-cover-opt.png" /></a></div><h4><a href="/printed-books/typescript-in-50-lessons/">TypeScript In 50 Lessons</a></h4><p>Everything you need to know about TypeScript, its type system, generics and its benefits.</p><p><a href="/printed-books/typescript-in-50-lessons/">Add to cart $44</a></p>

<div><a href="/printed-books/form-design-patterns/"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dfedd736-f4dd-467b-aed5-7f3cb5af7dd9/form-design-patterns-shop-image-opt.png" /></a></div><h4><a href="/printed-books/form-design-patterns/">Form Design Patterns</a></h4><p>A practical guide to designing and coding simple and inclusive forms.</p><p><a href="/printed-books/form-design-patterns/">Add to cart $44</a></p>
</div>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Vitaly Friedman)</author>
      <enclosure
        url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/228ff9a3-0d50-47c4-bf6b-7a1efdcd08f4/smashing-checklist-cards-box.jpg"
        length="0" type="image/jpg"/>
    </item>
    <item>
      <title><![CDATA[One Formula To Rule Them All: The ROI Of A Design System]]></title>
      <link>https://smashingmagazine.com/2022/09/formula-roi-design-system/</link>
      <guid>https://smashingmagazine.com/2022/09/formula-roi-design-system/</guid>
      <pubDate>Fri, 09 Sep 2022 08:30:00 GMT</pubDate>
      <description>
        <![CDATA[Design systems are a crucial success factor for digital businesses, and virtually every major player works with one. Still, they can sometimes be hard to sell to management. Here’s a ready-to-use formula to calculate the ROI of any design system.]]></description>
      <content:encoded><![CDATA[<p>Design systems have become a standard in the digital industry. Virtually every big player uses one — from Amazon over Google and Airbnb to Uber. There have been numerous studies and reports on their efficacy in improving productivity, reducing bugs, and improving digital products (e.g., <a href="https://ieeexplore.ieee.org/document/962984/authors#authors">Boehm &amp; Basili</a>, 2001; <a href="https://www.youtube.com/watch?v=v8i1qeCv2IQ">Klüver</a>, 2019; <a href="https://www.projekt202.com/blog/2016/design-system">Loomer</a>, 2016; <a href="https://uxdesign.cc/how-much-is-a-design-system-worth-d72e2ededf76">Ray</a>, 2018; <a href="https://www.figma.com/blog/measuring-the-value-of-design-systems/">Slack</a>, 2019; <a href="https://sparkbox.com/foundry/design_system_roi_impact_of_design_systems_business_value_carbon_design_system">Sparkbox</a>, n.d.). And yet — as we have experienced in various jobs firsthand — it’s still a common situation that the value of having a design system has to be proven again and again.</p>
<p>For many features implemented in digital products, a simple <strong>competitive benchmark</strong> is enough to convince management, particularly in e-commerce. “If everyone else is doing it, we can just copy with pride,” is an often-heard statement. But the same standard seems not to apply to design systems. </p>
<p>This is most probably due to the fact that, at least at first, design systems are perceived as a very <strong>abstract investment</strong> — the value they’ll ultimately produce is not immediately visible and noticeable. On top, the upfront investment can seem huge to management compared to smaller, more concrete features design and development teams could be working on that produce more graspable value (and technical/design debt) more quickly.</p>
<p>Hence, the necessity to prove the value of a new design system beyond a simple competitive benchmark is a reality everyone who wants to get started with this topic must face, as Ben Callahan has already noted in a previous article on the topic (<a href="https://alistapart.com/article/selling-design-systems/">Callahan</a>, 2021). We’ve personally done it time and again. </p>
<p>To make this reality more manageable for everyone, based on our experience, we’ve devised a general <strong>formula to approximate the return of investment</strong> (ROI) of a design system with a minimum of parameters. We see this as a handy complement to the great but a little more strategic advice <a href="https://alistapart.com/article/selling-design-systems/">Callahan</a> (2021) already provides on how to sell a design system.</p>
<p>In the following, we will first give a very brief introduction to design systems. Subsequently, we’ll introduce our formula, elaborate on the assumptions we made, and explain the different parameters you can tweak. We’ll conclude with a specific example of how to apply it.</p>
A Very Brief Introduction To Design Systems
<p>A design system is a “collection of <strong>reusable components</strong>, guided by clear standards, that can be assembled together to build any number of applications.” (<a href="https://www.invisionapp.com/inside-design/guide-to-design-systems/">Fanguy</a>, 2019). Examples of design systems are <a href="https://material.io/">Material Design</a> by Google, <a href="https://www.lightningdesignsystem.com/">Lightning</a> by Salesforce, and <a href="https://polaris.shopify.com/">Polaris</a> by Shopify. Zalando also has a design system, about which they regularly <a href="https://medium.com/zalando-design/tagged/design-systems">write on Medium</a>. In general, it is safe to say that design systems have become a staple in every serious digital organization, independent of the kind of industry.</p>
<p>It is important to note here that design systems should not be confused with mere <em>style guides</em> or simple <em>component libraries</em> (<a href="https://medium.com/swlh/whats-a-design-system-design-language-and-design-language-system-and-what-s-the-difference-e157852d6ec0">Speicher</a>, 2020). A true design system spans the whole organization in terms of interaction and visual design, engineering, <em>brand design</em>, <em>content</em>, and so on. It introduces <em>clear guidelines</em> on how and why to use them, particularly in combination, on top of the ‘simple’ components. </p>
<blockquote>“A design system [sometimes also called a ‘design language’] is a set of standards to manage design at scale by reducing redundancy while creating a shared language and visual consistency across different pages and channels.”<br /><br />— <a href="https://www.nngroup.com/articles/design-systems-101/">Fessenden</a>, 2021</blockquote>

<p>It allows for <strong>creating and replicating design work</strong> quickly and at scale, alleviating strain on design and development resources. It leads to less repetitive work, which enables a focus on larger, more complex problems, more creativity, more innovation, and therefore has a wide range of advantages:</p>
<ul>
<li>More quality and consistency (cf. <a href="https://www.interaction-design.org/literature/article/principle-of-consistency-and-standards-in-user-interface-design">Wong</a>, 2019); </li>
<li>Reduced time inefficiency; </li>
<li>A unified language within and between cross-functional teams;</li>
<li>Visual consistency across products, channels, and departments; </li>
<li>An educational tool and reference, e.g., for quicker onboarding; </li>
<li>A single source of truth for designers, developers, and all other stakeholders. </li>
</ul>
<p>We believe that if Henry Ford lived today and worked on a digital Model T, he’d use a design system.</p>
<p>There are different ways a design system can be built and maintained within an organization, the two most popular ones being the centralized model and the federated model (<a href="https://medium.com/eightshapes-llc/team-models-for-scaling-a-design-system-2cf9d03be6a0">Curtis</a>, 2015). We base this article, and our formula, on the <em>federated model</em>, which means that designers and developers work out “what the system is and spread[ing] it out to everyone else. Without quitting their day jobs on product teams.” (Curtis, 2015) We do this for two reasons.</p>
<p>First, if you have trouble gaining management buy-in in the first place, arguing for a centralized model — with a dedicated team taking care of the design system — might only complicate the mission further. A <strong>federated approach</strong> is a good starting point because designers and developers can simply get working on the design system ‘on the side.’ It can then be transformed into a centralized model — or a hybrid one (cf. <a href="https://spotify.design/article/the-paradox-of-design-systems">Manwaring &amp; Mateo</a>, 2018) — once the value of the design system has been recognized. </p>
<p>Second, in a centralized model, a design system often evolves into a <strong>product of its own</strong>, complete with product managers, customer support, and so on. However, for the sake of keeping our formula as feasible as possible, we’re focusing only on designers and developers in the following. Design system‒induced productivity gains for such teams are easy to benchmark, and you’ll see that just this limited scope already makes for a very compelling case.</p>
The ROI Of A Design System
<p>Our design system ROI formula has two components:</p>
<ol>
<li>What you’ll <em>gain</em> over time from the design system you build;</li>
<li>What building and maintaining will <em>cost</em> you.</li>
</ol>
<p>$$ cost = \max(\frac{240}{X},6) \times X\% + \min(60 - \frac{240}{X}, 54) \times Y\% $$
$$ gain = \max(\frac{120}{X},3) \times \frac{Z\%}{2} + \min(60 - \frac{240}{X}, 54) \times Z\% $$
$$ ROI = \frac{gain - cost}{cost} \times 100 $$</p>
<p>Having calculated these two components, it’s straightforward to use them in the standard formula to calculate ROI. In the following, we’ll explain all of the different parts in more detail.</p>
<h3>Assumptions</h3>
<p>Our formula orients at the “<strong>Design System Efficiency Curve</strong>”, i.e., at first, you’ll see a drop in productivity due to the necessary upfront investment. Still, after a break-even point where the design system has grown enough to compensate for that, productivity gains are significant.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3a61043f-87f4-4a72-b432-bd10a82204a5/13-formula-roi-design-system.png" /></p>
<p>For a specific formula, however, it’s necessary to make some (conservative but adjustable) assumptions. In our case, we have agreed on the general assumptions below in discussions within a design system task force comprising representatives from our design and engineering teams at BestSecret Group.</p>
<p>$$ cost = \max(\frac{{\color{red}240}}{X},{\color{LimeGreen}6}) \times X\% + \min({\color{Cerulean}60} - \frac{{\color{red}240}}{X}, {\color{BlueGreen}54}) \times Y\% $$
$$ gain = \max(\frac{{\color{magenta}120}}{X},{\color{green}3}) \times \frac{Z\%}{2} + \min({\color{Cerulean}60} - \frac{{\color{red}240}}{X}, {\color{BlueGreen}54}) \times Z\% $$</p>
<ol>
<li>A design system is ‘good’ for five years (= <code>60</code> months). That is, we anticipate a major revamp roughly every five years, e.g., due to a change in brand identity. This is where the <code>60</code> in the formula comes from. We’re well aware that a brand redesign is, of course, no reason to throw away everything and start from scratch again and that a design system might even make a rebrand much easier. However, please bear in mind that we want to make very conservative assumptions here and that if a business decides to shake up things, it would still be necessary to adjust a lot of things in a design system that go beyond pure day-to-day maintenance.</li>
<li>The estimate of our designers and engineers was that if one initially invests 20% of their time into building the design system, it will take them 12 months to get it up and running. If they invest less or more, the ramp-up phase will become longer or shorter in a linear manner because a given design system will always need the same amount of effort put into it. Please note that this assumption varies with the amount of person-power a company could put into a design system. Obviously, if there are 200 designers and 200 developers who could all spend 20% of their time on a design system, things might move much faster than 12 months, and the <code>240</code> and <code>120</code> in the formula could be tweaked accordingly. We consider our assumption reasonable for an ‘average’ set-up with ~10 designers and ~30 developers (plus/minus).</li>
<li>However, a design system takes at least <code>6</code> months to set up. Anything less would be unrealistic in a real-world setting (due to coordination and alignment efforts), and we anticipated that probably no business would agree to invest more than 40% of designers’ or developers’ time in setting up a design system. That’s why we have included the <em>max</em> and <em>min</em> functions in the formula, and that’s where the <code>6</code> and <code>54</code> (60 months minus 6 months) come from.</li>
<li>For the first half of the ramp-up phase, we have no productivity gains yet.</li>
<li>For the second half of the ramp-up phase, we have 50% productivity gains. That’s why we have <code>3</code> instead of <code>6</code> in the <em>gain</em> part of the formula.</li>
<li>After the ramp-up phase, we have full productivity gains.</li>
</ol>
<p>With these assumptions in place, we can now have a look at what the parameters <code>X</code>, <code>Y</code>, and <code>Z</code> mean.</p>
<h3>Parameters</h3>
<p>$$ cost = \max(\frac{240}{{\color{Fuchsia}X}},6) \times {\color{Fuchsia}X}\% + \min(60 - \frac{240}{{\color{Fuchsia}X}}, 54) \times {\color{orange}Y}\% $$
$$ gain = \max(\frac{120}{{\color{Fuchsia}X}},3) \times \frac{{\color{Bittersweet}Z}\%}{2} + \min(60 - \frac{240}{{\color{Fuchsia}X}}, 54) \times {\color{Bittersweet}Z}\% $$</p>
<p><code>X</code> denotes the percentage of time invested in building the design system. If X=20, the formula gives us 240/20=12 months of ramp-up phase.</p>
<p><strong>Note</strong>: <em>For <code>X&lt;4.62</code>, the formula “breaks down” since the ramp-up phase would be ≥5 years.</em></p>
<p><code>Y</code> denotes the percentage of time invested in ongoing maintenance after the ramp-up phase. In our specific case, we assumed 0.5X, but essentially, Y could be anything.</p>
<p><code>Z</code> denotes the amount of time saved by using the design system in percent. This is equal to productivity or efficiency gains.</p>
<p><code>X</code> and <code>Y</code> are relatively straightforward to specify: you ‘just’ have to agree on how much time you want to / can spend taking care of the design system. However, <code>Z</code> is a different story. Since it’s the productivity gain yielded by the design system, it’s impossible to know the parameter precisely beforehand. So, how can we estimate <code>Z</code> in a meaningful way? Essentially, this is a predictive judgment, so we followed the advice by Kahneman et al. (2021) — considering the base rate of design system productivity gains by doing a literature review and averaging the numbers reported.</p>
<p>The existing studies about design system productivity gains we found most convincing were <a href="https://www.youtube.com/watch?v=v8i1qeCv2IQ">Klüver</a> (2019), <a href="https://www.projekt202.com/blog/2016/design-system">Loomer</a> (2016), <a href="https://uxdesign.cc/how-much-is-a-design-system-worth-d72e2ededf76">Ray</a> (2018), <a href="https://www.figma.com/blog/measuring-the-value-of-design-systems/">Slack</a> (2019), and <a href="https://sparkbox.com/foundry/design_system_roi_impact_of_design_systems_business_value_carbon_design_system">Sparkbox</a> (n.d.).</p>
<p>Klüver (2019), Ray (2018), and Slack (2019) report 50%, 31%, and 34% better efficiency for <em>design</em> teams, which means an average of <code>Z=38</code>.</p>
<p>Klüver (2019), Loomer (2016), and Sparkbox (n.d.) report 25%, 20%, and 47% better efficiency for <em>development</em> teams, which means an average of <code>Z=31</code>.</p>
<p>Hence, in our case, we calculated ROI separately for design and development teams with the two different values for <code>Z</code>, and then aggregated it afterwards. In the next section, we’ll guide you through how exactly that works.</p>
Example
<p>Acme, Inc. has a team of 5 designers and a team of 10 developers who want to kick off building a design system together. They want to prove that the gains yielded by a design system in the mid- to long-term far exceed the necessary investment. Therefore, they grab the design system ROI formula and get going.</p>
<p>They estimate that everyone would probably be able to invest 30% (<code>X=30</code>) of their time during the ramp-up phase and afterwards 10% (<code>Y=10</code>) for maintenance. They moreover rely on the above base rates for productivity gains (<code>Z=38</code> for design, <code>Z=31</code> for development). They start with the ROI for the design team over the next five years.</p>
<h3>Design</h3>
<p>On the <em>cost</em> side, 30% time investment means the ramp-up phase would be <code>240/30=8</code> months long. That is, <code>8*30%=2.4</code> months would be effectively spent on building the design system. Afterwards, <code>60-8=52</code> months remain for the 5-year period, and of those, <code>52*10%=5.2</code> months would be effectively spent on maintenance. Overall, there would be 7.6 months (out of five years) of work put into the design system.</p>
<p>$$ cost = \max(\frac{240}{30},6) \times 30\% + \min(60 - \frac{240}{30}, 54) \times 10\% \Leftrightarrow $$
$$ cost = 8 \times 30\% + 52 \times 10\% = 2.4 + 5.2 = 7.6  $$</p>
<p>On the <em>gain</em> side, a ramp-up phase of 8 months would mean four months of half the productivity gains. That is <code>4*(38%/2)=0.76</code> months. Afterwards, for the remaining 52 months, we would see full productivity gains, i.e., <code>52*38%=19.76</code> months. Overall, the design system would therefore save the design team 20.52 months of needless work.</p>
<p>$$ gain = \max(\frac{120}{30},3) \times \frac{38\%}{2} + \min(60 - \frac{240}{30}, 54) \times 38\% \Leftrightarrow $$
$$ gain = 4 \times 19\% + 52 \times 38\% = 0.76 + 19.76 = 20.52 $$</p>
<p>Together with the 7.6 months of work spent on building and maintaining the design system, this yields an ROI of <code>(20.52-7.6)/7.6=170%</code>. In other words, you get $2.70 back for every dollar invested in the design system.</p>
<p>If one designer costs $5,000 a month, that means the design system would cost Acme, Inc. <code>7.6*$5,000*5=$190,000</code> while it would save them <code>20.52*$5,000*5=$513,000</code> when looking at the design team alone.</p>
Development
<p>Doing the same thing for development is relatively straightforward based on the above. Since the designers and developers at Acme, Inc. agreed on everyone investing 30% for ramp-up and 10% for maintenance, the <em>cost</em> side stays exactly the same. Like the designers, the developers will be busy with the design system for effectively 7.6 months over five years.</p>
<p>On the <em>gain</em> side, however, we have to exchange the value for <code>Z</code>, from 38 to 31. Luckily, that’s the only thing, and the rest remains as above.</p>
<p>$$ gain = \max(\frac{120}{30},3) \times \frac{31\%}{2} + \min(60 - \frac{240}{30}, 54) \times 31\% \Leftrightarrow $$
$$ gain = 4 \times 15.5\% + 52 \times 31\% = 0.62 + 16.12 = 16.74 $$</p>
<p>So, in the case of development, we’d invest 7.6 months and save 16.74 months of unnecessary work. This gives us an ROI of <code>(16.74-7.6)/7.6=120%</code>.</p>
<p>If one developer costs $6,000 a month, that means the design system would cost Acme, Inc. <code>7.6*$6,000*10=$456,000</code> while it would save them a whooping <code>16.74*$6,000*10=$1,004,400</code> when looking at the development team alone.</p>
Bringing It All Together
<p>Combining the calculations for design and development, therefore, yields the following:</p>
<ul>
<li>Design:<ul>
<li>costs = $190,000</li>
<li>gains = $513,000</li>
<li>ROI = 170%</li>
</ul>
</li>
<li>Development:<ul>
<li>costs = $456,000</li>
<li>gains = $1,004,400</li>
<li>ROI = 120%</li>
</ul>
</li>
<li>Total:<ul>
<li>costs = $646,000</li>
<li>gains = $1,517,400 (net gains = $871,400)</li>
<li>ROI = (1,517,400-646,000)/646,000 = 135%</li>
</ul>
</li>
</ul>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1bf13cec-d36d-49b6-b167-5811fc701e51/10-formula-roi-design-system.jpg" /></p>
<p>To top things off and make them look more like an approximation, you can round the final numbers and indicate the error. We’ve played around with some variance in the parameters (please feel free to do so on your own) and for the final result, ±25% seems to be reasonable. For instance, “we estimate 135% ROI and $900,000 (±225,000) net gains from the design system over five years.”</p>
Conclusion
<p>Based on Ben Callahan’s ‘Design System Efficiency Curve’ and our own experiences with pitching design systems to management, we have devised a general formula with only three parameters for quickly and easily calculating the ROI of a design system. We hope this formula will prove useful to our many colleagues that are just as excited about design systems as we are and want to get started working on this. As a little additional helper, you can download our <a href="https://1drv.ms/x/s!Aoc937YODdWatQsSCHcSgzF-1PwM?e=yjGaOW">design system ROI calculator in Excel</a>.</p>
<p>We know all of this is just an approximation based on a lot of assumptions. Additionally, we have only considered designers and developers in a federated model here, and not dived deeper into topics like onboarding benefits, scale benefits, consistency and trust benefits, and better accessibility and usability, which all provide value on top of plainly being more productive (<a href="https://alistapart.com/article/selling-design-systems/">Callahan</a>, 2021). </p>
<p>Also, we have not considered productivity gains for product, QA, and user research teams and so on (who as well benefit from a design system) in our formula. One reason for this is simplicity — we wanted to provide a formula that is feasible and easily understandable. Another is that efficiency gains in design and development teams are at the core of a design system, and benchmarks are widely available for determining the parameter <code>Z</code>. (All this, however, also means that the true ROI of a design system is probably much higher than what our formula yields, which makes the case even stronger rather than weaker.)</p>
<p>Despite all these limitations in our approach, the value of a design system is undeniable. We’re confident that our formula can reliably prove this and help build a compelling case, at the very least, for cases similar to ours. Otherwise, the underlying assumptions can be easily fine-tuned. And if in doubt, it’s always possible to implement a design system MVP and prove its value through a controlled experiment. We just hope we can help you get that MVP approved.</p>
<h3>Acknowledgments</h3>
<p>We want to thank Ben Callahan and Martin Schmitz for taking the time to read earlier drafts of this article and providing invaluable feedback. And, of course, a big shout-out to all members of the BestSecret Design System Task Force.</p>
<h3>References</h3>
<ul>
<li>“<a href="https://ieeexplore.ieee.org/document/962984/authors#authors">Top 10 List (Software Development)</a>”, Barry Boehm and Victor R. Basili</li>
<li>“<a href="https://alistapart.com/article/selling-design-systems/">The Never-Ending Job Of Selling Design Systems</a>”, Ben Callahan</li>
<li>“<a href="https://medium.com/eightshapes-llc/team-models-for-scaling-a-design-system-2cf9d03be6a0">Team Models For Scaling A Design System</a>”, Nathan Curtis</li>
<li>“<a href="https://www.invisionapp.com/inside-design/guide-to-design-systems/">A Comprehensive Guide To Design Systems</a>”, Will Fanguy </li>
<li>“<a href="https://www.nngroup.com/articles/design-systems-101/">Design Systems 101</a>”, Therese Fessenden </li>
<li><a href="https://harpercollins.co.uk/products/noise-daniel-kahnemanolivier-sibonycass-r-sunstein?variant=39570844090446"><em>Noise</em></a>, Daniel Kahneman, Olivier Sibony, Cass R. Sunstein</li>
<li><a href="https://www.youtube.com/watch?v=v8i1qeCv2IQ">Design As An Agent For Change: The Business Case For Design Systems</a>, YouTube video</li>
<li>“<a href="https://www.projekt202.com/blog/2016/design-system">How Your Company Benefits By Building A Design System</a>”, Drew Loomer</li>
<li><a href="https://spotify.design/article/the-paradox-of-design-systems">The Paradox Of Design Systems</a>, Spotify Design</li>
<li>“<a href="https://uxdesign.cc/how-much-is-a-design-system-worth-d72e2ededf76">How Much Is A Design System Worth?</a>”, Bryn Ray</li>
<li>“<a href="https://www.figma.com/blog/measuring-the-value-of-design-systems/">Measuring The Value Of Design Systems</a>”, Clancy Slack</li>
<li><a href="https://sparkbox.com/foundry/design_system_roi_impact_of_design_systems_business_value_carbon_design_system">The Value Of Design Systems Study: Developer Efficiency And Design Consistency</a>, Sparkbox</li>
<li>“<a href="https://maxspeicher.medium.com/whats-a-design-system-design-language-and-design-language-system-and-what-s-the-difference-e157852d6ec0">What’s A Design System, Design Language, And Design Language System? And What’s The Difference?</a>”, Maximilian Speicher</li>
<li>“<a href="https://www.interaction-design.org/literature/article/principle-of-consistency-and-standards-in-user-interface-design">Principle Of Consistency And Standards In User Interface Design</a>”, Euphemia Wong </li>
</ul>

]]></content:encoded>
      <author>hello@smashingmagazine.com (Maximilian Speicher &amp; Guido Baena Wehrmann)</author>
      <enclosure
        url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2ee3c9ea-d8c4-494f-bcb1-ed3530dafbab/formula-roi-design-system.jpg"
        length="0" type="image/jpg"/>
    </item>
    <item>
      <title><![CDATA[UX Checklists For Interface Designers]]></title>
      <link>https://smashingmagazine.com/2022/09/ux-checklists-for-interface-designers/</link>
      <guid>https://smashingmagazine.com/2022/09/ux-checklists-for-interface-designers/</guid>
      <pubDate>Thu, 08 Sep 2022 13:00:00 GMT</pubDate>
      <description>
        <![CDATA[UX checklists with best design practices, accessibility guidelines, design system checklist, tables UX checklist, UX research methods, form design UX and flowcharts.]]></description>
      <content:encoded><![CDATA[<p>Given just how complex the web has become, it’s easy to <strong>overlook some fine little details</strong> just before the big release. And sometimes it’s difficult to pick out just the right technique or strategy to address a particular problem. That’s where <strong>design checklists</strong> can help — and there a few new ones that you might find helpful, too.</p>
Checklist Design
<p><a href="https://www.checklist.design/">Checklist Design</a> is an ever-growing collection of <strong>best design practices</strong>, all gathered in one single place. You’ll find pretty much everything from checklists for standalone pages to elements and flows, as well as topics and branding. A neat little resource created by George Hatzis.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6588f0b2-af1a-4e0a-adb9-45dd2feaffa1/checklist-design.jpg" /></p>
Design System Checklist
<p><a href="https://www.designsystemchecklist.com/">Design System Checklist</a> is an open-source checklist to planning, building and <strong>growing a design system</strong>. It includes the foundation of things to keep in mind for design language, design tokens, core components, tooling and project management. Beautifully created and maintaned by fine folks from <em>reshaped</em>. Also, you might want to check <a href="https://www.designbetter.co/design-systems-handbook">Design Systems Handbook</a> as well and you can <a href="https://www.figma.com/community/file/875222888436956377">download the Design System Checklist in Figma</a>.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5fa5a1e5-1848-4fee-b7c6-fc215ff44c20/design-system-checklist.jpg" /></p>
Accessibility Not-Checklist
<p><a href="https://not-checklist.intopia.digital/">Accessibility Not-Checklist</a> is a thorough <strong>guide through accessibility</strong>, with points grouped by topics and success criteria, with filters for WCAG 2.0 and WCAG 2.1 and best practice recommendations. You can sort the checklist by topic and by role. A fantastic tool by fine folks at <em>intopia</em>.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b46643f9-8c4a-4c0b-9f12-f7c42cc3c4c3/accessibility-not-checklist.jpg" /></p>
A11y Project Checklist
<p><a href="https://www.a11yproject.com/checklist/">A11y Project Checklist</a> is a yet another very thorough checklist for accessibility that goes into all the fine detail from forms and controls to <strong>video, audio and animation</strong>. It also links to specific parts of WCAG in every individual section with further examples and guidelines. Neat!</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4614ff2e-5c71-47d0-811e-335ec1b81350/a11y-project-checklist.jpg" /></p>
Design System Checklist Trello Template
<p>You and your team are working on a design system? The <a href="https://trello.com/templates/design/design-system-checklist-yZn5VFoN">Design System Checklist template</a> for Trello is a great example of how to <strong>structure your work</strong> and keep everyone involved on the same page. Even if you're not a Trello user, the template provides some valuable ideas for creating your own checklist of things to take care of when working on a mammoth project like this.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c37a220d-3b4c-42df-b926-5683db8657f6/design-system-checklist.png" /></p>
Gov.UK Design System Components (Figma)
<p>The lovely team behind Gov.UK has released a <a href="https://www.figma.com/community/file/946837271092540314">full collection of styles and components</a> designed for UK Government services. During the design process, the team has tested and validated the design of the components, and we can use them to explore the <strong>states or conditions</strong> that we perhaps haven’t considered in our design just yet.</p>
<p>You can also check the <a href="https://govuk-prototype-kit.herokuapp.com/docs">GOV.UK Prototype Kit</a> if you want to install all components locally, and <a href="https://design-system.service.gov.uk/">GOV.UK Design System</a> to explore how to use the styles and components in prototyping.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fe93820b-3e2f-4667-bb53-946af76401a6/gov-uk-design-system-ux-checklist.jpg" /></p>
Complex Tables UX Tree
<p>In his article on <a href="https://www.smashingmagazine.com/2019/02/complex-web-tables/">Architecting a complex table</a>, Slava Shestopalov explores how to design and <strong>architect advanced tables</strong> — with a very comprehensive table tree checklist of all those fine details that are often forgotten or overlooked.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6d7ac54a-3ab3-45a2-8eaf-b8454691a9f6/complex-tables-ux-checklist.jpg" /></p>
UX Project Tools Checklist
<p><a href="http://uxrecipe.github.io/">UX Recipe</a> is a helpful little tool to discover and choose some of the <strong>UX project tools</strong> and techniques for your project. It also allows you to estimate the amount of time require for the work done. All tools are broken down into groups, and if you click on the hashtags, you’ll find plenty of useful resources for each category. Created and maintained by Alecsandru Grigoriu.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b6edcb59-b24a-4c11-966d-3b20430c80a6/ux-recipe.jpg" /></p>
UX Research Methods Flowchart
<p>How do you choose what <strong>UX research methods</strong> works best for you? There are at least 20 popular methods, and a handy <a href="https://www.nngroup.com/articles/guide-ux-research-methods/">UX Research Methods Flowchart</a> by Norman-Nielsen Group helps you find the right one.</p>
<p>It provides an overview of common strategies, grouped into behavioral, attitudinal, qualitative and quantitative methods. Once you know what insights you are after, you can <strong>pick your strategy</strong> using the chart.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d6e9d051-970b-4ac8-b2da-eb29b8382da7/ux-research-methods-flowchart.jpeg" /></p>
Form Design UX Checklist
<p>With web form design, it can be quite difficult to figure out <strong>just the right component</strong> to use when asking a particular question. The team behind <em>Lyft</em> has created a flow chart to make it easier for designers (and not designers alike) to make decisions for their forms.</p>
<p>In an <a href="https://medium.com/tap-to-dismiss/a-better-segmented-control-9e662de2ef57">article about form selection patterns</a>, Runi Goswami describes the struggles the team went through when designing a segmented control, and how they ended up with a <strong>form selection control flow chart</strong> as a result. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/18701639-e250-401f-b926-f0f99ee5dc7d/1-x3iz5b0n3anv39lgivbuiw-1.png" /></p>
Decision Trees For Design System Components
<p>Design systems often come in various flavors. Surely there will be basic components, color, typography and spacing, but often also more sophisticated components, usage guidelines, accessibility considerations and live previews. Additionally, <a href="https://canvas.workday.com/patterns/errors-and-alerts/#tab=usage">Workday Canvas Design System</a> includes <strong>flow charts for deciding what components to use</strong>, with examples of the outcome that designers and non-designers can follow to make their decisions.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/51a45025-a690-451c-9bb3-32999a723af0/errors-decision-tree-1.png" /></p>
Interaction Design Checklist
<p>The <a href="https://ixdchecklist.com/">IxD Checklist</a> that Aaron Legaspi and Amit Jakhu created helps us form a <strong>better understanding of interaction</strong>. Whenever you're building some kind of interaction — be it a control, navigation, or an entire interface — you can use the checklist to evaluate your design against affordance, simplicity, structure, consistency, accessibility, tolerance, and feedback to ensure it is easy to use for everyone.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/df2241bc-df93-4732-97ff-0c0f45656e6f/ux-interaction-checklist-affordance.jpg" /></p>
Bonus: Text-To-Timeline Tool
<p><a href="https://markwhen.com/">Markwhen: Text-to-Timeline</a> is an <em>incredible</em> little tool to <strong>generate timelines</strong>, e.g. for project planning or life timeline! You write <em>markdown-ish</em> text and it gets converted into a nice looking cascading timeline. Also available as a <a href="https://markwhen.com/blog/2022-07-31-vscode-extension">VS Code Extension</a>.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/feb45b18-9617-44bd-9036-bd448b65e5ef/text-timeline-markdown-tool.jpg" /></p>
And That’s A Wrap!
<p>If you are looking for more gems like this one, we’ve published a few <a href="https://www.smashingmagazine.com/category/ux/">UX guides with checklists</a> over the last few years, so feel free to continue exploring there. Happy checklisting, everyone!</p>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Vitaly Friedman)</author>
      <enclosure
        url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6588f0b2-af1a-4e0a-adb9-45dd2feaffa1/checklist-design.jpg"
        length="0" type="image/jpg"/>
    </item>
    <item>
      <title><![CDATA[The Realities And Myths Of Contrast And Color]]></title>
      <link>https://smashingmagazine.com/2022/09/realities-myths-contrast-color/</link>
      <guid>https://smashingmagazine.com/2022/09/realities-myths-contrast-color/</guid>
      <pubDate>Tue, 06 Sep 2022 19:00:00 GMT</pubDate>
      <description>
        <![CDATA[In this article, Andrew Somers, a 35-year veteran of the Hollywood film and television industry, shares his experience about the hard-fought battles and lessons learned designing for illuminated presentations.]]></description>
      <content:encoded><![CDATA[<p>A long, long time ago, in a land far, far away...</p>
<p>By “long ago,” I mean circa 1924, and by “far away,” I mean London, UK., scientists W. D. Wright and J. Guild <a href="http://yuhaozhu.com/blog/cmf.html">conducted color-matching experiments</a> measuring the boundaries of human color vision. Their work was combined by the <a href="https://cie.co.at">International Commission on Illumination</a> (the CIE) into the 1931 CIE <em>“standard observer “</em>, a sort of “mathematical eyeball” that models how we see color. And with that, modern colorimetry was born.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7bd4776f-00bc-43a6-aee7-f82bea2ff038/1-realities-myths-contrast-color.jpg" /></p>
<p><em>Colorimetry</em> is the basic science that made color television possible, and of course, our modern displays and smartphones — all our modern electronic color technology traces back to the 1931 CIE color space.</p>
<p>This colorful, kidney-shaped graphic represents the limits of human color vision — the smaller triangle inside marks the colors that can be displayed on a standard sRGB monitor, and the larger triangle represents P3 displays.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dfc0c9da-fa34-4e9f-84a8-5154197c8627/3-realities-myths-contrast-color.png" /></p>
<p>Each corner of the triangle is one of the three <em>“primaries”</em> of light: red, green, and blue. The area inside the triangle represents how those three colors appear when added together in various combinations, hence the term “additive color model.”</p>
<p>The use of the term “primary” is a bit of a misnomer, though, as there is no set of three real colors in the real world that can be mixed to create all the other colors. Only a subset of colors, as defined by these triangles.</p>
In The Eye Of The Beholder Or The Mind?
<h3>A Simple Overview Of Human Vision</h3>
<p>Light is focused by the eye’s lens onto the light-sensitive cells in the back of the eye, known as the retina. The cells we are most interested in are called <em>cones</em>, which are responsible for our daylight and color vision. A different kind of cells, called <em>rods</em>, gives us night vision, but rods are not particularly helpful for tasks like reading, and rods essentially shut down in daylight conditions.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3ab1c9d5-3080-404b-a8b1-166332ea60de/4-realities-myths-contrast-color.jpeg" /></p>
<p>Standard or “normal” vision uses three cone types. They are <em>sometimes</em> but inaccurately called “red,” “green,” and “blue” cones, but there is much more to this story. </p>
<h3>Color Is Not <em>Real</em></h3>
<p>Is color not real? That’s a provocative statement for an article on color and contrast. But the reality is that “color” and “contrast” are not strictly <em>real</em> in an absolute sense. “Colored” light is simply light of different wavelengths or frequencies, like different notes on a piano. In fact, the scientific names for the cone cells in our eye are <strong>L</strong>, <strong>M</strong>, and <strong>S</strong> cones which stand for the <strong><em>long</em></strong>, <strong><em>medium</em></strong>, and <strong><em>short</em></strong> wavelengths of light they are most sensitive to.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/703611c0-ee48-459a-9375-2a7e6ff0a77f/9-realities-myths-contrast-color.jpg" /></p>
<p>The L cone actually has a peak sensitivity near yellow/green. But the fact its response curve extends into deep reds gives a differential from the M cone that allows humans to perceive “red” as a unique hue. As you can see from the graphic, the responses of the cones all overlap very substantially.</p>
<p>One reason the L cone is thought of as “the red cone” is that the primary red light from a display or television is intended to stimulate the L cone as much as practical while <em>not</em> stimulating the M cone. So the color used in a display is not at the peak response of the L cone but at a much longer wavelength to reduce “crosstalk” to the M cone.</p>
<p>Nevertheless, this is not where the <em>sensation</em> of color really takes place — that rabbit hole is just a bit deeper.</p>
<p>The first stage of the visual cortex, located at the back of the brain, looks at the lightness/darkness contrasts first, finding edges and fine details. Later stages separately process the color information, meaning <em>hue</em> and <em>chroma</em> (chroma is the “colorfulness” and related to “saturation”). Over 20% of our brain is dedicated to visual processing, and in total, 62% of our brain <em>involves</em> vision, often shared with other senses such as touch or hearing.</p>
<p>Some of the visual information may be “steered” to the <strong>Visual Word Form Area</strong> (VWFA), where letter pairs and whole words are recognized and sent to the language center. Other information may be sent to areas of the brain specializing in motion detection or object recognition. The information “steered” to the VWFA is essentially luminance only, that is, devoid of color, while the <a href="https://pubmed.ncbi.nlm.nih.gov/10859133/">object recognition area relies more on color for discrimination</a>.</p>
<h3>The Imaginary Reality Of Perception</h3>
<p>What might not be apparent from the above discussion of the mechanics of our vision is that colors are just perceptions, and as perceptions, they are affected very much by context. In other words, the nature of the surrounding visual material has a substantial effect on the colors and contrasts that we perceive and how we perceive them.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/597b5ba8-9400-450a-8a1d-5156d2746410/yellowdotcheckershadow-dlyon-pd.png" />In this graphic, both yellow dots emit the same exact “colors” from your monitor, yet they look decidedly different. And while such images are often referred to as <em>optical illusions</em>, ones such as this are really <em>neurological</em> illusions — they are literally a figment of your brain, no matter how much we want to believe it as reality.</p>

<p>Monitors present us with nothing but illusions. On your computer’s display, the “yellow” you perceive is only <em>separate red and green</em>, with the red and green in amounts that create the <em>perception</em> of yellow. The red and green do not mix in the air like paint — the red and green “mixes” in the neurology of the vision system.</p>
<h3>Throwing You A Curve (Eye) Ball</h3>
<p>And to add to this, our perception is what you’d call non-linear, while light in the real world is “linear,” by which I mean if you have 100 photons of light and triple that, you then have 300 photons of light. But our vision does not see that change as a “tripling” — we see it as only a modest increase. This is particularly important for understanding the perception of contrast.</p>
<p>To help, when we talk about <em>light</em> or <em>luminance</em>, we are talking about linear, additive quantities. But when we talk about lightness/darkness/brightness, we talk about a qualitative and context-dependent perception. Stevens et alia found that we <a href="https://en.wikipedia.org/wiki/Stevens%27s_power_law">can use power-curves to model our perception</a> in a useful way.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/59a0f735-3b26-4920-b0b1-594c657f180f/7-realities-myths-contrast-color.png" /></p>
<h3>Do You See What I See?</h3>
<p>The answer is maybe, but also, maybe not. First of all, your own visual perception changes with age. It takes the first 20 years of life to develop a peak contrast sensitivity. And as you age, your aging eye loses sensitivity, particularly in blue, as the eye’s optics become more yellow.</p>
<h3>Contrast, Focus, And Other Vision Problems</h3>
<p><strong>Visual acuity</strong> (VA) relates to how well our eyes can focus on the things we see, which is obviously rather important for reading. The small, thin nature of letters makes reading the most demanding visual task for most people. We measure acuity using an eye chart, where normal vision is defined as 20/20 (America) or 6/6 (EU).</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/75f6b647-af2c-41a4-83a4-6863d5ed7680/6-realities-myths-contrast-color.jpg" /></p>
<p>20/20 means <em>“the size that someone with</em> <strong><em>standard</em></strong> <em>vision can see standing 20 feet away”</em> and 6/6 is the same but refers to 6 meters instead of 20 feet.</p>
<p>In both cases, it means the size of the capital <strong>E</strong> of the 20/20 (or 6/6) line of the eye chart as projected into the retina of the eye. Vision science measures the size of the “retinal image” of the 20/20 <strong>E</strong> as five arc minutes of visual angle.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0ba42f86-a921-445b-afaa-5af742ccd6af/13-realities-myths-contrast-color.png" /></p>
<p>20/20 (or 6/6) is not perfect vision — but it is called “standard” vision. Human “perfect vision” is closer to 20/12 to 20/16, and 20/09 is the world record here. By comparison, an eagle’s vision is about 20/04.</p>
<p><strong>Contrast sensitivity</strong> (CS) is another very important measure of the health and well-being of our visual system and one aspect that is most often misunderstood. In fact, our understanding of our contrast sensitivity has really only developed in the last few decades of vision research, and there is still active research relating to our contrast perception.</p>
<p><strong>Color Vision Deficiency</strong> (CVD) About 5% of the world’s population is insensitive to some colors, a condition inaccurately referred to as “color blind.” In the most common cases, one of the cone types is either not working as it should or is missing altogether. The <em>deutan</em> type has a problem with or is missing the M/Green cone, and the <em>protan</em> type is missing or has an issue with the L/red cone. There are also some very rare types, such as <em>tritan</em>, having problems with the S/Blue cone, and even non-color (achromatic) forms of vision, missing two or all three cones.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3c0fac79-3a6a-4aa5-be90-8a0c0134f558/5-realities-myths-contrast-color.png" /></p>
<p>The non-color types are extremely rare and the only types that could be described as <em>actually “color blind “</em>. They usually face other vision issues, including low visual acuity (poor focus) and severe photophobia, where light brighter than twilight over-powers the rod cells, which in standard eyesight are only used for night vision. These <em>actually color-blind</em> users typically wear dark glasses even indoors and use assistive technologies for reading.</p>
<p><strong>Color Insensitive and Readability</strong>: while CVD impairs the ability to distinguish some colors, luminance perception is the same as standard vision for the <a href="https://metrovision.fr/2019/2019_Ilhan_Contrast_sensitivity_in_congenital_color_deficiency.pdf">common types of CVD</a>. Therefore for readability, deutan, protan, tritan types have the same needs for lightness contrast as standard vision. The singular exception is when pairing red and black, as those with the protan forms of CVD are insensitive to red. As a result, red against black has greatly diminished contrast for the protan, and red/black as a pair should be avoided for text or semantic non-text.</p>
<p>Understanding vision at this basic level helps understand important design choices for color and contrast. The author hosts a <a href="https://www.myndex.com/CVD/">color vision simulator</a> that simulates some of these types of color-insensitive vision for further demonstration.</p>
Shedding Light On Contrast
<p>There are many forms of contrast, such as contrasts of size, shape, or position, contrasts of content, theme, or emotion. But for the bulk of this article, we will focus on <em>“perceived lightness contrast”</em>. This is closely related to <em>luminance contrast</em>, as luminance is a measure of light, which we perceive as <em>lightness/darkness/brightness</em>. In other words, luminance is a physical <em>quantity</em> in the real world, but lightness is our human <em>perception</em> of it, and our perception is shaded by context.</p>
<p>Like lightness and color, <em>contrast</em> is also a human perception, so sometimes it is more correct to consider it a <em>“lightness contrast.”</em> Importantly, we consider contrasts of <em>color</em> meaning hue and saturation, <em>separately from lightness</em>.</p>
<p>Lightness/darkness and hue/colorfulness serve different purposes in our design work. Moreover, luminance and color are processed separately in our brains and are used differently for our cognitive understanding of how we perceive the world around us.</p>
<p>Reading and readability are primarily concerned with lightness/darkness differences — the fine details of fonts need ample luminance contrasts to be “decoded” by the Visual Word Form Area (VWFA) of the brain as whole-words or letter-pairs. On the other hand, contrasts of color are important for things like <a href="https://pubmed.ncbi.nlm.nih.gov/10859133/">object recognition and categorizing</a>.</p>
<h3>Spatial Cases</h3>
<p>One aspect of contrast perception that might not be intuitive is that contrast is driven more by <em>“spatial frequency”</em> than by the difference or ratio between two colors. For the designer, spatial frequency relates to font weight and font size or line thickness. A <em>higher</em> spatial frequency means <em>smaller, thinner</em> fonts or lines that are closer together. A lower spatial frequency relates to larger elements with greater distances between them.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9f161bdd-4eaf-42ee-ac93-59bdae7c1772/8-realities-myths-contrast-color.png" /></p>
<p>This graph shows the human contrast sensitivity curve. As the curve moves to the right, we are defining smaller and thinner items. Each of the sample fonts shown around the curve uses the exact same color of gray. But as you can see, the perceived contrast and readability of the big, bold headline is much higher than that of the small samples of body text.</p>
<p>To complicate matters, consider the effects of antialiasing or font-smoothing techniques. When a font is rasterized to the screen, small amounts of blur are added to reduce a jagged appearance. Here are magnified screenshots of text rasterized to a standard sRGB display. Notice how normal weight fonts about 18px and smaller just become subsumed by the background due to typical antialiasing effects.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/64ac20ed-cc6c-447f-a1ca-6735de6eec05/2-realities-myths-contrast-color.png" /></p>
<p>This also presents issues with how you, the designer, preview a graphic or web page. Retina screens at twice or three times standard resolution can present sharper text with less blending. Some systems or devices are set up with a form of antialiasing called <em>sub-pixel</em>, which can be sharper, but if a design uses <code>-webkit-font-smoothing:antialiased;</code> that overrides the display’s default antialiasing, replacing it with a soft blending that further damages contrast and sharpness. Apple introduced <code>-webkit-font-smoothing</code> to go along with retina displays, but it wreaks havoc on standard resolution displays with small fonts. Any use of <code>-webkit-font-smoothing</code> should be behind a resolution media query and implemented carefully. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/214a8f52-db62-4bb5-bfe4-2014545d6a48/14-realities-myths-contrast-color.png" /></p>
<p>To compensate for these factors, small, thin body text needs a <strong><em>much</em></strong> greater lightness/darkness difference. Also, relating to columns of body text, the density of the text results in further contrast reduction. A near-maximum contrast is good for most body text. Other instances of thin fonts have problems with font smoothing as well. For instance, some weight 100 fonts are so thin they need to be larger than 42px or even larger before font-smoothing techniques can be safely employed.</p>
<p>This also means that your designs need to be tested and viewed on <strong><em>standard resolution monitors</em></strong>. Design decisions made on a beautiful P3 retina display may have unexpected design problems, including poor readability, when viewed on a standard resolution sRGB device.</p>
<h3>Predicting Contrast</h3>
<p>For design guidance, we need a way to predict contrast. For some years, the WCAG 2 contrast method was used. Unfortunately, WCAG 2 contrast maths do not predict the contrast of text in accordance with human perception, which is especially noticeable with dark color pairs. The result is that WCAG 2 contrast is less than useful for dark mode, not to mention light text on saturated colors and a few other anomalies.</p>
<p>The author’s new method is the candidate contrast method for the future WCAG 3 guidelines. This new method directly considers perceptual lightness/darkness differences of text against a background, and generates a “lightness contrast” value, noted as <strong>Lc</strong>. From here, we can determine the minimum size and weight of a font that is going to be fluently readable, and together these calculated predictions can guide our design choices.</p>
<h3>Readability Contrast</h3>
<p>This leads us to the idea of “readability contrast” — the contrast needed for a particular use-case and the level of readability needed. The <a href="https://pubmed.ncbi.nlm.nih.gov/8430009/">seminal readability research</a> of S.Whittaker, J.Lovie-Kitchin brought us the ideas of “critical contrast” and “critical size.”</p>
<p>By <em>critical</em>, we mean the point where increasing the size, or contrast, will not improve reading speed and comprehension any further. Their research also introduced the concept of <em>“contrast reserve”</em> and defined the contrast needs for sub-fluent levels, where text is still readable but not at the highest speed or comprehension. This last part is important because, in a design hierarchy, not everything can be at maximum contrast.</p>
<p>For example, a column of body text requires the highest contrast to ensure the best fluent readability. But at the other end of the spectrum, non-content text, such as a copyright bug on the side of an image, does not need to be anywhere near that same high level of contrast. In fact, to keep the design uncluttered, and keep the focus on the actual content, something like a copyright bug should arguably be much lower in contrast — high enough to read if focused on, but low enough that it is not distracting or taking attention away from the primary subject.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/20fdde2c-3c5f-4bad-9a2f-47ad7edf6d77/15-realities-myths-contrast-color.png" /></p>
<blockquote><strong>Side Note: It’s not the size... it’s the x-size</strong><br /><br />The CSS property font-size: is easy to use... and inaccurate. Setting the font size by specifying the font’s body height can have significantly different results depending on the font family. Therefore it is important to determine the x-height of the fonts used in the design and then set the font size with an offset as needed to achieve the desired rendered size.</blockquote>

<h3>Conflicts Of Contrast</h3>
<p>The spectrum of the human experience is wide and diverse. With this diversity is the reality that what is best for one person, may create problems for another. This is especially true for visual accessibility. The ideal text size for one user may be too big or too small for another. What one user prefers for color coding of information may make that same information oblique to another.</p>
<p>Our visual perception and cognition can be impaired in ways that are not even apparent to the individual with the impairment. Our brain adapts or tries to, to our current situation. For instance, the visual cortex has a “sharpening filter” to improve perceived acuity, so a user with an acuity problem that is accustomed to sight without correction may not realize that they could benefit from glasses.</p>
<p>And the potential visual impairments don’t stop at the lens of the eye and basic focus, which is what defines acuity. Visual impairments extend past the retina and optic nerve to our brain’s neurology and cognitive processes. And the individual user needs are as varied as the many ways we can be impaired.</p>
<p>What this points to is the importance of user options for visual preferences, and this is an area of emerging technologies. The content creator is responsible for providing a baseline of accessible design and ensuring that users are not prevented from making adjustments they need, such as by zooming in text size, changing to the dark mode, or a special color palette. This is, in a very real way, a functional part of responsive design.</p>
<h3>Flexible Foundations</h3>
<p>A clear visual hierarchy is an important accessibility feature as well, particularly for cognitive and neurological reasons, such as dyslexia and ADHD. Good design guides our vision through the content, using multiple types of contrast: not just luminance contrast, but contrasts of size, weight, color, position, and distance, with this variety of contrasts creating a semantic flow through the content.</p>
<p>The structure of an HTML document has built-in tags supporting semantic markup, and the CSS styling for these tags should follow their semantic structural meaning. Semantic markup is important for all users sighted and without vision. Screen reader systems for the blind <em>rely</em> on the semantic markup for navigating through content. Sighted users need a <em>visual</em> semantic hierarchy to arrange the content and visual flow in a logical way that aids comprehension and reduces fatigue.</p>
<p>For all sighted users, there are some essential minimums for visual contrast, based on the expected use-case of the element and allowing for user-adjusted variations. Use-case also informs the essential minimums for visual size, which also needs to consider expected screen resolution and the font’s glyph design, as these can be substantially affected by antialiasing at smaller sizes.</p>
<h3>A Bridge To The Future</h3>
<p>WCAG 2 contrast guidelines suggest a 4.5:1 ratio for fonts smaller than 24px at 400 weight (normal), or 18.8px at 700 weight (bold), and 3:1 for other contrasts. While this guideline is simple to implement, these minimums can be very insufficient in some cases, yet paradoxically, more than needed in some other cases. These guidelines <a href="https://tangledweb.xyz/a-contrast-of-errors-373c2665d42a">trace their origins to standards of the 1980s</a> and are set to be replaced in the near future.</p>
<p>One future standard in development is WCAG 3, and the candidate method for contrast is <strong>APCA (Accessible Perceptual Contrast Algorithm)</strong>, currently being evaluated as a public beta. In full disclosure, this author created APCA as research lead of the Visual Contrast subgroup of the W3C Accessibility Guidelines Working Group’s Silver (WCAG 3) task force, developing <a href="https://www.w3.org/TR/wcag-3.0/">WCAG 3 as the next generation of web content standards</a>.</p>
<p>APCA follows the human visual perception of contrast of text and non-text elements and is derived from decades of peer-reviewed vision science, tuned specifically for the readability of text on self-illuminated displays. The associated readability guidelines covering text size and luminance contrast are based on the <a href="https://pubmed.ncbi.nlm.nih.gov/8430009/">seminal peer-reviewed research</a> of Whittaker, Bailey, Lovie-Kitchin, G. Legge, and others.</p>
<p>APCA-related guidelines differ from the older WCAG 2 in that APCA considers human visual perception, use-case, and spatial features (weight and size) and provides a comprehensive set of useful design guidance. The actual conformance specifications for WCAG 3 are in development, so rather than rattle off specifications that may be subject to change, see <a href="https://git.apcacontrast.com/documentation/WhyAPCA">“Why APCA”</a> for further reading.</p>
<p>A question often asked is if APCA can be used now, and the answer is “it depends.” APCA is usable as a public beta, and beta users are highly encouraged to submit issues and discussions at the APCA GitHub repo. That said, one needs to determine if they have any contractual or other legal requirements to follow the older WCAG 2, regardless of WCAG 2’s deficiencies, such as for some governmental websites.</p>
<p>In the interim, there is a method that is fully backward compatible with WCAG 2, known as <a href="https://www.myndex.com/BPCA/">“Bridge-PCA”</a>, intended as a way to provide better readability and calculate for dark mode but still follow the older WCAG 2 success criterion. While Bridge PCA fixes some problems, what is lost is the greater design flexibility offered by the full APCA implementation.</p>
Practical Guidelines
<p>During this transitional period, where we know that existing guidelines are expected to be revised or replaced, it’s helpful to see the road ahead. Here are some things designers can do now to improve readability, compliance, and actual accessibility while being better situated for future guidelines.</p>
<h3>Size, Weight And Antialiasing</h3>
<p>To emphasize, I’ll reiterate that weight and size are most important to readability contrast long before we get into the difference or ratios of lightnesses and colors. In this example graphic, the colors used for all the outlines are the same for each, with a 3:1 contrast ratio. First a thin 1px outline, next a 2px outline, then as you see in the 3px outline, the stroke is encroaching on the letters, so in the final example, with a 4px outline, we set the stroke to the outside only, which also increases the inner font-weight.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8a7d6371-669b-4a1a-8c2e-d536c4065dee/10-realities-myths-contrast-color.png" /></p>
<p>In each case, the same exact colors are used, but the <em>spatial frequency</em> of each row goes lower as it gets thicker and therefore becomes more contrasty and easier to read than the one above.</p>
<p>Let’s try that again, but this time, we’ll use colors with a much higher contrast of 7:1.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b227692f-0cc2-4c54-a6a5-75fec278f776/11-realities-myths-contrast-color.png" /></p>
<p>Notice that these rows are only a little more contrasty than the ones at 3:1, despite using 7:1 colors. The biggest changes, in contrast, are still the <em>spatial</em> changes of making the outline stroke thicker.</p>
<p>The reality is we need to spend more time thinking about improving the weight and size and remembering that not everyone has access to ultra-high-resolution retina-type displays. The antialiasing on lower resolution displays effectively lowers color contrast and can make thin fonts <em>appear</em> even thinner.</p>
<blockquote><strong>Side Note: Weighty decisions</strong><br /><br />Be aware that the CSS weight value (i.e. 300, 400, 700) is not consistent between different font families. For instance, “Arial Black” is indicated as normal (400 weight) even though it is clearly extra-bold. And Courier New indicates 400 weight even though it is clearly ultra light.<br /><br />Also, in-between weights such as 500 or 600 will only render at that weight if that weight has been specifically imported (or is a supported variable weight font). And fallbacks to default fonts will usually not support anything other than 400 (normal) and 700 (bold). In this case, 500 will render as 400, and 600 will render as 700.<br /><br />Because font weight is a primary factor in perceived contrast, the implications of unexpected weight changes from missing fonts, fallbacks, and the fact that there is no “standard” when it comes to how weight is defined, are important considerations when planning your page design.</blockquote>

<h3>Improved Contrast Values</h3>
<p>The following recommendations are based on the use-case of the text; the text’s importance to the understandability of the content informs us of the needed readability contrast. In order of importance:</p>
<ol>
<li><strong>Body Text:</strong> Columns or blocks of readable body text. (See Side Note: <em>Body Double</em>)</li>
<li><strong>Other Fluent Text:</strong> Headings, menu items, main navigation, tooltips, and photo captions which are required for understanding.</li>
<li><strong>Sub-Fluent Text:</strong> Colorized code blocks, DataViz callouts, informative placeholders, sub-text, photo captions that are duplicative of content text or not required for understanding.</li>
<li><strong>Non-Text:</strong> Icons, pictograms, buttons, controls.</li>
</ol>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8112c0a3-b7dc-4c81-bf29-da52891158e8/20-realities-myths-contrast-color.png" /></p>
<ul>
<li>WCAG 2 values shown are intended for light-mode only, meaning the background is never darker than the equivalent of approximately <code>#aaa</code>.</li>
<li>Also, the WCAG 2 values listed here are higher than those listed in the official WCAG 2 guidelines to help compensate for certain deficiencies in the older math/methods.</li>
<li>APCA and WCAG 3 are still in development and not yet official recommendations of the W3C.</li>
<li>The APCA <strong>maximum</strong> recommended contrast for fonts larger than <code>24px</code> is <code>Lc 90</code>. More is <em>not always</em> better.</li>
</ul>
<blockquote><strong>Side Note: Body Double</strong><br /><br />Columns of body text have significant extra needs compared to other textural elements. Letter and word spacing (kerning, tracking), paragraph spacing, and especially line spacing (leading), which is line height: in CSS, become much more important in blocks of body text.<br /><br />As a practical definition, we define body text as a block or column of text that is more than 2½ lines, where the font is less than 32px (or less than an x-height of 16px), and the line height is less than four times the x-height.</blockquote>

<blockquote><strong>Side Note: All My ex Live en TeX</strong><br /><br />When we are considering line-height, which is the CSS equivalent of leading, we are usually concerned with the distance between lines of mostly lower case letters. Therefore, we’d prefer to set line height relative to x-height.<br /><br />And while we currently can’t set font-size using the font’s x-height, we can use the font’s x-height to set certain layout parameters, by using the CSS <code>ex</code> length. <code>1ex</code> equals the vertical size of a font’s lowercase <code>x</code>. (Or at least it should; some fonts may not properly report the x-height.) We can put the <code>ex</code> unit to good use in line-height. A baseline to baseline distance of three times the x-height is a good place to start.<br /><br /><code>p{line-height: 3ex;}</code><br /><br />Some font’s may need more than this. For paragraph spacing, we’d like to see an additional <code>1.5ex</code> of padding, or more.</blockquote>

<h3>General Body Text Guidelines</h3>
<ul>
<li><strong>Font:</strong> Verdana is a good example of a readable body font. It has a large x-height ratio and clearly defined glyphs. </li>
<li><strong>Minimum font size:</strong> For Latin and similar alphabets, it’s best to think in terms of a minimum x-height. For best fluent readability of body text, a minimum x-height is about 9.4px, which accommodates standard 20/20 vision.<ul>
<li>For a font like Helvetica, this is a font size of 18px, but for Times, it’s 21px.</li>
<li>Impaired vision is better accommodated with a 24px to 32px font size.</li>
<li>For point sizes, divide the px size by 1.33.</li>
<li>For non-Latin writing systems, related but different minimums may be needed.</li>
</ul>
</li>
<li><strong>Font weight:</strong> normal 400 weight is usually ideal for most well-designed fonts.<ul>
<li>300 weight is getting too thin, especially for fonts less than 24px.</li>
<li>100 and 200 weights should not be used for body text.</li>
</ul>
</li>
<li><strong>Column width:</strong> blocks of text are most readable when lines are short enough for the eye to scan without head movement but long enough that the eye is not starting a new line too often.<ul>
<li>This ends up as about 50 to 60 characters per full line on average.</li>
<li>80 characters is the upper limit, and <em>full</em> lines shorter than 35 characters are typically too short.</li>
</ul>
</li>
<li><strong>Line spacing (leading):</strong> The CSS <code>line-height:</code> property sets the baseline to baseline distance between lines. Given a unitless value, it’s essentially the same as <code>em</code>, but we are more concerned about line spacing relative to the actual glyph size, so line height as a multiple of the x-height is preferable.<ul>
<li>We can use the <code>ex</code> unit to do this. Three times the x-height is a good place to start, though some fonts may be better with a bit more or less than that value.</li>
<li><code>p{line-height: 3ex;}</code></li>
</ul>
</li>
<li><strong>Alignment:</strong> for the left to right reading languages, columns should be left-justified, aka left-aligned, but never center justified nor full justified.<ul>
<li>For best readability, the start of all lines should be aligned to help the eye find the beginning of the next line. For columns of text, center justification interferes with this.<ul>
<li>Center alignment <em>can</em> be okay for non-body text, such as some headings or menu items.</li>
</ul>
</li>
<li>Full justification is not appropriate for web content. <ul>
<li>Proper full justified columns need the skill of a typesetter, but unlike print, web content is dynamic and can be zoomed and reflowed. </li>
<li>And attempting to “fix” text in place interferes with accessibility.</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote><strong>Side Note: Too much of a good thing?</strong><br /><br />While it is possible to have too much contrast, particularly for large and bold elements, this does not suggest making dark text lighter. Excess contrast is nearly always due to excess <em>brightness</em>. When something is so contrasty that it seems to have "halos", the first thing to try is to make the lightest element a little <em><strong>darker</strong></em>.</blockquote>

<blockquote><strong>Side Note: Splitting hairs between dark and light</strong><br /><br />For the darkest color, depending on your monitor's calibration, you probably won't see any difference for colors darker than about <code>#222</code> or <code>rgb(34,34,34)</code>. In fact, you could say that <code>#222</code> and darker is not functionally different than <code>#000</code>, except that for small thin fonts, <code>#000</code> is helpful to help "cut through" antialiasing.<br /><br />On the other hand, the difference between <code>#fff</code>, and <code>#eee</code> or <code>#ddd</code> can be significant in terms of reducing visual fatigue due to brightness.</blockquote>



Conclusion
<p>The printing press with movable type has existed for over a thousand years in Asia. Nearly 600 years ago, Johannes Gutenberg introduced the movable-type printing press to the western world. Comparatively speaking, the internet has been with us for a fraction of that time, and the transition to electronic type still poses challenges for good readability.</p>
<p>I mention the long history of print because most of the “contrast guidelines” relate to printing dark text on white or light paper, and printing is something that is fixed in place. But today, on the internet, we have multiple options such as dark mode and the ability of users to choose variations of color schemes. Dark mode, in particular, has demonstrated that older metrics and WCAG_2 contrast included here are not up to the task of calculating contrasts over the visual range.</p>
<p>Thus the emerging importance of perceptually uniform contrast methods and guidelines. And while this article covered the basics, there is more to uncover and new design considerations to reveal, all for future articles.</p>
<p>Finally, thank the technical peer reviewers and editors of Smashing Magazine for their constructive help toward clarity of this challenging subject matter.</p>
<p>Thank you for reading.</p>
<h3>Resources</h3>
<ul>
<li>“<a href="http://yuhaozhu.com/blog/cmf.html">How the CIE 1931 RGB Color Matching Functions Were Developed from the Initial Color Matching Experiments</a>”, Yuhao Zhu</li>
<li><a href="https://philservice.typepad.com/Wright-Guild_and_CIE_RGB_and_XYZ.pages.pdf">The Wright – Guild Experiments and the Development of the CIE 1931 RGB and XYZ Color Spaces</a></li>
<li>“<a href="https://scholarworks.rit.edu/cgi/viewcontent.cgi?article=2382&amp;context=article">Evaluating the 1931 CIE Color-Matching Functions</a>”, Mark Shaw and Mark Fairchild</li>
<li><a href="https://cie.co.at">International Commission on Illumination</a></li>
<li><a href="https://en.wikipedia.org/wiki/Stevens%27s_power_law">Stevens’s power law</a>, Wikipedia</li>
<li>“<a href="https://pubmed.ncbi.nlm.nih.gov/10859133/">An event-related functional MRI study of the stroop color word interference task</a>”, H. C. Leung, P. Skudlarski, J. C. Gatenby, B. S. Peterson, J. C. Gore</li>
<li>“<a href="https://pubmed.ncbi.nlm.nih.gov/8430009/">Visual requirements for reading</a>”, S. G. Whittaker and J. Lovie-Kitchin</li>
<li>“<a href="https://metrovision.fr/2019/2019_Ilhan_Contrast_sensitivity_in_congenital_color_deficiency.pdf">Contrast sensitivity of patients with congenital color vision deficiency</a>”, Cagri Ilhan, Mehmet Ali Sekeroglu, Sibel Doguizi, and Pelin Yilmazbas</li>
<li>“<a href="https://tangledweb.xyz/a-contrast-of-errors-373c2665d42a">A Contrast of Errors. The WCAG 2 color contrast guidelines</a>”, Andrew Somers</li>
<li><a href="https://www.w3.org/TR/wcag-3.0/">W3C Accessibility Guidelines (WCAG) 3.0</a></li>
<li><a href="https://www.myndex.com/CVD/">Color Vision Deficiency Simulator</a></li>
<li><a href="https://git.apcacontrast.com/documentation/WhyAPCA">Why APCA as a New Contrast Method?</a></li>
<li><a href="https://www.myndex.com/BPCA/">Bridge PCA Contrast Calculator</a></li>
</ul>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Andrew Somers)</author>
      <enclosure
        url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a6553770-76d3-4d35-a473-1011999fbb66/realities-myths-contrast-color.jpg"
        length="0" type="image/jpg"/>
    </item>
    <item>
      <title>
        <![CDATA[Smashing Podcast Episode 52 With Yiying Lu: How Do You Become An NFT Artist?]]></title>
      <link>https://smashingmagazine.com/2022/09/smashing-podcast-episode-52/</link>
      <guid>https://smashingmagazine.com/2022/09/smashing-podcast-episode-52/</guid>
      <pubDate>Tue, 06 Sep 2022 10:00:00 GMT</pubDate>
      <description>
        <![CDATA[In this episode of the Smashing Podcast, we ask how do you go from running a creative studio to designing NFTs. Vitaly talks to artist Yiying Lu to find out.]]></description>
      <content:encoded><![CDATA[<p>In this episode of the Smashing Podcast, we ask how do you go from running a creative studio to designing NFTs. Vitaly talks to artist Yiying Lu to find out.</p>


<h3>Show Notes</h3>
<ul>
<li>Yiying Lu <a href="https://twitter.com/YiyingLu">on Twitter</a></li>
<li>YiyingLu’s <a href="https://docs.google.com/presentation/d/e/2PACX-1vQ7NIzkNlmFP4gVIE9Xy_LafwKlote2JGvbIZWusWU4TtL8g1pW_fYlo36qKs0tVfqzcwkYcoBpeQ4-/pub?start=false&amp;loop=false&amp;delayms=10000#slide=id.g145df0916f4_1_54">website</a></li>
</ul>
<h4>Weekly Update</h4>
<ul>
<li>“<a href="https://www.smashingmagazine.com/2022/08/toggle-button-case-study-part-2/">What Makes A Great Toggle Button? (Case Study, Part 2)</a>,” <em>written by Eduard Kuric</em></li>
<li>“<a href="https://www.smashingmagazine.com/2022/08/improve-measure-progress-learning-web-design/">How To Improve And Measure Your Progress Learning Web Design</a>,” <em>written by Shane Hudson</em></li>
<li>“<a href="https://www.smashingmagazine.com/2022/09/useful-javascript-data-grid-libraries/">Useful JavaScript Data Grid Libraries</a>,” <em>written by Zara Cooper</em></li>
<li>“<a href="https://www.smashingmagazine.com/2022/09/databases-frontend-developers-concepts-under-hood/">Databases For Front-End Developers: The Concepts Under The Hood (Part 2)</a>,” <em>written by Atila Fassina</em></li>
<li>“<a href="https://www.smashingmagazine.com/2022/09/accessibility-usability-drupal-primary-navigation/">The Accessibility And Usability Journey Of Drupal’s Primary Navigation</a>,” <em>written by Mike Herchel</em></li>
</ul>
<h3>Transcript</h3>
<p></p><p><a href="https://twitter.com/YiyingLu"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a283980d-3d67-49ce-b6f9-877389b6b923/yiying-lu.jpg" /></a> Vitaly Friedman: She’s an artist, entrepreneur and educator. She grew up in Shanghai, China and was educated in Sydney, Australia, and also London, UK. She’s currently based in San Francisco as the founder and creative director of her bilingual, creative and innovation studio. She’s incredibly kind friendly, optimistic, and enthusiastic, which is not very surprising given that her name translated from Chinese means happy, creative land, and you have to smile to pronounce it right.</p>
<p>Vitaly: Now, most recently she’s become an NFT artist and she leads a design clinic program to increase people’s mental health. So, we know she’s a fantastic artist and designer, but did you know that she loves dumplings so much that she even went all the way to design the dumpling emoji, which you probably will be able to find on your mobile phone today. My smashing friends, please welcome Yiying Lu. Hello, Yiying. How are you doing today?</p>
<p>Yiying: I am smashing, my friend.</p>
<p>Vitaly: Oh, wow. This sounds very exciting, indeed. Well, you’re smiling now. When I think of you, I always think of your smiling. And when I see you, I always feel like you’re the center of happiness and optimism of the entire universe. Now, where does it come from? Can you share with us a little bit of your story? What are some of the most important things in your life that define who you really are today?</p>
<p>Yiying: Thank you so much for the amazing question. I have to say, my name came really from my father and my grandfather, because my father initially named me Yanying, which means pretty and creative in Chinese. And then my grandfather, after the name has been registered already in the police office, he waited for a few months to come back to my dad. He goes, "Well, we know she’s a girl." And the name actually, Yen, in Chinese is pretty and it has a female radical. And he said, "I want to change the female radical to the heart radical because we want to focus on the heart and the happiness. We already know she’s a female. We want to make sure that she is happy. We don’t want to only focus on external, which is pretty. We want to focus on the internal, which is the happiness." So, I’m incredibly thankful for my grandfather who gave me happy and creative. And this is my life mission. I hope that I’ll carry on grandfather’s blessing and my father’s blessing and bring more happiness and creativity to everyone in the world.</p>
<p>Vitaly: I think that you’re doing that really well, actually, given all the work that you’re doing. I mean, every time I look at work that you’ve been producing, be it on Instagram, LinkedIn, anywhere really, it’s always so happy and it always comes back down ... You remember? I mean, what was it? 2010 or 11 when we were working on the Smashing Book 2 illustrations because-</p>
<p>Yiying: Oh yes.</p>
<p>Vitaly: And all the animals, so beautiful, so happy. All of them so happy. It’s unbelievable. So, would you say that this happiness or bringing happiness into the world, what is really also coming from your name, is this really the ultimate thing that defines your artwork because everything has to be pushing for this positivity in the world?</p>
<p>Yiying: I think it’s about this curiosity and it is about ... It’s coming from this innate almost childlike stage. And a lot of time when I create, I don’t know what it’s going to come out, especially when I create, if you remember when we collaborate on the Smashing Book 2, which is around 2010. When I get the brief from you, I really had no idea what exactly-</p>
<p>Vitaly: No, neither did I, to be honest. I mean, I had no idea what we’re going to end up with.</p>
<p>Yiying: Right, and there is this interesting unknown. It’s literally a destination unknown and you’re working on something you have no idea how this is going to come out, but if you have this innate desire of communicate and innate interest and curiosity to see what you got to be coming up with, it’s exciting. I would say it is a very powerful way of finding the internal state that you want to be.</p>
<p>Yiying: And so to me, every single time when I create something, it always comes out very fun. I think that’s the thing that we’re all searching for, which is something I’m always very interested to search for the fun in the functionality because a lot of times, we write a book it’s very functional and a lot of time, especially I think a lot of the Smashing books are very wonderful tutorials and teach people how to do things, and it’s very functional. And to me, my interest is finding out the fun or highlighting the fun in the word functional. Because if you look at the word function, it has fun in it. It’s just a lot of times, people don’t necessarily get the chance to experience it.</p>
<p>Yiying: And so to me, this sort of light heart joy is something I want to highlight. And I think that visual art has this way of make that immediate emotional response. If the work that I do could help people to be in that state, I think it’s my ultimate joy too, because when I’m creating it, I’m having a lot of fun. It’s just such a blessing for people to experience the fun while I’m creating, when they are looking at the work. So, that’s in a way, is my way of communicating people without necessarily saying the words. But the visual is the medium of the message.</p>
<p>Vitaly: And it’s interesting that you’re saying that word create. I mean, every time I think about the work that you’re doing, it’s always ... there’s this creative create part, if you know what I mean? It’s like sometimes you would go ahead and you would create something basically as, I don’t know, just a to-do list, those kind of things. And sometimes you create something that you bring out into the world to share with other people, right?</p>
<p>Yiying: Yeah.</p>
<p>Vitaly: And so I know that in my experience at least, there are people who are really afraid of creativity as a thing. They might think that they’re not creative. They might think that they’re engineers. They might think that they are doing their own thing. And they’re very focused on that thing, but there is not really creativity. So, when you give them a pencil and a blank sheet of paper, they don’t even know what to do. I know that you had this really interesting project, a big drawing festival that you organized back in the day. Was it during pandemic or just before the pandemic, I believe?</p>
<p>Yiying: It was right before the pandemic.</p>
<p>Vitaly: Right before the pandemic, so where you really brought everyone in to be creative. And how do you feel about this? Do you feel like everybody is creative by default?</p>
<p>Yiying: Absolutely. Honestly, I think everybody is creative. The reason why I’m saying it, is every day when you wake up, you don’t know what the day is going to end up like. Every year, when you start a new year, you don’t know what the year is going to be like. You’re literally creating that year or creating that day. Every day, you are improvising without knowing or without really focusing on the fact that you’re improvising. You don’t know who you’re going to be meeting on the street. You don’t know what kind of conversation you got to be having on the email or the phone call. You are literally creating your life every single second and millisecond.</p>
<p>Yiying: And so, we are innately our own author, or creative director, or actress, actor of our own film or movie, whichever way you wanted to call that, or TV show, or soap opera. But the way that I look at it, when you say engineers and accountants or lawyers, I got to be honest with you, I work with all of the different professions. I think that a lot of times when you give a creative pump for people that conventionally don’t consider themselves as creative, they ended up coming up with some of the most interesting drawings and interesting storytellings because it’s actually the part of the brain that don’t necessarily have the chance to be activated or even expressed. I think that was probably the more appropriate word for that. I think everybody have their creative expression and I’m very, very interested to facilitate that. Not only facilitate that for myself, but for others.</p>
<p>Vitaly: Well, maybe looking back a little bit into your background and where you were born and your travels and your journey until you ended up in San Francisco, I’m wondering, now, looking back at your life, do you think that your travels and you’re moving places and you’re now running across disciplinary and multilingual team now as well in your design work. Do you feel like this way of learning Chinese and then being in Australia, and then being in the UK, and then now being in San Francisco that actually has defined, significantly defined, the way you design, the way you work the way you think? Do you think that this is a very significant attribute of the work that you’re doing, or is it just a part of what you’re creating?</p>
<p>Yiying: That is a great question. That is a great question. I think it definitely influenced me. I’m not sure if I’m being defined already. I think everybody in their life, they’re defining themselves every day. I think that to me, I think everywhere I go, I live, or I have been to, the people that I’ve met, the book I have read, the food that I have eaten, the movies I’ve seen, or film that I have seen, absolutely influenced me, and shaped me, and shaped my way of thinking in very important ways.</p>
<p>Yiying: I think that being able to live and travel to different places of the world is helping me to see the diversity of people. But in the same time, seeing the unity of people, because the more places I have traveled, obviously it’s so wonderful to experience the world in different cultures and food and language. But I really started to see the commonality of people, the thing that we all have in common and that’s something I think is the message that I would love to express through my art, which is the diversity and the unity is seemingly a two opposite idea, but I’m always interested in finding a way to tell these two seemingly polarized idea into a uniformed communication.</p>
<p>Vitaly: Yeah, I think it’s interesting that you’re saying that because often when we travel to places, when we talk to people in other regions, we always think about what is so unique or special about that particular place and what is the food you need to taste, and the music you need to listen to, and where the people gather. And we try to focus on differences and how different certain places or certain cultures, certain people are. But at the same time, there is quite a lot of, I mean, unity as you’re saying, where people are people in the end and it doesn’t really matter that much where they’re coming from, they will have certain cultural differences obviously, and interests and things like that. But in the end, focusing on that thing that unites us all is actually quite significant. I think that one really symbolic, almost, thing from your work that defines it for me is your research, your incredible research that you have done on dumplings. And at this point, I have to ask you to tell this story because how does one even become a designer of a dumpling emoji that is now available on billions of smartphones on the planet? And maybe you can also share a bit of research that you did into all the dumplings around the world.</p>
<p>Yiying: Thank you, really. Yeah, this is such a fun project. I’m always very happy to share the story. It went back to 2015, which is almost seven years ago. I initially moved from Sydney, Australia to San Francisco and my good friend, Jenni Lee, who used to be a journalist of New York Times, at the time, she moved to San Francisco around the same time I was relocating. And so as Asian Americans, we wanted to unite with each other and was sharing dumplings. And she sent me a photo of a dumpling potsticker in the bowl. I wanted to express my excitement and sending a dumpling emoji, only find out that there was no dumpling emoji on the iPhone. I said, "I’m surprised that they don’t have a dumpling emoji." And she goes, "Oh, good point." I was like, "Okay, well that doesn’t go anywhere."</p>
<p>Yiying: And so for me, I always like to see what I can do. When there’s a problem, I want to find a solution. So, this happened to be something I can do something about. So I thought, "Well, I’m a designer. I have imagination. And why don’t I do something about it?" So, I went back to my table and I started to just create the very first version of the dumpling emoji. I call it the bling bling dumpling, because I made it as a animated gif and it has heart eyes and it blings. So, I sent it over to Jenny with that half moon shape dumpling. And she goes, "Did you make it?" I said, "Yeah." And she said, "We should publish this." And later on, we went to the dumpling party and there was people from around the world in the party and everybody was sharing their own dumpling from their respective country they’re coming from.</p>
<p>Vitaly: So it was a dumpling party then?</p>
<p>Yiying: Yes, so we had a dumpling party, we had-</p>
<p>Vitaly: There are dumpling parties around the world? I should go.</p>
<p>Yiying: We should do a dumpling party around the world. We had a dumpling party at Jenny’s house. We had folks from different parts of the world coming to the party and we learned Georgia have khinkali, Japan has gyoza, Italy has ravioli, Polish, we have pirogi, empanadas, crab legs, momos. Yeah, I have done a lot of research with my folks. And so, I learned all these dumplings. I’m like, "Wait a minute. This is actually a universal food. It’s not just a Asian cuisine. It’s actually a very international cuisine." And so, then Jenny did more research and find out that Unicode Consortium, which is a nonprofit organization that’s based in the Bay Area, in fact is responsible for all the emojis on our keyboards.</p>
<p>Yiying: And so we ended up, went to the Unicode Consortium for their technical reading, with all the different folks who runs the organization. We proposed the dumpling, the chopstick, the fortune cookie, the takeout box, in person and they were approved in early 2016. So, it takes about three month for us to go to the meeting. From initial day I remember it because it’s the very auspicious day, it’s the August 8th. And so it takes about three month and then take about two years for all the vendors like Apple, Google, Samsung, Facebook, and Twitter, et cetera, having the actual emoji design in their own style, based on the original design that I did. It was eventually available on billions of keyboards. And the fun story is we also submitted the boba tea emoji in 2015, but it was rejected back then. That’s another story. But then five years later, they were finally available people’s phone during the pandemic in 2020, thanks to three data scientists who were able to prove the number of the users, Timothy, Sujay, and Ranjita, they were amazing. They wrote the important part, which is the data part, to prove the importance of the usage of boba. So, that ended up having the boba tea emoji also available. So, I designed six emoji altogether so far. The dumpling, chopstick, fortune cookie, takeout box, boba tea and the peacock, that’s another story we can-</p>
<p>Vitaly: Oh right, the peacock. Anything else we should be expecting coming anytime soon in emoji?</p>
<p>Yiying: Right now, right now it’s still in the cooking, we don’t know yet. So, I’ll definitely keep you posted. There’s always a lot of exciting things in the making, so I’ll be able to share when the time is right.</p>
<p>Vitaly: Excellent, excellent. Well also of course, I have to mention that just when you look at your CV and all the work that you’ve been doing, and did so much work throughout the years, you’ve been featured on New York Times and Forbes, Bloomberg, Fast Company, Time, White Magazine, CNN, BBC, and the list goes on and on. Now, how did that happen? I mean what do you think was one of the most significant things in your career that enabled all these incredible projects?</p>
<p>Yiying: Yeah, thank you for the question. I think that I’m incredibly thankful for the people that I have worked with. A lot of times, I think I look back some of the most known work or being celebrated work, it wasn’t designed necessarily for the corporate alone. A lot of times, the work that I did and eventually was being used, or celebrated, or known by many, many people, was essentially a personal work. A lot of the work, for example, whether it’s the dumpling, emoji, the boba emoji, or the Twitter whale, the whale that eventually become Twitter, become Twitter’s arrow page, or Twitter’s over capacity page, which is around 2008 to 2013. It was literally seen by millions of people and also remixed by a lot of people online, which I believe is really the power of community.</p>
<p>Yiying: But the essence of the work that really, I think I’m most proud, of a lot of times are my personal art piece in the first place. So, the whale that eventually become the Twitter Fail Whale, was not designed for Twitter. It wasn’t commissioned by Twitter. It was a personal piece that I created when I just finished my exchange study in London and went back to Sydney, New South Wales, pun not intended. I created the whale initially as a birthday e-card that I wanted to send out to my friends or families in Shanghai and London because I met so many classmates in London and they were all graduating a little bit earlier than Australia. So, I wanted to express the fact that I couldn’t go to your graduation ceremony or birthday party, my wish for you is so big, just like this gigantic whale. Naturally in the 3D world, the whale cannot fly, but I have these little birds carry this big, heavy wish across the ocean for you. So, here the whale was symbolized for the heavy, gigantic wish that I have for friends and family overseas.</p>
<p>Yiying: But it was just so happened that there was this teeny tiny little startup in San Francisco called Twitter. And the co-founder, Biz, found the image online and licensed it and that rest is history. But I think there is this interesting connection where, even though Biz look at the whale and thinking of ... The interesting part is he interpret the whale as the big stability issue, where the Twitter employees which are the birds worked really hard on, it was this desire of bringing user happiness, which was the reason why he choose the image in the first place, I think. I heard that from the NPR radio, when he mentioned it was whimsical and it brings the user joy, even though it was a pretty frustrating situation.</p>
<p>Yiying: I think that’s what art does. A lot of times in our real life, there’s so many different kinds of challenges, but I think art in a way is a beacon of light that helps people to release their emotion or help people to connect with that inner light they’re searching for. Or sometimes, there’s art is just highlighting their emotion. It could be very sad, it could be very scary, but allow them to connect with that inner self. I think that’s what art does and that’s why we need art in our lives.</p>
<p>Vitaly: Right. Well, also talking about art, of course, I have to move to a very interesting area, of course, because most recently you’ve transitioned into becoming an NFT artist and that’s a beast of its own, I guess. At this point, I do have to ask because frankly, I mean, I’m just not that much in NFTs and I know that some of the listeners will be surprised maybe, or maybe not, but what does it even mean to be an NFT artist? What do you need to do to get there? Do you need to have some sort of, I don’t know, technical equipment, I have no idea. What did you learn throughout that experience?</p>
<p>Yiying: That is a great question. I always love when people are new to the space and curious about the space. I want to say that first of all, the important part is the definition of what NFT stands for. A lot of people probably don’t really look into it. NFT stands for non-fungible token and non-fungible literally means irreversible, irreplaceable. Every single NFT is unique to itself, just like our human experience. I feel like a lot of times, I can see the correlation between each one of us, even the two twins who are identical looking, they could have complete different experience.</p>
<p>Yiying: The token, that is a very interesting word because I just had a conversation recently with a friend of mine who is a little bit against NFT like, "Oh, I don’t really like the word token." I said, "Wait a minute, let’s look into the etymology of the word token."</p>
<p>Yiying: So, I think a lot of times people only associate NFT with the monetization value, or the business value, or the currency. But I look into the word token. In fact, the word token comes from old English, which has Germanic and Dutch background. It literally comes from the word [foreign language 00:23:42] which means to teach and I suddenly get it. The idea of creating something that being seen as a token, is a way, or is a opportunity for you to teach the world something, for you to create something for the world to learn. In that case, what would you like to create for you to teach, from yourself? And that’s something I want people to keep in mind when you are going to this space, not just looking at creating something as a mean of a transaction, or just as a mean to make financial return, is what would you like to create for people to learn from you, from your experience and from your creation?</p>
<p>Yiying: And so, that’s the fundamental ethos that I have when I create any new NFT art, or new NFT experience. I think that anything that you create content-wise, whether it’s a podcast or a conference, I love Smashing conference, it is an experience. And they can all be seen as a token if that’s how we are going to define it. And so that again, it’s very important for me to have the right intention of what I want to put to the world because we have so much content these days. It’s very fundamental for us to know why we are doing what we do.</p>
<p>Yiying: So, technical-wise, I think that to be able to create NFT, obviously you need wallets, you can create something digitally or you can create something physically as a visual art piece, or you could also create music. It can be a music and art combination as a video. So, the format of NFT can really be any multimedia content in a digital file size, that can stored onto the blockchain. And the way that you could start your first NFT, you needed to have a wallet, a digital wallet. So, it’s almost think of it as your bank account, but on the blockchain. So, that case, you can register for different online wallet. You can also purchase one of these hardware wallet, which also allow you to store the content more safely, because the hardware wallet, you could actually plug it offline. And you also use one of the platforms on the internet that allow you to upload the work. So, it’s quite simple.</p>
<p>Vitaly: Right, but basically that means that you would be designing or illustrating your ... creating your artwork. And then you would be putting it out there on one of those platforms, which allow you to sell. And essentially, that also means that once you have that, you would then initiate an auction, or how does that work? And then you’ll be pretty much getting a Bitcoin in return. Is that how it works?</p>
<p>Yiying: It’s close. So, the currency can be any-</p>
<p>Vitaly: Close enough, that’s good for me.</p>
<p>Yiying: Yes, close enough. You did a great job, really. The actual currency can be any currency. It doesn’t have to be Bitcoin. It can be Ethereum, which we call them Eth, it’s a younger cryptocurrency, but it has been around for a while. And majority of the cryptocurrency website receive Eth and also a lot of them actually receive fiat, which is US dollars. Then you have websites like for example, we have OpenSea and there’s Foundation, there’s SuperRare, there’s MakersPlace, there’s Nifty Gateway. Each of the platforms would receive currency. Some of them might receive multiple currencies, like OpenSea is more open to all kinds of different currencies. So, if you go to their website, you probably will find more than hundreds of different currencies that are acceptable from their website. So that in that way, you could do more transaction if, for example, if you have some of the very smaller known currency, you can use them over there, but then you also have MakersPlace, for example, they allow you to use credit card. So, you could also use credit card to purchase if you don’t have cryptocurrency, but they also allow you to use Eth to purchase. So, you can use your cryptocurrency to purchase or to receive cryptocurrency if you’re a artist.</p>
<p>Yiying: Now, going back to the question, is it going to be auction or some other way? There’s all kinds of different ways of, again, depends on the platform that allow you to do auction. So, I believe that on most of the website, they allow you to do auction, but depends again, whether you issue your NFT as a one-on-one piece, which is unique one and only piece, or you decided to do it like a limited edition, let’s say ... Think of this as a print. Back in the days we create prints. So one-on-one is basically when they say mint, is that you create the digital art or you create the physical art and you scan it and make it digitally, you upload it to the blockchain through your wallet. This process in the crypto terminology, they call it mint. It’s like minting the money.</p>
<p>Yiying: So, once you mint it, if you only mint one piece and you’re not going to mint it again, you call it one-on-one piece and those pieces are usually you can either have a set price and you sell this or you can do auction. So potentially, you should be able to do it on most of the website. You can do auction. There’s also a lot more interesting, fun ways of interacting with your collector.</p>
<p>Yiying: So for example, there’s also a very popular way, people do limited edition pieces within 24 hours. So, this is called the open edition. So, within 24 hours, they’re going to issue, but we don’t know how many pieces are going to be sold out, but within 24 hours people are going to close the mint, meaning that if you are late to the game after 24 hours, you don’t get the chance to purchase it. So, that’s called the open edition.</p>
<p>Yiying: So, sometimes open edition could be very interesting because depends on how many people are going to participate in the sale. You could sell more, you could sell less, but then depends on how many pieces are being sold. There’s also this scarcity interests from the collector because some of the collectors might want to participate into these open edition, but they might want to have something pretty rare.</p>
<p>Yiying: So, I did this really interesting chance-based, almost chance-based sale on MakersPlace, which is something hard to do on other platforms because a lot of times, other platforms will sell the piece right away. What you see as what you get, or they have this thing called mystery box, you don’t know what you get, you purchase it and you open it and that’s it.</p>
<p>Yiying: But what I did was MakersPlace. We did a chance-based sale, which is very exciting. So, we had five different designs and each of the design have different percentage of people being able to purchase, but they don’t know what they’re going to get. So, they might get the unicorn, which is very rare. There’s only less than 10% chance you’ll be able to get it. Or you can also get this particular piece, that’s this new mythical beast that only have 4% chance of winning. So, it gets very interesting because you make the whole open edition process become also a chance-based game that people are very excited to participate and they also ended up walking away with a piece of art they like. Because usually, I have less than six designs and it’s always exciting to see what people ended up getting. So, that’s the way that I experiment with different platforms.</p>
<p>Vitaly: Right. And would you say that this is actually worth it for designers, for example, or illustrators, or artists? So, you might have some people listening in now thinking, "Okay, well I’ve been designing digital art now forever. This is something for me to try out." Because we of course always hear about those stories about maybe one particular artifact being sold for, I don’t know, a million or two, or so. Are those really edge cases and is it really hard to get to any level of success? Or would you say that there are many artists trying? There are obviously many artists failing and some succeeding. Where would you say we currently are in this space?</p>
<p>Yiying: This is a very great question. And to me, I’m still in ... The non-fungible token space is relatively new and I’m still experiment. I think the most important thing, this is just a personal experience that I like to share with the world, that by no mean, I think that doing this is the only way of achieve success or happiness, or whatever you are searching for in your life. I think that by participating in this interesting new piece of technology, I’m able to find something and create something, a new experience that otherwise, I wouldn’t have the opportunity to do.</p>
<p>Yiying: And to me, this is as exciting as ... Vitaly, if you remember, I wrote a email to you when we created the Smashing Magazine Book 2 together in 2010. And in 2017, you were leading the Smashing Conference in New York. And I wrote an email to you after seven years, even though we’ve never met. I wrote a email to you. I said, "Hey Vitaly, welcome to town. I would love to come and see you, but I also become a speaker now. I would love to speak at Smashing Conference if there is a chance and if the topic matches." And you ended up giving me this opportunity to speak in New York and it also really helped me to gain a lot more audience. I had such a smashing time and I enjoyed it so much and organically, I had so many more opportunity to speak and to that, I’m incredibly thankful.</p>
<p>Yiying: But I also think that I gave myself a chance. I reached out to you because I just want to create this opportunity for myself and similarly, giving yourself a chance to experiment with a new piece of technology currently, sure there are a lot of people criticizing the current landscapes and some of the existing projects, but please, before you criticize anything, try it yourself and see if you can make a difference. That’s something I want to be able to do. I think that the biggest desire I have with cryptocurrency is being able to create something new and potentially use it as a case study to teach people. Again, going back to the token, to teach people the technology itself. There’s nothing wrong with technology, just like there is so many potential with social media.</p>
<p>Yiying: And going back to people saying money is evil, money is a energy. Money is neutral. In fact, there is so much abundance that we can create if we have the right intention and also if we do it with the right people, who also have the same goal and mission. And so going back to, again, your question on whether or not the space, there’s a lot of criticism. There’s also a lot of projects unfortunately failed, that stemmed back to the innate difference between Web3 and Web2 because in Web2, because it’s cryptic, a lot of times, people don’t really know the early days crypto artists, they’re anonymous.</p>
<p>Yiying: I’m doing NFT, but I wouldn’t necessarily call myself a crypto artist per se because people know who I am and I am relatively public. People know my real name and there’s also obviously, a lot of trust you have to establish with your community. And that’s also something I’m very excited about, is that when you are creating something from the identity, who you are, and the community knows you and vice versa, you wanted to create something that people could treasure. And unfortunately, a lot of the scams are coming from there is this trust that was being established. People wanted to purchase their art piece from this particular NFT project.</p>
<p>Yiying: And yet later on, there was disappointment because the crypto artist or the project failed because it’s a scam, because the foundation was shaky. There was no mutual transparency over there. And so that’s something that I think that there’s going to be a lot more experiment and there’s also going to be a lot more trial and fail, trying and ... how would I put this? Sorry, I’m going off the topic, but that’s what I’m trying to say.</p>
<p>Vitaly: That’s okay, that’s okay.</p>
<p>Yiying: That’s what I’m trying to say. I think that give yourself an opportunity. If there is a new piece of technology that existing, sure there will be a lot of pros and cons, but really try it yourself and you might create something completely new. That would be my message.</p>
<p>Vitaly: Right. Well, at this point, I just really have to ask that one question that probably is somewhere out there in the dark corners of the web, because now that I look at all the work that you’re doing, not to mention of course, your studio, not to mention of course, all the incredible nonprofit work that you’re doing as well from Asian Art Museum and Women Talk Design, the Kids &amp; Art Foundation, San Francisco Zoo, and so many others. And you’re also a San Francisco arts commissioner. I mean, how does it all work? Where do you even find time for all of this? Do you even sleep at night? How does it work, Yiying? Tell us, what is the secret to your productivity?</p>
<p>Yiying: Thankfully, I think I have been always doing the things I love. So, I’ve been always doing the work I enjoy, with the people that really have been supportive and with the community, like Smashing community and yourself, the people that I really have so much gratitude and also had so much fun working with. It’s always helpful when you work with people that you enjoy working with and also learning from them. I’ve learned so much from the Smashing community, the speakers, yourself, and also the community. I always enjoyed meeting all the Smashing attendees offline, and really appreciate the time that we spend in different parts of the world, whether it’s Toronto, Vyborg, here in San Francisco, New York. And yeah, I can’t wait to meet more folks now that COVID-19 is calming down a little bit, travel reopened. To me, it’s something to look forward to.</p>
<p>Yiying: I always, doing something that potentially could look forward to. Going back to your question about being a San Francisco arts commissioner. I am very thankful the mayor of San Francisco, London Breed, appointed me to be the arts commissioner and together with 14 other arts commissioners, we work with the City of San Francisco and it’s actually a very wonderful community that works to serve the larger community. In this case, we work with the artists in the Bay Area for RTC in the San Francisco International Airport, SFO. Whether it’s the murals outside of the zoo, or the park that’s within the San Francisco Chinatown, it’s a very big honor to be able to help the community offline. Because I am very passionate about the online community, but I think that we live in that three-dimensional world, in a physical world. And so a lot of times, I do think that being able to also contribute to people’s wellbeing and happiness in the physical world is something that I’m just very happy to be part of.</p>
<p>Vitaly: Right. Also, you just mentioned COVID, of course. I’m wondering at this point for all of us, I think, and for everybody who I’ve been interviewing and for myself as well, COVID had a tremendous impact on the life habits, the views on things, relationships, and so many other things. What was it for you? Did you learn something? Did you something about yourself, about art, about anything else? Did it motivate you to do something? How did it change your life?</p>
<p>Yiying: Thank you for the question. Yeah, I would say the entire pandemic has been very challenging and yet I see it as a opportunity to connect with myself, but also connecting with my community. Because during COVID-19, especially 2020 and 2021, I was in San Francisco and I have not still, until now, I haven’t seen my parents for almost four years. My parents are still in Sydney, Australia and my family, my relatives, at the time my grandmother, is in Shanghai. So, I haven’t seen my immediate family for at least more than three years, three and a half years.</p>
<p>Yiying: And so, I think that it’s a very isolated situation and the only way that kept me going and also kept me stay at float is creativity and community, really, truly. I was very fortunate to be able to get a lot of support from different sources. One of them was Adobe. Adobe had Adobe Creative Funds, so I was very fortunate to receive it. I created this project, which you can see on the back. I was very passionate about biological conservation for the endangered species, but I was also very interested in creating something for children.</p>
<p>Yiying: So, I’ve been always wanting to write a children’s book. So, during the pandemic I was working on this project called The Very hungry Red Panda, because me, myself, I’m from Asia. Red panda was also from Asia and most people don’t know, the cute red panda ... By the way, fun fact, if you use Firefox Mozilla, the Firefox is actually not a fox. Firefox is actually a nickname for red panda, so that’s a-</p>
<p>Vitaly: Oh, this is shocking.</p>
<p>Yiying: I know, it’s not a Fox, it’s a red panda. So, I was very interested in showcasing the beauty and the nature of Asia. It was also during the ... Unfortunately, I think the pandemic was also ... really showed a lot of the issues in the world. I wanted to also find a way to shed some lights on this issues, but in a more uplifting way. What I’m interested in doing is using art as a vehicle to advocate for diversity, for inclusion, and how does that look like when we bring people together? I think that one of the metaphor I was using, which is what if we create these stories that can bring people and children from around the world together to appreciate each other?</p>
<p>Yiying: So, the children’s book, the ethos of the children’s book, which is The Very Hungry Red Panda, was initially coming from the Red Panda Creation. I created the red panda, was during an Airbnb Asian Night Market. That was before COVID in 2019, supported by all the folks in Airbnb. It’s all volunteer work from the employees at Airbnb. So, they wanted to create this amazing, called night market, for the local mom and pop shops and for the local performers for the local hosts who, AAPI heritage, it was during the AAPI Heritage Month, which means Asian American Pacific Islander Heritage Month. So, they bring all the people together. But the attendees, people from all kinds of genders, all kinds of ethnicity, and people are able to come over and enjoy the food from Asian Pacific Islander heritage.</p>
<p>Yiying: And at the time, they didn’t have anyone to do the branding, creative campaign work. Basically, it was two weeks before that market opening and they couldn’t find anybody to do the design volunteer work. My friend Mabel at the time, she was the global lead and she contacted me. She said, "Can you help out?" So I said, "Okay, I would love to help out in any way I can for the community."</p>
<p>Yiying: So, I created that red panda initially for that event as my contribution to my community and because red panda is endangered, just like the artists and all the small businesses in the Bay Area. And so, we need to take care of them and protect them. And the reality is the red panda actually was less than 10,000 in the world on the Earth. Most people don’t know about, they’re really cute, but they’re also very endangered.</p>
<p>Yiying: So, I was very excited to of expand the families of the red panda and then 2020 happened, and I got this creative fund. I wanted to create something to advocate for all endangered animals from around the world, from African animals like the giraffe and the zebra, or the polar bear in the North Pole, and the whale shark in the East Asia Ocean, and the koalas in Australia, or the sloth in South America. So, it’s a way for me to really send my love to not only people, but also geographic location around the world. But essentially, the ending of the story is, it will be a play. All these animals are actually animal costume and there’ll be little kids jumping out of the costume and there will be kids from around the world. So, that’s the hope of that children’s book.</p>
<p>Vitaly: Oh, that’s nice. That’s very cute. I’m wondering at this point, with all the project that you already had done, is there any dream project that you’d love to work on one day? Something that you always wanted to do? I don’t know, NASA? I have no idea. Anything that you have in your mind that will be, eventually you will start work on.</p>
<p>Yiying: Great question. I think I am literally just starting working on it. I am three weeks in on writing a book about creativity, entrepreneurship. Really it’s a book about happiness and creativity, that’s my name. I would love to use this book to bring more happiness and creativity to more people. So, I’m incredibly excited to start this dream project. I haven’t shared this with anybody publicly, so I’m sharing it with you here.</p>
<p>Vitaly: Well, now you have. Excellent, excellent. Now, maybe the final question for you Yiying, until ... and then we’ll wrap up. Looking back at your career and again, all the incredible things that you have been working on. Is there anything you wish you’d told yourself maybe 10 or 15 years ago when you were just starting out?</p>
<p>Yiying: Yeah. I think that if ... One thing I think I would like to tell myself, I love this quote from Conan O'Brien, which is, "If you work hard and be kind, amazing things going to happen." I think it really helped me through some of the hardest time in my life. Another quote I love is from Joseph Campbell, which is, "Follow your bliss." I think that everybody in themselves, they all know what makes them happy, what brings them joy. And that is such a bliss for thing to know or to realize. So, I would say follow your bliss, follow the things that make your heart sing.</p>
<p>Vitaly: That’s very nice. Well, if you dear listener, would like to hear more from Yiying, you can always find her on Twitter when she’s @YiyingLu, and also on her website, which is surprising, surprising yiyinglu.com. Yiying will also be speaking. I heard, I think in New York, at SmashingConf, if I’m not mistaken. So, please drop in if you have time, we’d love to see you there as well. Well, thanks for joining us, Yiying. Do you have any parting words of wisdom? I mean, you already shared some, but anything else that you want to put out there in the world for all the wonderful people listening till the very end of this podcast?</p>
<p>Yiying: Yes, drink a lot of water and take deep breath every now and then.</p>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Drew McLellan)</author>
      <enclosure
        url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/639db09c-3948-4a2d-a564-a189c62098b7/smashing-podcast-episode-52.png"
        length="0" type="image/png"/>
    </item>
    <item>
      <title><![CDATA[Meet Understanding Privacy, A New Smashing Book By Heather Burns]]></title>
      <link>https://smashingmagazine.com/2022/09/understanding-privacy-pre-release/</link>
      <guid>https://smashingmagazine.com/2022/09/understanding-privacy-pre-release/</guid>
      <pubDate>Mon, 05 Sep 2022 14:00:00 GMT</pubDate>
      <description>
        <![CDATA[Meet “Understanding Privacy”, our upcoming book on what data privacy is really about beyond scary headlines. Approx. 350 pages. <strong>eBook available in October, print shipping in November.</strong>]]></description>
      <content:encoded><![CDATA[<p><strong>Privacy by design</strong> is possible, but over time, it has become challenging to build and deploy sites and apps that use personal information in practical ways that are safe and ethical. In fact, many of us have given up at least a little of our own privacy online.</p>
<p>And so in our work, it may become easier to rationalize collecting more user data than we need, to avoid <strong>transparency</strong> around how that data is used, and even to use that data for unintended purposes. We tell ourselves it is for the convenience of our users, or to enhance their experiences. It’s no secret that unethical data practices can cause harm, often in ways we can’t predict.</p>
<p><strong>Thoughtful data collection</strong>, storage, and use of data is possible, though. Heather Burns brings clarity to the subject by explaining the principles behind the collection, storage, and use of personal data, and how to use those principles to create safer experiences for your users. <em>Understanding Privacy</em> is an essential book for anyone that collects personal information. <a href="#table-of-contents"><strong>Jump to table of contents ↓</strong></a>.</p>
<ul>
<li><strong>eBook</strong> available for download in <strong>October 2022</strong>,</li>
<li><strong>Printed books</strong> will be shipped in <strong>November 2022</strong>.</li>
<li><a href="/printed-books/understanding-privacy/">Pre-order the book.</a></li>
</ul>


    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ea305ed3-2a87-4480-898a-4d18893e1291/thanks-1.jpg">
    <img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ea305ed3-2a87-4480-898a-4d18893e1291/thanks-1.jpg" />
    </a>




About The Book
<p><em>Understanding Privacy</em> is an introduction to the beliefs, concepts, and ideas that inform privacy as it exists — or has failed to exist — on the open web that we build. It’s about all the fundamental values of privacy <em>as a concept</em>, which precede privacy <em>as a legal compliance issue</em>. It’s about the ways these concepts impact your work as a designer, a developer, or a project manager. And it’s about the ways you can adopt these principles to create a <strong>healthy, user-centric approach to privacy</strong> in everything you do.</p>

<p>Heather explains what she has experienced working on privacy from every angle — human rights, law, policy, and web development — in the simplest way possible, and in the most positive way possible, <strong>in ways you can comprehend, use</strong>, and adapt in your work on the web right away.</p>

<p>A healthy approach to user privacy doesn’t tell you <em>how</em> to code. It tells you how to <strong>make the right decisions</strong> which <em>inform</em> the code. It also gives you the foundation you need to question, and even challenge, workplace practices which might not be in your users’ best interests.</p>

<p>This book is <strong>not a legal reference manual</strong>. By the end of this book, you will have shifted your understanding from a negative view of privacy as a scary legal compliance obligation to a <strong>positive view of privacy</strong> as an opportunity to build a better web.</p>

<p><em>Approx. 350 pages. Written by Heather Burns. Cover design by Espen Brunborg. eBook available for download in October, print shipping in November.</em></p>

<h3>You’ll learn:</h3>
<ul>
<li>Fundamental <strong>concepts</strong>, <strong>definitions</strong>, and <strong>frameworks</strong> behind privacy and data protection,</li>
<li>how to integrate a <strong>healthy approach to user privacy</strong> into everything you do,</li>
<li>common <strong>privacy issues</strong> and how you can make a difference,</li>
<li>how to lay the ground for future developers, designers, and project managers to build a <strong>better web for tomorrow</strong>,</li>
<li>the obligations we have to safeguard user privacy and <strong>health data</strong>.</li>
</ul>

<h3>Who is this book for?</h3>
<p><em>Understanding Privacy</em> is for <strong>designers</strong>, <strong>developers</strong>, and <strong>project managers</strong> who want to understand what privacy really is about and who want to integrate a healthy approach to user privacy into everything they do — not only to put their users first today but also to help build a better web for tomorrow.</p>

Table Of Contents
<div>


              <div>
                <div>
                  1. Privacy and You
                </div>
              </div>
              <div>
                  +
              </div>


              <div>
                <p>In the book’s first section, “Privacy and You,” Heather reviews the fundamental concepts, definitions, and frameworks behind privacy and data protection.</p>
             </div>


              <div>
                <div>
                  2. Privacy and Your Work
                </div>
              </div>
              <div>
                  +
              </div>


              <div>
                <p>In the second section, “Privacy and Your Work,” Heather discusses how to integrate a healthy approach to user privacy into everything you do, whether you are a designer, a developer, or a project manager.</p>
             </div>


              <div>
                <div>
                  3. Privacy and Your Users
                </div>
              </div>
              <div>
                  +
              </div>


              <div>
                <p>“Privacy and Your Users” covers issues around user privacy where you can make a difference.</p>
             </div>


              <div>
                <div>
                  4. Privacy and Your Future
                </div>
              </div>
              <div>
                  +
              </div>


              <div>
                <p>In “Privacy and Your Future,” Heather suggests a few critical areas that make the web a better place and lay the ground for future developers, designers, and project managers to build a better web for tomorrow’s users.</p>
             </div>


              <div>
                <div>
                  Postscript: Privacy and Health Data
                </div>
              </div>
              <div>
                  +
              </div>


              <div>
                <p>In the final section, “Privacy and Health Data,” Heather addresses an even more pressing recent issue: the obligations we have to safeguard user privacy and health data, and how to do it as best we can.</p>
             </div>


</div>

<p>Approx. 350 pages. <strong>eBook available for download in October, print shipping in November.</strong> Written by Heather Burns. Cover design by Espen Brunborg.</p>


    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/23d21c34-bc5e-4cb0-a0e7-a95d35629dda/understanding-privacy-post-cover.png">
    <img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/23d21c34-bc5e-4cb0-a0e7-a95d35629dda/understanding-privacy-post-cover.png" />
    </a>




About the Author
<p><a href="https://twitter.com/WebDevLaw"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e0e633f8-d459-419c-9b2a-b60a828f9886/heather-burns-200px.jpg" /></a><em>Heather Burns</em> is a tech policy and regulation specialist. She advocates for an open web built around international standards of human rights, privacy, accessibility, and freedom of expression. She’s currently also an <a href="https://webdevlaw.uk/2022/07/07/announcement-im-an-internet-society-mid-career-fellow/">Internet Society Mid-Career Fellow</a>.</p>

Technical Details
<ul>
<li>ISBN: 978-3-945749-64-7 (print)</li>
<li><strong>Quality hardcover</strong>, stitched binding, ribbon page marker.</li>
<li>Free worldwide airmail <strong>shipping from Germany starting in November 2022</strong>.</li>
<li>eBook available for <strong>download in October 2022</strong> as PDF, ePUB, and Amazon Kindle.</li>
<li><a href="/printed-books/understanding-privacy/">Pre-order the book.</a></li>
</ul>

Community Matters ❤️
<p>Producing a book takes quite a bit of time, and we couldn’t pull it off without the support of our wonderful <strong>community</strong>. A huge shout-out to Smashing Members for the kind, ongoing support. The eBook is and always will be <a href="https://www.smashingmagazine.com/membership">free for <em>Smashing Members</em> as soon as it’s out</a>. Plus, Members get a friendly discount when purchasing their printed copy. Just sayin’! ;-)</p>

More Smashing Books &amp; Goodies
<p>Promoting best practices and providing you with practical tips to master your daily coding and design challenges has always been (and will be) at the <strong>core of everything we do</strong> at Smashing.</p>

<p>In the past few years, we were very lucky to have worked together with some talented, caring people from the web community to publish their wealth of experience as <a href="/printed-books/">printed books that stand the test of time</a>. Steven and Stefan are two of these people. Have you checked out their books already?</p>

<div>

<div><a href="/printed-books/touch-design-for-mobile-interfaces/"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b14658fc-bb2d-41a6-8d1a-70eaaf1b8ec8/touch-design-book-shop-opt.png" /></a></div><h4><a href="/printed-books/touch-design-for-mobile-interfaces/">Touch Design for Mobile Interfaces</a></h4><p>Learn how touchscreen devices really work — and how people really use them.</p><p><a href="/printed-books/touch-design-for-mobile-interfaces/">Add to cart $44</a></p>

<div><a href="/printed-books/typescript-in-50-lessons/"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c2f2c6d6-4e85-449a-99f5-58bd053bc846/typescript-shop-cover-opt.png" /></a></div><h4><a href="/printed-books/typescript-in-50-lessons/">TypeScript In 50 Lessons</a></h4><p>Everything you need to know about TypeScript, its type system, generics and its benefits.</p><p><a href="/printed-books/typescript-in-50-lessons/">Add to cart $44</a></p>

<div><a href="/ebooks/checklist-cards-digital/"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/efffa8a0-82a0-415a-8aa5-8684a32083eb/checklist-cards-box-opt.png" /></a></div><h4><a href="/ebooks/checklist-cards-digital/">Interface Design Checklists (PDF)</a></h4><p>100 practical cards for common interface design challenges.</p>
<p><a href="/ebooks/checklist-cards-digital/">Add to cart $15</a></p>

</div>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Vitaly Friedman)</author>
      <enclosure
        url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cff889cf-602a-4685-a43c-e313647cac56/understanding-privacy.png"
        length="0" type="image/png"/>
    </item>
    <item>
      <title>
        <![CDATA[The Accessibility And Usability Journey Of Drupal’s Primary Navigation]]></title>
      <link>
        https://smashingmagazine.com/2022/09/accessibility-usability-drupal-primary-navigation/
      </link>
      <guid>
        https://smashingmagazine.com/2022/09/accessibility-usability-drupal-primary-navigation/
      </guid>
      <pubDate>Fri, 02 Sep 2022 10:30:00 GMT</pubDate>
      <description>
        <![CDATA[In this article, Mike Herchel covers Drupal’s new default theme, Olivero, which is usable, accessible, robust, and beautiful and will help you improve websites’ navigation systems.]]></description>
      <content:encoded><![CDATA[<p>A website’s primary navigation is critical to its usability and accessibility. However, navigation systems are deceptively complicated. All but the simplest websites have to deal with this.</p>
<p>With version 9.4, Drupal has a brand new default theme called Olivero. Being the default, we knew its navigation system would be used by hundreds of millions (if not billions) of users throughout its lifetime. And of all the things that we are proud of with Drupal’s new theme, the navigation system tops the list. An enormous amount of testing, bug fixes, and care went into it.</p>
Usable, Accessible, Robust, <em>And</em> Beautiful
<p>When we started creating the theme, we knew it needed to be usable, accessible, robust, and beautiful. All of these goals pose significant challenges.</p>
<p>For usability, we wanted to include second-level navigation drop-downs similar to many sites on the internet. These second-level navigation drop-downs need to open on hover, click, and touch. </p>
<p>Accessibility is a Drupal core gate. We knew it must meet or exceed WCAG 2.1 AA standards. More than just <em>meeting</em> the standards, we want our theme to be a delight to navigate for those who need to use assistive technology. </p>
<p>And, because we don’t control the content, the menu system needed to be very robust. We don’t know if the content editors will enter one item or hundreds! We don’t have control over the length of the text. We also support internationalization, which includes supporting right-to-left languages such as Arabic.</p>
<p>On top of this functionality, the menu also needed to be beautiful. Our designers did an amazing job mocking it up, and then we integrated some basic CSS transitions to add a slight fade-in, vertically transformed animation.</p>
Creating The Markup For Our Menu
<p>Olivero’s menu starts with a standard <code>&lt;nav&gt;</code> element. We add an <code>aria-labelledby</code> attribute pointing to the ID of a visually hidden (but accessible to screen readers) <code>h2</code> element. This communicates the navigation name to people using screen readers so they can differentiate the different navigation elements. It also enables users to find this menu if they navigate by headings.</p>
<p>Menu items rely on a modified <a href="https://adrianroselli.com/2019/06/link-disclosure-widget-navigation.html">link disclosure pattern</a> when using hyperlinks as the top-level navigation item.</p>
<p><strong>Note:</strong> <em>Drupal can also use a <code>&lt;button&gt;</code> element as the top level item.</em></p>
<p>This pattern injects a <code>&lt;button&gt;</code> element after the hyperlink. Within Olivero, we style the button with a “down chevron” icon.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d68a464f-9241-496b-b067-300189d3ee15/link-disclosure.png" /></p>
<p>The button has <code>aria-controls</code> (mapped to the ID of the nested <code>&lt;ul&gt;</code>) and <code>aria-expanded</code> attributes that are initialized with JavaScript. If the site is loaded without JavaScript, the buttons become purely presentational.</p>
<p>This button contains visually hidden text with the menu item's text, followed by “sub-navigation.” This is so people who tab between form controls can understand what submenu the button controls.  </p>
<div>
<pre><code>&lt;nav aria-labelledby="block-olivero-main-menu-menu"&gt;
  &lt;h2 class="visually-hidden" id="block-olivero-main-menu-menu"&gt;Main navigation&lt;/h2&gt;
  &lt;ul&gt;
    &lt;li&gt;
      &lt;a href="/"&gt;Webforms&lt;/a&gt;
      &lt;button aria-controls="primary-menu-item-12" aria-expanded="false"&gt;
        &lt;span class="visually-hidden"&gt;Webforms sub-navigation&lt;/span&gt;
      &lt;/button&gt;
      &lt;ul id="primary-menu-item-12"&gt;
        &lt;!-- Submenu items --&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;!-- More top-level navigation items here. --&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
</code></pre>
</div>



Desktop Menu Features
<h3>Opening The Desktop Submenus</h3>
<p>The submenus open on hover, click, and tap. However, we need to ensure that these events don’t fire simultaneously (like they can on touch devices) because if the menu instantaneously opens and closes, it’ll seem like nothing has happened! We also need to consider assistive technology like point-scanning tools that may trigger both events in rapid succession.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4948f136-c2c6-4975-aaae-3aed00f6ac20/2-accessibility-usability-drupal-primary-navigation.png" /></p>
<p>To accommodate this, we switch to the mobile menu when the primary menu runs out of space. To do this, we set a resize observer to trigger a check to see if the text is wrapped. If it is, we enable the mobile menu and remember when to transition back to the desktop version (if the viewport is enlarged).</p>
<div>
<pre><code>const navMenu = document.querySelector('.primary-nav');
const navItem = navMenu.querySelector('.primary-nav__menu-item');

function checkIfDesktopNavigationWraps() {
  if (isDesktopNav() &amp;&amp; navMenu.height &gt; navItem.clientHeight) {
    enableMobileNav(); // Enable the mobile navigation.
    // Remember when to switch back to desktop navigation.
    const navMediaQuery = window.matchMedia(<code>(max-width: ${window.innerWidth + 15}px)</code>);
    navMediaQuery.addEventListener('change', () =&gt; {
      // Double check to see if the navigation is wrapping to prevent edge
      // cases where the mobile menu should still be enabled.
      if (navMenu.clientHeight &gt; navItem.clientHeight) {
        disableMobileNav(navMenu, navItem);
      }
    }, { once: true });
  }
}

const resizeObserver = new ResizeObserver(checkIfDesktopNavigationWraps);
resizeObserver.observe(navMenu);
</code></pre>
</div>

<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/160308a3-2486-49b4-9ef0-c8e73032bc63/3-accessibility-usability-drupal-primary-navigation.png" /></p>
<h3>Make Sure Submenus Cannot Overflow The Viewport</h3>
<p>Olivero’s menu is fixed to the top of the viewport. Fixed menus can create a problem if the viewport is shorter than the longest submenu — the user will never be able to scroll to access the items at the end. This inability to access items at the end of the menu creates another failure of <a href="https://www.w3.org/WAI/WCAG21/Understanding/focus-visible.html">WCAG 2.4.7 Focus Visible</a>.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c5b414a1-b3a7-4e4a-b7fb-6b24ccdd0599/4-accessibility-usability-drupal-primary-navigation.png" /></p>
<p>We solve this by calculating the height of the header and setting <code>max-height</code> and <code>overflow: auto</code> on the submenu.</p>
<pre><code>.submenu {
  max-height: calc(100vh - var(--header-height));
  overflow: auto;
}
</code></pre>

<p>With these styles in place, the menu will never grow larger than the viewport height, and the browser will make the submenu scrollable only if needed. If the user tabs to the bottom of the submenu, the browser will automatically scroll the content into view.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/419a33be-35b5-4acb-a500-1dfc69578d3a/5-accessibility-usability-drupal-primary-navigation.png" /></p>
<h3>Non-JavaScript Support</h3>
<p>Because Drupal renders its markup on the server, we have the opportunity to support devices where JavaScript is disabled. To make this happen, we enable <code>:hover</code> and <code>:focus-within</code> on the parent menu item.</p>
<pre><code>body:not(.js) .menu-item:is(:hover, :focus-visible) .menu-level-2 {
  visibility: visible;
}
</code></pre>



Mobile Menu Features
<p>Olivero’s mobile menu functions much as you’d expect. It does not react to hovers, but the aria attributes stay the same.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b617c064-2015-45d3-9c0a-f61499b9ab08/6-accessibility-usability-drupal-primary-navigation.png" /></p>
<p>The mobile navigation is activated by a <code>&lt;button&gt;</code> element hidden at desktop widths. This button also contains <code>aria-expanded</code> and <code>aria-controls</code> elements with the appropriate values. </p>
<p>Clicking the button opens the menu, and you can close the menu by clicking (or tapping) outside the menu. In addition, the  Escape key will close the menu and set the focus back to the mobile menu button.</p>
<h3>Handling Focus Inside The Menu</h3>
<p>Olivero’s mobile menu superimposes itself over the content of the page. This can create an accessibility issue if the content hidden by the menu gains focus.</p>
<p>To work around this, we create a “focus trap” within the menu and its close button. This ensures that if a user is navigating the site via keyboard, they can’t gain focus outside the menu. </p>
<h3>Handling Anchor Links</h3>
<p>We ran into a real-world situation where the user entered an anchor link within the menu. Once clicked, the site would scroll down to the page, but the menu would still be open. </p>
<p>To fix this, we add some JavaScript that closes the mobile navigation if the target link is an anchor.</p>
<div>
<pre><code>// If hyperlink links to an anchor in the current page, close the mobile menu after click.
navWrapper.addEventListener('click', (e) =&gt; {
  if (e.target.matches(<code>[href&amp;#42;="${window.location.pathname}#"], [href^="#"]</code>)) {
    closeNavigation();
  }
});
</code></pre>
</div>

<h3>Support For The Mobile Menu Without JavaScript</h3>
<p>To support the mobile menu without JavaScript, we need to display the menu without having to press the open menu button (which we hide since it doesn’t work without JavaScript). </p>
<p>To prevent a flash of the non-JavaScript menu on page-load, we included the non-JavaScript stylesheet within a <code>&lt;noscript&gt;</code> tag within the <code>&lt;head&gt;</code>. This means the browser won’t process these styles unless JavaScript is disabled.</p>
Focus Styles And Forced Colors
<h3>Focus Styles</h3>
<p>The Olivero theme has very robust focus styles that fit into the look and feel of the theme. Focus styles are an extremely important aspect of accessibility that we didn’t want to neglect.</p>
<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e2e50ea9-49ec-458d-a35b-5a4b96d6f15a/7-accessibility-usability-drupal-primary-navigation.gif"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/00837404-44f1-4a18-9cc8-51cd2435ae82/7-accessibility-usability-drupal-primary-navigation-800w.gif" /></a>(<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e2e50ea9-49ec-458d-a35b-5a4b96d6f15a/7-accessibility-usability-drupal-primary-navigation.gif">Large preview</a>)

<h3>Forced Colors Mode</h3>
<p>The Olivero theme and its navigation system are extensively tested in forced colors using Windows high-contrast mode. In addition to Microsoft Edge, we also do testing in Chrome and Firefox. We also tested it in multiple high-contrast color schemes, including light-on-dark, dark-on-light, and a few custom schemes we created.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/aab15a70-2f77-46ff-9b03-fcca75329a8a/8-accessibility-usability-drupal-primary-navigation.png" /></p>
<p>All icons are either created using borders (which become apparent when in forced colors) or use the <code>forced-colors: active</code> media query to ensure it’s visible in any color scheme. In addition, we use the <code>CanvasText</code> system color to set the overlay’s background color, which provides a visual boundary to the mobile menu. </p>
Accessibility Is A Journey
<p>To meet our requirements, we extensively tested Olivero on various devices and assistive technology. We also worked with the National Federation of the Blind to do additional screen reader testing. Along the way, we learned a lot of lessons and techniques to ensure Olivero’s navigation system is usable for all people using any kind of device.</p>
<p>That all being said, accessibility is a journey. There are undoubtedly remaining accessibility issues that will pop up throughout the lifetime of this theme, and we will fix those when they occur. The code is <a href="https://git.drupalcode.org/project/drupal/-/tree/10.0.x/core/themes/olivero">free open source GPL</a> (the examples above are simplified), and we hope that you can benefit from these lessons to improve navigation systems across the web 💙!</p>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Mike Herchel)</author>
      <enclosure
        url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/98290a21-bda2-4307-b531-3f6745c5b6b5/accessibility-usability-drupal-primary-navigation.jpg"
        length="0" type="image/jpg"/>
    </item>
    <item>
      <title>
        <![CDATA[Databases For Front-End Developers: The Concepts Under The Hood (Part 2)]]></title>
      <link>
        https://smashingmagazine.com/2022/09/databases-frontend-developers-concepts-under-hood/
      </link>
      <guid>
        https://smashingmagazine.com/2022/09/databases-frontend-developers-concepts-under-hood/
      </guid>
      <pubDate>Thu, 01 Sep 2022 11:00:00 GMT</pubDate>
      <description>
        <![CDATA[In the second part of “Databases For Front-End Developers” series, Atila Fassina explores concepts to equip you to have your own opinions about which kinds of databases suit your specific needs.]]></description>
      <content:encoded><![CDATA[<p>In Part 1, <a href="https://www.smashingmagazine.com/2022/08/databases-frontend-developers-rise-serverless-databases/">The Rise Of Serverless Databases</a>, of the “Databases For Front-End Developers” series, we talked about the hurdles and traps of scaling and maintaining your databases. We went from simpler and specialized alternatives like Content Management Systems and spreadsheets to self-hosted databases and, finally, to Serverless Databases.</p>
<p>Today, we go deeper into the rabbit hole. We will explore concepts to equip you to have your own opinions about which kinds of databases suit your specific needs. And this is important to stress up front: there is no right answer. Each database carries its own set of tradeoffs and advantages. If something looks like a “one-size-fits-all” solution, be careful: you might be missing something!</p>
Anatomy Of A Database
<p>Before we begin, it’s important to highlight that what we loosely refer to as “databases” are actually “<strong>Database Management Systems (DBMS)</strong>.” A DBMS is a piece of software that enables the user to more ergonomically write, read, delete, or update information in a given set of data. For this series, we will focus mainly on Relational and Non-Relational DBMSs. There are many other types, all categorized by their data structures, but relational and non-relational are the most common for web development by any measure.</p>
<p>Both <strong>Relational (R)</strong> and <strong>Non-Relational (NR) DBMS</strong> have different terms for the parts that compose them. Such components are almost interchangeable in definition, and that’s why you can commonly hear a developer referring to a Document (NR term) as “Table,” which is its Relational equivalent structure. Don’t be afraid of confusing them; they appear often enough for this cognitive overload to disappear quickly with usage. Additionally, once you get more familiar with the differences of each data structure, you will realize they probably <em>shouldn’t</em> be used interchangeably because there are differences among them. But for now, and for the sake of simplicity, let’s focus on the similarities:</p>
<ul>
<li><strong>Schema</strong><br />It’s the description of the database (like a blueprint), describing the landscape of the database in a supported language. This is required by relational databases, and though not required by non-relational DBMS, many interfaces offer a possibility to define it too. </li>
<li><strong>Tables (R/NR), Collections (NR)</strong><br />It’s the logical data structure, unsorted. A relatable example of this would be a spreadsheet table or a group (collection) of JSON objects.</li>
<li><strong>Databases (R/NR)</strong><br />It’s the logical grouping of data. You group your tables in databases (user database, invoices databases) and your documents in indexes based on how you intend to query them.</li>
</ul>
<h3>Keys And Columns</h3>
<p>To use a more familiar example, let’s take a JSON object as an example:</p>
<pre><code>{
  "name": "Atila"
  "role": "DX Engineer at Xata"
}
</code></pre>

<p>Given that JSON, a column would be represented by the key-value pair (column <strong>name</strong> has <strong>value</strong> “Atila”), and the key follows the same meaning as the JSON spec, key <strong>name</strong> will access the value “Atila.”</p>
<blockquote>A table has columns, and each column’s name determines the key with which you can access a value in a record.</blockquote>

<p>In addition to the above definition, there are special kinds of keys. Such keys play a special role in the schema of your database and how you will interact with your data. Define these wisely: any minimal change to them can be considered a breaking change to your data layer.</p>
<ul>
<li><strong>Unique Keys (UK)</strong><br />The keys that are unique between records on a table. They also accept <code>null</code>.</li>
<li><strong>Primary Keys (PK)</strong><br />It’s a special kind of Unique Key. There can only be one Primary Key per table, and it can never be <code>null</code> (Primary Keys are always considered <code>required</code>). Primary Keys are also indexed by default, helping with queries that want to filter on the value.</li>
<li><strong>Foreign Keys (FK)</strong><br />When there is a relation between tables, the keys are represented as foreign keys at the extraneous table.</li>
</ul>
<p>Example of Foreign Key: if each <code>author</code> in an <strong>authors</strong> table has <code>posts</code> (and <strong>posts</strong> is another table), <code>post.title</code> will be a FK at <strong>authors</strong>. And the junction between <strong>authors</strong> and <strong>posts</strong> is called a <strong>relation</strong>.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/46017a76-4ec2-4a12-8c68-612118342258/1-databases-frontend-developers-concepts-under-hood.png" /></p>
<h3>Mapping Your DBMS</h3>
<p>Once you look at the different data structures and choose your DBMS, you are ready to draw the first connection from your data layer to your application layer. And suddenly, you noticed it isn’t quite straightforward to bring data from the database to your client-side (or even to your server-side API in some cases). </p>
<p>Here comes ORM (Object Relational Mapping) and ODM (Object Document Mapping) to assist your developer experience. <a href="https://www.prisma.io/">Prisma</a> is probably the most widely used ORM at the moment, while <a href="https://mongoosejs.com/">Mongoose</a> has the largest ODM user base. It’s important to note they are not a requirement for connecting to databases. Still, if you keep an eye on how they build your queries (some specific cases can present performance issues on the account of the abstraction), they tend to make your life easier and fetching or writing data much more ergonomic.</p>
<p>When it comes to serverless databases, the need for them becomes a bit more questionable. And this is because many of these databases provide the users with an officially supported Software Development Kit (SDK). Your mileage will vary depending on the SDK, but they tend to have a big feature overlap with ORMs and ODMs, especially on databases that will keep the data layer behind an API (<a href="https://xata.io">Xata</a>, for example). This way, you won’t need to worry about translating your queries, and you can demand equivalent ergonomics between the SDK and an ORM. </p>
Common Concepts
<p>In this part of our series, we are learning what to look for when choosing the stack for our data layers. It is essential to understand common concepts around maintaining and choosing a DBMS (from here on out, we’re back into referring to them as “databases” to remain consistent with the rest of the world).</p>
<p>The next sections will not go so deep that you jump out and find a job as Database Administrator (DBA), but hopefully, it will offer you enough ammo to engage in conversation with experts and identify the best solution for your use cases. These concepts are common for <strong>every kind of data layer</strong>, from a spreadsheet to a self-hosted database and even to a serverless database. What will vary is how each solution will balance the variables intertwined in these paradigms. </p>
<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/62a86959-674e-4335-ad6c-c9ac40cf49bc/2-databases-frontend-developers-concepts-under-hood.gif"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/62a86959-674e-4335-ad6c-c9ac40cf49bc/2-databases-frontend-developers-concepts-under-hood.gif" /></a>As Thanos (from Marvel: Infinity Wars) would say: “perfectly balanced, like all things should be.”

<p>The most important concepts, to begin with, are Consistency, Availability, and Partition Tolerance. They’re better understood if presented together because the balance between them will guide how predictable your data is in different contexts.</p>
CAP Theorem
<p>This theorem describes the relationship between 3 components in a distributed system: Consistency, Availability, and Partition tolerance (C.A.P). The overall conclusion is easy to summarize: any system is only able to contemplate 2 of these components at the same time. Though just a simple sentence, this idea requires a bit of unpacking.</p>
<h3>Consistency (C)</h3>
<p>Within the CAP Theorem constraints, “consistency” refers directly to the data. When different clients make the same request, they will get the same response. When a written request is accepted and confirmed, all users will have access to this updated information at the same time.</p>
<h3>Availability (A)</h3>
<p>Every request will receive a response with data. No errors. However, this comes with no promises on whether the data is up to date or not. Depending on whether this is paired with consistency (C) or partition tolerance (P), you will get different behavior.</p>
<h3>Partition Tolerance (P)</h3>
<p>A “partition” is when the connection between two nodes in a system is broken. The CAP Theorem essentially describes how a system will tolerate the partition: enforcing availability (AP system) or enforcing consistency (CP system). Regardless of how small a system is, partitions can always happen. Therefore there is no such thing as a CA system.</p>
<p>To provide a more graphical example of each system, we can consider:</p>
<ul>
<li><strong>AP System</strong><br />Another node has a copy of the data. The user will get information back but without promises of it being 100% correct (up-to-date). It’s commonly implemented with <a href="https://aws.amazon.com/dynamodb/">DynamoDB</a>, <a href="https://cassandra.apache.org/_/index.html">Cassandra</a>, and so on.</li>
<li><strong>CP System</strong><br />To return an error and accept the transaction is impossible. It’s commonly implemented with traditional sharded DBs, <a href="https://www.citusdata.com/">Citus</a>, for example.</li>
</ul>
<p>Though popular and very often referred to, the CAP Theorem can be considered incomplete because it doesn’t consider situations beyond the network partition. Especially today, with high-availability content delivery networks (CDN), and extreme connectivity, it’s crucial to take into consideration latency and deeper aspects of consistency (linearizability and serializability).</p>
Consistency Confusion
<p>It’s funny how “consistency” is a term that switches meanings based on the context. So, in the CAP Theorem, as we just saw, it’s all about data and how reliably a user will get the same response to the same request regardless of which partition they reach. Once we take a step away from our own system, a new perspective makes us ask: “how <em>consistently</em> will we handle concurrent operations?”. And just like that, the CAP Theorem does not sufficiently describe the intricacies of operating at scale.</p>
<p>There is a third meaning of “consistency,” which we will save for later; it’s part of yet another acronym (ACID). If the last paragraph left you scratching your head, I can’t recommend enough “<a href="https://www.alexdebrie.com/posts/database-consistency/">Inconsistent Thoughts on Database Consistency</a>” by Alex DeBrie.</p>
PACELC Theorem
<p>The first three letters are the same as CAP, just reordered. The “consistency” in the PACELC Theorem goes deeper than in the CAP Theorem. It follows the <strong>Consistency Model</strong>, which determines the contract between a data store and a system. To make things less complicated, consider the PACELC an <em>extension</em> of the CAP Theorem. </p>
<p>Beyond asking the developer to strategize for the event of a network partition, the PACELC also considers what happens when the system has no partitions (healthy network).</p>
<p><strong>ELC</strong> stands for <strong>Else: Latency or Consistency?</strong></p>
<ul>
<li><strong>Latency</strong>: Can you accept an occasional stale response for the sake of performance?</li>
<li><strong>Consistency</strong>:<ul>
<li>Linearizability: Will you accept a higher latency to sync data in all nodes of a network before considering the transaction done?</li>
<li>Serializability: In the event of concurrent transactions on the same data, will you handle them in parallel or in a queue?</li>
</ul>
</li>
</ul>
<p>Because of this, I consider the PACELC carries a better mental model for this new era of Serverless Databases. When healthy, it’s not a scalar classification “AP” or “CP”; it accepts a spectrum because latency can be high or not, and consistency can have different levels as well.</p>
<p>Once we start talking about the types of databases and their data structures and which guarantees each can give, we will also talk about a bit of system architecture and how your architecture can reduce the tradeoffs when even by enforcing consistency, you can strive for a low latency scenario.</p>
See You Next Time
<p>With that, I believe we are ready to start narrowing down our discussions on the differences between each database type. Moreover, it’s possible to discuss and level expectations on each solution taken and analyze architectures individually. From now on, we will focus on Relational and Non-Relational databases.</p>
<p>In a few days, on our <em>season finale</em>, we will cover the differences between NoSQL and SQL: what guarantees to expect, what that means to your data, and how that affects development workflow. Then we will be ready to jump right into Serverless Databases and what to expect going forward. I can’t wait!</p>
<p>As usual, feel free to <a href="https://atila.io/twitter">reach out to me</a> with feedback, questions, and/or requests for the next part.</p>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Atila Fassina)</author>
      <enclosure
        url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7f8fb60e-72db-4053-825a-2cbc819c546b/databases-frontend-developers-concepts-under-hood.jpg"
        length="0" type="image/jpg"/>
    </item>
    <item>
      <title><![CDATA[Useful JavaScript Data Grid Libraries]]></title>
      <link>https://smashingmagazine.com/2022/09/useful-javascript-data-grid-libraries/</link>
      <guid>https://smashingmagazine.com/2022/09/useful-javascript-data-grid-libraries/</guid>
      <pubDate>Thu, 01 Sep 2022 08:00:00 GMT</pubDate>
      <description>
        <![CDATA[In this article, Zara Cooper provides a rundown of some popular data grid libraries that would be a great addition to any data-heavy application and shares recommendations on what factors to consider when choosing a suitable data grid library.]]></description>
      <content:encoded><![CDATA[<p>This article is a sponsored by <a href="https://www.bryntum.com">Bryntum</a></p>
<p>While there exist numerous data grid libraries with similar features out in the world, not all may adequately fit your business and app use cases. When choosing a suitable data grid library for your application, you must consider its feature set, performance, price, license, and support, among other factors. In this article, you’ll get a rundown of some popular data grid libraries that would be a great addition to any data-heavy application.    </p>
<p>But first, let’s break down what a data grid is. A data grid is a table component that usually loads, presents, and manipulates a large data set. They typically ship with extended functionality like data filtering, sorting, selection, streaming, aggregation, highly configurable columns and rows, and so on to help users better read and handle the massive dataset. More specialized data grids even embed other components like charts and enable in-table editing. Owing to the enormous data they handle, data grids are often built with efficiency and streamlined performance in mind. Moreover, they tend to be highly customizable and extendable to meet niche use cases related to the data they present. </p>
<p>Data grids can be applied to a variety of use cases. For one, you could use them for simple tables while taking advantage of their enhanced search, filtering, aggregation, and functionality. Data grids can be essential on KPI dashboards to get a unified view of multiple indicators from several data sources. Another area they can be useful is on financial dashboards, where tracking and visualizing accounting and financial information is crucial. Data grids can also be helpful in inventory management systems to track and manage goods, orders, sales, and other commercial operations. These are just a few use cases they can be instrumental in. </p>
<p>This article will run down a list of popular data grid libraries specialized for handling large datasets. They will be evaluated on a number of different factors: </p>
<ul>
<li>Feature set,</li>
<li>Price,</li>
<li>Licensing options and open source status,</li>
<li>Frontend framework support,</li>
<li>Ease of customization and extensibility,</li>
<li>Performance,</li>
<li>Documentation, learning resources, community, and offered support.</li>
</ul>
AG Grid
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3bc010fd-e99e-4c4e-b2c6-ced88f916f40/2-best-javascript-data-grid-libraries.png" /></p>
<p><a href="https://www.ag-grid.com/">AG Grid</a> is a mature and fast data grid with features such as:</p>
<ul>
<li>Row and range selection;</li>
<li>Filtering across multiple data types;</li>
<li>Cell rendering;</li>
<li>Advanced in-table editing;</li>
<li>Grouping, pivoting, aggregation, and tree data;</li>
<li>CSV and Excel import and export;</li>
<li>Drag-and-drop functionality;</li>
<li>Clipboard functionality;</li>
<li>Embeddable components and accessories like tools panels, sidebars, menus, and so on;</li>
<li>Chart integration;</li>
<li>Internationalization;</li>
<li>Keyboard navigation.</li>
</ul>
<p>Originally designed for Angular, it now also supports vanilla JavaScript, React, and Vue. It supports live data streaming. The grid’s layout and styling of its columns and rows can be customized through themes and CSS/SASS styling. “Accessories,” external components, and charts can be added to it to extend its functionality. While it offers a basic open source community version that is free to use, it does offer a licensed paid enterprise version with expanded functionality. The documentation available on its site is very detailed, but AG Grid only provides dedicated support for its enterprise product. </p>
Bryntum Grid
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1d0a94c0-cf1d-4589-9efe-e868b5028657/9-best-javascript-data-grid-libraries.png" /></p>
<p><a href="https://www.bryntum.com/products/grid/">Bryntum Grid</a> is a pure JavaScript cross-browser compatible high-performance data grid. While it has <a href="https://bryntum.com/examples/grid/">a rich feature set</a>, some of its more notable features include:</p>
<ul>
<li>Inline cell editing;</li>
<li>Cell tooltips;</li>
<li>Customizable cells;</li>
<li>Localization and responsiveness;</li>
<li>Drag-and-drop columns and rows;</li>
<li>Column reordering and resizing;</li>
<li>Row filtering;</li>
<li>Keyboard navigation &amp; Accessibility;</li>
<li>Scrollable grid sections;</li>
<li>Row grouping;</li>
<li>Grouped headers;</li>
<li>Summaries and aggregation;</li>
<li>Search and quick find;</li>
<li>Sorting;</li>
<li>Tree view;</li>
<li>PDF, PNG, and Excel export;</li>
<li>Virtual rendering;</li>
<li>Paging;</li>
<li>Multiple themes.</li>
</ul>
<p>It integrates with any frontend framework, including Angular, React, and Vue. Bryntum Grid is optimized for superior rendering and scrolling performance through its virtual rendering. You can check out Bryntum’s <a href="https://dzone.com/articles/data-grid-performance-comparison">detailed performance review here</a>. When it comes to cost, Bryntum offers their grid on <a href="https://www.bryntum.com/store/">per-product pricing</a> at a reasonable price. You can also purchase their complete bundle that includes other useful components like schedulers, Gantt charts, and calendars, among others. The grid <a href="https://www.bryntum.com/licensing/">is not open-sourced</a>. </p>
<p>Bryntum offers training, webinars, guides, and various levels of <a href="https://www.bryntum.com/support/">extensive support</a> that come in handy when learning to use the grid. Its <a href="https://www.bryntum.com/docs/grid/guide/Grid/quick-start/react">API documentation</a> is robust and covers multiple frontend frameworks, and there is a <a href="https://bryntum.com/examples/grid/">multitude of live demos</a> on its site that demonstrate the grid’s powerful features.</p>
Handsontable
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a6f85d1b-3596-45ee-8405-e378673de779/10-best-javascript-data-grid-libraries.png" /></p>
<p><a href="https://handsontable.com/">Handsontable</a> is a spreadsheet-like data grid with these note-worthy features:</p>
<ul>
<li>Custom column headers and menus;</li>
<li>Summaries;</li>
<li>Column and row hiding, moving, and freezing;</li>
<li>Column filtering, sorting, groups;</li>
<li>Column and row virtualization;</li>
<li>Custom row headers;</li>
<li>Row sorting, pre-population, and trimming;</li>
<li>Clipboard functionality;</li>
<li>Selection;</li>
<li>Cell merging and rendering;</li>
<li>Cell editors and validators;</li>
<li>Comments;</li>
<li>Multiple cell types like dates, passwords, checkboxes, and so on;</li>
<li>CSV and other file type exports;</li>
<li>Internationalization.</li>
</ul>
<p>It works with plain JavaScript, Angular, React, and Vue. Handsontable can efficiently handle large datasets without performance problems. You can build and use your own <a href="https://handsontable.com/docs/custom-plugins/">custom plugins</a> to extend the functionality of the grid. It has a <a href="https://github.com/handsontable/handsontable">free and open-source version</a> for personal projects and <a href="https://handsontable.com/pricing">a commercially licensed version</a> that you can purchase. The Handsontable commercial offers extended support. Its API documentation is thorough, and its site provides many examples, guides, case studies, and a developer forum. </p>
DHTMLX JavaScript DataGrid
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7df29718-ce0a-4747-ad61-d2d815a3847f/5-best-javascript-data-grid-libraries.png" /></p>
<p>The <a href="https://dhtmlx.com/docs/products/dhtmlxGrid/">DHTMLX JavaScript DataGrid</a> is a grid that ships as part of the <a href="https://dhtmlx.com/docs/products/dhtmlxSuite/">DHTMLX Suite UI widgets library</a>. Some of its important features include:</p>
<ul>
<li>Data editing, formatting, sorting, and filtering;</li>
<li>Row and cell selection;</li>
<li>Column drag-and-drop and freezing;</li>
<li>Column and row reordering;</li>
<li>Tooltips;</li>
<li>Excel exports;</li>
<li>Keyboard navigation.</li>
</ul>
<p>The DHTMLX DataGrid is compatible with React, Angular, and Vue. The grid’s rows, cells, footers, headers, and tooltips can be customized through its API with CSS styling and templates. The library it’s included in is not open source. It has a free standard edition with a limited API that sometimes makes it cumbersome to nearly impossible to adapt the component to basic professional requirements. Its PRO paid licensed edition ships with expanded functionality that solves the aforementioned issue. On its website, you can find in-depth documentation, samples, demos, and a community forum. Expanded technical support is included only in the PRO edition.</p>
Kendo UI Data Grid
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5d466b53-e595-4858-ba17-6476fbd3bf91/6-best-javascript-data-grid-libraries.png" /></p>
<p>The <a href="https://www.telerik.com/kendo-angular-ui/grid">Kendo UI Grid</a> is a data grid that is part of the <a href="https://www.telerik.com/kendo-ui">Kendo UI library</a> that bundles several other components. A couple of its essential features include:</p>
<ul>
<li>Excel and PDF selection, copying, and exports;</li>
<li>Inline, pop-up, and batch data editing;</li>
<li>Custom data editors and validators;</li>
<li>Column virtualization for local and remote data;</li>
<li>Filtering, sorting, selection, search, sorting, and drag-and-drop;</li>
<li>Row and toolbar templates;</li>
<li>Frozen, sticky, resizable, and reorderable columns;</li>
<li>Column menus and multi-column headers;</li>
<li>Globalization and localization.</li>
</ul>
<p>The Kendo UI library is available in jQuery, Angular, Vue, and React versions. The grid supports live data loading. The libraries are native to each framework it’s released for and are not wrappers. As such, they have fast native performance. Its column and row virtualization features render only visible parts of the grid for better performance. The library ships with themes that can be used to customize the grid. The other components available in the library can be embedded within the grid to extend its functionality. The library is not open source nor free. The grid has comprehensive documentation, demos, and samples, and its site has a knowledge base. It also has a community forum and feedback portal. Expanded support services are offered to its customers who purchase licenses. </p>
DevExtreme Data Grid
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/12116d80-6676-4814-a1eb-985bd55a1f4f/3-best-javascript-data-grid-libraries.png" /></p>
<p>The <a href="https://js.devexpress.com/Overview/DataGrid/">DevExtreme Data Grid</a> ships as part of the <a href="https://js.devexpress.com/">DevExtreme component suite</a>. Its noteworthy features include:</p>
<ul>
<li>Filtering, sorting, grouping, and searching;</li>
<li>Data summaries with aggregate functions;</li>
<li>Master-detail layouts;</li>
<li>Row, batch, cell, form, and pop-up data editing;</li>
<li>Data validation;</li>
<li>Single to multi-select record selection;</li>
<li>Fixed, resizable, recordable, and hidden columns;</li>
<li>Customizable Excel exports.</li>
</ul>
<p>The suite is compatible with jQuery, Angular, React, and Vue. It has a non-commercial license that is free but has limited features. Its complete license version isn’t free but enables pro features. The grid can load and bind to the large datasets server side. However, beyond 10,000 rows in the grid, it is easy to spot the frame rate dropping when scrolling. The suite offers a theme builder that you can use to generate a custom theme for the data grid. On the DevExtreme site, demos, code examples, exhaustive docs, and webinars are made available, and you can file tickets if you encounter bugs. Dedicated support is only offered to complete license holders. </p>
FusionGrid
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ad94d165-def3-4299-a018-624c0ac01315/4-best-javascript-data-grid-libraries.png" /></p>
<p><a href="https://www.fusioncharts.com/">FusionGrid</a> is a data grid that is part of the <a href="https://www.fusioncharts.com/">FusionCharts library</a>. It ships with these features:</p>
<ul>
<li>Filter, sort, and search;</li>
<li>CSV, JSON, and Excel exports;</li>
<li>Row and cell selection;</li>
<li>Nested columns and column grouping;</li>
<li>Real-time data updates.</li>
</ul>
<p>FusionGrid offers free licenses for non-commercial use. Enterprise customers have to purchase licenses that are available at a variety of pricing tiers. The grid works with plain JavaScript and frontend frameworks like Angular, React, and Vue. FusionGrid supports the loading of large datasets without hampering performance. It is not open-sourced, and its site provides limited documentation and examples, so only paid license holders receive dedicated technical support.  </p>
Tabulator
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a763e875-8792-4dac-a9dc-94fa8dccf81f/1-best-javascript-data-grid-libraries.png" /></p>
<p><a href="http://tabulator.info/">Tabulator</a> is an open-source and free data grid with a rich feature set that includes:</p>
<ul>
<li>Keyboard navigation and touch-friendliness;</li>
<li>Tree structures;</li>
<li>Connect tables;</li>
<li>Row, cell, and column context menus;</li>
<li>User action history, undo or redo actions, and a clipboard;</li>
<li>Column summaries and calculations;</li>
<li>Localization and RTL text direction support;</li>
<li>CSV and Excel exports;</li>
<li>Themes;</li>
<li>Data editing, validation, formatting, persistence, and mutation;</li>
<li>Row selection and grouping;</li>
<li>Filtering and sorting;</li>
<li>Column and row freezing.</li>
</ul>
<p>It is written in pure JavaScript and works with several frontend frameworks, including Angular, React, and Vue. Large data sets are rendered in it fast with a virtualized DOM. Customization of the grid is only limited to CSS styling. It has comprehensive documentation and examples on its site. The vibrant community of contributors behind it can be interacted with on Discord and GitHub.</p>
Toast UI Grid
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/15bbee74-2d43-46af-985a-4920f6be395e/11-best-javascript-data-grid-libraries.png" /></p>
<p><a href="https://ui.toast.com/tui-grid">Toast UI Grid</a> is part of <a href="https://ui.toast.com/">the Toast UI library</a>. Some of its notable features are:</p>
<ul>
<li>Data summaries and calculations;</li>
<li>Hierarchical tree data representation;</li>
<li>Custom data input and editing elements;</li>
<li>Themes;</li>
<li>Keyboard navigation;</li>
<li>Clipboard functionality;</li>
<li>Custom cell renderers;</li>
<li>Virtual scrolling;</li>
<li>Frozen, hidden, resizable, and reorderable columns;</li>
<li>Selection and sorting;</li>
<li>Cell merging;</li>
<li>Data validation.</li>
</ul>
<p>The grid is free and open source. It is distributed in <a href="https://ui.toast.com/tui-grid#packages">three packages for plain Javascript, React, and Vue</a>. Its enhanced virtual scrolling functionality lets you load large datasets without degrading performance. The grid can be customized using themes for a unique look and feel. Its website offers exhaustive documentation and detailed examples on the grid. </p>
FlexGrid
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2bd45981-cafd-43bc-b190-02dcb3b9715a/7-best-javascript-data-grid-libraries.png" /></p>
<p><a href="https://www.grapecity.com/wijmo/flexgrid-javascript-data-grid">FlexGrid</a> is part of the <a href="https://www.grapecity.com/wijmo">GrapeCity Wijmo UI component library</a>. Some of its features include:</p>
<ul>
<li>Client-side and server-side data binding;</li>
<li>Cell customization;</li>
<li>Cell data maps;</li>
<li>Virtual scrolling;</li>
<li>Clipboard functionality;</li>
<li>Editing, sorting, and filtering;</li>
<li>Grouping and aggregation;</li>
<li>Tree Grids and a Master-Detail mode;</li>
<li>Excel imports and exports;</li>
<li>PDF exports and printing;</li>
<li>Globalization and Right-to-left text direction support;</li>
<li>Row and column pinning and freezing;</li>
<li>Sticky headers;</li>
<li>Search and filtering;</li>
<li>Column drag-and-drop reordering and resizing;</li>
<li>Cell merging.</li>
</ul>
<p>FlexGrid works with Angular, React, Vue, and PureJS. Its bundle is small, and the grid is fast and loads quickly. You can customize cell content with data maps. Unfortunately, Wijmo is not free or open-source. The GrapeCity site provides in-depth documentation, a knowledge base, a forum, case studies, white pages, demos, webinars, and video content. Technical support is <a href="https://www.grapecity.com/support/plans">offered at a premium</a>, separate from the license purchase. </p>
FancyGrid
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a47ec83a-d332-46dc-a283-4b26e3a1efb2/8-best-javascript-data-grid-libraries.png" /></p>
<p><a href="https://fancygrid.com/">FancyGrid</a> is a grid library with chart integration. Its notable features include:</p>
<ul>
<li>Filtering and sorting;</li>
<li>Chart integration;</li>
<li>Theming;</li>
<li>Checkbox selection;</li>
<li>Row and header grouping;</li>
<li>Forms;</li>
<li>Excel and CSV export;</li>
<li>Internationalization;</li>
<li>Column reordering;</li>
<li>Grid to grid drag-and-drop;</li>
<li>Tree Grid, sub-grids, and sub-forms.</li>
</ul>
<p>This library works with plain JavaScript, Angular, React, Vue, and jQuery. You can extend its functionality by embedding charts and customizing it using the themes it offers. Its <a href="https://github.com/FancyGrid/FancyGrid">source code is available on Github</a>, and licenses are available at several tiers. Its documentation is good and contains detailed examples. Technical support for license holders is available through Slack and other communication channels. </p>
Webix Data Table
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8d46e3a4-4f21-4786-b360-56a108f968c7/12-best-javascript-data-grid-libraries.png" /></p>
<p><a href="https://webix.com/widget/datatable/">Webix Data Table</a> is part of the <a href="https://webix.com/">Webix UI library</a> and includes features like:</p>
<ul>
<li>Editing, sorting, filtering, and validation;</li>
<li>Row and column drag-and-drop and resizing;</li>
<li>Clipboard support;</li>
<li>Column grouping;</li>
<li>Header menus;</li>
<li>Sparklines;</li>
<li>Sub-rows and sub-views.</li>
</ul>
<p>Webix is offered on a free and a paid license tier. It works with jQuery, Angular, React, and Vue. Its components are small and written with pure JavaScript. Unfortunately, the lack of row virtualization makes the component unsuitable for big data sets unless you use paging. You can customize the grid only using CSS. The standard version of the library is free and open source, while you need to purchase a license to access its enterprise version. Detailed documentation, webinars, tutorials, and samples are available on its site. Technical support is only available for license holders.</p>
Conclusion
<p>Data grids are essential in developing any modern SaaS or internal business-critical applications. A good table component should offer advanced functionality like configurable cells, rows, and columns, sorting, filtering, grouping, summaries, and so on. Data grids mainly improve the readability and make the manipulation of large datasets easier. Professional data grids should also be able to handle massive amounts of data without degrading your app’s performance. They also need to be customizable and extensible to fit niche use cases related to the data they present. When choosing a data grid library, you have to consider the frameworks it works with, pricing, licensing, technical support, and whether its feature set fits your business needs. </p>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Zara Cooper)</author>
      <enclosure
        url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2be5ada6-a971-4249-811f-6c8e32c8e402/useful-javascript-data-grid-libraries.jpg"
        length="0" type="image/jpg"/>
    </item>
    <item>
      <title><![CDATA[Finding The Balance (September 2022 Desktop Wallpapers Edition)]]></title>
      <link>https://smashingmagazine.com/2022/08/desktop-wallpaper-calendars-september-2022/</link>
      <guid>https://smashingmagazine.com/2022/08/desktop-wallpaper-calendars-september-2022/</guid>
      <pubDate>Wed, 31 Aug 2022 08:45:00 GMT</pubDate>
      <description>
        <![CDATA[Let’s welcome September with some fresh desktop wallpapers. Designed by artists and designers from across the globe, they come in versions with and without a calendar for the month. Enjoy!]]></description>
      <content:encoded><![CDATA[<p>Lush green slowly turning into yellows, reds, and browns in the Northern hemisphere; nature awakening from its slumber in the Southern part of the world: September is a <strong>time of change</strong>. A chance to leave old habits behind and embrace the beginning of something new. And, well, sometimes it only takes a small change in routines to spark fresh inspiration and, who knows, maybe even great ideas.</p>

<p>With that in mind, we embarked on our <a href="https://www.smashingmagazine.com/category/wallpapers">monthly wallpapers challenge</a> more than eleven years ago, and since then, artists and designers from all across the globe have accepted the challenge and submitted their designs to it to cater for a bit of variety on your desktop and mobile screens. Of course, it wasn’t any different this time around.</p>

<p>This post features their wallpapers for <strong>September 2022</strong>. All of them come in versions with and without a calendar, so it’s up to you to decide if you want to have the month at a glance or keep things simple. As a little bonus goodie, we also collected some timeless favorites from past September editions at the end of this post. A big thank-you to all the artists who have submitted their wallpapers. This post wouldn’t exist without you.</p>

<ul>
<li>You can <strong>click on every image to see a larger preview</strong>,</li>
<li>We respect and carefully consider the ideas and motivation behind each and every artist’s work. This is why we give all artists the <strong>full freedom to explore their creativity</strong> and express emotions and experience through their works. This is also why the themes of the wallpapers weren’t anyhow influenced by us but rather designed from scratch by the artists themselves.</li>
<li><strong><a href="https://www.smashingmagazine.com/desktop-wallpaper-calendars-join-in/">Submit a wallpaper!</a></strong><br />Did you know that <em>you</em> could get featured in our next wallpapers post, too? We are always <strong>looking for creative talent</strong>.</li>
</ul>

Cultivating Community
<p>“Climate action, peace, justice, and inclusive societies — we’re proud to be aligning our volunteer goals with the 2030 Agenda for Sustainable Development. Mad Fish Digital encourages team members to recognize the non-profit organizations they care about by giving their time throughout the year. We encourage you to look to your community for volunteer opportunities and use your skills and passion to make a positive difference!” — Designed by <a href="https://www.madfishdigital.com/">Mad Fish Digital</a> from Portland, OR.</p>
<a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/cultivating-community/sep-22-cultivating-community-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6859d441-1ee0-47f9-a3c7-73a1dbc29472/sep-22-cultivating-community-preview-opt.png" /></a>
<ul>
<li><a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/cultivating-community/sep-22-cultivating-community-preview.png">preview</a></li>
<li>with calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/cultivating-community/cal/sep-22-cultivating-community-cal-320x480.png">320x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/cultivating-community/cal/sep-22-cultivating-community-cal-1024x1024.png">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/cultivating-community/cal/sep-22-cultivating-community-cal-1280x720.png">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/cultivating-community/cal/sep-22-cultivating-community-cal-1680x1200.png">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/cultivating-community/cal/sep-22-cultivating-community-cal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/cultivating-community/cal/sep-22-cultivating-community-cal-2560x1440.png">2560x1440</a></li>
<li>without calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/cultivating-community/nocal/sep-22-cultivating-community-nocal-320x480.png">320x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/cultivating-community/nocal/sep-22-cultivating-community-nocal-1024x1024.png">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/cultivating-community/nocal/sep-22-cultivating-community-nocal-1280x720.png">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/cultivating-community/nocal/sep-22-cultivating-community-nocal-1680x1200.png">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/cultivating-community/nocal/sep-22-cultivating-community-nocal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/cultivating-community/nocal/sep-22-cultivating-community-nocal-2560x1440.png">2560x1440</a></li>
</ul>

Autumn Foliage
<p>“‘Autumn is a second spring when every leaf is a flower.’ (Albert Camus) Our September calendar aims to make you feel the autumn coziness through your desktop. The warm tones of autumn leaves, the wet raincoat, and squeaky rain boots are the first signs that autumn is knocking at our doors.” — Designed by <a href="https://www.popwebdesign.net/woocommerce-development-en.html">PopArt Studio</a> from Serbia.</p>
<a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/autumn-foliage/sep-22-autumn-foliage-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bddaf26f-ca9d-4ef9-86a1-43685f344b69/sep-22-autumn-foliage-preview-opt.png" /></a>
<ul>
<li><a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/autumn-foliage/sep-22-autumn-foliage-preview.png">preview</a></li>
<li>with calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/autumn-foliage/cal/sep-22-autumn-foliage-cal-320x480.png">320x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/autumn-foliage/cal/sep-22-autumn-foliage-cal-640x480.png">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/autumn-foliage/cal/sep-22-autumn-foliage-cal-800x480.png">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/autumn-foliage/cal/sep-22-autumn-foliage-cal-800x600.png">800x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/autumn-foliage/cal/sep-22-autumn-foliage-cal-1024x768.png">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/autumn-foliage/cal/sep-22-autumn-foliage-cal-1024x1024.png">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/autumn-foliage/cal/sep-22-autumn-foliage-cal-1152x864.png">1152x864</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/autumn-foliage/cal/sep-22-autumn-foliage-cal-1280x720.png">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/autumn-foliage/cal/sep-22-autumn-foliage-cal-1280x800.png">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/autumn-foliage/cal/sep-22-autumn-foliage-cal-1280x960.png">1280x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/autumn-foliage/cal/sep-22-autumn-foliage-cal-1280x1024.png">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/autumn-foliage/cal/sep-22-autumn-foliage-cal-1366x768.png">1366x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/autumn-foliage/cal/sep-22-autumn-foliage-cal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/autumn-foliage/cal/sep-22-autumn-foliage-cal-1440x1050.png">1440x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/autumn-foliage/cal/sep-22-autumn-foliage-cal-1600x1200.png">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/autumn-foliage/cal/sep-22-autumn-foliage-cal-1680x1050.png">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/autumn-foliage/cal/sep-22-autumn-foliage-cal-1680x1200.png">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/autumn-foliage/cal/sep-22-autumn-foliage-cal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/autumn-foliage/cal/sep-22-autumn-foliage-cal-1920x1200.png">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/autumn-foliage/cal/sep-22-autumn-foliage-cal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/autumn-foliage/cal/sep-22-autumn-foliage-cal-2560x1440.png">2560x1440</a></li>
<li>without calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/autumn-foliage/nocal/sep-22-autumn-foliage-nocal-320x480.png">320x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/autumn-foliage/nocal/sep-22-autumn-foliage-nocal-640x480.png">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/autumn-foliage/nocal/sep-22-autumn-foliage-nocal-800x480.png">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/autumn-foliage/nocal/sep-22-autumn-foliage-nocal-800x600.png">800x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/autumn-foliage/nocal/sep-22-autumn-foliage-nocal-1024x768.png">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/autumn-foliage/nocal/sep-22-autumn-foliage-nocal-1024x1024.png">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/autumn-foliage/nocal/sep-22-autumn-foliage-nocal-1152x864.png">1152x864</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/autumn-foliage/nocal/sep-22-autumn-foliage-nocal-1280x720.png">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/autumn-foliage/nocal/sep-22-autumn-foliage-nocal-1280x800.png">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/autumn-foliage/nocal/sep-22-autumn-foliage-nocal-1280x960.png">1280x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/autumn-foliage/nocal/sep-22-autumn-foliage-nocal-1280x1024.png">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/autumn-foliage/nocal/sep-22-autumn-foliage-nocal-1366x768.png">1366x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/autumn-foliage/nocal/sep-22-autumn-foliage-nocal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/autumn-foliage/nocal/sep-22-autumn-foliage-nocal-1440x1050.png">1440x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/autumn-foliage/nocal/sep-22-autumn-foliage-nocal-1600x1200.png">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/autumn-foliage/nocal/sep-22-autumn-foliage-nocal-1680x1050.png">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/autumn-foliage/nocal/sep-22-autumn-foliage-nocal-1680x1200.png">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/autumn-foliage/nocal/sep-22-autumn-foliage-nocal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/autumn-foliage/nocal/sep-22-autumn-foliage-nocal-1920x1200.png">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/autumn-foliage/nocal/sep-22-autumn-foliage-nocal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/autumn-foliage/nocal/sep-22-autumn-foliage-nocal-2560x1440.png">2560x1440</a></li>
</ul>

Sweet Dreams
<p>Designed by <a href="https://www.ricardogimenes.com/">Ricardo Gimenes</a> from Sweden.</p>
<a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/sweet-dreams/sep-22-sweet-dreams-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8ecc8fed-2921-4ef8-91dd-3df59cc71ed4/sep-22-sweet-dreams-preview-opt.png" /></a>
<ul>
<li><a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/sweet-dreams/sep-22-sweet-dreams-preview.png">preview</a></li>
<li>with calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/sweet-dreams/cal/sep-22-sweet-dreams-cal-640x480.png">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/sweet-dreams/cal/sep-22-sweet-dreams-cal-800x480.png">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/sweet-dreams/cal/sep-22-sweet-dreams-cal-800x600.png">800x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/sweet-dreams/cal/sep-22-sweet-dreams-cal-1024x768.png">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/sweet-dreams/cal/sep-22-sweet-dreams-cal-1024x1024.png">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/sweet-dreams/cal/sep-22-sweet-dreams-cal-1152x864.png">1152x864</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/sweet-dreams/cal/sep-22-sweet-dreams-cal-1280x720.png">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/sweet-dreams/cal/sep-22-sweet-dreams-cal-1280x800.png">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/sweet-dreams/cal/sep-22-sweet-dreams-cal-1280x960.png">1280x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/sweet-dreams/cal/sep-22-sweet-dreams-cal-1280x1024.png">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/sweet-dreams/cal/sep-22-sweet-dreams-cal-1366x768.png">1366x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/sweet-dreams/cal/sep-22-sweet-dreams-cal-1400x1050.png">1400x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/sweet-dreams/cal/sep-22-sweet-dreams-cal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/sweet-dreams/cal/sep-22-sweet-dreams-cal-1600x1200.png">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/sweet-dreams/cal/sep-22-sweet-dreams-cal-1680x1050.png">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/sweet-dreams/cal/sep-22-sweet-dreams-cal-1680x1200.png">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/sweet-dreams/cal/sep-22-sweet-dreams-cal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/sweet-dreams/cal/sep-22-sweet-dreams-cal-1920x1200.png">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/sweet-dreams/cal/sep-22-sweet-dreams-cal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/sweet-dreams/cal/sep-22-sweet-dreams-cal-2560x1440.png">2560x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/sweet-dreams/cal/sep-22-sweet-dreams-cal-3840x2160.png">3840x2160</a></li>
<li>without calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/sweet-dreams/nocal/sep-22-sweet-dreams-nocal-640x480.png">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/sweet-dreams/nocal/sep-22-sweet-dreams-nocal-800x480.png">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/sweet-dreams/nocal/sep-22-sweet-dreams-nocal-800x600.png">800x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/sweet-dreams/nocal/sep-22-sweet-dreams-nocal-1024x768.png">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/sweet-dreams/nocal/sep-22-sweet-dreams-nocal-1024x1024.png">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/sweet-dreams/nocal/sep-22-sweet-dreams-nocal-1152x864.png">1152x864</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/sweet-dreams/nocal/sep-22-sweet-dreams-nocal-1280x720.png">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/sweet-dreams/nocal/sep-22-sweet-dreams-nocal-1280x800.png">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/sweet-dreams/nocal/sep-22-sweet-dreams-nocal-1280x960.png">1280x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/sweet-dreams/nocal/sep-22-sweet-dreams-nocal-1280x1024.png">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/sweet-dreams/nocal/sep-22-sweet-dreams-nocal-1366x768.png">1366x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/sweet-dreams/nocal/sep-22-sweet-dreams-nocal-1400x1050.png">1400x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/sweet-dreams/nocal/sep-22-sweet-dreams-nocal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/sweet-dreams/nocal/sep-22-sweet-dreams-nocal-1600x1200.png">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/sweet-dreams/nocal/sep-22-sweet-dreams-nocal-1680x1050.png">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/sweet-dreams/nocal/sep-22-sweet-dreams-nocal-1680x1200.png">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/sweet-dreams/nocal/sep-22-sweet-dreams-nocal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/sweet-dreams/nocal/sep-22-sweet-dreams-nocal-1920x1200.png">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/sweet-dreams/nocal/sep-22-sweet-dreams-nocal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/sweet-dreams/nocal/sep-22-sweet-dreams-nocal-2560x1440.png">2560x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/sweet-dreams/nocal/sep-22-sweet-dreams-nocal-3840x2160.png">3840x2160</a></li>
</ul>

A Cozy Evening
<p>“The leaves are changing their colors now, but the nights are still warm. There’s something different tonight… do you feel it? It’s like the air tastes like a soft marshmallow and you’re sitting by a warm fire in the middle of the forest, while the nature that surrounds you is transforming. It’s ok, small changes are normal and all you can do is sit back, look at the stars and embrace the world that evolves around you.” — Designed by <a href="https://www.creativepinky.art/">Creative Pinky</a> from The Netherlands.</p>
<a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/a-cozy-evening/sep-22-a-cozy-evening-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bcc5f8cb-e881-412a-9874-0b1afc57363c/sep-22-a-cozy-evening-preview-opt.png" /></a>
<ul>
<li><a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/a-cozy-evening/sep-22-a-cozy-evening-preview.png">preview</a></li>
<li>with calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/a-cozy-evening/cal/sep-22-a-cozy-evening-cal-640x480.png">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/a-cozy-evening/cal/sep-22-a-cozy-evening-cal-800x480.png">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/a-cozy-evening/cal/sep-22-a-cozy-evening-cal-800x600.png">800x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/a-cozy-evening/cal/sep-22-a-cozy-evening-cal-1024x768.png">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/a-cozy-evening/cal/sep-22-a-cozy-evening-cal-1152x864.png">1152x864</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/a-cozy-evening/cal/sep-22-a-cozy-evening-cal-1280x720.png">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/a-cozy-evening/cal/sep-22-a-cozy-evening-cal-1280x800.png">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/a-cozy-evening/cal/sep-22-a-cozy-evening-cal-1280x960.png">1280x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/a-cozy-evening/cal/sep-22-a-cozy-evening-cal-1280x1024.png">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/a-cozy-evening/cal/sep-22-a-cozy-evening-cal-1400x1050.png">1400x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/a-cozy-evening/cal/sep-22-a-cozy-evening-cal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/a-cozy-evening/cal/sep-22-a-cozy-evening-cal-1600x1200.png">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/a-cozy-evening/cal/sep-22-a-cozy-evening-cal-1680x1050.png">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/a-cozy-evening/cal/sep-22-a-cozy-evening-cal-1680x1200.png">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/a-cozy-evening/cal/sep-22-a-cozy-evening-cal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/a-cozy-evening/cal/sep-22-a-cozy-evening-cal-1920x1200.png">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/a-cozy-evening/cal/sep-22-a-cozy-evening-cal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/a-cozy-evening/cal/sep-22-a-cozy-evening-cal-2560x1440.png">2560x1440</a></li>
<li>without calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/a-cozy-evening/nocal/sep-22-a-cozy-evening-nocal-640x480.png">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/a-cozy-evening/nocal/sep-22-a-cozy-evening-nocal-800x480.png">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/a-cozy-evening/nocal/sep-22-a-cozy-evening-nocal-800x600.png">800x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/a-cozy-evening/nocal/sep-22-a-cozy-evening-nocal-1024x768.png">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/a-cozy-evening/nocal/sep-22-a-cozy-evening-nocal-1152x864.png">1152x864</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/a-cozy-evening/nocal/sep-22-a-cozy-evening-nocal-1280x720.png">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/a-cozy-evening/nocal/sep-22-a-cozy-evening-nocal-1280x800.png">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/a-cozy-evening/nocal/sep-22-a-cozy-evening-nocal-1280x960.png">1280x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/a-cozy-evening/nocal/sep-22-a-cozy-evening-nocal-1280x1024.png">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/a-cozy-evening/nocal/sep-22-a-cozy-evening-nocal-1400x1050.png">1400x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/a-cozy-evening/nocal/sep-22-a-cozy-evening-nocal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/a-cozy-evening/nocal/sep-22-a-cozy-evening-nocal-1600x1200.png">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/a-cozy-evening/nocal/sep-22-a-cozy-evening-nocal-1680x1050.png">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/a-cozy-evening/nocal/sep-22-a-cozy-evening-nocal-1680x1200.png">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/a-cozy-evening/nocal/sep-22-a-cozy-evening-nocal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/a-cozy-evening/nocal/sep-22-a-cozy-evening-nocal-1920x1200.png">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/a-cozy-evening/nocal/sep-22-a-cozy-evening-nocal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/a-cozy-evening/nocal/sep-22-a-cozy-evening-nocal-2560x1440.png">2560x1440</a></li>
</ul>

The Rebel
<p>Designed by <a href="https://www.ricardogimenes.com/">Ricardo Gimenes</a> from Sweden.</p>
<a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-rebel/sep-22-the-rebel-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ba845264-575d-44f5-a1b0-e4dc6161de8d/sep-22-the-rebel-preview-opt.png" /></a>
<ul>
<li><a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-rebel/sep-22-the-rebel-preview.png">preview</a></li>
<li>with calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-rebel/cal/sep-22-the-rebel-cal-640x480.png">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-rebel/cal/sep-22-the-rebel-cal-800x480.png">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-rebel/cal/sep-22-the-rebel-cal-800x600.png">800x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-rebel/cal/sep-22-the-rebel-cal-1024x768.png">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-rebel/cal/sep-22-the-rebel-cal-1024x1024.png">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-rebel/cal/sep-22-the-rebel-cal-1152x864.png">1152x864</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-rebel/cal/sep-22-the-rebel-cal-1280x720.png">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-rebel/cal/sep-22-the-rebel-cal-1280x800.png">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-rebel/cal/sep-22-the-rebel-cal-1280x960.png">1280x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-rebel/cal/sep-22-the-rebel-cal-1280x1024.png">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-rebel/cal/sep-22-the-rebel-cal-1366x768.png">1366x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-rebel/cal/sep-22-the-rebel-cal-1400x1050.png">1400x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-rebel/cal/sep-22-the-rebel-cal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-rebel/cal/sep-22-the-rebel-cal-1600x1200.png">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-rebel/cal/sep-22-the-rebel-cal-1680x1050.png">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-rebel/cal/sep-22-the-rebel-cal-1680x1200.png">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-rebel/cal/sep-22-the-rebel-cal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-rebel/cal/sep-22-the-rebel-cal-1920x1200.png">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-rebel/cal/sep-22-the-rebel-cal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-rebel/cal/sep-22-the-rebel-cal-2560x1440.png">2560x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-rebel/cal/sep-22-the-rebel-cal-3840x2160.png">3840x2160</a></li>
<li>without calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-rebel/nocal/sep-22-the-rebel-nocal-640x480.png">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-rebel/nocal/sep-22-the-rebel-nocal-800x480.png">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-rebel/nocal/sep-22-the-rebel-nocal-800x600.png">800x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-rebel/nocal/sep-22-the-rebel-nocal-1024x768.png">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-rebel/nocal/sep-22-the-rebel-nocal-1024x1024.png">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-rebel/nocal/sep-22-the-rebel-nocal-1152x864.png">1152x864</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-rebel/nocal/sep-22-the-rebel-nocal-1280x720.png">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-rebel/nocal/sep-22-the-rebel-nocal-1280x800.png">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-rebel/nocal/sep-22-the-rebel-nocal-1280x960.png">1280x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-rebel/nocal/sep-22-the-rebel-nocal-1280x1024.png">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-rebel/nocal/sep-22-the-rebel-nocal-1366x768.png">1366x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-rebel/nocal/sep-22-the-rebel-nocal-1400x1050.png">1400x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-rebel/nocal/sep-22-the-rebel-nocal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-rebel/nocal/sep-22-the-rebel-nocal-1600x1200.png">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-rebel/nocal/sep-22-the-rebel-nocal-1680x1050.png">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-rebel/nocal/sep-22-the-rebel-nocal-1680x1200.png">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-rebel/nocal/sep-22-the-rebel-nocal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-rebel/nocal/sep-22-the-rebel-nocal-1920x1200.png">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-rebel/nocal/sep-22-the-rebel-nocal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-rebel/nocal/sep-22-the-rebel-nocal-2560x1440.png">2560x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-rebel/nocal/sep-22-the-rebel-nocal-3840x2160.png">3840x2160</a></li>
</ul>

The First Harbinger of Autumn
<p>“Autumn is an incredibly beautiful time — its aromas are so bright that they easily come to mind. One of the brightest autumn aromas is the smell of fallen oak leaves. It inspired our designers to create this calendar. More free calendars can be found in <a href="https://masterbundles.com/premium-free-printable-calendars-september/">our post</a>.” — Designed by <a href="https://masterbundles.com/">MasterBundles</a> from Ukraine.</p>
<a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-first-harbinger-of-autumn/sep-22-the-first-harbinger-of-autumn-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b4f639c5-e68a-4957-9d05-6a6e2f65794a/sep-22-the-first-harbinger-of-autumn-preview-opt.png" /></a>
<ul>
<li><a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-first-harbinger-of-autumn/sep-22-the-first-harbinger-of-autumn-preview.png">preview</a></li>
<li>with calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-first-harbinger-of-autumn/cal/sep-22-the-first-harbinger-of-autumn-cal-320x480.png">320x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-first-harbinger-of-autumn/cal/sep-22-the-first-harbinger-of-autumn-cal-640x480.png">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-first-harbinger-of-autumn/cal/sep-22-the-first-harbinger-of-autumn-cal-800x480.png">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-first-harbinger-of-autumn/cal/sep-22-the-first-harbinger-of-autumn-cal-800x600.png">800x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-first-harbinger-of-autumn/cal/sep-22-the-first-harbinger-of-autumn-cal-1024x768.png">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-first-harbinger-of-autumn/cal/sep-22-the-first-harbinger-of-autumn-cal-1024x1024.png">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-first-harbinger-of-autumn/cal/sep-22-the-first-harbinger-of-autumn-cal-1152x864.png">1152x864</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-first-harbinger-of-autumn/cal/sep-22-the-first-harbinger-of-autumn-cal-1280x720.png">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-first-harbinger-of-autumn/cal/sep-22-the-first-harbinger-of-autumn-cal-1280x800.png">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-first-harbinger-of-autumn/cal/sep-22-the-first-harbinger-of-autumn-cal-1280x960.png">1280x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-first-harbinger-of-autumn/cal/sep-22-the-first-harbinger-of-autumn-cal-1280x1024.png">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-first-harbinger-of-autumn/cal/sep-22-the-first-harbinger-of-autumn-cal-1366x768.png">1366x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-first-harbinger-of-autumn/cal/sep-22-the-first-harbinger-of-autumn-cal-1400x1050.png">1400x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-first-harbinger-of-autumn/cal/sep-22-the-first-harbinger-of-autumn-cal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-first-harbinger-of-autumn/cal/sep-22-the-first-harbinger-of-autumn-cal-1600x1200.png">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-first-harbinger-of-autumn/cal/sep-22-the-first-harbinger-of-autumn-cal-1680x1050.png">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-first-harbinger-of-autumn/cal/sep-22-the-first-harbinger-of-autumn-cal-1680x1200.png">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-first-harbinger-of-autumn/cal/sep-22-the-first-harbinger-of-autumn-cal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-first-harbinger-of-autumn/cal/sep-22-the-first-harbinger-of-autumn-cal-1920x1200.png">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-first-harbinger-of-autumn/cal/sep-22-the-first-harbinger-of-autumn-cal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-first-harbinger-of-autumn/cal/sep-22-the-first-harbinger-of-autumn-cal-2560x1440.png">2560x1440</a></li>
<li>without calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-first-harbinger-of-autumn/nocal/sep-22-the-first-harbinger-of-autumn-nocal-320x480.png">320x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-first-harbinger-of-autumn/nocal/sep-22-the-first-harbinger-of-autumn-nocal-640x480.png">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-first-harbinger-of-autumn/nocal/sep-22-the-first-harbinger-of-autumn-nocal-800x480.png">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-first-harbinger-of-autumn/nocal/sep-22-the-first-harbinger-of-autumn-nocal-800x600.png">800x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-first-harbinger-of-autumn/nocal/sep-22-the-first-harbinger-of-autumn-nocal-1024x768.png">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-first-harbinger-of-autumn/nocal/sep-22-the-first-harbinger-of-autumn-nocal-1024x1024.png">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-first-harbinger-of-autumn/nocal/sep-22-the-first-harbinger-of-autumn-nocal-1152x864.png">1152x864</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-first-harbinger-of-autumn/nocal/sep-22-the-first-harbinger-of-autumn-nocal-1280x720.png">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-first-harbinger-of-autumn/nocal/sep-22-the-first-harbinger-of-autumn-nocal-1280x800.png">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-first-harbinger-of-autumn/nocal/sep-22-the-first-harbinger-of-autumn-nocal-1280x960.png">1280x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-first-harbinger-of-autumn/nocal/sep-22-the-first-harbinger-of-autumn-nocal-1280x1024.png">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-first-harbinger-of-autumn/nocal/sep-22-the-first-harbinger-of-autumn-nocal-1366x768.png">1366x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-first-harbinger-of-autumn/nocal/sep-22-the-first-harbinger-of-autumn-nocal-1400x1050.png">1400x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-first-harbinger-of-autumn/nocal/sep-22-the-first-harbinger-of-autumn-nocal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-first-harbinger-of-autumn/nocal/sep-22-the-first-harbinger-of-autumn-nocal-1600x1200.png">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-first-harbinger-of-autumn/nocal/sep-22-the-first-harbinger-of-autumn-nocal-1680x1050.png">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-first-harbinger-of-autumn/nocal/sep-22-the-first-harbinger-of-autumn-nocal-1680x1200.png">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-first-harbinger-of-autumn/nocal/sep-22-the-first-harbinger-of-autumn-nocal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-first-harbinger-of-autumn/nocal/sep-22-the-first-harbinger-of-autumn-nocal-1920x1200.png">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-first-harbinger-of-autumn/nocal/sep-22-the-first-harbinger-of-autumn-nocal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/sep-22/the-first-harbinger-of-autumn/nocal/sep-22-the-first-harbinger-of-autumn-nocal-2560x1440.png">2560x1440</a></li>
</ul>



Oldies But Goodies

<p>Below you’ll find a selection of <strong>September wallpapers from our archives</strong> that are just too good to be forgotten. Please note that these designs don’t come with a calendar. Enjoy!</p>

<p></p><h3>Wine Harvest Season</h3><p></p>
<p>“Welcome to the wine harvest season in Serbia. It’s September, and the hazy sunshine bathes the vines on the slopes of Fruška Gora. Everything is ready for the making of Bermet, the most famous wine from Serbia. This spiced wine was a favorite of the Austro-Hungarian elite and was served even on the Titanic. Bermet’s recipe is a closely guarded secret, and the wine is produced by just a handful of families in the town of Sremski Karlovci, near Novi Sad. On the other side of Novi Sad, plains of corn and sunflower fields blend in with the horizon, catching the last warm sun rays of this year.” — Designed by <a href="https://www.popwebdesign.net/logo-design-novisad.html">PopArt Studio </a> from Serbia.</p>
<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/635541fb-2898-49c5-90f5-df7855a81568/sep-21-wine-harvest-season-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4e4c0b7b-0068-48f7-845e-bf20b10d8cec/sep-21-wine-harvest-season-preview-opt.png" /></a>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4e4c0b7b-0068-48f7-845e-bf20b10d8cec/sep-21-wine-harvest-season-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/sep-21/wine-harvest-season/nocal/sep-21-wine-harvest-season-nocal-320x480.jpg">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-21/wine-harvest-season/nocal/sep-21-wine-harvest-season-nocal-640x480.jpg">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-21/wine-harvest-season/nocal/sep-21-wine-harvest-season-nocal-800x480.jpg">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-21/wine-harvest-season/nocal/sep-21-wine-harvest-season-nocal-800x600.jpg">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-21/wine-harvest-season/nocal/sep-21-wine-harvest-season-nocal-1024x768.jpg">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-21/wine-harvest-season/nocal/sep-21-wine-harvest-season-nocal-1024x1024.jpg">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-21/wine-harvest-season/nocal/sep-21-wine-harvest-season-nocal-1152x864.jpg">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-21/wine-harvest-season/nocal/sep-21-wine-harvest-season-nocal-1280x720.jpg">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-21/wine-harvest-season/nocal/sep-21-wine-harvest-season-nocal-1280x800.jpg">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-21/wine-harvest-season/nocal/sep-21-wine-harvest-season-nocal-1280x960.jpg">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-21/wine-harvest-season/nocal/sep-21-wine-harvest-season-nocal-1280x1024.jpg">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-21/wine-harvest-season/nocal/sep-21-wine-harvest-season-nocal-1366x768.jpg">1366x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-21/wine-harvest-season/nocal/sep-21-wine-harvest-season-nocal-1400x1050.jpg">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-21/wine-harvest-season/nocal/sep-21-wine-harvest-season-nocal-1440x900.jpg">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-21/wine-harvest-season/nocal/sep-21-wine-harvest-season-nocal-1600x1200.jpg">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-21/wine-harvest-season/nocal/sep-21-wine-harvest-season-nocal-1680x1050.jpg">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-21/wine-harvest-season/nocal/sep-21-wine-harvest-season-nocal-1680x1200.jpg">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-21/wine-harvest-season/nocal/sep-21-wine-harvest-season-nocal-1920x1080.jpg">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-21/wine-harvest-season/nocal/sep-21-wine-harvest-season-nocal-1920x1200.jpg">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-21/wine-harvest-season/nocal/sep-21-wine-harvest-season-nocal-1920x1440.jpg">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-21/wine-harvest-season/nocal/sep-21-wine-harvest-season-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>

<h3>Sunny September</h3>
<p>“September greets us and invites us to enjoy warm and sunny days.” — Designed by <a href="https://www.librafire.com/">LibraFire</a> from Serbia.</p>
<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bd28b78c-5e60-4052-9bd8-4372c41ae6e9/sep-21-sunny-september-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/19181e58-fc0c-4799-b8de-9dbecb329338/sep-21-sunny-september-preview-opt.png" /></a>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/19181e58-fc0c-4799-b8de-9dbecb329338/sep-21-sunny-september-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/sep-21/sunny-september/nocal/sep-21-sunny-september-nocal-320x480.png">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-21/sunny-september/nocal/sep-21-sunny-september-nocal-640x480.png">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-21/sunny-september/nocal/sep-21-sunny-september-nocal-800x480.png">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-21/sunny-september/nocal/sep-21-sunny-september-nocal-800x600.png">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-21/sunny-september/nocal/sep-21-sunny-september-nocal-1024x768.png">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-21/sunny-september/nocal/sep-21-sunny-september-nocal-1024x1024.png">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-21/sunny-september/nocal/sep-21-sunny-september-nocal-1152x864.png">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-21/sunny-september/nocal/sep-21-sunny-september-nocal-1280x720.png">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-21/sunny-september/nocal/sep-21-sunny-september-nocal-1280x800.png">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-21/sunny-september/nocal/sep-21-sunny-september-nocal-1280x960.png">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-21/sunny-september/nocal/sep-21-sunny-september-nocal-1280x1024.png">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-21/sunny-september/nocal/sep-21-sunny-september-nocal-1366x768.png">1366x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-21/sunny-september/nocal/sep-21-sunny-september-nocal-1400x1050.png">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-21/sunny-september/nocal/sep-21-sunny-september-nocal-1440x900.png">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-21/sunny-september/nocal/sep-21-sunny-september-nocal-1600x1200.png">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-21/sunny-september/nocal/sep-21-sunny-september-nocal-1680x1050.png">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-21/sunny-september/nocal/sep-21-sunny-september-nocal-1680x1200.png">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-21/sunny-september/nocal/sep-21-sunny-september-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-21/sunny-september/nocal/sep-21-sunny-september-nocal-1920x1200.png">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-21/sunny-september/nocal/sep-21-sunny-september-nocal-1920x1440.png">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-21/sunny-september/nocal/sep-21-sunny-september-nocal-2560x1440.png">2560x1440</a></li>
</ul>

<h3>Go Bananas</h3>
<p>Designed by <a href="https://www.ricardogimenes.com/">Ricardo Gimenes</a> from Sweden.</p>
<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/991d5db3-7de0-45d7-86dc-e7e0185c9e61/sep-21-go-bananas-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1b36a408-f0fa-417e-95d7-0d9f388e9bf4/sep-21-go-bananas-preview-opt.png" /></a>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1b36a408-f0fa-417e-95d7-0d9f388e9bf4/sep-21-go-bananas-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/sep-21/go-bananas/nocal/sep-21-go-bananas-nocal-640x480.png">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-21/go-bananas/nocal/sep-21-go-bananas-nocal-800x480.png">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-21/go-bananas/nocal/sep-21-go-bananas-nocal-800x600.png">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-21/go-bananas/nocal/sep-21-go-bananas-nocal-1024x768.png">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-21/go-bananas/nocal/sep-21-go-bananas-nocal-1024x1024.png">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-21/go-bananas/nocal/sep-21-go-bananas-nocal-1152x864.png">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-21/go-bananas/nocal/sep-21-go-bananas-nocal-1280x720.png">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-21/go-bananas/nocal/sep-21-go-bananas-nocal-1280x800.png">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-21/go-bananas/nocal/sep-21-go-bananas-nocal-1280x960.png">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-21/go-bananas/nocal/sep-21-go-bananas-nocal-1280x1024.png">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-21/go-bananas/nocal/sep-21-go-bananas-nocal-1366x768.png">1366x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-21/go-bananas/nocal/sep-21-go-bananas-nocal-1400x1050.png">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-21/go-bananas/nocal/sep-21-go-bananas-nocal-1440x900.png">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-21/go-bananas/nocal/sep-21-go-bananas-nocal-1600x1200.png">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-21/go-bananas/nocal/sep-21-go-bananas-nocal-1680x1050.png">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-21/go-bananas/nocal/sep-21-go-bananas-nocal-1680x1200.png">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-21/go-bananas/nocal/sep-21-go-bananas-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-21/go-bananas/nocal/sep-21-go-bananas-nocal-1920x1200.png">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-21/go-bananas/nocal/sep-21-go-bananas-nocal-1920x1440.png">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-21/go-bananas/nocal/sep-21-go-bananas-nocal-2560x1440.png">2560x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-21/go-bananas/nocal/sep-21-go-bananas-nocal-3840x2160.png">3840x2160</a></li>
</ul>

<h3>Terrazzo</h3>
<p>“With the end of summer and fall coming soon, I created this terrazzo pattern wallpaper to brighten up your desktop. Enjoy this month!” — Designed by <a href="https://www.embee.me/">Melissa Bogemans</a> from Belgium.</p>
<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f2ab4afe-e503-4235-96fc-3c9ceade89e3/sep-20-terrazzo-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2644364f-a26f-40da-a000-4f0aea0db125/sep-20-terrazzo-preview-opt.png" /></a>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2644364f-a26f-40da-a000-4f0aea0db125/sep-20-terrazzo-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/sep-20/terrazzo/nocal/sep-20-terrazzo-nocal-320x480.png">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-20/terrazzo/nocal/sep-20-terrazzo-nocal-640x480.png">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-20/terrazzo/nocal/sep-20-terrazzo-nocal-800x480.png">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-20/terrazzo/nocal/sep-20-terrazzo-nocal-800x600.png">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-20/terrazzo/nocal/sep-20-terrazzo-nocal-1024x768.png">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-20/terrazzo/nocal/sep-20-terrazzo-nocal-1024x1024.png">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-20/terrazzo/nocal/sep-20-terrazzo-nocal-1152x864.png">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-20/terrazzo/nocal/sep-20-terrazzo-nocal-1280x720.png">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-20/terrazzo/nocal/sep-20-terrazzo-nocal-1280x800.png">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-20/terrazzo/nocal/sep-20-terrazzo-nocal-1280x960.png">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-20/terrazzo/nocal/sep-20-terrazzo-nocal-1280x1024.png">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-20/terrazzo/nocal/sep-20-terrazzo-nocal-1400x1050.png">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-20/terrazzo/nocal/sep-20-terrazzo-nocal-1440x900.png">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-20/terrazzo/nocal/sep-20-terrazzo-nocal-1600x1200.png">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-20/terrazzo/nocal/sep-20-terrazzo-nocal-1680x1050.png">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-20/terrazzo/nocal/sep-20-terrazzo-nocal-1680x1200.png">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-20/terrazzo/nocal/sep-20-terrazzo-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-20/terrazzo/nocal/sep-20-terrazzo-nocal-1920x1200.png">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-20/terrazzo/nocal/sep-20-terrazzo-nocal-1920x1440.png">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-20/terrazzo/nocal/sep-20-terrazzo-nocal-2560x1440.png">2560x1440</a></li>
</ul>

<h3>Funny Cats</h3>
<p>“Cats are beautiful animals. They’re quiet, clean, and warm. They’re funny and can become an endless source of love and entertainment. Here for the cats!” — Designed by <a href="https://www.urbanui.com">UrbanUI</a> from India.</p>
<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/81a90359-0917-4ca1-84e5-700b5c71e3b9/sept-17-funny-cats-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/77eaabbb-9743-45b6-99f3-f35a5584275f/sept-17-funny-cats-preview-opt.png" /></a>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/77eaabbb-9743-45b6-99f3-f35a5584275f/sept-17-funny-cats-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/sept-17/funny-cats/nocal/sept-17-funny-cats-nocal-360x640.png">360x640</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/funny-cats/nocal/sept-17-funny-cats-nocal-1024x768.png">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/funny-cats/nocal/sept-17-funny-cats-nocal-1280x720.png">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/funny-cats/nocal/sept-17-funny-cats-nocal-1280x800.png">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/funny-cats/nocal/sept-17-funny-cats-nocal-1280x960.png">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/funny-cats/nocal/sept-17-funny-cats-nocal-1280x1024.png">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/funny-cats/nocal/sept-17-funny-cats-nocal-1366x768.png">1366x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/funny-cats/nocal/sept-17-funny-cats-nocal-1400x1050.png">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/funny-cats/nocal/sept-17-funny-cats-nocal-1440x900.png">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/funny-cats/nocal/sept-17-funny-cats-nocal-1680x1200.png">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/funny-cats/nocal/sept-17-funny-cats-nocal-1920x1080.png">1920x1080</a></li></ul><p></p>

<p></p><h3>Cacti Everywhere</h3><p></p>
<p></p><p>“Seasons come and go, but our brave cactuses still stand. Summer is almost over, and autumn is coming, but the beloved plants don’t care.” — Designed by <a href="https://pathlove.com/">Lívia Lénárt</a> from Hungary.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/65da1859-5ab5-475e-9940-f4e3045455d4/sep-18-cacti-everywhere-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2df837fa-5d23-4898-8502-0ed53e2cb2df/sep-18-cacti-everywhere-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2df837fa-5d23-4898-8502-0ed53e2cb2df/sep-18-cacti-everywhere-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/sep-18/cacti-everywhere/nocal/sep-18-cacti-everywhere-nocal-320x480.jpg">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-18/cacti-everywhere/nocal/sep-18-cacti-everywhere-nocal-800x480.jpg">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-18/cacti-everywhere/nocal/sep-18-cacti-everywhere-nocal-1024x768.jpg">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-18/cacti-everywhere/nocal/sep-18-cacti-everywhere-nocal-1024x1024.jpg">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-18/cacti-everywhere/nocal/sep-18-cacti-everywhere-nocal-1280x1024.jpg">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-18/cacti-everywhere/nocal/sep-18-cacti-everywhere-nocal-1400x1050.jpg">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-18/cacti-everywhere/nocal/sep-18-cacti-everywhere-nocal-1920x1080.jpg">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-18/cacti-everywhere/nocal/sep-18-cacti-everywhere-nocal-1920x1200.jpg">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-18/cacti-everywhere/nocal/sep-18-cacti-everywhere-nocal-1920x1440.jpg">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-18/cacti-everywhere/nocal/sep-18-cacti-everywhere-nocal-2560x1440.jpg">2560x1440</a></li></ul>

<p></p><h3>Long Live Summer</h3><p></p>
<p></p><p>“While September’s Autumnal Equinox technically signifies the end of the summer season, this wallpaper is for all those summer lovers, like me, who don’t want the sunshine, warm weather and lazy days to end.” — Designed by <a href="https://www.vickigrunewald.com/">Vicki Grunewald</a> from Washington.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1431a5a8-a30f-4ab8-8875-0be50394f701/sept-15-long-live-summer-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/266371d3-48a0-4692-b12b-c2a0162f0b95/sept-15-long-live-summer-preview.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/266371d3-48a0-4692-b12b-c2a0162f0b95/sept-15-long-live-summer-preview.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/sept-15/long-live-summer/nocal/sept-15-long-live-summer-nocal-320x480.png">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-15/long-live-summer/nocal/sept-15-long-live-summer-nocal-640x480.png">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-15/long-live-summer/nocal/sept-15-long-live-summer-nocal-800x480.png">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-15/long-live-summer/nocal/sept-15-long-live-summer-nocal-800x600.png">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-15/long-live-summer/nocal/sept-15-long-live-summer-nocal-1024x768.png">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-15/long-live-summer/nocal/sept-15-long-live-summer-nocal-1024x1024.png">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-15/long-live-summer/nocal/sept-15-long-live-summer-nocal-1152x864.png">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-15/long-live-summer/nocal/sept-15-long-live-summer-nocal-1280x720.png">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-15/long-live-summer/nocal/sept-15-long-live-summer-nocal-1280x800.png">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-15/long-live-summer/nocal/sept-15-long-live-summer-nocal-1280x960.png">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-15/long-live-summer/nocal/sept-15-long-live-summer-nocal-1280x1024.png">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-15/long-live-summer/nocal/sept-15-long-live-summer-nocal-1366x768.png">1366x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-15/long-live-summer/nocal/sept-15-long-live-summer-nocal-1400x1050.png">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-15/long-live-summer/nocal/sept-15-long-live-summer-nocal-1440x900.png">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-15/long-live-summer/nocal/sept-15-long-live-summer-nocal-1600x1200.png">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-15/long-live-summer/nocal/sept-15-long-live-summer-nocal-1680x1050.png">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-15/long-live-summer/nocal/sept-15-long-live-summer-nocal-1680x1200.png">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-15/long-live-summer/nocal/sept-15-long-live-summer-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-15/long-live-summer/nocal/sept-15-long-live-summer-nocal-1920x1200.png">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-15/long-live-summer/nocal/sept-15-long-live-summer-nocal-1920x1440.png">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-15/long-live-summer/nocal/sept-15-long-live-summer-nocal-2560x1440.png">2560x1440</a></li>
</ul>

<p></p><h3>Listen Closer… The Mushrooms Are Growing</h3><p></p>
<p></p><p>“It’s this time of the year when children go to school and grown-ups go to collect mushrooms.” — Designed by <a href="https://izhik.com">Igor Izhik</a> from Canada.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/053d1630-6081-4179-b45e-e4b9311c7ef4/sept-15-listen-closer-the-mushrooms-are-growing-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/48d2812e-6e2b-4e34-87ec-e23a53297041/sept-15-listen-closer-the-mushrooms-are-growing-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/48d2812e-6e2b-4e34-87ec-e23a53297041/sept-15-listen-closer-the-mushrooms-are-growing-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/sept-15/listen-closer-the-mushrooms-are-growing/nocal/sept-15-listen-closer-the-mushrooms-are-growing-nocal-640x480.jpg">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-15/listen-closer-the-mushrooms-are-growing/nocal/sept-15-listen-closer-the-mushrooms-are-growing-nocal-800x480.jpg">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-15/listen-closer-the-mushrooms-are-growing/nocal/sept-15-listen-closer-the-mushrooms-are-growing-nocal-800x600.jpg">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-15/listen-closer-the-mushrooms-are-growing/nocal/sept-15-listen-closer-the-mushrooms-are-growing-nocal-1024x768.jpg">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-15/listen-closer-the-mushrooms-are-growing/nocal/sept-15-listen-closer-the-mushrooms-are-growing-nocal-1024x1024.jpg">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-15/listen-closer-the-mushrooms-are-growing/nocal/sept-15-listen-closer-the-mushrooms-are-growing-nocal-1152x864.jpg">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-15/listen-closer-the-mushrooms-are-growing/nocal/sept-15-listen-closer-the-mushrooms-are-growing-nocal-1280x720.jpg">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-15/listen-closer-the-mushrooms-are-growing/nocal/sept-15-listen-closer-the-mushrooms-are-growing-nocal-1280x800.jpg">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-15/listen-closer-the-mushrooms-are-growing/nocal/sept-15-listen-closer-the-mushrooms-are-growing-nocal-1280x960.jpg">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-15/listen-closer-the-mushrooms-are-growing/nocal/sept-15-listen-closer-the-mushrooms-are-growing-nocal-1280x1024.jpg">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-15/listen-closer-the-mushrooms-are-growing/nocal/sept-15-listen-closer-the-mushrooms-are-growing-nocal-1400x1050.jpg">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-15/listen-closer-the-mushrooms-are-growing/nocal/sept-15-listen-closer-the-mushrooms-are-growing-nocal-1440x900.jpg">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-15/listen-closer-the-mushrooms-are-growing/nocal/sept-15-listen-closer-the-mushrooms-are-growing-nocal-1600x1200.jpg">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-15/listen-closer-the-mushrooms-are-growing/nocal/sept-15-listen-closer-the-mushrooms-are-growing-nocal-1680x1050.jpg">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-15/listen-closer-the-mushrooms-are-growing/nocal/sept-15-listen-closer-the-mushrooms-are-growing-nocal-1680x1200.jpg">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-15/listen-closer-the-mushrooms-are-growing/nocal/sept-15-listen-closer-the-mushrooms-are-growing-nocal-1920x1080.jpg">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-15/listen-closer-the-mushrooms-are-growing/nocal/sept-15-listen-closer-the-mushrooms-are-growing-nocal-1920x1200.jpg">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-15/listen-closer-the-mushrooms-are-growing/nocal/sept-15-listen-closer-the-mushrooms-are-growing-nocal-1920x1440.jpg">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-15/listen-closer-the-mushrooms-are-growing/nocal/sept-15-listen-closer-the-mushrooms-are-growing-nocal-2560x1440.jpg">2560x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-15/listen-closer-the-mushrooms-are-growing/nocal/sept-15-listen-closer-the-mushrooms-are-growing-nocal-2560x1600.jpg">2560x1600</a></li>
</ul>



<p></p><h3>Autumn Rains</h3><p></p>
<p></p><p>“This autumn, we expect to see a lot of rainy days and blues, so we wanted to change the paradigm and wish a warm welcome to the new season. After all, if you come to think of it: rain is not so bad if you have an umbrella and a raincoat. Come autumn, we welcome you!” — Designed by <a href="https://www.popwebdesign.net/web-design-agency.html">PopArt Studio</a> from Serbia.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ee2102d2-b5fc-4da5-8dd8-4ad100b079e7/sept-17-autumn-rains-large-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/55161fb1-16dc-47e1-a118-5ecd0f0a3fbb/sept-17-autumn-rains-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/55161fb1-16dc-47e1-a118-5ecd0f0a3fbb/sept-17-autumn-rains-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/sept-17/autumn-rains/nocal/sept-17-autumn-rains-nocal-320x480.jpg">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/autumn-rains/nocal/sept-17-autumn-rains-nocal-640x480.jpg">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/autumn-rains/nocal/sept-17-autumn-rains-nocal-800x480.jpg">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/autumn-rains/nocal/sept-17-autumn-rains-nocal-800x600.jpg">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/autumn-rains/nocal/sept-17-autumn-rains-nocal-1024x768.jpg">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/autumn-rains/nocal/sept-17-autumn-rains-nocal-1024x1024.jpg">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/autumn-rains/nocal/sept-17-autumn-rains-nocal-1152x864.jpg">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/autumn-rains/nocal/sept-17-autumn-rains-nocal-1280x720.jpg">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/autumn-rains/nocal/sept-17-autumn-rains-nocal-1280x800.jpg">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/autumn-rains/nocal/sept-17-autumn-rains-nocal-1280x960.jpg">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/autumn-rains/nocal/sept-17-autumn-rains-nocal-1280x1024.jpg">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/autumn-rains/nocal/sept-17-autumn-rains-nocal-1366x768.jpg">1366x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/autumn-rains/nocal/sept-17-autumn-rains-nocal-1400x1050.jpg">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/autumn-rains/nocal/sept-17-autumn-rains-nocal-1440x900.jpg">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/autumn-rains/nocal/sept-17-autumn-rains-nocal-1600x1200.jpg">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/autumn-rains/nocal/sept-17-autumn-rains-nocal-1680x1050.jpg">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/autumn-rains/nocal/sept-17-autumn-rains-nocal-1680x1200.jpg">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/autumn-rains/nocal/sept-17-autumn-rains-nocal-1920x1080.jpg">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/autumn-rains/nocal/sept-17-autumn-rains-nocal-1920x1200.jpg">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/autumn-rains/nocal/sept-17-autumn-rains-nocal-1920x1440.jpg">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/autumn-rains/nocal/sept-17-autumn-rains-nocal-2560x1440.jpg">2560x1440</a></li></ul>

<p></p><h3>Maryland Pride</h3><p></p>
<p></p><p>“As summer comes to a close, so does the end of blue crab season in Maryland. Blue crabs have been a regional delicacy since the 1700s and have become Maryland’s most valuable fishing industry, adding millions of dollars to the Maryland economy each year. With more than 455 million blue crabs swimming in the Chesapeake Bay, these tasty critters can be prepared in a variety of ways and have become a summer staple in many homes and restaurants across the state. The blue crab has contributed so much to the state’s regional culture and economy, in 1989 it was named the State Crustacean, cementing its importance in Maryland history.” — Designed by <a href="https://bit.ly/TheHannonGroup">The Hannon Group</a> from Washington DC.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0c681011-d8d1-4c4b-8e13-69aed69f9471/sept-17-marylandpride-large-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ee60f479-606f-44cd-80c7-ec168d9d54f3/sept-17-marylandpride-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ee60f479-606f-44cd-80c7-ec168d9d54f3/sept-17-marylandpride-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/sept-17/marylandpride/nocal/sept-17-marylandpride-nocal-320x480.png">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/marylandpride/nocal/sept-17-marylandpride-nocal-640x480.png">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/marylandpride/nocal/sept-17-marylandpride-nocal-800x600.png">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/marylandpride/nocal/sept-17-marylandpride-nocal-1024x768.png">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/marylandpride/nocal/sept-17-marylandpride-nocal-1280x960.png">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/marylandpride/nocal/sept-17-marylandpride-nocal-1440x900.png">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/marylandpride/nocal/sept-17-marylandpride-nocal-1600x1200.png">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/marylandpride/nocal/sept-17-marylandpride-nocal-1680x1050.png">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/marylandpride/nocal/sept-17-marylandpride-nocal-1680x1200.png">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/marylandpride/nocal/sept-17-marylandpride-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/marylandpride/nocal/sept-17-marylandpride-nocal-1920x1440.png">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/marylandpride/nocal/sept-17-marylandpride-nocal-2560x1440.png">2560x1440</a></li></ul>

<p></p><h3>Stay Or Leave?</h3><p></p>
<p></p><p>Designed by <a href="https://www.ricardogimenes.com/">Ricardo Gimenes</a> from Sweden.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/413b8d04-e98b-4503-a3f6-e5a25cdd3ba1/sep-19-stay-or-leave-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/84692544-a30d-4a78-9685-1278d065cc6e/sep-19-stay-or-leave-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/84692544-a30d-4a78-9685-1278d065cc6e/sep-19-stay-or-leave-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/sep-19/stay-or-leave/nocal/sep-19-stay-or-leave-nocal-320x480.png">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-19/stay-or-leave/nocal/sep-19-stay-or-leave-nocal-640x480.png">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-19/stay-or-leave/nocal/sep-19-stay-or-leave-nocal-800x480.png">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-19/stay-or-leave/nocal/sep-19-stay-or-leave-nocal-800x600.png">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-19/stay-or-leave/nocal/sep-19-stay-or-leave-nocal-1024x768.png">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-19/stay-or-leave/nocal/sep-19-stay-or-leave-nocal-1024x1024.png">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-19/stay-or-leave/nocal/sep-19-stay-or-leave-nocal-1152x864.png">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-19/stay-or-leave/nocal/sep-19-stay-or-leave-nocal-1280x720.png">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-19/stay-or-leave/nocal/sep-19-stay-or-leave-nocal-1280x800.png">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-19/stay-or-leave/nocal/sep-19-stay-or-leave-nocal-1280x960.png">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-19/stay-or-leave/nocal/sep-19-stay-or-leave-nocal-1280x1024.png">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-19/stay-or-leave/nocal/sep-19-stay-or-leave-nocal-1366x768.png">1366x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-19/stay-or-leave/nocal/sep-19-stay-or-leave-nocal-1400x1050.png">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-19/stay-or-leave/nocal/sep-19-stay-or-leave-nocal-1440x900.png">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-19/stay-or-leave/nocal/sep-19-stay-or-leave-nocal-1600x1200.png">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-19/stay-or-leave/nocal/sep-19-stay-or-leave-nocal-1680x1050.png">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-19/stay-or-leave/nocal/sep-19-stay-or-leave-nocal-1680x1200.png">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-19/stay-or-leave/nocal/sep-19-stay-or-leave-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-19/stay-or-leave/nocal/sep-19-stay-or-leave-nocal-1920x1200.png">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-19/stay-or-leave/nocal/sep-19-stay-or-leave-nocal-1920x1440.png">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-19/stay-or-leave/nocal/sep-19-stay-or-leave-nocal-2560x1440.png">2560x1440</a></li>
</ul>

<p></p><h3>Flower Soul</h3><p></p>
<p></p><p>“The earth has music for those who listen. Take a break and relax and while you drive out the stress, catch a glimpse of the beautiful nature around you. Can you hear the rhythm of the breeze blowing, the flowers singing, and the butterflies fluttering to cheer you up? We dedicate flowers which symbolize happiness and love to one and all.” — Designed by <a href="https://acodez.in/">Krishnankutty</a> from India.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f691ba9d-d4ab-4767-9899-836c61f6aeb0/sept-16-flower-soul-large-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/247433e6-81e3-4d55-9b68-55578f4138b8/sept-16-flower-soul-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/247433e6-81e3-4d55-9b68-55578f4138b8/sept-16-flower-soul-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/sept-16/flower-soul/nocal/sept-16-flower-soul-nocal-320x480.png">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-16/flower-soul/nocal/sept-16-flower-soul-nocal-640x480.png">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-16/flower-soul/nocal/sept-16-flower-soul-nocal-800x480.png">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-16/flower-soul/nocal/sept-16-flower-soul-nocal-800x600.png">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-16/flower-soul/nocal/sept-16-flower-soul-nocal-1024x768.png">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-16/flower-soul/nocal/sept-16-flower-soul-nocal-1024x1024.png">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-16/flower-soul/nocal/sept-16-flower-soul-nocal-1152x864.png">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-16/flower-soul/nocal/sept-16-flower-soul-nocal-1280x720.png">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-16/flower-soul/nocal/sept-16-flower-soul-nocal-1280x960.png">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-16/flower-soul/nocal/sept-16-flower-soul-nocal-1280x1024.png">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-16/flower-soul/nocal/sept-16-flower-soul-nocal-1366x768.png">1366x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-16/flower-soul/nocal/sept-16-flower-soul-nocal-1400x1050.png">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-16/flower-soul/nocal/sept-16-flower-soul-nocal-1440x900.png">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-16/flower-soul/nocal/sept-16-flower-soul-nocal-1600x1200.png">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-16/flower-soul/nocal/sept-16-flower-soul-nocal-1680x1050.png">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-16/flower-soul/nocal/sept-16-flower-soul-nocal-1680x1200.png">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-16/flower-soul/nocal/sept-16-flower-soul-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-16/flower-soul/nocal/sept-16-flower-soul-nocal-1920x1200.png">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-16/flower-soul/nocal/sept-16-flower-soul-nocal-1920x1440.png">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-16/flower-soul/nocal/sept-16-flower-soul-nocal-2560x1440.png">2560x1440</a></li></ul>

<p></p><h3>Colors Of September</h3><p></p>
<p></p><p>“I love September. Its colors and smells.” — Designed by <a href="https://www.shutterstock.com/gallery-1797797p1.html">Juliagav</a> from Ukraine.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f06a6968-1524-4afb-85a4-b12230506369/sep-13-colors-of-september-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b9a49341-db50-475f-a215-a51237e07bcf/sep-13-colors-of-september-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b9a49341-db50-475f-a215-a51237e07bcf/sep-13-colors-of-september-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/sep-13/colors-of-september/nocal/sep-13-colors-of-september-nocal-320x480.jpg">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-13/colors-of-september/nocal/sep-13-colors-of-september-nocal-1024x768.jpg">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-13/colors-of-september/nocal/sep-13-colors-of-september-nocal-1024x1024.jpg">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-13/colors-of-september/nocal/sep-13-colors-of-september-nocal-1280x800.jpg">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-13/colors-of-september/nocal/sep-13-colors-of-september-nocal-1280x1024.jpg">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-13/colors-of-september/nocal/sep-13-colors-of-september-nocal-1440x900.jpg">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-13/colors-of-september/nocal/sep-13-colors-of-september-nocal-1680x1050.jpg">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-13/colors-of-september/nocal/sep-13-colors-of-september-nocal-1920x1080.jpg">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-13/colors-of-september/nocal/sep-13-colors-of-september-nocal-2560x1440.jpg">2560x1440</a></li></ul>

<p></p><h3>Red Beetle</h3><p></p>
<p></p><p>Designed by <a href="https://oxanaart.com">Oxana Kostromina</a> from Russia/Germany.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1d6a8583-053d-40a3-9e16-ed2d288c39c2/september-11-red-beetle-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/05a55f70-83f3-46c0-bc04-95f027e4e172/september-11-red-beetle-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/05a55f70-83f3-46c0-bc04-95f027e4e172/september-11-red-beetle-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/690f4db6-ce96-489d-9e54-075025964f24/september-11-red-beetle-46-nocal-320x480.jpg">320x480</a>, <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9493afd4-6fab-4ff7-9ea3-3e108ef758b3/september-11-red-beetle-46-nocal-1024x768.jpg">1024x768</a>, <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/79094615-c6a7-450e-8384-df37e58c971c/september-11-red-beetle-46-nocal-1024x1024.jpg">1024x1024</a>, <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6fce655d-bfb5-4609-a202-473317505406/september-11-red-beetle-46-nocal-1280x800.jpg">1280x800</a>, <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/06751aae-15b8-46a3-9c25-982df6da736d/september-11-red-beetle-46-nocal-1280x1024.jpg">1280x1024</a>, <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a91c952b-d56d-4a77-a764-1bf127db8010/september-11-red-beetle-46-nocal-1440x900.jpg">1440x900</a>, <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b997bd6c-22e8-4767-84ec-386e2f30a48a/september-11-red-beetle-46-nocal-1600x1200.jpg">1600x1200</a>, <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/71f129e4-c42b-4694-904a-a906bbc91e2b/september-11-red-beetle-46-nocal-1680x1050.jpg">1680x1050</a>, <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c5793fe9-5939-43c4-9e08-151078d27810/september-11-red-beetle-46-nocal-1920x1080.jpg">1920x1080</a>, <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/54413205-d511-4699-b575-357ac466656f/september-11-red-beetle-46-nocal-1920x1200.jpg">1920x1200</a>, <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/690bdc7a-e29d-48dd-b1f9-fe741bbf6b87/september-11-red-beetle-46-nocal-2560x1440.jpg">2560x1440</a></li></ul>

<p></p><h3>Still In Vacation Mood</h3><p></p>
<p></p><p>“It’s officially the end of the summer and I’m still in vacation mood, dreaming about all the amazing places I’ve seen. This illustration is inspired by a small town in France, on the Atlantic coast, right by the beach.” — Designed by <a href="https://www.behance.net/mirunasfia">Miruna Sfia</a> from Romania.</p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/df067a6a-5e87-48db-bae1-e6c20a3814a3/sept-17-still-in-vacation-mood-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4dc14ac0-029c-4f57-85ed-76b49cb5c183/sept-17-still-in-vacation-mood-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4dc14ac0-029c-4f57-85ed-76b49cb5c183/sept-17-still-in-vacation-mood-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/sept-17/still-in-vacation-mood/nocal/sept-17-still-in-vacation-mood-nocal-320x480.png">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/still-in-vacation-mood/nocal/sept-17-still-in-vacation-mood-nocal-640x480.png">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/still-in-vacation-mood/nocal/sept-17-still-in-vacation-mood-nocal-800x480.png">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/still-in-vacation-mood/nocal/sept-17-still-in-vacation-mood-nocal-800x600.png">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/still-in-vacation-mood/nocal/sept-17-still-in-vacation-mood-nocal-1024x768.png">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/still-in-vacation-mood/nocal/sept-17-still-in-vacation-mood-nocal-1024x1024.png">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/still-in-vacation-mood/nocal/sept-17-still-in-vacation-mood-nocal-1152x864.png">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/still-in-vacation-mood/nocal/sept-17-still-in-vacation-mood-nocal-1280x720.png">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/still-in-vacation-mood/nocal/sept-17-still-in-vacation-mood-nocal-1280x800.png">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/still-in-vacation-mood/nocal/sept-17-still-in-vacation-mood-nocal-1280x960.png">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/still-in-vacation-mood/nocal/sept-17-still-in-vacation-mood-nocal-1280x1024.png">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/still-in-vacation-mood/nocal/sept-17-still-in-vacation-mood-nocal-1440x900.png">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/still-in-vacation-mood/nocal/sept-17-still-in-vacation-mood-nocal-1440x1050.png">1440x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/still-in-vacation-mood/nocal/sept-17-still-in-vacation-mood-nocal-1600x1200.png">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/still-in-vacation-mood/nocal/sept-17-still-in-vacation-mood-nocal-1680x1050.png">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/still-in-vacation-mood/nocal/sept-17-still-in-vacation-mood-nocal-1680x1200.png">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/still-in-vacation-mood/nocal/sept-17-still-in-vacation-mood-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/still-in-vacation-mood/nocal/sept-17-still-in-vacation-mood-nocal-1920x1200.png">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/still-in-vacation-mood/nocal/sept-17-still-in-vacation-mood-nocal-1920x1440.png">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/still-in-vacation-mood/nocal/sept-17-still-in-vacation-mood-nocal-2560x1440.png">2560x1440</a></li></ul>

<p></p><h3>Summer Is Leaving</h3><p></p>
<p></p><p>“It is inevitable. Summer is leaving silently. Let us think of ways to make the most of what is left of the beloved season.” — Designed by <a href="https://www.bootstrapdash.com">Bootstrap Dashboards</a> from India.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/393a201f-49e1-4278-a863-7d71a472dc07/sept-17-summer-is-leaving-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/228dcef7-00f3-4656-a914-83056db8a073/sept-17-summer-is-leaving-preview.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/228dcef7-00f3-4656-a914-83056db8a073/sept-17-summer-is-leaving-preview.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/sept-17/summer-is-leaving/nocal/sept-17-summer-is-leaving-nocal-360x640.png">360x640</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/summer-is-leaving/nocal/sept-17-summer-is-leaving-nocal-1024x768.png">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/summer-is-leaving/nocal/sept-17-summer-is-leaving-nocal-1280x720.png">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/summer-is-leaving/nocal/sept-17-summer-is-leaving-nocal-1280x800.png">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/summer-is-leaving/nocal/sept-17-summer-is-leaving-nocal-1280x960.png">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/summer-is-leaving/nocal/sept-17-summer-is-leaving-nocal-1280x1024.png">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/summer-is-leaving/nocal/sept-17-summer-is-leaving-nocal-1366x768.png">1366x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/summer-is-leaving/nocal/sept-17-summer-is-leaving-nocal-1400x1050.png">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/summer-is-leaving/nocal/sept-17-summer-is-leaving-nocal-1440x900.png">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/summer-is-leaving/nocal/sept-17-summer-is-leaving-nocal-1600x900.png">1600x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/summer-is-leaving/nocal/sept-17-summer-is-leaving-nocal-1680x1200.png">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/summer-is-leaving/nocal/sept-17-summer-is-leaving-nocal-1920x1080.png">1920x1080</a></li>
</ul>

<p></p><h3>Office</h3><p></p>
<p></p><p>“Clean, minimalistic office for a productive day.” — Designed by <a href="https://hirsdesign.com/">Antun Hiršman</a> from Croatia.</p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/254b06d0-db60-4b99-bbcb-b0ee55d30465/sept-16-office-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5462c653-9c0b-4ae7-97d5-139ce8d48435/sept-16-office-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5462c653-9c0b-4ae7-97d5-139ce8d48435/sept-16-office-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/sept-16/office/nocal/sept-16-office-nocal-320x480.jpg">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-16/office/nocal/sept-16-office-nocal-800x600.jpg">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-16/office/nocal/sept-16-office-nocal-1280x720.jpg">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-16/office/nocal/sept-16-office-nocal-1280x1024.jpg">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-16/office/nocal/sept-16-office-nocal-1440x900.jpg">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-16/office/nocal/sept-16-office-nocal-1680x1050.jpg">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-16/office/nocal/sept-16-office-nocal-1920x1080.jpg">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-16/office/nocal/sept-16-office-nocal-1920x1440.jpg">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-16/office/nocal/sept-16-office-nocal-2560x1440.jpg">2560x1440</a></li></ul>



<p></p><h3>Viva Mexico</h3><p></p>
<p></p><p>“This month is Mexico’s independence day and I decided to illustrate in my wallpaper one of the things Mexico’s best known for: the Lucha Libre.” — Designed by <a href="https://www.mariakellerac.com">Maria Keller</a> from Mexico.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7324744b-48c1-426e-96bb-51a7b2cee24d/sept-16-viva-mexico-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/166e2319-769c-463d-b58b-8d83b3fa702c/sept-16-viva-mexico-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/166e2319-769c-463d-b58b-8d83b3fa702c/sept-16-viva-mexico-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/sept-16/viva-mexico/nocal/sept-16-viva-mexico-nocal-320x480.png">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-16/viva-mexico/nocal/sept-16-viva-mexico-nocal-640x480.png">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-16/viva-mexico/nocal/sept-16-viva-mexico-nocal-640x1136.png">640x1136</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-16/viva-mexico/nocal/sept-16-viva-mexico-nocal-750x1334.png">750x1334</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-16/viva-mexico/nocal/sept-16-viva-mexico-nocal-800x480.png">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-16/viva-mexico/nocal/sept-16-viva-mexico-nocal-800x600.png">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-16/viva-mexico/nocal/sept-16-viva-mexico-nocal-1024x768.png">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-16/viva-mexico/nocal/sept-16-viva-mexico-nocal-1024x1024.png">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-16/viva-mexico/nocal/sept-16-viva-mexico-nocal-1152x864.png">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-16/viva-mexico/nocal/sept-16-viva-mexico-nocal-1242x2208.png">1242x2208</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-16/viva-mexico/nocal/sept-16-viva-mexico-nocal-1280x720.png">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-16/viva-mexico/nocal/sept-16-viva-mexico-nocal-1280x800.png">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-16/viva-mexico/nocal/sept-16-viva-mexico-nocal-1280x960.png">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-16/viva-mexico/nocal/sept-16-viva-mexico-nocal-1280x1024.png">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-16/viva-mexico/nocal/sept-16-viva-mexico-nocal-1366x768.png">1366x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-16/viva-mexico/nocal/sept-16-viva-mexico-nocal-1400x1050.png">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-16/viva-mexico/nocal/sept-16-viva-mexico-nocal-1440x900.png">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-16/viva-mexico/nocal/sept-16-viva-mexico-nocal-1600x1200.png">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-16/viva-mexico/nocal/sept-16-viva-mexico-nocal-1680x1050.png">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-16/viva-mexico/nocal/sept-16-viva-mexico-nocal-1680x1200.png">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-16/viva-mexico/nocal/sept-16-viva-mexico-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-16/viva-mexico/nocal/sept-16-viva-mexico-nocal-1920x1200.png">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-16/viva-mexico/nocal/sept-16-viva-mexico-nocal-1920x1440.png">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-16/viva-mexico/nocal/sept-16-viva-mexico-nocal-2560x1440.png">2560x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-16/viva-mexico/nocal/sept-16-viva-mexico-nocal-2880x1800.png">2880x1800</a></li></ul>

<p></p><h3>Finding The Balance</h3><p></p>
<p></p><p>“One evening last week I felt a little stressed, so I decided to have a short walk outside. When I went out of the door, I saw two young hares jumping around, and a bat which flew just over my head. I sat down on a garden chair and watched while Jupiter slowly rose above the trees. The crisp air of the autumn night reminded me of how the seasons keep changing. Here in Finland the differences between seasons are extremely large, as both the temperatures and the duration of sunlight vary a lot. However, twice a year on the equinoxes everything is in balance. I hope we all can find the same balance in our own lives.” — Designed by <a href="https://firmatverkkoon.fi">Tuomas Karjalainen</a> from Finland.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f7902dcc-9aec-466f-914d-73c16042431c/sep-21-finding-the-balance-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/05ccda63-aafa-414e-9533-11229182fdf8/sep-21-finding-the-balance-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/05ccda63-aafa-414e-9533-11229182fdf8/sep-21-finding-the-balance-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/sep-21/finding-the-balance/nocal/sep-21-finding-the-balance-nocal-1280x720.png">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-21/finding-the-balance/nocal/sep-21-finding-the-balance-nocal-1366x768.png">1366x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-21/finding-the-balance/nocal/sep-21-finding-the-balance-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-21/finding-the-balance/nocal/sep-21-finding-the-balance-nocal-2560x1440.png">2560x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-21/finding-the-balance/nocal/sep-21-finding-the-balance-nocal-3840x2160.png">3840x2160</a></li>
</ul>

<p></p><h3>Weekend Relax</h3><p></p>
<p></p><p>“I’m looking forward for the weekend to enjoy drinks with friends!” — Designed by <a href="https://drinkingagein.com/">Robert</a> from the United States.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dff475dd-1a0b-497d-8598-3e13142a8ce2/sep-20-weekend-relax-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/30f65a03-22e0-4593-92ec-9ab2e0bed79e/sep-20-weekend-relax-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/30f65a03-22e0-4593-92ec-9ab2e0bed79e/sep-20-weekend-relax-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/sep-20/weekend-relax/nocal/sep-20-weekend-relax-nocal-320x480.png">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-20/weekend-relax/nocal/sep-20-weekend-relax-nocal-1024x1024.png">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-20/weekend-relax/nocal/sep-20-weekend-relax-nocal-1280x720.png">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-20/weekend-relax/nocal/sep-20-weekend-relax-nocal-1680x1200.png">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-20/weekend-relax/nocal/sep-20-weekend-relax-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-20/weekend-relax/nocal/sep-20-weekend-relax-nocal-2560x1440.png">2560x1440</a></li>
</ul>

<p></p><h3>Batmom</h3><p></p>
<p></p><p>Designed by <a href="https://www.ricardogimenes.com/">Ricardo Gimenes</a> from Sweden.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/29cb124f-93f3-42de-afdf-1600eec88476/sep-18-batmom-large-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a86a40a7-5bfa-46f4-83d1-61bfa77a877b/sep-18-batmom-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a86a40a7-5bfa-46f4-83d1-61bfa77a877b/sep-18-batmom-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/sep-18/batmom/nocal/sep-18-batmom-nocal-320x480.png">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-18/batmom/nocal/sep-18-batmom-nocal-640x480.png">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-18/batmom/nocal/sep-18-batmom-nocal-800x480.png">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-18/batmom/nocal/sep-18-batmom-nocal-800x600.png">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-18/batmom/nocal/sep-18-batmom-nocal-1024x768.png">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-18/batmom/nocal/sep-18-batmom-nocal-1024x1024.png">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-18/batmom/nocal/sep-18-batmom-nocal-1152x864.png">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-18/batmom/nocal/sep-18-batmom-nocal-1280x720.png">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-18/batmom/nocal/sep-18-batmom-nocal-1280x800.png">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-18/batmom/nocal/sep-18-batmom-nocal-1280x960.png">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-18/batmom/nocal/sep-18-batmom-nocal-1280x1024.png">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-18/batmom/nocal/sep-18-batmom-nocal-1366x768.png">1366x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-18/batmom/nocal/sep-18-batmom-nocal-1400x1050.png">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-18/batmom/nocal/sep-18-batmom-nocal-1440x900.png">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-18/batmom/nocal/sep-18-batmom-nocal-1600x1200.png">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-18/batmom/nocal/sep-18-batmom-nocal-1680x1050.png">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-18/batmom/nocal/sep-18-batmom-nocal-1680x1200.png">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-18/batmom/nocal/sep-18-batmom-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-18/batmom/nocal/sep-18-batmom-nocal-1920x1200.png">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-18/batmom/nocal/sep-18-batmom-nocal-1920x1440.png">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/sep-18/batmom/nocal/sep-18-batmom-nocal-2560x1440.png">2560x1440</a></li>
</ul>

<p></p><h3>#Spring</h3><p></p>
<p></p><p>“Such a lovely time of the year in Melbourne!” — Designed by <a href="https://www.tazi.com.au">Tazi</a> from Australia.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/45b9a31d-94f4-40ee-ab44-bf1126788c31/sept-17-spring-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c0107721-79bb-42b7-961e-269ff53c7965/sept-17-spring-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c0107721-79bb-42b7-961e-269ff53c7965/sept-17-spring-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/sept-17/spring/nocal/sept-17-spring-nocal-320x480.jpg">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/spring/nocal/sept-17-spring-nocal-640x480.jpg">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/spring/nocal/sept-17-spring-nocal-800x600.jpg">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/spring/nocal/sept-17-spring-nocal-1024x768.jpg">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/spring/nocal/sept-17-spring-nocal-1152x864.jpg">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/spring/nocal/sept-17-spring-nocal-1280x720.jpg">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/spring/nocal/sept-17-spring-nocal-1280x960.jpg">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/spring/nocal/sept-17-spring-nocal-1600x1200.jpg">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/spring/nocal/sept-17-spring-nocal-1920x1080.jpg">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/spring/nocal/sept-17-spring-nocal-1920x1440.jpg">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/sept-17/spring/nocal/sept-17-spring-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>

]]></content:encoded>
      <author>hello@smashingmagazine.com (Cosima Mielke)</author>
      <enclosure
        url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6859d441-1ee0-47f9-a3c7-73a1dbc29472/sep-22-cultivating-community-preview-opt.png"
        length="0" type="image/png"/>
    </item>
    <item>
      <title><![CDATA[How To Improve And Measure Your Progress Learning Web Design]]></title>
      <link>https://smashingmagazine.com/2022/08/improve-measure-progress-learning-web-design/
      </link>
      <guid>https://smashingmagazine.com/2022/08/improve-measure-progress-learning-web-design/
      </guid>
      <pubDate>Tue, 30 Aug 2022 09:00:00 GMT</pubDate>
      <description>
        <![CDATA[Ever felt overwhelmed by the number of things you need to learn? Today, we look at how [Uxcel](https://uxcel.com/) eases this transition and approaches actively learning new skills to take our careers to the next level.]]></description>
      <content:encoded><![CDATA[<p>This article is a sponsored by <a href="https://uxcel.com/">Uxcel</a></p>
<p>Web design is full of people who value open collaboration and knowledge sharing. It’s a career in which you can be completely self-taught, using affordable — if not free — resources from experts and like-minded people around the world. This is worth celebrating!</p>
<p>But with so much to learn, <strong>how do we decide what to focus our time on?</strong> How do we maintain our existing skills? Where should a beginner start? How do we become hireable? Let’s take a look at how Uxcel (pronounced “You Excel”) goes about answering these questions.</p>
The Three Pillars
<p>Uxcel believes its platform can help you become a better web designer using three core pillars. These essentially involve an iterative process of learning and practicing, with the aim to use progress enough (and have something to show for it) to improve our job prospects over time.</p>
<h3>1. Improve Your Design Skills With Interactive Learning</h3>
<p>We start with learning — no surprise there! Uxcel has courses specific to individual areas of web design, each one consisting of many interactive bite-sized lessons. This <strong>removes the time that gets wasted</strong> when you don’t know what to focus on next. Each lesson is small enough to fit in during the spare time. With all the courses being available at the same time, without needing to register for a specific course, you are able to dip your toes into any areas of design without committing to an entire course.</p>
<h3>2. Test And Measure Your Design Knowledge</h3>
<p>Closely linked to interactive learning is the importance of testing yourself. Alongside the courses, Uxcel also has an entire section of skill tests and assessments dedicated to measuring your progress as you improve. Particularly intriguing is that you can only take these tests once a month! This is a clever mechanism for ensuring you don’t cheat yourself and are able to <strong>see a real indication of your improvement</strong> over time rather than just practicing to pass tests.</p>
<h3>3. Build Your Professional Profile And Get Hired</h3>
<p>After learning and measuring come improving your professional profile and hireability. Getting the roles you want can be hard, especially at the early stage of your career. It’s often a catch-22 situation between needing experience to get a job and needing a job to get experience. So showing that you have <strong>a clear focus on the steps</strong>, you need to take and are regularly practicing can help to elevate your profile when applying for a new role.</p>
<p>Theory, practice, and getting a job. This may sound idealistic; however, it’s a framework that, when done regularly with purpose, is bound to help you go in the right direction. One thing is clear though: whether you use Uxcel or Bootcamps, YouTube or University, you’ve got to put the work in.</p>
Don’t Cheat Yourself
<p>Osmosis. Have you ever bought a book that is full of valuable information and somehow felt good about seeing it on your bookshelf but never actually ended up reading it? Or maybe you keep a gym membership even when you haven’t been in a while? I’m guilty, too; it’s such a natural thing to do even when we all know full well you need to put the work in!</p>
<p>Uxcel’s Skill Tests can only be completed once a month. At first, this felt like the antithesis of not cheating yourself; it felt lazy. But when you think about it, <strong>learning shouldn’t be a chore</strong> or something you feel bad about if you miss a day. The technique of stopping for a moment and looking back at your progress over the past month is a really useful tool that you can use.</p>
<p>In fact, completing these skill tests once a month helps to prevent you from cheating yourself. You cannot go back and change your answers; your ranking against the other designers on the site for that assessment will stay the same for an entire month. So you’re going to feel the encouragement to do it well and to focus and take pride in what you’re doing.</p>
<p>This is a concept we can apply to much of what we do. How often have you marked an article as “Read later” and never did it? I do it all the time, but it’s just a subconscious attempt at osmosis.</p>
Improve Your Skills In Five Minutes
<p>According to Uxcel, even just 5 minutes per day over the course of a month is enough time to see measurable improvement in anything you’re trying to learn. This might sound in direct contrast to not cheating; five minutes is hardly any time at all. But — as with any fad diet — if you try to deep dive, you may learn a lot in a short amount of time, but it will not become part of your routine, and it will not be a long-lasting habit.</p>
<ul>
<li><strong>Build a habit.</strong><br />Bad habits are hard to break, and good habits are hard to make. To build a habit, we need to keep up the momentum, which means it’s better to have low expectations and minimal effort. The more we see progress on achievable goals, the more rewarding it is, and the more we can maintain the habit.</li>
<li><strong>Anyone can find five minutes in a day.</strong><br />It’s really easy to persuade ourselves against learning. Maybe it’s too expensive or too hard. By keeping the aim manageable, it becomes easy to fit around our daily lives.</li>
<li><strong>Interactivity is fun!</strong><br />If your experience of education to date has not been so great, perhaps even five minutes of concerted learning a day sounds tedious to you. But let me promise you, this is a fun way to learn! It’s so easy to get carried away completing the skill tests and reading the theory. </li>
</ul>
<p>Building up a mechanism for knowing how to learn efficiently will always help with everything we do going forward. We can take these approaches of keeping small manageable chunks per day to achieve anything we want.</p>
How Do I Know What I Don’t Know?
<p>So you’ve decided to learn a new area of web design. You have set aside 5 minutes a day. You know it will require effort on your part there’s no point in cheating yourself. Now, the question is <strong>where to start?</strong></p>
<p>Let’s make one thing clear. You will never be able to know everything, and you don’t need to. It’s impossible. Technologies and best practices that feel like they are the final solution quickly become old hats. Entire new disciplines crop up, sometimes seemingly out of the blue. Trends and opinions flow in and out like the tide.</p>
<p> There are countless ways to successfully navigate challenges in order to learn just enough about the right thing at the right time. </p>
<p>If you’re anything like me, it can feel like a ping-pong ball. One minute you can feel like an expert, and the next, as if you’ve started back at square one. Even knowing how and where to start learning it is full of choices, and not every solution is as suitable as another.</p>
<p>Let’s take a quick look at Smashing Magazine, for example. This is a website full to the brim of content written by all kinds of people in the industry. It’s completely free to read and browse more than a decade of articles. As I said in my introduction, we are incredibly lucky to be in a situation like this. However, browsing aimlessly through thousands of articles is a lovely thing to do, and of course, <strong>there is so much to learn</strong>. We do need some kind of structure to effectively be productive in our learning.</p>
<p><a href="https://uxcel.com/">Uxcel</a> structures the courses in a very clear way. Each course is clear from the title what it covers at the high level, for example, “Design Accessibility,” “UX Design Foundations” and “HTML for designers”. This helps the initial overwhelming sensation that is so common when looking for information as it feels like a small list to choose from despite each containing a large amount of information. Then when you go into the course, it’s again <strong>broken down into very easily digestible chunks</strong> such as “Common Designer Roles”, “Atomic Design by Brad Frost” and “Design Grids”.</p>
<p>This structure provides the best of both worlds. It gives you both the freedom to explore and the structure to be guided further.</p>
Am I Really Making Progress?
<p>My favorite way to learn something new has always been to apply it to a side project. This complements the courses in Uxcel very well as having little side projects you can apply the lessons learned in the courses will help to cement the knowledge, and you’re likely to see the difference when measuring your progress each month.</p>
<p>Unfortunately, side projects can feel like a disappointment. I start a new project thinking it’s a great idea, and I then realize how much time I’ve spent on something that no one else will ever see. It’s easy to feel disheartened by this and feel like these projects have been a waste of time. I know I’m not the only one!</p>
<p>To change this mindset, I’ve been going through old projects and making notes of what I learned from them. In theory, I would write an in-depth case study each time. But that hardly ever happens, So <strong>setting a goal of a few bullet points for each project</strong> is much more achievable and helps to see the benefit from the effort I’ve put in over time.</p>
<p>I noticed a similar approach with Uxcel. The monthly skill tests are just like my bullet points; a low-pressure way to check in with your progress without high expectations. I see there being two kinds of progress to test and measure: specific goals that you have a strong focus on, and general stuff that you learn as you go. I often had specific goals for the side projects, but even if I didn’t achieve those goals, I was still able to find benefits from looking at the things I did learn, even if I had not intended to.</p>
Learning Through Play
<p>Children learn everything from coordination to social skills through play. It is interesting to see a platform that specializes in self-development have a section of these games in their navigation alongside Courses, Skill Tests and Job Board. Uxcel treats games as a first-class citizens on their platform.</p>
<p>In fact, gamification is a key part of Uxcel across the entire platform. In the skills tests, it doesn’t tell you which answers you got wrong but it does say how you compared against everyone else. I have to admit, as a developer that has always had an informal interest in design, to be placed in the “top 10% of designers” (<em>humble brag!</em>) is rather motivational!</p>
<p>What makes these games useful? They are specifically targeted at practical skills that will benefit you as a web designer. And so it comes back to the second pillar “<a href="#2-test-and-measure-your-design-knowledge">Test and measure your design knowledge</a>”; having these informal games that you can play as often as you want means there’s a way for you to continuously test and measure yourself on these hyper-focussed practical tasks. It’s great to understand the theory of design, but you need to be able to <strong>put it into practice</strong> and these small games give you practice for skills that you will be using time and time again.</p>
<p>Another key point is that it’s fun and challenging; there’s something healthily addictive about trying to get a high score in comparing color contrasts.</p>
Getting Hired
<p>The <a href="#3-build-your-professional-profile-and-get-hired">third pillar</a> is to build a professional profile and to make it easier to be hired. I considered skipping this pillar entirely — thinking it is not related to learning. I’ve come to the realization that this isn’t true. One main reason for learning is to improve your career. If I look back at things I’ve learned over time, I can see a clear correlation between the stuff I focussed on learning and the roles I later got because of it.</p>
<p>Uxcel understand this. While it may not be as simple as “Course + Test = Job”, the platform is organized in such a way that your profile is being updated as you go through the courses and skill tests. Without even necessarily realizing it, you’re building a picture that shows the <strong>things you are focusing your time on</strong>. You’re building your professional profile — you’re breaking out of the Catch-22 situation. Say, for example, you’ve been working in a visual design role but want to move into a UX role. You can use this profile as a way to prove that alongside your work experience, you also have a keen focus on UX.</p>
<p>No matter where you are in your career, the idea of <strong>using stepping stones to plan your journey</strong> is important. Seeds that can be sown, knowing where you want to get to and how you can go about it. Learning and career improvement is intrinsically related.</p>
Learning As A Team
<p>Taking it a step further, Uxcel provides tools for companies to use Uxcel within their teams. Many companies already use a Skill Matrix to see which areas of knowledge and experience are well covered within the team and how it’s distributed across members.</p>
<p>If a team of designers is using Uxcel as a learning platform, then it gives a consistent approach to managing this skill matrix as the strengths and weaknesses can be easily measured. This is not to judge employees but to assist in the development of skills across the team.</p>
In Conclusion
<p>Building a career will always be hard, but we’ve seen that by applying a focus on how we learn, we are able to give ourselves the best possible start. This is true for anyone with an ambition of improving their skill set, no matter how far along the journey you already are. Uxcel has a clear vision for its platform; the three pillars are being implemented in everything they do. This is something we can take forward ourselves, whether using the platform or not. <strong>The key is to make purposeful choices</strong>, have a structure to fall back on, put the effort in, and measure our progress throughout.</p>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Shane Hudson)</author>
      <enclosure
        url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b8593a84-fd4c-4a38-bb35-9211dcde51d4/improve-measure-progress-learning-web-design.jpg"
        length="0" type="image/jpg"/>
    </item>
    <item>
      <title><![CDATA[What Makes A Great Toggle Button? (Case Study, Part 2)]]></title>
      <link>https://smashingmagazine.com/2022/08/toggle-button-case-study-part-2/</link>
      <guid>https://smashingmagazine.com/2022/08/toggle-button-case-study-part-2/</guid>
      <pubDate>Mon, 29 Aug 2022 14:00:00 GMT</pubDate>
      <description>
        <![CDATA[The problem of how to design an effective toggle button that shows the selected option clearly is a long-term open question among UI/UX designers. In this second part, Eduard Kuric explains a complex list of visual cues used by toggle buttons to communicate which of their options is active.]]></description>
      <content:encoded><![CDATA[<p>In the <a href="https://www.smashingmagazine.com/2022/08/toggle-button-case-study-part-1/">first article of this two-parter</a>, we have covered a crucial yet unresolved problem in UI design concerning toggle buttons. Getting across which option is active isn’t easy. There are many visual cue types to choose from: font style, colors, and outlines, just to name a few. To assess which visual cues communicate effectively the option toggled on, we have conducted a thorough case study with over 100 real users and 27 visual cues. Read on to learn about our findings and their implications to take away when designing toggle buttons of your own.</p>
Case Study Results
<p>Let’s see what we found out about effective ways to put an emphasis on a button to make it clear that it’s active. But first, a quick summary of our participants.</p>
<h3>Participant Review</h3>
<p>After our data collection was completed, we first had to review the quality of participants in our study. This review has led to the disqualification of some participants, mainly those who have shown signs of choosing the answers at random 50-50, a clear sign of not making an effort to complete the tasks genuinely. After we removed these offenders, we were left with the following numbers of participants per study:</p>
<table>
    <thead>
        <tr>
            <th>Study type:</th>
            <th>5-Second Test</th>
      <th>20-Second Test</th>
        </tr>
    </thead>
    <tbody>
        <tr>
      <td><strong>Group:</strong></td>
            <td>1</td>
      <td>2</td>
      <td>1</td>
      <td>2</td>
        </tr>
        <tr>
      <td><strong>Number of participants:</strong></td>
            <td>28</td>
      <td>29</td>
      <td>30</td>
      <td>27</td>
        </tr>
    </tbody>
</table>

<p><strong>Note:</strong> <em>These numbers are still higher than the number of results that we set out to collect as the minimum since we accounted for a dropout rate of up to 16% while launching our recruitment online.</em></p>
<h3>Metric For Comparing Utility Of Visual Cues</h3>
<p>We conducted four studies with the tool <a href="https://www.uxtweak.com/five-second-test-tool"><strong>Five Second Test</strong></a>. Two with a 5-second time limit and two with a 20-second limit. We needed a metric that could objectively compare toggles to each other and how a specific toggle fared in 5-second and 20-second test variants.</p>
<p>We created a weighted metric, which we named the Success-Confidence score. The Success-Confidence score is derived from the number of correct answers (according to expectations) combined with the Likert scale answers to the question: “How sure do you feel about your answer?”</p>
<p>First, we calculate the average confidence for correct and incorrect answers separately and for every toggle. Average confidence can range from 0 to 1 based on how participants answered the Likert scale question. For example, if every respondent who chose the correct toggle side were to respond with “Absolutely sure” on the Likert, the average confidence for the correct answers for the given toggle would be 1.</p>
<p>We then used the calculated average confidence for correct and incorrect answers and calculated the Success-Confidence score of the toggle by using the following formula:</p>
<div>
 <pre><code>Success-Confidence score = (correct_num <em> correct_conf) - (incorrect_num </em> incorrect_conf)

correct_num -&gt; number of correct answers

incorrect_num -&gt; number of incorrect answers for toggle

correct_conf -&gt; average confidence with correct answers

incorrect_conf -&gt; average confidence with incorrect answers
</code></pre>
</div>

<p>Since we had different numbers of participants available for each test, we normalized the Success-Confidence score by dividing it by the total number of participants for the given test. Resulting in the following formula:</p>
<p><strong>Normalized Success-Confidence score = Success-Confidence score / number of participants</strong></p>
<p>The scale of normalized Success-Confidence score is -1 to 1. Minus 1 designates a toggle where all participants provide wrong answers with high confidence, and 1 designates a toggle where all respondents answer correctly with high confidence.</p>
<h3>Evaluation Of Research Questions</h3>
<h4>RQ 1: Bold text</h4>
<p>A low error rate of 1.7% and a high Success-Confidence score of 0.86 confirmed our expectation that emboldened text in a toggle button makes options perceived as active compared to regular text. This version of the toggle even performed well enough to earn the <strong>third best average rank among all the evaluated toggles</strong>. Based on this result, we can safely pronounce bold text in the active button as a functional yet simple solution for communicating which toggle option is selected. This knowledge should be particularly useful if all your toggle buttons use fonts of equal weight, as is often the case.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c25a5cfa-a520-4a26-b076-dce65f6d1e9a/1-toggle-button-case-study-part-2.png" /></p>
<h4>RQ 2: Text size</h4>
<p>We tested four toggles with varying size differences between the text in the active and inactive buttons. As predicted, the toggle where the font size difference was barely noticeable performed the worst with an error rate of almost 15% and a confidence score of only 0.63. Compared to that, the toggle with the greatest difference in font size was perceived with an error rate of only 4.4% and a confidence score of 0.81, which are both significant improvements when compared to the smallest difference. The performance of the two middle toggles was set between these two extremes. Unexpectedly, the toggle with the second smallest difference slightly outperformed the toggle with the second greatest difference. However, this irregularity is small enough to be explained by noise in the data.</p>
<p>Since the performance rate grew in general with the font size, our expectation of “greater size difference means better visual cue for toggles” was confirmed. However, since using a significantly bigger font to represent the active state can prove to be visually unappealing, we suggest using bold text instead. <strong>Bold text is not only easier to include in your design, but also performs better.</strong></p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5482070e-3e62-4931-a428-9fdd2a63f2c7/2-toggle-button-case-study-part-2.png" /></p>
<h4>RQ 3: Contrast of inverted colors in text labels</h4>
<p>The black &amp; white and orange &amp; blue inverted color combinations proved to be some of the worst performing toggles we’ve tested, with error rates of 19.3% and 23.7% and confidence of only 0.56 and 0.41, respectively. The low confidence levels suggest that even the respondents who managed to select the correct answer weren’t confident at all in their answers. Our prediction of the darker colors perceived as active was confirmed by the error rate of less than 0.5 in both cases. However, the low confidence deteriorates the strength of the lower error rates. This means that our hypothesis that inverted font colors are an ineffective visual cue was confirmed. Try to avoid using colors of the same visual importance, as also seen in research question number 8 which concerns toggle backgrounds.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5d6c14b6-d5e1-43c5-95c5-db495a7af9ae/3-toggle-button-case-study-part-2.png" /></p>
<h4>RQ 4: Cultural perception of red vs. green in text labels</h4>
<p>A seemingly surprising (although not completely unexpected) result came from the toggle with red and green text. The error rate for this toggle is 32.5% and confidence only 0.32, making it one of the worst performing toggles overall, with an average rank of  24.67. This result suggests that the red/green combination not only fails to improve the results compared to other color couples but actually makes it worse. The possible explanation could be that the green color was perceived as a switch, not a sign of an active state. Red-green colorblindness is also the most common type of color vision deficiency, which is reason enough not to use this visual cue, as wrong answers in our experiment also reflect.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e212e571-f160-45f1-9ba2-0428c2685abe/4-toggle-button-case-study-part-2.png" /></p>
<h4>RQ 5: Color vs. black/white in text labels</h4>
<p>The combination of colorful and white labels performed well (avg rank of 9.33). The toggle which was surprisingly problematic was the combination of color and black. This toggle with an error rate of 14% and confidence of only 0.59 shows that the participants weren’t able to pick the active side reliably. We predict that this phenomenon was most likely caused by the visual strength of black text compared to colored text, regardless of hue. Therefore, simply distinguishing active and inactive toggles by turning inactive black text colorful isn’t recommended. For better color-based approaches, simply continue reading our findings for the next research questions.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8c9f413c-4649-4a7e-93c7-e934332f6442/5-toggle-button-case-study-part-2.png" /></p>
<h4>RQ 6: Primary color vs. neutral color (shades of gray) in text labels</h4>
<p>Compared to the toggles from the immediately preceding research question, this toggle represents a middle ground between the white and black inactive options with its gray color. This was reflected in the resulting average rank of 12, which is better than the color vs. black option, but worse than color vs. white.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/11d851c3-1318-433f-820c-d12eea109214/6-toggle-button-case-study-part-2.png" /></p>
<h4>RQ 7: Different saturation of the same color in text labels</h4>
<p>The last text color variant of toggles we tested also confirmed our theory. The difference in saturation was a strong enough cue to secure satisfying results (an error rate of 8.7% with a confidence of 0.77). This suggests that the respondents reliably selected the correct option. Note that while the error rate was comparable to primary vs. neutral color, different saturations of the same color inspired higher confidence. Therefore, the preferable option is to use a lower saturation of the same color instead of greyscale for inactive toggle buttons.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5652dc62-f6fa-4d36-858d-2cb99e634705/7-toggle-button-case-study-part-2.png" /></p>
<h4>RQ 8: Contrast of inverted colors in the background and RQ 9: Cultural perception of red and green in the background</h4>
<p>The toggles defined in these hypotheses were counterparts to the toggles from hypotheses 3 and 4. We kept the color pairs the same, but this time we filled the toggle’s backgrounds with the color instead of coloring the text. The results with background colors followed the same pattern as with the text, with the black-&amp;-white combination performing the best, the orange-&amp;-blue coming second and red-&amp;-green taking last place. However, compared to the colored text variants, the filling variants performed better than their text alternative (error rate improvement by 5-8%).</p>
<p>What may seem counterintuitive at first is that although black-&amp;-white filling has a stronger potential to stimulate confusion due to dark/light mode settings, it still performed better than black-&amp;-white text alternative or inverted colors with hue. How a light/dark mode setting would affect the results for this specific toggle could bear further investigation. However, for building an optimal toggle, it might be unnecessary, considering the overall better results achieved by other types of toggle backgrounds.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b717b094-8964-4ba3-8e9b-222ce3a02c4a/8-toggle-button-case-study-part-2.png" /></p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/62a51bb2-fe44-489d-a054-5ec0c489e437/9-toggle-button-case-study-part-2.png" /></p>
<h4>RQ 10: Different saturations of the same color in the background</h4>
<p>Different shades of orange achieved an error rate of 9.7% and a normalized Success-Confidence score of 0.72. Compared to that, different shades of gray had an error rate of 15% and a normalized Success-Confidence score of 0.63 for the gray toggle — both overall decent scores which proved these visual cues as usable. The improvement of the orange color over the greyscale variant has been significant (resulting in an average rank of 13.67 compared to 18). It is important to note that even though the orange variant performed better than the gray one, their performance was still average at best. If background colors are used in this form, we recommend combining them with another visual cue.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/078c3e9b-715d-4719-ae51-997562b8c451/10-toggle-button-case-study-part-2.png" /></p>
<h4>RQ 11: Saturated colors and grayscale colors in the background</h4>
<p>As expected, the version where the inactive button was a lighter shade of gray performed better (6.1% error rate and 0.79 confidence) than the darker gray version (12.3% error rate and 0.66 confidence). It also outperformed the orange version from hypothesis 10 and overall performed well, earning the average rank of 6.67 (sixth best). The more saturated version was placed in the bottom half but still managed to outperform the grayscale version from hypothesis 10 (average rank 15 compared to 18). The results of these two hypotheses suggest that if we want to use a saturated color fill to denote activity, it is best coupled with low saturated gray.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b4ae8dcf-d419-4f23-9727-f2812e8b4bf0/11-toggle-button-case-study-part-2.png" /></p>
<h4>RQ 12: Inverted design of buttons</h4>
<p>We believed that the inversion of design would be more confusing to the users than the saturations described in hypotheses 10 and 11. With a 6.1% error rate and 0.78 Success-Confidence score, this toggle ranks just below the best saturation variant (saturated color and less saturated gray), scoring seventh place overall with an average rank of 7.33. However, it is important to note that this toggle performed significantly worse in the 20-second test compared to the 5-second test (a drop of 9 between the rankings). This can be explained by the fact that the half with the filled background (the correct one to pick) lures the user’s attention very quickly (resulting in better performance on a 5-second test). However, when the user is provided with a longer time to observe the toggle, they start to question their instincts, resulting in a more than doubled error rate (from 3.5% to 8.8%). Therefore, we recommend avoiding inversion of toggle buttons in favor of visual cues that avoid potential confusion and don’t highlight the inactive button in any way.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4c60ae1f-fe33-40d7-8757-6b03994e8389/12-toggle-button-case-study-part-2.png" /></p>
<h4>RQ 13: Highlighted outline of the active button</h4>
<p>As expected, the highlighted outline provided a reliable cue for respondents to decide (8.8% error rate and 0.76 Success-Confidence score). The average rank of 10 puts this toggle in the top half of toggles performance-wise. Due to being outperformed by other visual cues, a combination with another cue is recommended for better visual clarity.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8808f412-adad-4857-b14f-85d3d68bd7c5/13-toggle-button-case-study-part-2.png" /></p>
<h4>RQ 14: Inactive button coincides with the background</h4>
<p>Another exciting result. Although we suspected that the respondents could have problems perceiving the inactive button as a button at all, this toggle achieved stellar results. With an error rate of only 0.9% and confidence of more than 0.89, it ranked first overall with an average rank of 1.33, which is an improvement over the simple saturated color vs. grayscale toggle seen in RQ11. This means that having the inactive button of the same color as the surroundings is a supreme way to communicate selection in a toggle button.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/170e853d-e235-4aba-bfc8-c17f105a0b63/14-toggle-button-case-study-part-2.png" /></p>
<h4>RQ 15: Embossed vs. debossed button</h4>
<p>The error rate for both embossed toggles was 83.3% and the confidence score was the same as well with -0.58. This means that chasing skeuomorphism isn’t always the right solution, at least when it comes to toggles.</p>
<p>We expect this result is due to the common use of embossing effects in digital interfaces to bestow more weight on interface elements. A toggle with more visual weight would be perceived as active. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/267b152d-67da-49b1-80bf-9b9294e37953/15-toggle-button-case-study-part-2.png" /></p>
<h4>RQ 16: Check sign</h4>
<p>As expected from its straightforward nature, the check sign icon added to an active button in a toggle performed very well, achieving the <strong>second best average rank</strong> of 2.33 with only a 5% error rate on Success-Confidence score of 0.86. The only problem we see in choosing this toggle is its potential cumbersome inclusion in the design of the web, and it may induce unwanted connections with checkboxes.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/88067f25-e570-470b-80a0-92849dfdfa5d/16-toggle-button-case-study-part-2.png" /></p>
<h4>RQ 17: Radio button</h4>
<p>Even though the nature of the radio button toggle is similar to the check sign design, when used as an icon, its meaning is less explicit. This was confirmed by achieving a worse average rank of 5.67 and a higher error rate of 9% combined with a lower Success-Confidence score of only 0.8. Despite the rather good performance of this visual cue, using radio buttons as toggles doesn’t align with their semantics since the radio buttons are meant to be used in forms, while toggles are meant to signify an immediate change of state. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d67cef10-3ebb-4ceb-b542-1233ed888266/17-toggle-button-case-study-part-2.png" /></p>
<h3>Ranking The Visual Cues</h3>
<p>We ranked the visual cues represented by toggles separately for the results they achieved in 5-second tests, 20-second tests, and the two combined. This resulted in 3 separate rankings. We calculated the average rank for every toggle and came up with the three worst and three best toggles.</p>
<h4>Worst Toggles</h4>
<p><strong>Third last place — Toggle #9 — Red &amp; Green Text Labels</strong></p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b40eb4d0-dc8d-428e-b17a-95e1a3378640/18-toggle-button-case-study-part-2.png" /></p>
<ul>
<li><strong>Average rank: 24.67</strong></li>
<li>5-second test rank: 25</li>
<li>20-second test rank: 24</li>
<li>Combined rank: 25</li>
</ul>
<p><strong>Second last place — Toggle #22 — Embossed button (no shadow version)</strong></p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e560dcb0-9890-4c82-9e14-2ec8eda09335/19-toggle-button-case-study-part-2.png" /></p>
<ul>
<li><strong>Average rank: 26.33</strong></li>
<li>5-second test rank: 27</li>
<li>20-second test rank: 26</li>
<li>Combined rank: 26</li>
</ul>
<p><strong>Last place — Toggle #27 — Embossed button (shadow version)</strong></p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8f38454c-f56b-4fad-b06b-254aea788952/20-toggle-button-case-study-part-2.png" /></p>
<ul>
<li><strong>Average rank: 26.67</strong></li>
<li>5-second test rank: 26</li>
<li>20-second test rank: 27</li>
<li>Combined rank: 27</li>
</ul>
<h4>Best Toggles</h4>
<p><strong>Third place winner — Toggle #2 — Bold text</strong></p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/16175d5b-ae00-48a8-9c9a-9a567b10b5b6/21-toggle-button-case-study-part-2.png" /></p>
<ul>
<li><strong>Average rank: 2.67</strong></li>
<li>5-second test rank: 4</li>
<li>20-second test rank: 2</li>
<li>Combined rank: 2</li>
</ul>
<p><strong>Second place winner — Toggle #24 — Check sign</strong></p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/88067f25-e570-470b-80a0-92849dfdfa5d/16-toggle-button-case-study-part-2.png" /></p>
<ul>
<li><strong>Average rank: 2.33</strong></li>
<li>5-second test rank: 1</li>
<li>20-second test rank: 3</li>
<li>Combined rank: 3</li>
</ul>
<p><strong>First place winner — Toggle #26 — Inactive button coincides with the background</strong></p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/170e853d-e235-4aba-bfc8-c17f105a0b63/14-toggle-button-case-study-part-2.png" /></p>
<ul>
<li><strong>Average rank: 1.33</strong></li>
<li>5-second test rank: 2</li>
<li>20-second test rank: 1</li>
<li>Combined rank: 1</li>
</ul>
<h3>Difference between the 5-second and 20-second test</h3>
<p>Our secondary goal was to learn the difference in perception of toggles based on the time the respondents had to observe them, before deciding on an answer. Our expectation was that the result from the 20-second tests should be better overall (lower error rate and higher confidence score) than the results of the 5-second tests since the participants would have more time to think about the toggles in front of them.</p>
<p><strong>We have calculated the average values and the results can be seen in the following table:</strong></p>
<table>
    <thead>
        <tr>
            <th>Test type</th>
            <th>Average error rate</th>
      <th>Average n. confidence score</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>5-second test</td>
            <td>0.1728</td>
      <td>0.5749</td>
        </tr>
        <tr>
            <td>20-second test</td>
            <td>0.1670</td>
      <td>0.6013</td>
        </tr>
    </tbody>
</table>

<p>The results confirmed our expectations since the average error rate was lower in the 20-second tests and the Success-Confidence score was higher. However, these differences were not significant. What interested us was whether any specific toggles showed significant differences between the two test variants. Therefore we focused on toggles that showed the biggest improvements/deteriorations between the 5-second and 20-second test results.</p>
<h4>Toggles that performed better after 20 seconds</h4>
<p>The greatest improvement in the number of ranks gained between a 5-second and a 20-second test is shared between toggles #4, #11, and #18 seen below. They all gained 6 ranks once participants had more time to observe them. This signifies that the clarity of the cues improved with added observation time.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c07bbbf2-1ec9-4abe-910a-a9da4e89428c/24-toggle-button-case-study-part-2.png" /></p>
<ul>
<li>5-second test rank: 16</li>
<li>20-second test rank: 10</li>
<li>Error Rate Difference: -0.0527</li>
<li>Normalized Success-Confidence Score Difference: 0.0913</li>
</ul>
<p>This visual cue had the second smallest font size difference between the active and inactive states. We believe the change in rank is due to some participants needing time to notice smaller font size differences. However, the difference was noticeable enough to matter when the additional time was added to the test. </p>
<p>The next two toggles have enough in common for us to analyze them together.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c58f4d02-b34d-41fc-b0c5-15a2e8a08e81/25-toggle-button-case-study-part-2.png" /></p>
<ul>
<li>5-second test rank: 12</li>
<li>20-second test rank: 6</li>
<li>Error Rate Difference: -0.0526</li>
<li>Normalized Success-Confidence Score Difference: 0.0912</li>
</ul>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f6383b3b-c5bf-4166-b7a1-285b34f68f93/26-toggle-button-case-study-part-2.png" /></p>
<ul>
<li>5-second test rank: 17</li>
<li>20-second test rank: 11</li>
<li>Error Rate Difference: -0.0526</li>
<li>Normalized Confidence Score Difference: 0.0772</li>
</ul>
<p>Both these cues were designed in a way that the more pronounced/saturated color denotes the active option while the inactive option is portrayed by a lighter color. The difference in results shows that a certain percentage of users initially view a lighter color as the more pronounced one. However, the percentage decreases when users spend more seconds thinking about the toggle. To make a toggle that is easy to comprehend right away, an interface designer should probably look at the other visual cues.</p>
<h4>Toggles that performed worse after 20 seconds</h4>
<p><strong>Toggle 15</strong></p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f36d4edf-f168-4c03-9f6a-96bb0907f48a/27-toggle-button-case-study-part-2.png" /></p>
<p><strong>Toggle 17</strong></p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/93acc796-7bc7-475e-a946-3fa33b7b3f8f/28-toggle-button-case-study-part-2.png" /></p>
<table>
    <thead>
        <tr>
            <th>Toggle Number</th>
            <th>5-second test rank</th>
      <th>20-second test rank</th>
      <th>Error Rate Difference</th>
      <th>N. Confidence Score Difference</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>15</td>
            <td>11</td>
      <td>19</td>
      <td>0.0526</td>
      <td>-0.1018</td>
        </tr>
        <tr>
            <td>17</td>
            <td>15</td>
      <td>21</td>
      <td>0.0877</td>
      <td>-0.1299</td>
        </tr>
    </tbody>
</table>

<p>Toggle 15 showed the biggest drop in rank, while toggle 17 suffered the most significant negative changes in error rate and confidence score.</p>
<p>We explain the drop in these two by the fact that these two toggles are similar in a way — both have a dark and a light half — which means they would be perceived differently, for example, when using the light mode versus dark mode setting on a mobile device. While the user’s instinctive reaction may be to pick the darker color as active, given some time, more people will begin to second-guess themselves. Instead of the darker color capturing their gaze, they may start overthinking that the brighter color is highlighted against the dark. A good toggle shouldn’t encourage such doubts.</p>
Potential For Future Research
<p>All the cues we tested in our study were simple/singular. Going from here, the natural next step for research would be to go deeper, with a study that focuses on evaluating our findings in more detail: <em>Can I use a bold font in an inactive toggle button if the inactive button is even bolder? Will the combination of visual cues perform better than either cue individually?</em> While the answers may seem intuitive, research data may prove otherwise, as our study has shown.</p>
<p>Another next step would be testing the effect of color alterations. Would the saturation of green work just as well as the saturation of orange?</p>
<p>Testing the performance of visual cues in prototypes of website navigation using different color schemes is another ambitious area for continued research. We tested our toggles in the void, but it’s possible that their performance would vary depending on the visual context.</p>
Conclusion
<p>In this article, we described our research where we analyzed a complex list of visual cues used by toggle buttons to communicate which of their options is active. By testing our research questions with real users, we collected a respectable amount of data to make reliable statements about the effectiveness of visual cues.</p>
<p>Here are some of the main points we arrived at that you should keep in mind when designing your next toggle button:</p>
<ul>
<li>If you choose to use <strong>color</strong> as the main lead, we suggest you <strong>use a combination of a saturated lively color</strong> (ideally corresponding with your CTA color scheme) <strong>and a light grayscale neutral color</strong>. Using the colors in the toggle’s background fill is preferable to using colored text. If the color of the inactive button is the same as the surrounding background, this will further improve the button’s comprehensibility.</li>
<li><strong>Contrasting colors of similar visual weight should not be used under any circumstances</strong>. Red and green’s cultural perceptions won’t help you communicate what’s selected. There are much better ways to go about this. Be wary of the black and white combination as well. Toggles that use this color scheme are the ones most prone to the confusion rooted in the dark/light mode settings.</li>
<li>You may choose a minimalistic path and use the <strong>font</strong> itself to show the difference between button states. The <strong>bold-thin combination is the go-to solution</strong>, but you may also use different font sizes. Just make sure to differentiate the font sizes well enough. Using font-weight or size is recommended to support other visual cues as well since it’s very flexible.</li>
<li>If you decide to use embossment as the main cue — you really shouldn’t. It proved to be unreliable at communicating the active state of a toggle. Even a simple border was more effective. If you decide to use embossed toggles for their visual appeal, we suggest combining embossment with a primary visual cue, such as bold text or color fill. </li>
<li>There’s no shame in using designs that you are sure will work. A tick or a radio-button icon both performed very well. The evident drawback of choosing them is the cumbersome inclusion in the design of your web since radio buttons as UI elements serve a different function from toggles. The ticks could be perceived as outdated (akin to a physical form more than a website). As for radio button icons, you might as well use a radio button instead.</li>
</ul>
<p>Follow these tips, and your toggle button designs will no longer cause users to hesitate about what’s selected at the moment. </p>
<h3>Resources</h3>
<ul>
<li>“<a href="https://uxmovement.medium.com/why-toggle-buttons-are-confusing-544e3e46ec1d">Why Toggle Buttons Are Confusing</a>”, UX Movement</li>
<li>“<a href="https://www.behance.net/gallery/70302039/History-Of-Toggle-UIUX-Case-Study-UI-Samples">History Of Toggle + UI/UX Case Study + UI Samples</a>”, Ramulu Nelli</li>
<li>“<a href="https://uxmovement.com/mobile/stop-misusing-toggle-switches/">Stop Misusing Toggle Switches</a>”, UX Movement</li>
<li><a href="https://www.youtube.com/watch?v=wFWbdxicvK0">1991 Video Of The HCIL Touchscreen Toggle Switches (University of Maryland)</a></li>
<li>“<a href="https://www.researchgate.net/publication/317182817_What’s_the_Most_Effective_Way_to_Present_Two-State_Toggle_Buttons">What’s The Most Effective Way To Present Two-State Toggle Buttons?</a>”, Thomas Tullis, Azilah Iskandar, Lori Ledoux</li>
<li><a href="https://www.uxpin.com/studio/ebooks/color-theory-web-ui-design-practical-principles/">Color Theory In Web UI Design</a></li>
<li><a href="https://www.uxtweak.com/">UX Research Tools</a></li>
</ul>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Eduard Kuric)</author>
      <enclosure
        url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3d25c3a9-5cbd-44e2-9c8c-742d35c261ee/toggle-button-case-study.png"
        length="0" type="image/png"/>
    </item>
    <item>
      <title><![CDATA[Designing Better Error Messages UX]]></title>
      <link>https://smashingmagazine.com/2022/08/error-messages-ux-design/</link>
      <guid>https://smashingmagazine.com/2022/08/error-messages-ux-design/</guid>
      <pubDate>Thu, 25 Aug 2022 15:00:00 GMT</pubDate>
      <description>
        <![CDATA[Error messages need to be easy to spot, but they also need to be helpful. Let’s explore when error messages should live above input fields and why toast error messages are usually not a very good idea.]]></description>
      <content:encoded><![CDATA[<p>When we design interfaces, we rarely think about <strong>error messages</strong> first. After all, how much is there to design anyway? We highlight the error, display a message, and nudge users toward the correct input. As it turns out, a strategic and thorough design of these messages can be critical for businesses, especially if they struggle with high abandonment. Error messages can make or break the experience in situations when things go south.</p>
<p><strong>Errors are everywhere</strong>, and so are error messages. They are of course common in web forms, but also in complex tables, incompatible filters, search queries and failed interactions. They can be small error notes and large error summaries; short tooltips and lengthy toast messages. So, where do we start? From the beginning.</p>
<p>This article is <strong>part of our ongoing series</strong> on <a href="/category/design-patterns">design patterns</a>. It’s also a part of the upcoming <a href="https://smashingconf.com/online-workshops/workshops/vitaly-friedman-ux/">4-weeks live UX training</a> 🍣 and will be in our recently released <a href="https://smart-interface-design-patterns.com/">video course</a> soon.</p>

Not All Error Messages Are Equal
<p>Not all errors are the same. As Page Laubheimer <a href="https://www.nngroup.com/articles/slips/">has noted</a>, there are actually <strong>two different types of errors</strong>. <em>Slips</em> occur when users intend to perform one action but do another (e.g., when filling in a form on autopilot). <em>Mistakes</em> occur when there is a mismatch between the mental model of a user and the system. Our interfaces need to support both types of errors, and slips are usually much easier to resolve than mistakes.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0d39da57-e7a1-435e-80ff-f844f6908dc7/1-error-messages-ux.png" /></p>
<p>For <strong>slips</strong>, we can include helpful constraints (e.g. a reasonable width of a text box, <a href="https://design-system.service.gov.uk/components/text-input/#prefixes-and-suffixes">prefixes and suffixes</a>), provide recovery suggestions (e.g. autocomplete), choose reasonable defaults, and use forgiving formatting.</p>
<p>To prevent <strong>mistakes</strong>, we need to confirm destructive actions (when users go back to the previous page), set expectations early on (password requirements or file size), allow users to change their minds (change email or payment method), and in general, always provide a way out.</p>
<p>To measure the success of our error messages, we can define error-focused <a href="https://www.smashingmagazine.com/2022/04/boosting-ux-with-design-kpis/">design KPIs</a> and track them over time. These could include:</p>
<ul>
<li>the <strong>average number of mistakes</strong> in a user journey,</li>
<li>the error recovery time,</li>
<li>the completion rates, and
– completion times.</li>
</ul>
<p>We can’t really eliminate mistakes altogether since no human input can be bulletproof, but we can reduce the number of errors by <strong>making it more difficult to make mistakes</strong>. One simple way of doing so is to improve the discovery errors, by never relying on the color of error messages alone.</p>
Never Rely On Red Color Alone
<p>When we think of error messages, we almost subconsciously think of <strong>bold red text errors</strong>. That’s indeed a very established pattern, but often not enough to indicate to <em>all</em> users that something is wrong.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/717bc0b9-96d8-4c5d-9509-5d2d31f31659/2-error-messages-ux.jpg" /></p>
<p>Due to color vision deficiencies, it’s a good idea to <strong>always complement error messages with an icon</strong>, e.g., a large exclamation mark on a red background — right next to the error message. We can also highlight the entire section, along with the field, label, the hint, the error message and the input field. For example, a <strong>thick red vertical line</strong> next to the error message is a <a href="https://design-system.service.gov.uk/components/error-message/">common pattern for error messages</a> on Gov.uk.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/778c91d9-6e43-44f0-9df6-0c975b62c2e5/4-error-messages-ux.jpg" /></p>
<p>Sometimes the icon is displayed <em>inside</em> of the input field, on the right or on the left edge of the text box. When we display the icon on the right, users who zoom in and out might have difficulties spotting them. That’s why placing the icon <strong>on the left edge</strong> seems to be just a bit more reliable.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9c14c8de-d87a-438e-9051-4fe070706520/3-error-messages-ux.png" /></p>
<p>Additionally, it might be a good idea to guide users towards specific issues of the form with an <a href="https://design-system.service.gov.uk/components/error-summary/">error summary</a>. That summary can contain links to the areas in the form which contain errors, so users can jump there directly.</p>
<p>The summary can appear on the top of the page, or <strong>just above the action button</strong>, as displayed in the example above.</p>
<p>Most importantly, error summary probably shouldn’t appear <em>under</em> the action button. Too often, especially on mobile, users don’t realize that there is any error message at all, and keep clicking on that poor submit button hoping to get any kind of feedback — be it a status update from the browser, or a change of the URL. The feedback is actually there, under the button, yet in testing, it often shows <strong>very poor discovery rates</strong>.  </p>
<p>If the page is fully <em>refreshed</em> upon validation, the error summary should be at the very top of the page. But if the page is updated without a refresh, it’s reasonable to add the error summary just above the action button where the user has just clicked or tapped — and highlight it with the red color and icon as well.</p>
Avoid Auto-Scrolling and Auto-Jumps
<p>Once a user clicks on the submit button, should we <strong>automatically scroll</strong> them to the first error? There is no clear answer to that question. Personally, I saw this pattern working very well for some users, but failing miserably for others.</p>
<p>Any <strong>sudden movements</strong> on the page are likely to cause frustration with at least <em>some</em> users. If anything, users tend to find auto-jumps more annoying than auto-scrolling — as the latter at least communicates the direction of change and hints better at where users have moved to.</p>
<p>Short answer? <strong>Start without auto-scrolling</strong> and display just an error summary with links. If it’s too slow, or doesn’t work as expected, consider adding auto-scrolling. And by no means move users up and down the page for no obvious reason — that’s a safe way to increase completion times and introduce confusion when it’s probably not needed.</p>
Never Cover User’s Input
<p>When we display error messages, we convey to users that <strong>there is a problem</strong>; a good error message, however, also guides users to a solution. This, however, requires the ability to <strong>consult the error as the error is being fixed</strong>. In other words, users should be able to edit the input field while also reviewing the error message(s) provided to them.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ed8986e2-1924-454b-b3dc-d1ffa31fbf53/5-error-messages-ux.png" /></p>
<p>So far, so good. However, things become quite complicated once we also have a tooltip in play. Once a tooltip is open, users might lose sight of both the error message and the input. Should they desire to be able to see <strong>all three pieces of information at once</strong>, they’d be out of luck.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/859e2fd1-e20b-46a3-b77e-92dbb83bfd0f/7-error-messages-ux.png" /></p>
<p>However, we can fix it relatively easily. First of all, we avoid tooltips that open on hover and display the tooltip <strong>only once tapped or clicked</strong>. That means that a tooltip will never disappear automatically and must be closed manually.</p>
<p>Then, we use the <a href="https://design-system.service.gov.uk/components/details/">details component</a> and <strong>inline accordions</strong> as an alternative to tooltips. Hence, we make space for the content of the tooltip to expand between the label and the other content, so nothing will be covered. The error message would be visible at all times as well, next to the input field.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7727504e-8799-49af-a04b-35c092522b4d/10-error-messages-ux.png" /></p>
<p>This way, we show all three pieces of information at the same time — and <strong>users always have a choice</strong> to select what exactly they’d like to see. Is it too much? Maybe. But that’s a great option to keep in mind: at least to always display the input field and the error at the same time without them being covered by the tooltip.</p>
In Forms, Display Error Messages Above Input
<p>Now, this might sound a little bit confusing at first. Usually, error messages will be sitting conveniently <em>under</em> the input field, or perhaps — less frequently — on the right side of the input field. As it turns out, there are a few <strong>accessibility issues</strong> that come as a cost of these conventions. </p>
<ul>
<li><strong>Users of a magnifying software</strong> might miss the error message when it’s located on the right.</li>
<li><strong>On mobile</strong>, users might not be able to see the error message under the input because it will be <a href="https://adrianroselli.com/2017/01/avoid-messages-under-fields.html">covered by the virtual keyboard</a>.</li>
<li><strong>When editing input</strong>, error messages might be covered by the browser’s autofill or dropdown’s autocomplete suggestions.</li>
</ul>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e0ba87f7-87bf-43e8-abcc-80f7af45b294/12-error-messages-ux.png" /></p>
<p>Displaying error messages <strong>above input fields</strong> typically helps us avoid the accessibility issues listed above. The cost of it, though, is <strong>layout shifts</strong>: with every new error appearing dynamically, the entire form has to shift <em>vertically</em> as we need to make space for the error message to appear. It might be noisy, but sometimes that noise might be very much worth it.</p>
<p>For lengthy error messages, it might sound tempting to display them as a tooltip, yet with it come all the usability issues discussed in the previous section. Using a <strong>collapsible accordion</strong> instead might be a better idea there.</p>
In Tables, Display Error Messages Inline
<p>When displaying error messages in tables, it might be a good idea to consider alternative approaches as otherwise we would end up with a lot of <strong>layout shifts</strong> for each row.</p>
<p>One of the simpler patterns is to <strong>display the error message in the same row</strong> where the content lives. In that case, the error message is more likely to live <em>under</em> the input field, not above it. Lengthy error messages could be collapsed and expanded with a tap/click on the entire row.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a67ce375-ca97-4588-976e-558625acebd6/15-error-messages-ux.webp" /></p>
<p>If the same error <strong>affects multiple rows</strong>, we might want to <strong>highlight the rows</strong> that contain errors and display an error message at the very top of the page that would explain the error and what needs to be done to fix it.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5f55e9ff-6f36-4d92-af20-3641c42afa4e/16-error-messages-ux.png" /></p>

Don’t Rely On Toast Error Messages
<p>But what about good ol’ <strong>toast error messages</strong>? Those animated notifications, informing users about change of status of the system with <strong>floating messages</strong>. They might be uncommon for forms, but they frequently appear in tables and enterprise dashboards.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/83fc45a3-489d-47c3-b812-bda51fe3e353/13-error-messages-ux.png" /></p>
<p>There are a few common <strong>usability issues</strong> with toast error messages:</p>
<ul>
<li>Users often <strong>don’t get a chance to fully read or understand the error message</strong> before it has disappeared, and there is no way to restore it or keep it floating. </li>
<li>Toast messages typically <strong>appear on the edges of the screen</strong>, and usually, it’s quite <a href="https://www.nngroup.com/articles/errors-forms-design-guidelines/">far away from the problematic input</a> that has caused the error. There is quite a disconnect between the error message and the input, and it’s rarely possible to read the error message and correct the mistake simultaneously.</li>
<li>Lengthy toast messages <strong>usually block large areas of content</strong> that a user might be relying on — and potentially even the input that has caused the error.</li>
<li>Toast messages <strong>need to be announced to screen reader users</strong> while also allowing users to bring their focus back and forth between the error message and the erroneous input.</li>
<li>With toasts, we usually don’t have enough space to provide a detailed help using <strong>images or videos</strong>, and have to rely on plain text and links leading to external help pages that would usually open in a new tab.</li>
</ul>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/34c14248-2049-4612-be1f-fb09893bd54d/14-error-messages-ux.png" /></p>
<p>If anything, toasts should be <a href="https://www.benrajalu.net/articles/ux-of-notification-toasts">persistent if displaying information that can be acted upon</a>, and users should be able to <strong>manually dismiss</strong> the notification.</p>
<p>Personally, I’d definitely <strong>stay away from designing error messages as toasts</strong>, even if they are persistent. The better we can connect an error with its cause visually, the less likely it is to be overlooked. And the better we can explain how to solve that error close to the erroneous input box, the faster users will understand what they need to do.</p>

Allow Users To Override An Error Message
<p>We’ve all been there before: full of hope and passion, you type in your shipping address in an eCommerce checkout, willing to proceed with payment right away. Yet here it comes, an <strong>aggressive address validator</strong>, telling you that your address is wrong, and you better double check it. You have been living at that address for the last five years, yet for some reason, that’s not good enough for the address validator.</p>
<p>What options do you have? Unless you are willing to deliver the item to another address, this problem will likely cause a <strong>100% abandonment</strong> — an extremely high price to pay for a poor address validator. Surely you don’t want to deliver an item to non-existing addresses, yet you don’t want to abandon customers either. Indeed, it might be that only a small portion of customers will be affected by it, but why should we lose these customers either?</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/43df9fc1-8739-4397-9c4e-0d8bd8f2fe63/20-error-messages-ux.png" /></p>
<p>No single validation library is <strong>100% reliable and bulletproof</strong> for all the edge cases. Eventually some percentage of your customers will be left out there in the woods, trying to figure out what to do next to proceed.  <strong>Aggressive validators cost money.</strong> Especially when they come in tandem with <a href="https://www.smashingmagazine.com/2021/08/frustrating-design-patterns-disabled-buttons/">disabled buttons</a> that literally block users without telling them what exactly needs to be done to fix the issue. </p>
<p>For cases when a validator might be too restrictive, we can allow customers to <strong>override validator’s warning</strong>. Surely we will get some wrong addresses as a result of that. But as a business, we need to measure just <strong>how much money we are losing</strong> due to increase in service desk inquiries vs. how much money we gain by allowing people to find a way to proceed even although the interface doesn’t want to play along. More often than not, it’s worth it.</p>
<p>While this pattern works flawlessly for address input and telephone input, it probably won’t work for any input that needs to follow a particular convention — such as the length and checksum of an IBAN number or a credit card number. There, instead of giving customers a carte blanche, we need to <strong>meticulously check user’s input</strong> and guide them towards what exactly the problem seems to be.</p>
Establish Stop-Words For Your Error Messages
<p>Many error messages in most web applications are remarkably generic. They do indicate errors, but they aren’t very helpful in <strong>indicating solutions</strong> on how to fix these errors. Most of the time, these messages don’t really refer to the specifics of the user’s input. They provide a <strong>very general statement</strong> explaining that the input is wrong, with plenty of floral and cryptic words along with it.</p>
<p>In my personal experience, starting a project off by exploring and defining error messaging can be a very valuable exercise. If we can convey friendliness and personality while being concise and helpful in our error messages, we should surely be able to achieve the same in our navigation, body copy and form labels. In many ways, the way we write error messages can help us figure out just the right <strong>voice and tone of the entire design</strong>.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4bf8eceb-a0b9-49a8-b9eb-ea411cb0c291/19-error-messages-ux.png" /></p>
<p>Depending on your product’s voice and tone, you might want to be very strategic about how your error messages should sound. Here are some of the <a href="https://design-system.service.gov.uk/components/error-message/">stop-words</a> that Gov.uk tends to avoid in their interface:</p>
<ul>
<li><strong>technical jargon</strong> like ‘form post error’, ‘unspecified error’, and ‘error 0x0000000643’;</li>
<li>words like ‘forbidden’, ‘illegal’, ‘you forgot’, and ‘prohibited’;</li>
<li><strong>‘please’</strong> because it implies a choice;</li>
<li><strong>‘sorry’</strong> because it does not help fix the problem;</li>
<li><strong>‘valid’</strong> and <strong>‘invalid’</strong> because they do not add anything to the message;</li>
<li><strong>humourous</strong>, informal language like ‘oops’.</li>
</ul>
<p>The choice of words matters. It’s worth emphasizing that spending time and effort on crafting helpful, <a href="https://baymard.com/blog/adaptive-validation-error-messages">adaptive error messages</a> is probably <strong>one of the best investments</strong> a company might make to reduce abandonment and drive conversions.</p>
Provide Examples Of Correct Input
<p>Talking about the choice of words, how do we make it more helpful? And in general, what makes an error message helpful? For example, a clear set of guidelines of what a correct input is. That means adding a hint under the label and <strong>provide an example of correct input</strong>, so users understand how to re-route and what is expected from them.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/67a5294f-ca2c-4257-b544-4cdf2042bdc2/17-error-messages-ux.png" /></p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9c25d495-6043-4566-a664-946ab62e7654/18-error-messages-ux.png" /></p>
<p>Surely, sometimes adding an example <strong>might feel unnecessary</strong> and just taking up the space in design. I’d challenge you to tackle your conversion issues with well-crafted examples of corrent input. Often it’s the easiest way to improve conversion, as users otherwise just can’t find a way to make something work — even if it’s as simple as an extra empty space.</p>
Display Error Summary On The Top
<p><a href="https://adamsilver.io/blog/live-validation-is-problematic/">Inline validation deserves a separate conversation</a>. As an alternative approach, of course we could <strong>validate the form on submit only</strong>. But it doesn’t mean that we have to drive users from one page to a separate new page with all the errors displayed. We could display an error summary just next to the Submit button (as displayed below, sketched by <a href="https://twitter.com/jordanmoore/status/1250026238762266624">Jordan Moore</a>). It would probably be better to display the error message <em>above</em> the Submit button rather than below it to prevent it from being rendered below the bottom of the viewport and thus not to be visible (<em>thanks</em> <a href="https://twitter.com/rikschennink/status/1250030873426251776"><em>Rik</em></a><em>!</em>).</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/34f98ac4-a6de-4d04-bed0-16e27b2413e7/21-error-messages-ux.png" /></p>
<p>However, if there are a few problems with the form, we can also use an <a href="https://design-system.service.gov.uk/components/error-summary/">error summary component</a>. With it, we highlight the errors as links so that users can jump to them via the keyboard as well. While doing so, we need to <a href="https://www.aaron-gustafson.com/notebook/bring-focus-to-the-first-form-field-with-an-error/">bring focus to the first form field with an error</a>. Preferably with a bit of <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-margin-top">scroll-margin-top</a>, so screen reader users understand where they currently are.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ee71783f-a543-4f0f-9ddb-b150fc1134c5/22-error-messages-ux.png" /></p>
<p>Additionally, you might want to adjust the <strong>favicon and the title of the document</strong> if errors do appear, so impatient users who might have already left the form perhaps have a chance to return back and fix the errors, rather than assuming that everything has worked flawlessly.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e05689d2-7098-4036-abeb-5f39ef0f4a3b/23-error-messages-ux.png" /></p>
Wrapping Up
<p>At the first glance, dealing with error messages might not sound like a big deal. However, as we dive into fine details, there are <strong>plenty of considerations</strong> that might either cause high abandonment or help people resolve issues quickly.</p>
<p>Here’s a quick overview of what we can do to improve the Error Messages UX in our websites and applications:</p>
<ul>
<li>Define error-focused <a href="https://www.smashingmagazine.com/2022/04/boosting-ux-with-design-kpis/">design KPIs</a> by measuring the average number of mistakes in a user journey, the <strong>error recovery time</strong>, the completion rates, and completion times.</li>
<li>Never rely on the color of the error message alone, and <strong>use icons, borders, and section highlights</strong> to indicate erroneous input.</li>
<li><strong>Never cover user’s input nor the error message.</strong> Ideally, allow users to consult the error message, the tooltip, and their input at the same time, e.g., by using inline accordions and avoiding tooltips for important details.</li>
<li>Consider displaying error messages <strong>above input</strong> to avoid issues with auto-fill, autocomplete, magnifying software, and virtual keyboard.</li>
<li>Use inline validation for password strength meters, but not for validating every field as users type in. Consider breaking the form into small steps and validate each step only on submit.</li>
<li>For complex tables, <strong>don’t rely on toast error messages</strong> and display errors within rows where an error has occurred.</li>
<li>Be strategic about your <strong>error messaging</strong> and craft helpful messages that match the voice and tone of your brand, rather than being general and generic.</li>
<li>Always provide examples of correct input, especially for complex input that are less likely to be auto-filled.</li>
<li>Allow users to <strong>override your validators</strong> for address input and telephone input, but not for any input that needs to follow a particular convention.</li>
<li>When validating on submit, display an error summary on the top of the page, or guide users to an error in a popover. Also, change the favicon and the title of the document to communicate to users who’ve already left that something went wrong.</li>
</ul>
<p>With these guidelines, we should be better off when boosting our error messages UX. And if you can’t really do much around the way errors appear in your product, explore what you can do to <strong>replace generic error messages</strong> with helpful ones. This might be a small change with a huge impact that will eventually show up in large business KPIs dashboards.</p>
Meet “Smart Interface Design Patterns”
<p>If you are interested in similar insights around UX, take a look at <a href="https://smart-interface-design-patterns.com/"><strong>Smart Interface Design Patterns</strong></a>, our shiny new <strong>8h-video course</strong> with <strong>100s of practical examples</strong> from real-life projects. Plenty of design patterns, guidelines and a <a href="https://smashingconf.com/online-workshops/workshops/interface-design-course-vitaly-friedman/">live UX training</a> — with 5 new segments added every year. <em>Just sayin’!</em> <a href="https://www.youtube.com/watch?v=aSP5oR9g-ss">Check a free preview</a>.</p>
<a href="https://smart-interface-design-patterns.com/"><img src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7cc4e1de-6921-474e-a3fb-db4789fc13dd/b4024b60-e627-177d-8bff-28441f810462.jpeg" /></a>Meet <a href="https://smart-interface-design-patterns.com/">Smart Interface Design Patterns</a>, our new video course and <a href="https://smashingconf.com/online-workshops/workshops/interface-design-course-vitaly-friedman/">live UX training</a> all around interface design &amp; UX.

<div><a href="https://smart-interface-design-patterns.com/">Jump to the video course →</a></div>

<p>100 design patterns &amp; real-life
examples.<br />8h-video course + live UX training. <a href="https://www.youtube.com/watch?v=aSP5oR9g-ss">Free preview</a>.</p>

Useful Resources
<ul>
<li><a href="https://baymard.com/blog/back-button-expectations">Back Button Expectations</a>, Baymard Institute</li>
<li><a href="https://uxdesign.cc/design-with-the-web-in-mind-d9f9df2e8812">Designing With the Web in Mind</a>, Chloe Sanderson</li>
<li><a href="https://www.smashingmagazine.com/2018/02/designing-a-perfect-responsive-configurator/">Designing A Perfect Configurator</a></li>
<li><a href="https://www.smashingmagazine.com/2017/06/designing-perfect-accordion-checklist/">Designing A Perfect Accordion</a></li>
<li><a href="https://www.smashingmagazine.com/2022/03/designing-better-infinite-scroll/">Designing A Perfect Infinite Scroll</a></li>
<li><a href="https://www.smashingmagazine.com/2017/08/designing-perfect-feature-comparison-table/">Designing A Perfect Feature Comparison</a></li>
<li><a href="https://www.smashingmagazine.com/2017/07/designing-perfect-slider/">Designing A Perfect Slider</a></li>
</ul>
<h3>Related Articles</h3>
<ul>
<li>“<a href="https://www.smashingmagazine.com/2016/09/how-to-design-error-states-for-mobile-apps/">How To Design Error States For Mobile Apps</a>”, Nick Babich</li>
<li>“<a href="https://www.smashingmagazine.com/2021/02/designing-tooltips-mobile-user-interfaces/">Designing Better Tooltips For Mobile User Interfaces</a>”, Eric Olive</li>
</ul>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Vitaly Friedman)</author>
      <enclosure
        url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/93af7c7e-6484-4f47-9e79-fcf6aa24b3ce/better-error-messages-ux.jpg"
        length="0" type="image/jpg"/>
    </item>
    <item>
      <title><![CDATA[Better Video Streaming With imgix]]></title>
      <link>https://smashingmagazine.com/2022/08/better-video-streaming-with-imgix/</link>
      <guid>https://smashingmagazine.com/2022/08/better-video-streaming-with-imgix/</guid>
      <pubDate>Thu, 25 Aug 2022 08:00:00 GMT</pubDate>
      <description>
        <![CDATA[If you need to deliver a large number of images and videos, a solution like [imgix](https://imgix.com/?utm_medium=banner&utm_source=smashingmag&utm_campaign=video-api-smashingmag-article-2022-08) can optimize and process both types of assets without you having to build it from the ground up or cobble together different solutions. Let’s take a closer look at how.]]></description>
      <content:encoded><![CDATA[<p>This article is a sponsored by <a href="https://imgix.com/?utm_medium=banner&amp;utm_source=smashingmag&amp;utm_campaign=video-api-smashingmag-article-2022-08">imgix</a></p>
<p>Adding video to your website immediately adds value, but also a new level of complexity to your web development. Can I use the <code>&lt;video&gt;</code> tag? Do I need a JavaScript video player? What formats should the video be in for the best browser support? How do I account for different network speeds in different environments? How do I make sure that my videos will always play back with minimal buffering?</p>
<p>It sounds like a lot (and you might even consider throwing your hands up in the air asking, “Why don’t we just put it up on YouTube?”) This is a valid response — the more you dig into video and video delivery, more and more complexities arise that your developers will have to deal with.</p>
<p>For some, “toss it all on YouTube” might be an adequate solution to handle the complexities of video. But YouTube is based on ads and watching videos, and you probably don’t want an ad appearing in your mission critical content — even worse if it is an ad from your competition! Your goals with video delivery conflict directly with the goals of YouTube’s video delivery platform, making it a less than ideal solution for most enterprises. </p>
Does That Mean We Are Back To Square One?
<p>With the biggest (and cheapest) service removed from consideration, what are the best ways to solve all of the questions in the first paragraph? It is entirely possible to ‘build your own’ video platform, but this leads us back to complexities and pulling your development team away from core features to handle video delivery. From time to market, cost (and cognitive overhead), the best way to add video is to utilize a video streaming service. The great thing today is that you <em>can</em> use the same technologies used by Netflix or Hulu to deliver your videos.</p>
What Is Video Streaming And Why You Need Adaptive Bitrate Video
<p>Video streaming is the way that most video content is delivered on the web today. It features a number of advantages to just using a static video in the <code>&lt;video&gt;</code> tag.</p>
<p>The coolest feature that video streaming introduces is <strong>Adaptive Bitrate Video</strong>. Before adaptive bitrate video was developed, only one bitrate of the video could be delivered to the customer, regardless of the device or bandwidth environment. This solution is fine when network speeds are fast, but it can be problematic when network speeds are not fast (or fluctuate). And if there is one thing we all know — we cannot control the speed network our customers are using. </p>
<p>On a slow network connection, a traditional video will be very slow to start and very likely to stall. (Stalling is the video streaming term for the video stopping and a “spinner of death” appearing). Adaptive bitrate videos have multiple versions of the video available and can adapt to the network speed of your customer. That ensures that the video will start playback quickly and is much less likely to stall during playback — no matter the speed of your user’s internet connection.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3406e190-4aee-4548-9bd5-244f0a224f7d/video-file-requirements-imgix.png" /></p>
<p>If the network suddenly slows down, the player can also adapt (in the middle of the playback) and begin playing a lower bitrate version of the video. All of these features of adaptive bitrate streaming lead to a better video experience for your customers. It almost sounds like magic, but let’s look at the technology and how it works.</p>
<h3>HLS: The Magic Behind Smooth Video Streaming</h3>
<p>The industry standard for video streaming is HTTP Live Streaming (HLS). The term Live in the name is a little misleading. While HLS can be used to stream live video, HLS is primarily used for playback of recorded videos, and can be found powering many of the top streaming services.</p>
<p>So how does HLS video work? The first step occurs on video upload when the streaming service generates a number of copies of the video in different bitrates. Then, each copy of the video is sliced into short segments — usually about 5-10 seconds long. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/189d63d7-fe0e-4d75-b055-f86b0188a98f/smooth-video-streaming.png" /></p>
<p>During playback, the video player handles the download and playback of the video. If the rate of download begins to slow compared to the rate of playback — it is possible that the video might stall. So when the player requests the next 5-10 second segment of the video, it requests a lower bitrate version — since lower bitrates download faster, and the chance of video stall is mitigated.</p>
<p>This is the magic of the adaptive bitrate playback — the player adapts the video to meet the network speeds of each unique viewer of your content!</p>
<h3>You Mention A Player. Do Browsers Not Support HLS?</h3>
<p>HLS is not natively supported in many browsers (it does have native support in Safari). In order to play an HLS video, you’ll need a <a href="https://videojs.com/">JavaScript player</a> as a part of your site to play back the video.</p>
<h3>This Sounds Complicated</h3>
<p>With time and development, it is possible to build your own video streaming platform — delivering an incredible video experience by re-encoding the video to HLS and delivering a customized player to your audience. But, building a video encoding/streaming platform will take a lot of developer time, pulling the team away from building your product. This is why my recommendation is to use a video streaming platform.</p>
What Makes A Good Video Processing Solution?
<p>Outsourcing complicated problems to the experts is a smart idea — you’re hiring domain experts to handle the complicated things rather than tackling them yourself. So what are the features that you should look for in a video streaming solution?</p>
<ul>
<li><strong>Think of the advantages of HLS adaptive bitrate streaming</strong>.<br />If you’re paying for high-quality and robust video delivery, you want to make sure the best streaming solution is in place.</li>
<li><strong>Support conversion from all major file formats.</strong><br />Mp4 (h264 and 265), MOV, WebM, and others. Videos come in a myriad of formats; there’s no reason to convert to a new format before uploading.</li>
<li><strong>Your video streaming tool should fit into your existing media pipeline.</strong><br />The media solution should be able to find your videos in your current process — when videos are added to the cloud, they should be automatically processed into streams. </li>
<li><strong>An out-of-the-box video player.</strong><br />As discussed, HLS streams don’t play in all browsers. Does your solution include a customizable player that you can plug into your current website?</li>
<li>If you deliver both images and videos, you want a solution that includes an <strong>asset management dashboard</strong> that allows you to visualize and organize images and videos</li>
<li><strong>Last but not least, analytics.</strong><br />How many viewers have watched your videos, and how long was each view? You also want to see processing analytics on how many videos have been fully encoded.</li>
</ul>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/998552a2-2ca9-4f7c-b6a7-0ed571e663e1/imgix-video-streaming-requirements.png" /></p>
What Service Offers All Of These Features?
<p>imgix has recently <a href="https://imgix.com/solutions/video-api?utm_medium=banner&amp;utm_source=smashingmag&amp;utm_campaign=video-api-smashingmag-article-2022-08">released</a> a Video API that meets all of these requirements. Your videos are automatically encoded and streamed from any cloud folder — and with native support for AWS S3, Google Cloud and Azure, imgix can fit seamlessly into your existing workflow.</p>
<p>The imgix API will create either HLS or MP4 versions of your video based on your needs, and you’ll have a customized playback URL to add to your website. You can see all your videos in <a href="https://imgix.com/solutions/asset-management?utm_medium=banner&amp;utm_source=smashingmag&amp;utm_campaign=video-api-smashingmag-article-2022-08">their Asset Manager</a>, as well as detailed playback analytics. You also get an <a href="https://imgix.github.io/ix-video/overview/?utm_medium=banner&amp;utm_source=smashingmag&amp;utm_campaign=video-api-smashingmag-article-2022-08">out-of-the-box video player</a> that easily works in React, Vue, static HTML, and other popular frontend frameworks.</p>
<p>Most importantly, if you need to deliver a large number of images and videos, a solution like <a href="https://imgix.com/?utm_medium=banner&amp;utm_source=smashingmag&amp;utm_campaign=video-api-smashingmag-article-2022-08">imgix</a> can optimize and process both types of assets without you having to build it from the ground up or cobble together different solutions. It’s truly a one-stop platform for visual media processing. </p>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Doug Sillars)</author>
      <enclosure
        url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/746fe02f-c535-4bb9-bb61-f30467af2a58/better-video-streaming-with-imgix.jpg"
        length="0" type="image/jpg"/>
    </item>
    <item>
      <title>
        <![CDATA[Smashing Podcast Episode 51 With Ben Callahan: What’s The Value Of A Design System?]]></title>
      <link>https://smashingmagazine.com/2022/08/smashing-podcast-episode-51/</link>
      <guid>https://smashingmagazine.com/2022/08/smashing-podcast-episode-51/</guid>
      <pubDate>Tue, 23 Aug 2022 12:00:00 GMT</pubDate>
      <description>
        <![CDATA[In this episode of the Smashing Podcast, we ask how you can prove the value of a Design System and how you can pitch it effectively to stakeholders. Vitaly talks to Ben Callahan to find out more.]]></description>
      <content:encoded><![CDATA[<p>This article is a sponsored by <a href="https://www.wix.com/">Wix</a></p>
<p>In this episode of the Smashing Podcast, we ask how you can prove the value of a Design System and how you can pitch it effectively to stakeholders. Vitaly talks to Ben Callahan to find out more.</p>


<h3>Show Notes</h3>
<ul>
<li>Ben Callahan <a href="https://twitter.com/bencallahan">on Twitter</a></li>
<li>Ben’s <a href="https://bencallahan.com/">website</a></li>
<li><a href="https://sparkbox.com/">Sparkbox</a></li>
</ul>
<h4>Weekly Update</h4>
<ul>
<li><a href="https://www.smashingmagazine.com/2022/08/skeleton-svelte-tailwind-reactive-uis/">Meet Skeleton: Svelte + Tailwind For Reactive UIs</a> <em>written by Chris Simmons</em></li>
<li><a href="https://www.smashingmagazine.com/2022/08/everything-developers-must-know-about-figma/">Everything Developers Must Know About Figma</a> <em>written by Christine Vallaure</em></li>
<li><a href="https://www.smashingmagazine.com/2022/08/back-button-ux-design/">Designing A Better Back Button UX</a> <em>written by Vitaly Friedman</em></li>
<li><a href="https://www.smashingmagazine.com/2022/08/react-context-propagation-javascript/">An Introduction To Context Propagation In JavaScript</a> <em>written by Evyatar Alush</em></li>
<li><a href="https://www.smashingmagazine.com/2022/08/implementing-reset-password-feature-nextjs-dynamic-routes/">Implementing A Reset Password Feature With Next.js Dynamic Routes</a> <em>written by Caleb Olojo</em></li>
</ul>
<h3>Transcript</h3>
<p></p><p><a href="https://twitter.com/bencallahan"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b3b95927-b403-4bba-b813-e297b16f0778/ben-callahan-200x200.jpg" /></a> Vitaly Friedman: He studied computer science and worked as a software engineer, as an audio engineer for independent films, as an animator and of course, as a front-end developer focused on standard-based web development. These days, he’s the design system researcher and consultant working with wonderful people, almost sparkling people at Sparkbox to build a better web. Now, he’s always in learning mode and there is no better way to describe him as an explorer, maybe even Internet Explorer, with a very strong focus on design systems. Now, he lives in Dayton, Ohio, loves cooking, poetry, travel, photography, coffee; that was an important one. And has two, pretty as well kiddos, my threshing friends, please welcome. And I hope I can hear the cheers and applause right here, Ben Callahan. Hello Ben, how are you?</p>
<p>Ben Callahan: Hi, Vitaly. I am smashing.</p>
<p>Vitaly: Well. That is fantastic to hear, while you do look smashing as well. If I may say so, Ben, let’s start right away and dive right in there. How does a person who just happens to be a software engineer turn into a design system researcher? Can you show a bit of your journey to get there? Because I know that you’ve been working on design systems probably before it was even a thing. So I want to hear it all.</p>
<p>Ben: Yeah, absolutely. Thank you for having me, Vitaly. I do appreciate it. I’m super excited because I love design systems. And one of the reasons that I think it’s become an area of focus for us is because I have seen how it has helped organizations create a lot of unity inside their teams, which is something that I’ve always wanted. And so, if you’re asking about my journey, the reason I’m pointed in this direction is because of that. And if I go back, I did study computer science.</p>
<p>Ben: I was frustrated working in the corporate world feeling like I didn’t have a lot of... There wasn’t just a lot... This wasn’t a vision for the things I wanted to work on. And so eventually, I stepped out of that space, took a year to just explore different technologies like animation and audio, and just other things that I was interested in, and ended up starting a business, doing video production and audio engineering.</p>
<p>Ben: And then we did a website for one of our clients. And as soon as the rest of our customers saw that we offered that, it just was the only thing they wanted. This was early days of the web, and so I ended up buying my partner in that business out and transitioning it to a web studio, a very local web studio here in Ohio. And eventually merged that with a few other folks who were doing good creative technical work in town, and the result over a few years of us churning to figure out what we really wanted to do was again a focus on the web.</p>
<p>Ben: And that’s how Sparkbox was born. I’m really fortunate because we’ve grown slowly and steadily over the last 14 years. And that means that as a front-end engineer, as a computer science guy, I’ve transitioned out of writing code every day. And instead, I get to focus on where I want us to be headed. What do I think is important for us to be learning, and how can we best serve our customers? And that’s really how I pretty naturally ended up digging in deeper to design system work. Because I actually do believe that it is a unifying opportunity for a team, so that’s how I landed here.</p>
<p>Vitaly: Oh, that sounds very exciting, indeed. And I think in many ways, we are everybody who is listening to the show now as well; I think we all have been in one place, and then we moved to a slightly different one just steadily and slowly. And I know a couple of people who used to, I don’t know, sell glasses before the internet was a thing. And then off you go becoming a designer, developer, manager into design systems and all things like that, so that’s really exciting to see that.</p>
<p>Vitaly: Interestingly, talking about design systems, I think we are in a very interesting position right now because it feels like we have been playing, and doing, and experimenting, and working around design systems for many, many, many, many, many, many years now. And I don’t know about you and probably have, of course, way more experience than that. Many teams already have one, right? Or they’re trying to get one, and it might be up-to-date, maybe not, but they’re definitely not something new and shiny around the block that we just need to try out.</p>
<p>Vitaly: Many people have tried to do that, you did spend a bit of time trying to understand what makes a design system mature. So maybe you could actually dive a little bit more into this and explain, based on your experiences, of course, the Sparkbox as well. What is the maturity model for a design system? So what does it entail?</p>
<p>Ben: Yeah, you’re right, Vitaly, that we have been as an industry working very systematically for a long time, years before we started to use the word design system. And Sparkbox, like many other studios or consultants, had been working in that way for a long time. I think when you put a name on a thing like design systems when you give it a name, it takes on a life of its own.</p>
<p>Ben: And so definitely, there was a point probably six years ago when our clients just started asking us for that, six or seven years ago. And so I think when that starts to happen, as an organization, as a leader in an organization, I feel like it’s my job to better understand that. And for us, what that has meant is for the last five years, we’ve done what we call the design system survey.</p>
<p>Ben: And that’s just to open to the industry. And as part of that process, I get to ask; I get to do lots of interviews with folks who I just find online, who are doing this work in an interesting way. And I just ask if I can have half an hour or an hour of their time, and I just ask them a ton of questions.</p>
<p>Ben: And so that has given me a lot of exposure to very broad perspectives on what’s happening in the space. And so with all of that, as part of an input for me, what I have done over the last four or five years is each year talk to lots of folks and then sit down and try to find some cohesion in all the different stories that I’m hearing.</p>
<p>Ben: So, a couple of years ago, leading up to the release of our survey for 2021, I had done that series of interviews. And I realized that there were some patterns that I was seeing emerging in terms of how systems were moving and maturing. And that’s where we landed on these four stages that we think most design system programs move through. And that we tried to keep these quite simple because I don’t want this to be something that’s super theoretical.</p>
<p>Ben: I want it to be practical and useful, but at a high level. The model is there are these four stages; the first is just building version one, so that’s literally everything you do up until you release something for subscribers inside your organization to start using. And then pretty much every team that I’ve spoken with who has gone through that and actually got something out the door, their next big focus is almost always on adoption.</p>
<p>Ben: And that makes a lot of sense, right? You spend a bunch of time building a thing. Of course, you want to see if other folks are interested in using it. And so that second stage is driving adoption. And then, if you’re able to make it easy to become a subscriber, and if you do a really good job supporting folks who are using your system. And if you continue to evolve the system in a way that it shows value to lots and lots of different types of subscribers inside your organization, then you can reach this third stage, which we just call surviving the teenage years.</p>
<p>Ben: And it’s a tricky season, because there’s lots happening, right? You’re having a lot more people use the system. I can guarantee you that they’re probably going to try to do things with it. You never imagined they would. This is where you heard of having to make a decision. Are we actually going to treat this like a product? Are we going to offer support in a really healthy way? Are we going to come alongside the subscribers and engage with them been good ways?</p>
<p>Ben: And if you can continue to survive that stage, you reach what we call stage four, which is just evolving a healthy product. And this is really where the design system team actually takes a role in terms of leadership inside the design organization itself. And these teams that are stage four are doing incredible things. When I talk to people inside these organizations, they talk about the design system team as the place where the most skilled workers in their organization operate.</p>
<p>Ben: They say things our design system team was ready for us. When my product team came and said, “Hey, we want to try view.” That they had already done a spike on the design system team to show they could support that. They’re very proactive. They’re not reactive. And that’s, I think, a really healthy place to be at the table for big conversations, to be driving decisions inside the org. That’s what I think is possible if you mature in that way.</p>
<p>Vitaly: Well, that sounds very exciting. But then in your experience, looking again at the work that your clients are doing, where would you see most companies are at this point? How many actually reach level four, and where do most companies struggle?</p>
<p>Ben: Yeah, that’s great. I’m glad you’re asking that because I think doing that work, one of the outputs I was hoping for is to make it clear how to move through these stages in a healthy way. I think you said something earlier that I’ll just harken back to you which was... You said most folks have a system already. What I’m seeing is that many organizations are on their second, third, fourth, or fifth attempt at doing this work.</p>
<p>Ben: So it’s not just that they have a system; it is that they have been struggling to build a successful system for years in some cases. Most of the time, I would say most organizations that I get a chance to interact with are stuck somewhere between two and three. And it’s actually really common to get stuck there because this is where everything before stage three is about building something people will value and use.</p>
<p>Ben: And in order to transition into three, you have to... What it seems like right now is that you need to increase the size of your design system team. And the skill sets that are needed are a little bit different. This is where you have to actually add in a product support team, like customer service for your subscribers, right? And it’s because the system is if it’s going to take root, it’s going to be a really fundamental piece of any interface work that your organization does. And for that to be the case, you have to really actually support those folks in a really healthy way. If they don’t feel like you’re there for them, if they’re going to use your product, you have to show them that you’re trustworthy, and so-</p>
<p>Vitaly: That’s right.</p>
<p>Ben: ... that requires more people, there’s just more to do. And so that’s a tough spot. I see folks oftentimes moving between two and three quite a bit. I haven’t spoken with a ton of folks who have reached that stage for more mature, really driving more proactive decisions inside the org yet, but they’re out there.</p>
<p>Vitaly: Yeah. One interesting thing for me was when I encountered working with one of the bigger companies from Romania, actually, and they’ve been working on a design system for six to seven years, pretty much aligned to what you were saying as well, where everybody was on the gold-rush design systems, gold-rush in a way. And I was extremely impressed with just how concise, how well established, how reliable, and how sophisticated the design system was.</p>
<p>Vitaly: And so that took a lot of iteration, of course, as well, but it also takes a big commitment from the top. And I know that you also have been speaking for a while now about how to sell design systems because very often it is expensive. And very often, you still need to convince the right people that this is the right amount of effort and that the return on investment will be worth it. Would you say that at this point, it’s something that’s already considered to be true most of the time? Or is it something that you actively have to prove every single time with some metrics or KPIs? How does this work for you?</p>
<p>Ben: Yeah. It’s not proven. I think, I mean there are organizations who have done that work for their use case and I think that’s great. This is a tough area, and I don’t have a single answer. I have more of an approach. I think that has helped us. So I have had the opportunity to speak with a lot of leadership inside organizations where they’re trying to make a decision if they should be investing heavily in a system.</p>
<p>Ben: And I think that’s actually probably the right first step. I’m not somebody who is absolute in this. I think there are situations where a design system is really helpful, really beneficial. There are situations where I probably wouldn’t recommend it. That doesn’t mean some variation of patterns and components and things isn’t needed in most cases.</p>
<p>Ben: But if you have a single product and a small team and you’re in startup mode, it’s probably not worth investing all this time and money to build a design system to support a single product. It's just the bang is not there for your bucks. So there are definitely use cases. That’s one of many where I probably wouldn’t recommend it.</p>
<p>Ben: In terms of once you’ve made that decision to pursue it, then it is about making sure leadership is on board at some stage in there, you have to make that transition to getting leadership really bought in. Not every system starts that way. We talk about in the maturity model, there’s a concept called origin stories, which is just really how involved and aware and supportive your leadership is in those early stages.</p>
<p>Ben: And there are many systems that are very successful now that started without any... No leadership involvement at all. It’s a transition; it’s maturity that has to happen. And as part of a successful system, you do need that long-term, but the way we help our clients figure out how to get support from leadership is that we do what you would do with any other product as we go. And we talk to those folks, and we try to understand what their needs are and what their goals are.</p>
<p>Ben: And how can a design system be shaped to serve those things that are important to them? And if you can reposition, the effort in a way that it solves problems for folks, they’re going to be willing to support it. The other big thing to talk about in those early days when you’re selling the systems especially is that you... A design system is only going to show its value over a very long period of time.</p>
<p>Ben: So this is truly an investment, right? It’s the kind of thing you put time and money into, and you have to trust that over the years, you’ll start to see a return on that, but it’s not a quick thing. So being clear about that upfront is actually really helpful in the work. And your last question was about, is it something you just sell once? And then you’re done.</p>
<p>Ben: I’ve never seen that really work. It’s a constant. That actually is part of the maturity model. We talk about three things, education, which is convincing folks, talking to folks, casting the vision, explaining why, what, how, and all those things. Engagement, which is getting folks involved in the work with you. It’s not a one-way thing.</p>
<p>Ben: It’s definitely very... There’s a lot of work required from all the different groups involved and then evolution, which is just simply making the system better over time. So if you’re not doing all three of those things all the time, you get stuck in that, in those steps to mature, so that’s what we’ve learned.</p>
<p>Vitaly: Right. Well, that’s very exciting. I’m wondering, and I really want to know more about what you have learned because you did mention that you and the wonderful team at Sparkbox have released the design systems survey 2022. And I’m really curious about some of the new things that you maybe haven’t uncovered there. What were some of the most surprising findings that you discovered there during that research?</p>
<p>Ben: Yeah. I mean, each year, we do that. This is our fifth year releasing that; each year, we come away with some really interesting insights, and this year’s no different. One of the things that really stood out to me I remember when we were working on what questions we would ask this year. And there was a series of questions in the survey this year about your top challenges. And we give folks a list of options to choose from, and then what are your top priorities? And we give them the same list.</p>
<p>Ben: And I remember reading that question and saying to my team, aren’t people just going to pick the same things here, right? If these are my challenges, then why wouldn’t those be the things I’m prioritizing? But they convinced me to leave it in, and they thought we would find something insightful there. And, of course, they were right. One of the things that are really interesting to me is in that survey; there are a handful of areas where you can see a difference in what is important to people in terms of what is a challenge and what they’re actually able to prioritize and work on?</p>
<p>Ben: The one that stands out the most is staffing. And this ties in actually with what we were just speaking about, Vitaly, around that stage two to stage three transition where you need to grow the team, the number of folks working on this, like the volume of work gets much larger as you move from stage two to three. And if you don’t have the support from leadership to increase staff, which is what that is hinting at, you can’t really do that well. You can’t make that transition well, and to me, the way I’ve interpreted this is that a lot of folks in the survey data say staffing is a big challenge, but it’s not; it can’t be a priority for them.</p>
<p>Ben: And it’s interesting because I think what that means is there’s a separation in the things that the design system team has the authority to prioritize, right? So they may be able to say, “Here are the things objectively that we have as challenges,” but maybe they don’t have the authority to choose how to spend the money or how to prioritize things, which I feel is a disconnect. If we’re going to trust these folks to run this design system program, we have to trust them to set their own priorities. So that’s one that stood out to me for sure.</p>
<p>Vitaly: Right. Right. It’s always kind of a story because I think in many ways when I deal with companies that choose to go ahead and give the green light to the team for design system, there is still always a little bit of trust that this is a simple, relatively simple site project, which is not going to drive us away from the main core product that we’re working on. So if designers, in this case, believe that this is the right thing, surely this cannot be the priority. And so surely there will be no extra stuff involved in making this happen.</p>
<p>Vitaly: And so that’s pretty much, I guess, aligned with what you are saying here as well. And obviously, people are important. So I’m wondering, though, in your experience, maybe that would be interesting to explore. What would you say are some of the important ingredients of a successful design system? When do you know that you are on the right track? Or how do you know, do you ever know, Ben? Do you ever know?</p>
<p>Ben: Yeah, it’s hard, man. It’s hard because it gets into the promises you make early on, which are the things that people are going to expect you to prove later. So I think successful systems can look very different inside different organizations, and it’s really. I wish there were a simple answer. I think there are some common things; we talk about a lot of those things in our survey we ask each year, do you feel your system is successful?</p>
<p>Ben: And then we can take that information and look at the other characteristics of design system programs that where they feel they are successful? And then we can make some interesting observations. One of the things that we always see is that having better engagement almost always means that individuals feel that the system is more successful. So, in other words, you can’t operate on this. You can’t build and offer a system unless you’re actually working alongside the people who need it.</p>
<p>Ben: It’s like any other product, you have to understand their needs, and you have to get down into the work with them. And so that’s what we encourage and help our clients set up as those engaging practices. I think the educational side of it is always key too. And this is where, in fact, this year, one of the things I’ve been focused on is just going back to what a design system is.</p>
<p>Ben: And this sprung out of a couple of consulting engagements last year, where big companies that have had systems for years, and we get in there and ask a ton of questions. And what we understand very quickly is all the people here have very different ideas about what a system is. Why it’s important? How should it be done? And this is seven, eight years into folks working on this stuff. And people still don’t actually understand what a design system is? And so that’s a problem, right? And-</p>
<p>Vitaly: Right, right.</p>
<p>Ben: ... I’m not saying that you have to have the same exact definition that I do, but if you internal to your organization, don’t have that defined, that’s where the real problem is. So we did a bunch of work this year to lay out what we just call the anatomy of a design system, which is a very simple breakdown of what a system is. It gives us some common language to use, and that’s been really helpful for our clients and for us as we work alongside them. So I think going through that exercise with your own internal team is one way to make sure that you’re going to be setting yourself up for success. There are probably many more.</p>
<p>Vitaly: Right. But then, Ben, can you maybe shed a bit more light on things like, “Hmm, how would I put it best?” So if I’m working with semi design system in the company, and I’m pretty confident that things are going in the right direction, and it seems like everything is reasonably well structured within the organization, there are people who are working on it. It goes as it’s supposed to be. What would you say as some of those red flags that one usually should be aware of? Just avoid... I don’t know, deterioration, I guess, of a design system in the company.</p>
<p>Ben: Yeah. There are definitely seasons. I think folks go through where they feel like, “Hey, we’ve got things figured out. We have a good groove. We’re following our processes. Everything’s good.” I think one of the things that we’ve seen is that, like any other product, there is a level of stability you have to aspire to as well. And the same challenges that we’re used to solving for our externally facing products are also going to be the reality for us with an internal product, like a design system.</p>
<p>Ben: And that’s when things change around. And so many times we’ve come into work with an organization where they felt they had a great program running and leadership changed, like a new director comes in, or a new VP comes in. And they have a very different perspectives on how to approach the work. And they haven’t been there for the journey that you have been on. And so, all of a sudden, you’re thrust into this instability where you have to, again, prove that you’re a valuable part of the organization and the process you have to show.</p>
<p>Ben: Sometimes, this is where the metrics come in, where you have to not just tell them which you have to actually show them. And so that’s one tiny example, but shifts in the market, right? Pivoting a product like a rebrand, all of these kinds of things can impact that. What feels like that stability? And so we try to think about... We’ve done a bunch of work to try to figure out what are the things that we can have in place in the seasons where things are feeling good. How do we make sure we’re creating more stability that will actually help our system last through those kinds of changes?</p>
<p>Ben: And there’s three big things we’ve identified. The first is authority, which is that real visible support from leadership. The second is value, which is that you’re continuously monitoring the product you’re offering. The design system itself is actually valuable to the folks you’re asking to use it; that’s engagement, right? You have to be making sure that it’s doing something helpful for you... It has to be the easiest way to work, and then tradition is the third.</p>
<p>Ben: And that’s a little bit different in that you earn that over time, right? Having authority and being valuable over time, you become the way an organization builds interfaces. And that tradition of this is how we work. Actually is quite a stabilizing force in the context of a lot of change. So those are the three things we help our customers put in place in order to create systems that last beyond just those seasons of feeling like we’ve got it figured out.</p>
<p>Vitaly: Right. But I also think the underlying asset behind all of that is something that we spoke about in Berlin when you were here. I remember that cup of coffee. That was a very nice cup of coffee.</p>
<p>Ben: Yeah. That was good.</p>
<p>Vitaly: And also very nice conversation that we had back then. And we were talking about culture.</p>
<p>Ben: Yeah.</p>
<p>Vitaly: We’re talking specifically about... For all of this to succeed, we need to have proper culture and companies and organizations that not only support and enable a design system but also have a little bit of a design system sprinkled pretty much everywhere in the organization. So maybe you could share a bit more on that because I know that you spent quite a bit of time working around design systems and culture.</p>
<p>Ben: Yeah. Yeah. This is what I’ve been working on most recently. And I’m so excited about it. I think I have learned a bit from a couple of our engagements with clients where... Any place where people are getting together consistently, a culture is formed. So that means if you work at a big company, there’s an organizational culture that is created from all of these folks coming together to work on a thing. But also, each day, you’re probably not interacting with every employee.</p>
<p>Ben: And so, your small team that you interact with on a daily basis will form a subculture that exists inside of that larger organization’s culture. And there are probably hundreds or thousands of subcultures inside big organizations, right? The group of folks who get together on Zoom and knit over lunch, there’s going to be a subculture formed there, right? The book club where they’re reading about whatever science fiction book just came out.</p>
<p>Vitaly: Well, I love a Good Book Club.</p>
<p>Ben: Yeah. See, there’s a subculture being formed there, right? I have been doing a bunch of research by just reading papers from the last few decades of other folks much smarter than I who have been researching organizational culture. And I’ve been looking at that because I feel like there’s a missing piece in what we’re talking about with design systems. And that’s an observation that I’ve made just in our work.</p>
<p>Ben: And one of the things that I think is helping us to frame that challenge up a little better is understanding the different types of cultures that can exist. And there’s lots of material on this. There’s a model that I love. That’s, I think, from the late or early ’90s, which is called the competing values framework. And I’ll send you a link that at least you can share in the show notes, but—</p>
<p>Vitaly: Absolutely.</p>
<p>Ben: ... it’s really nice. And it just takes two ideas on a spectrum X and Y. And it gives you four high-level general types of cultures that can exist in an organization. And one of the things that I’ve learned is in my interviews, almost every single one of our design system teams that I’ve talked to is on the left side of this diagram, which means they’re internally oriented. So they’re either collaborative or they’re controlling. Those are the two culture types that are the most common for a design system team.</p>
<p>Ben: And that makes sense, right? A collaborative approach is when you’re saying, “Hey, everybody come help me do this.” And together we’ll build something that we can all use. That’s very common. And then controlling is a little different. And that’s we’re saying, “Hey, this design system is in place to ensure that the output is consistent.” And so you cannot veer from this. It’s more like us being restrictive.</p>
<p>Vitaly: Like a strict guideline that we need to stick to, right? Mm-hmm.</p>
<p>Ben: That’s right. So those are the two... This is very general, but those are the two general ideas of cultures that exist really in design system teams, but there are two others, and those are more externally oriented. And one of those is competitive, which is about being driven by the market, and the other is more entrepreneurial and it’s creative, it’s called. And these are folks who are just trying to disrupt stuff. And so, with these four ideas, what I’ve learned is some of these cultures work well together, and some of them don’t.</p>
<p>Ben: And as a design system team, you don’t get to choose the culture of your organization, right? You are going to be a subculture. And so what we’re learning now is there’s a lot of nuance in being smart about how to structure the culture, how to curate the culture of your design system team in a way that it can operate successfully inside the larger organization’s culture.</p>
<p>Ben: And that’s a lot of the work that I’ve been doing. And I’m real. I just feel like there’s so much to this. I have a lot more research to do, but it’s already starting to show a lot of value in our consulting work, so-</p>
<p>Vitaly: Yeah. Yeah. That makes sense. Because once you have an organization that already has a culture in place, you probably can’t change that, but you might change the way how your design system would operate in that environment to make the best out of that.</p>
<p>Ben: That’s right.</p>
<p>Vitaly: Well, I hope that at some point you will be, I don’t know, writing articles, maybe even books about this.</p>
<p>Ben: Yes.</p>
<p>Vitaly: Either hear something, a rumor about an upcoming book on just that eventually.</p>
<p>Ben: That’s the plan. Yeah. Trying to put something together that has these three big concepts, the anatomy of a system. So actually getting some nuts and bolts about being very clear and articulate about what a system is? Understanding how systems mature, as we’ve already spoken about, and then recognizing the impact of an organization’s culture on the design system team and how we can structure that in a way that it’s successful? So those kinds of the big—</p>
<p>Vitaly: Any deadlines that you’ve put yourself in your calendar?</p>
<p>Ben: I’m hoping to have my draft done this year. And then from there, that the whole process of editing and all of it, so-</p>
<p>Vitaly: Yeah. I even know a publisher who might be interested in publishing at some point-</p>
<p>Ben: Oh, yeah.</p>
<p>Vitaly: ... who knows you.</p>
<p>Ben: Yeah. Give me their name.</p>
<p>Vitaly: Yeah, I will, I will maybe let’s just spend a bit more time thinking more hands-on about what are some of the things that designers developers working in organizations, working in companies on a design system? What can they do to make things a bit better for the process, for collaboration, for the workflow, for everything?</p>
<p>Vitaly: Let’s start maybe just by you briefly maybe highlighting, how do you start the kickoff projects when it comes to design systems with your clients? What do you usually start with? Obviously, there is going to be some research involved and all, but what would be the initial steps to get to a solid foundation early on?</p>
<p>Ben: Yeah, you’re right. It is research. We call this phase onboarding at Sparkbox and what we try to recognize is that those early days of an engagement like that, or the days when you know the least, right? And so we try to embrace the idea that we’re going to know a little bit more tomorrow than we did today. And we try to be very iterative. I think those early days for us are oftentimes about building relationships with the folks inside the organization.</p>
<p>Ben: And we do often ask to be introduced to lots and lots of people, even if we’re not going to work with them daily in the design system work. We still need to know what they’re dealing with? What they’re going through? How are they accomplishing their tasks each day? What are their goals? And what we’re trying to do is I think, model for our clients that you cannot do design system work effectively unless you really truly understand the needs of your users, your subscribers.</p>
<p>Ben: And so that is where we start. And so it’s about... We do that in a lot of different ways. So we may run a small internal survey and send that to lots and lots of people. We may schedule three to five interviews with each discipline. And one of the things that’s a little bit of a pet peeve of mine is that we talk so much about how a design system can benefit a designer or a developer, but we ignore a lot of other disciplines.</p>
<p>Ben: And so one of the things that we’re intentional about is making sure we’re not only speaking to the designers and the developers but also let’s talk to some folks in QA, let’s talk to the product owners. So let’s talk to UX research folks. I think the system should be broad in its goal of serving lots of different disciplines. And so the only way that we can do that is if we understand the needs of all of those folks so that’s how we get rolling.</p>
<p>Vitaly: Right. And then, as time progresses in terms of collaboration, let’s say between designers and developers, right? It’s still always a topic handoff or no handoff. Den Mole and Brett Frost are speaking about the hot potato model as we throw.</p>
<p>Ben: Yeah.</p>
<p>Vitaly: The stuff from designer to developer, from developer to designer, it’s all alternative. And there is no notion of a handoff because it’s just happening all the time in small bits and pieces. What do you see working? Or do you see it working best or maybe not working well at all?</p>
<p>Ben: Yeah, it’s funny there. This is a spectrum; there are so many organizations that are more iterative in that way. There are a lot of organizations out there that are still very linear, and I definitely fall more in the camp of iteration where we believe, but I talk with our team a lot about this idea of empathy. And I’m not talking about empathy for our end users. I’m talking about empathy for the other disciplines that we have to work alongside.</p>
<p>Ben: And I think that is key to doing this work well, is understanding that every decision you make, say you’re a developer, every line of code that you write to build an interface has an impact on the visual side of the things, right? So, and the experience for the end customer. So recognizing that all of our decisions are interplaying with each other, I think, is necessary. And that’s where building relationships with those people is the way that you can do better work.</p>
<p>Ben: So we encourage that. And that’s why I love design systems because it forces all of us onto the same team instead of us thinking about, “Oh, I’m on this products team.” No, we’re actually all trying to build stuff that better serves our end customers, right? And the one way we can do that is with a system.</p>
<p>Vitaly: Right. And when it comes to... Let’s say those little fine little details; for example, many teams will be working with storybook on the coding side of things and then Figma on the design side of things. How do we then, the ultimate, the billion dollar question from me to you? Ben, of course, how do you breach that gap? Will tools save us? Will processes save us workflows, Slack channels? I don’t know. You give me an answer, Ben. I don’t know.</p>
<p>Ben: Yeah. I definitely don’t think tools are going to save us. I get asked a lot about tools because right now, especially with design system stuff, there are so many tools coming on the market, and every tool that’s out there is investing heavily in offering better and better services. And that’s great. We need that innovation happening in the space for sure. And I’m not saying you shouldn’t use tools, of course, but I don’t think tools will save us.</p>
<p>Ben: I think it’s... So in our anatomy of a design system model, we talk about every layer of the system consisting of three different parts. And those are, of course, the assets, which are the things everybody thinks about, the files, the components and react, the Figma designs, all of it. But those are important, right? But also, we talk about documentation, which is like a major piece, which is offering a really actual, insightful explanation of what a component is or what a token is. Or whatever the thing you’re documenting.</p>
<p>Ben: Of also, why is it important? Why is it that way? And, and then we also talk about the process as a key part of that, of this for each layer. And this is, I think I had to say what will save us; I think being intentional and thinking through the actual process that you’re going to follow and being clear about what it is and how to follow it is the way that we’re able to set these different disciplines up for success. In the example you said, designer developer, like one of the common things that one of the biggest challenges we see is that folks don’t trust the design system because the version of it that a designer used is no longer in sync with the version of it that a developer is going to use.</p>
<p>Ben: And that’s a problem, right? Because now, all of a sudden, I’m going to... The next time when I come around, I go through the process thinking that it’s in sync, and at the end, I realize, “Oh my gosh, I used the design system as a developer. And now, the output is different than what my designer designed. That’s a problem. I’m not going to want to use the system anymore because that issue means I have to go redo stuff, right? So that actually has taken away any efficiencies that we might have gained by having a design system because I’ve just created a bunch of rework for myself.</p>
<p>Ben: So the solution to that, there’s two big things, right? One is defining a process to keep these things in sync and just being clear about what that is. And the other is transparency about the current state of each piece of a system. So now, I can choose as a developer to use the system. I know if there’s transparency, and I know that it’s not quite in sync with what the designer used. That just means, oh, I might have a little bit of iteration to do on it, but I haven’t gone through expecting it to be perfect at the end so that transparency creates trust.</p>
<p>Ben: And the process is the way that you can say, “Hey, we know things will, at some point, become synchronized, you can choose to wait until that’s done, or you can go now and maybe help us create the synchronization.” So I think those are the two things that’s just one example, but it’s a balance, right? Of the way that we work with each other and the tools offering some of that automatically. And then when they don’t putting the process in place to do it manually, so-</p>
<p>Vitaly: Right, absolutely. Well, that sounds very exciting. Well, I do have to ask one more thing, Ben; as we’re wrapping up slowly, I know that you’ve been working on so many different projects with so many different companies, so many different brands, and so many different designs systems across. I don’t know how many companies and brands, at this point, do you still have a dream project that you would love to be working on one day? I don’t know, maybe it could be a design system for a big brand, or maybe it could be anything else.</p>
<p>Vitaly: I know that you know, you are a big audio guy, right? So you have been spending quite a bit of time with audio and as not your engineer as well, and you have so many other things that are really interesting to you, and during the conversation that we had back in Berlin, I just realized just how broad your interests really are. So if you could do anything, any big project that you would like to take on, what would it be?</p>
<p>Ben: Oh my goodness. Yeah. I think it’s not, for me, it’s not about the size of a company or the brand awareness, that kind of thing. I mean, we have worked with some big organizations, and that’s always fun to... When you’re talking with your family later to be like, “Oh, you went to that website; we helped build that.” That’s always a fun moment, but I think for me, it’s always been about impact.</p>
<p>Ben: So if there was a way to help organizations actually create that unity on their teams, that’s the thing that really is driving me at the moment. So, the idea of a book, I think, is a way to put that together and actually see folks grow from it and make better decisions within their daily work.</p>
<p>Ben: That’s pretty exciting to me. The other one, I think, is just that I really enjoy teaching and working with folks. And so, I think at some point in my future, I probably will find a way to give back in that way. And that’s pretty exciting for me to think about. So there’s a couple.</p>
<p>Vitaly: That sounds great. That’s great. So dear friends, we’ve been learning quite a bit about design systems this episode, but I’m still wondering, what have you been learning about lately, Ben, that might not be related to design systems or might be related to design systems? What keeps you busy these days? What keeps on a toast?</p>
<p>Ben: Yeah, that’s fun. My son is at a camp this week, and he is studying VR gaming. He’s learning how to make VR games. And so, he and I have a lot of fun. He’s learning to program as well. And so my computer science background gets me back into some code, goofing around with him. So there’s some stuff I’m learning there. I’m always learning about coffee. You can probably see some of my coffee equipment here. So I have a couple of new toys that I’m playing with within the coffee world too always, so-</p>
<p>Vitaly: That sounds great. So do you think we should be expecting you to become a VR developer or VR engineer or barista anytime soon?</p>
<p>Ben: Yes. That’s definitely. I’ll be a barista probably in the near future if nothing else works out.</p>
<p>Vitaly: Right. Well, that sounds about right. If you, dear listener, would like to hear more from Ben, you can find him on Twitter, where he’s @bencallahan, and will obviously post the link to it in the episode notes and also on his website @bencallahan.com. That’s not very surprising, or I would say, but you also can find him @sparkbox.com, where the wonderful sparkling Sparkboxers. Is that the right way of saying that?</p>
<p>Ben: That’s what we say. Sparkboxers. Yeah.</p>
<p>Vitaly: Spark boxers are doing all the incredible job on design systems and beyond. So thank you so much for joining us, Ben. It was a pleasure and fun as always.</p>
<p>Ben: Yeah.</p>
<p>Vitaly: Any parting words of wisdom streaming to the internet out there as an Internet Explorer?</p>
<p>Ben: Oh my gosh. Internet Explorer. No. Well, go check out the second draft of the tokens spec that’s coming out. There’s a lot of feedback needed there if you’re into that space, so that would be a thing. I would encourage folks to go read.</p>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Drew McLellan)</author>
      <enclosure
        url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/743ac53b-8c92-43c0-bf35-5adf4d662417/smashing-podcast-episode-51.png"
        length="0" type="image/png"/>
    </item>
    <item>
      <title><![CDATA[What Makes A Great Toggle Button? (Case Study, Part 1)]]></title>
      <link>https://smashingmagazine.com/2022/08/toggle-button-case-study-part-1/</link>
      <guid>https://smashingmagazine.com/2022/08/toggle-button-case-study-part-1/</guid>
      <pubDate>Mon, 22 Aug 2022 09:30:00 GMT</pubDate>
      <description>
        <![CDATA[In this first part of a two-part article, Eduard Kuric analyzes the characteristics of effective toggle buttons that make it error-proof and prevent confusion and frustration of users.]]></description>
      <content:encoded><![CDATA[<p>In this first part of a two-part article, we will analyze the characteristics of effective toggle buttons. These characteristics serve as visual cues for helping users recognize which of the button’s options is actively switched on. We have conducted a comprehensive research study with real users to evaluate the effectiveness of visual cues from a variety of categories. As part of our experiment, we assessed how the perception of visual cues changes if the user has more time to observe them.</p>
<p>In the <a href="https://www.smashingmagazine.com/2022/08/toggle-button-case-study-part-2/">second part</a>, we discuss our results: which cues work better than others, which are the best, which are the worst, and why. Certain findings challenge some of the traditional beliefs in toggle button design. Finally, we present a list of best practices for how to create optimal toggle buttons based on our discoveries.</p>
<p>The problem of how to design an effective toggle button that shows the selected option clearly is a long-term open question among UI/UX designers. In this article, we discuss a study that we’ve conducted to find the final answers to the following questions:</p>
<ul>
<li>What does a good, clear and readable toggle button look like?</li>
<li>What visual characteristics of a toggle button make it error-proof and prevent confusion and frustration of users?</li>
</ul>
<p>First, we’ll talk a bit about toggle buttons themselves, when it’s the right time to use them, and which principles to bear in mind while doing so. </p>
<p>Let’s discuss a common scenario: imagine you’re buying an airline ticket. You pick the date and your destination when you suddenly come across something like this next to your ticket details:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a5dc39ec-c288-4fd9-aefc-e1c895400dda/29-toggle-button-case-study.png" /></p>
<p>If you’re confused about whether your ticket lets you come back home, don’t worry, you’re not the only one. The marvelous piece of UI seen above is called a toggle button.</p>
What Are Toggles?
<p>A toggle button. As the name suggests, it refers to a control used for switching (or toggling) between two or more states or options. Both its name and function are part of a skeuomorphic metaphor, meaning they’re based on something older and more familiar. In this case, a physical forerunner. To better understand the basis of a digital toggle button, let’s talk about the qualities of a physical toggle — the common light switch.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2f6b52aa-976e-470b-ae3b-c560d4a84c3d/27-toggle-button-case-study-fixed.png" /></p>
<ol>
<li>As you can see, there are two states that a light switch can be in:  on or off, with nothing in between. Similarly, a digital toggle is a control with two (or sometimes more) mutually exclusive states with one of them always set as the default value.</li>
<li>You can see the result of interacting with a light switch straight away as the lightbulb will immediately light up or go dark. In the same way, a well-designed toggle should perform a visible change in the system — you should get direct feedback without the need to press another (Save or Submit) button.</li>
</ol>
<h3>When To Use A Toggle Button?</h3>
<p>In short, when designing a toggle button, for the sake of your users, it’s good to hold on to these basic principles: </p>
<ul>
<li>Use them only when they have an immediate effect, without any Save or Submit. </li>
<li>Apply them when the setting has a default value.</li>
</ul>
<p>In other cases, a checkbox or a group of radio buttons may be the better option.</p>
<h3>Toggle Switch vs. Toggle Button</h3>
<p>There are two ways in which you can use a toggle-type element. For binary options (mostly on/off, as discussed above), you can go with a <strong>toggle switch</strong>. It’s very simple. You just activate or deactivate a function. </p>
<p>A toggle button is a suitable solution for switching between opposing (even multiple) options. It’s composed of two or more buttons next to each other. The selected button needs to “highlight” in some manner to signify the toggled state.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bccad391-aa8d-42aa-ae81-3baf7dcae053/50-toggle-button-case-study.jpg" /></p>
<p>The goal is to design toggle buttons distinct enough to signal the difference in visual weight between selected and unselected options. At the same time, the buttons should be alike enough to be perceived as two (or more) parts of the same whole. The challenge is to make evident which button is active.</p>
<p>With toggle switches, it’s relatively simple. With a direct label present (on/off), you can read the toggle state quite easily. However, toggle buttons don’t contain the text “on” or “off.” Their label stands for explaining the state’s quality rather than showing the state itself. </p>
<p>Thus, when reading toggle buttons, users have to rely on other visual cues. Which, when not used right, can do more harm than good. One thing is for sure, though, the state that’s currently active should be emphasized, not the possible command for changing it. This brings us to the main focus of this article. There’s a hot question going around among UI and UX designers: How to make a good toggle switch? </p>
<p>When we asked this question ourselves, we found there were no general rules founded on solid user research. This is why we’ve conducted our own case study to remedy this. </p>
Case Study: Data-based Approach To Designing Clear And Effective Toggle Buttons
<p>With enough experience and some usability testing, you can ensure your toggle design isn’t an issue. But what if you could just tell right away what will or won’t work based on comprehensive research and cold hard data? Further, what design features help users distinguish which toggle option is the active one? How do you combine visual cues, such as colors, text size, and frames, to make the state of toggles instantly recognizable? In our study, we’ve explored the field of visual cues and focused on the question of which design characteristics signal that a button in a toggle pair is active or not.  </p>
<h3>Visual Cues</h3>
<p>Visual cues are aspects of elements on a website that draw the user’s attention and provide information about how to use the design. They help users spot clickable features, distinguish between active or inactive states, and introduce the possibilities presented to them by a website. The signal they send should be clear and easily readable. </p>
<h3>Research Path To Designing Toggles</h3>
<p>Although how to design toggle buttons is a commonly discussed topic among designers, there are (to our knowledge) no clear guidelines on picking the most effective visual cues for toggle buttons. Therefore, we have decided to look closely at specific ways to highlight the active button in a toggle pair.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7223aa0c-ff29-4d7b-83ba-dce0c9c5b52f/26-toggle-button-case-study.png" /></p>
<p>The anatomy of toggle buttons can usually be described as a combination of label, filling, outline, and sometimes a specific icon, whereas not all of these components have to be present at the same time. Each of them can be emphasized somehow (can stand as a visual cue), and there are many different ways to combine them together. </p>
<h3>Standalone Visual Cues</h3>
<p>To start from the base, we focused on standalone visual cues concerning each of the button’s possible components: <strong>label</strong>, <strong>filling</strong>, <strong>frame</strong>, and <strong>icons</strong>. Based on our assumptions of how these components influence the perception of an active/inactive button, we have formulated several specific research questions.</p>
<p>To test our assumptions, we have designed a set of toggle buttons that individually represent our research question for the visual cues. We wanted only one visual cue in focus on each toggle button to shape the user’s perception of an in/active state of the button. Therefore the visual cue should be the only thing that differentiates the buttons. </p>
<p>When designing the toggles for the study, we came across one challenge: what labels to choose? Of course, we wanted to replicate the real-life experience on the web, but at the same time, we didn’t want participants to be influenced by a particular verbal meaning. Therefore, we needed to choose the labels carefully. </p>
<p>The first idea was to use “Option A/Option B,” but since letters A and B implicitly imply alphabetical order, this would mean risking having a subconscious effect on the participant’s choice. Similarly, using words with meaning such as “Cat/Dog” could mean an individual preference would play its part — a cat or dog lover’s subconscious may get involved, etc. </p>
<p>To <strong>prevent the label’s meaning from affecting the selection</strong>, we have finally decided to label the buttons with <strong>nonsensical words without any clear associations</strong>: <strong>“Racted”</strong> and <strong>“Blison”</strong>. This way, only visual characteristics can affect the users’ perception of the button’s active and inactive state. Even if users didn’t determine a toggle’s state, they would need to choose the answers randomly instead of defaulting to another cognitive pattern. </p>
<p>Without further ado, here is the list of visual cues and our research questions related to them.</p>
<h4>Label</h4>
<p>With the label as a visual cue, we consider its key properties, such as its thickness, text size, and color.</p>
<p><strong>Research question 1: Bold text</strong> </p>
<p>We assume that the button with the emboldened label will be perceived as active rather than the regular text.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7473d8d0-c09f-4e6f-804a-21d47c303ccd/9-toggle-button-case-study.png" /></p>
<p><strong>Research question 2: Text size</strong></p>
<p>When two buttons with labels differing in the size of the text inside are next to each other, we expect that the one with the larger label will be perceived as active. We also expect that the larger the difference is, the easier it will be to determine the active state.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/53f0998c-34ae-4a56-b7d6-77fbb433d2b9/10-toggle-button-case-study.png" /></p>
<p><strong>Research question 3: Contrast of inverted colors in text labels</strong></p>
<p>Contrasting colors are good for distinguishing between options. However, if you need to emphasize one of them, and therefore you need one of them to have more visual weight, it’s not that convenient. Inverted colors evoke equal options.</p>
<p>We expect the combination of inverted black and white to be perceived as equal options. The same would be the case with other inverted colors, such as blue and orange, seen in the figure below. <strong>Therefore, we assume participants won’t be consistent in determining which button signals the active state.</strong></p>
<p>For this study, we presume the buttons with darker text colors (black and blue) to be considered active. Their darkness could evoke emphasized buttons, but as mentioned, we mainly expect inconsistency.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/aaa31164-be76-434b-a10b-9a159b088f80/11-toggle-button-case-study.png" /></p>
<p>It needs to be said that <strong>for people with color vision deficiency, contrast and colors, in general, are insufficient cues.</strong> We mustn’t forget that according to the NHS (National Health Service), about 8 % of men suffer from daltonism, which means they can’t rely on color cues and will need more than just a color to determine the button’s in/activation. </p>
<p><strong>Research question 4: Cultural perception of red vs. green in text labels</strong></p>
<p>Even though it raises the same concerns as the research question above, since red and green are contrasting colors, there is a culturally determined consensus about this specific pair. In western cultures, the color green is associated with the “on” (or active/open) state, while the color red is associated with the “off” (inactive/closed) state. We expect this phenomenon will manifest in the test. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/61b45d82-bdcb-4223-98ab-d9750249af19/12-toggle-button-case-study.png" /></p>
<p><strong>Research question 5: Color vs. black/white in text labels</strong></p>
<p>When combining colors and black/white, we expect <strong>the colored label to be perceived as a signal of activation</strong> because it carries more visual weight.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9be91118-4892-407b-b476-090b7ecd5a44/13-toggle-button-case-study.png" /></p>
<p><strong>Research question 6: Primary color vs. neutral colors (shades of gray) in text labels</strong></p>
<p>The principle is the same as with research question 5. Neutral colors carry less visual weight. Therefore our expectation is that <strong>the colored label will signal an active state</strong>.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/373d95a4-85fb-4a42-b9cf-ed3fe6219778/14-toggle-button-case-study.png" /></p>
<p><strong>Research question 7: Different saturation of the same color in text labels</strong></p>
<p>Our assumption is that the more saturated the color is, the more visual weight it carries. Therefore, <strong>a more intense color is expected to evoke the button’s activation</strong>.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bf8839ef-2833-4864-bffc-2f3a5372e855/15-toggle-button-case-study.png" /></p>
<h3>Filling</h3>
<p>The filling or the background of the toggle is all about color combinations. We assume that many of the same principles seen with label colors also apply here.</p>
<p><strong>Research question 8: Contrast of inverted colors in background</strong></p>
<p>The relationship between inverted colors of the button filling is analogical to the one between inverted colorations of toggle text. Since inverted colors carry the same visual weight, we expect <strong>the contrasting colors to be confusing.</strong> Which button is active will not be clear. Therefore, we expect the <strong>responses to be inconsistent.</strong></p>
<p>For this research, we have labeled the buttons with darker filings as active since the darker shade could be perceived as the active state (however, we still expect the responses to be mostly inconsistent).</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fa03643d-e35c-46fe-8e01-4ce894e70c97/16-toggle-button-case-study.png" /></p>
<p><strong>Research question 9: Cultural perception of red vs. green in background</strong></p>
<p>Since red and green are a specific case of contrasting colors (due to our western cultural perception of this pair, rather than color inversion), we assume that <strong>the green button will be perceived as the active one.</strong></p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ad4aab3b-f042-4490-a986-999ea9369b2b/17-toggle-button-case-study.png" /></p>
<p><strong>Research question 10: Different saturations of the same color in background</strong></p>
<p>As we stated with label colorations, color saturation carries a visual weight. We assume that <strong>the more saturated color will be perceived as the activation signal.</strong> In the case of a neutral color such as gray, we expect the higher value (from the HSV color model) of the filling to function as a clue.</p>
<p>We expect this effect to be more evident with more saturated colors (in this case, orange) than neutral colors (gray) since saturated colors carry more visual weight.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c2d59292-6c5f-46d3-8cb1-d615bcdcdef3/18-toggle-button-case-study.png" /></p>
<p><strong>Research question 11: Saturated and grayscale colors in background</strong></p>
<p>We expect that since the button <strong>filled with the saturated (yellow) color carries more visual weight, it will be perceived as emphasized</strong>. Therefore, it will signal an active state when standing opposite a grayscale-colored button.</p>
<p>Additionally, we predict that <strong>the distinction will be easier to make with the combination of yellow and less saturated gray</strong> because of the more evident contrast.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6481aaa5-741c-4e0c-bdcd-4a0c0c979aac/19-toggle-button-case-study.png" /></p>
<p><strong>Research question 12: Inverted design of buttons</strong></p>
<p>A common way to design toggles is to invert the color of the background with the color of the text. The problem with this visual cue is that both buttons in the pair carry a part of it: on the left, there’s the colored filling, and on the right, there’s the colored text. The blue filling might have a stronger visual weight, but <strong>we expect the distinction between the active and inactive button to be more difficult for users to interpret consistently than some other visual cues, such as color saturation.</strong></p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b55d23bf-75ab-434f-8627-4c940c50b622/20-toggle-button-case-study.png" /></p>
<h3>Outline</h3>
<p>This category of research questions focuses on the presence/absence of an outline, as well as on its placement. Although outlines can differ in several aspects, such as color or thickness, these are parallel to visual cues, which are already covered in categories <strong>Label</strong> and <strong>Filling</strong>. Hence we have dedicated this category to determine the effect of an outline in general, as well as some cues which are outline-specific.</p>
<p>Regarding the color, we have discussed its impact in the previous sections, and we expect the effect to be analogical when used on the outline.</p>
<p><strong>Research question 13: Highlighted outline of the active button</strong></p>
<p>We expect <strong>the button with a highlighted outline to be perceived as the active one</strong>.</p>
<p>This one may seem obvious, but it never does any harm to check up on it or compare its effectiveness to other visual cues.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b08ba9e8-42ad-48b0-be7a-8f47f0d4f333/21-toggle-button-case-study.png" /></p>
<p><strong>Research question 14: Inactive button coincides with the background</strong></p>
<p>This is a hybrid between background and border-based visual cues. It attempts to improve a saturated vs. grayscale background color cue, as seen in RQ11, by making it clearer that the gray-colored button is blending into the background while the colored active button is separated from it. Our concern, however, is that when the outline is missing, and the inactive button coincides with the background, <strong>it may be harder for participants to decide about the active state</strong>, since the inactive button may not be perceived as a button at all.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0763fe1d-0d22-4910-9e49-7b4d297b3171/22-toggle-button-case-study.png" /></p>
<p><strong>Research question 15: Embossed vs. debossed button</strong></p>
<p>Making something embossed is a common way to highlight something on a website. However, should we follow the guidance of making toggle buttons resemble physical buttons, then, in this case, it should be the other way around. The button that’s pushed (aka debossed) is active. Therefore, to verify whether this is true, we hypothesize that the button that’s pushed in will be perceived as “on,” while the button which is embossed and hence isn’t pushed in will be perceived as “off.” This pushed look should be even stronger when supported with a shadow effect.</p>
<p>However, the embossed button appears more “in your face,” which might signal its activation as well. <strong>We expect the distinction to be inconsistent.</strong></p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bfdd9ad8-2ea0-4577-99bf-886443712209/23-toggle-button-case-study.png" /></p>
<h3>Icons</h3>
<p>Icons provide yet another way to highlight an active button. Can they possibly outweigh all the other visual cues? To confirm the effectiveness of the icons, the designs in this research question category abandon all of the other visual stimuli in favor of including icons.</p>
<p><strong>Research question 16: Check sign</strong></p>
<p>We expect the presence of a check sign on one button to evoke an active state.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dd1df2c2-b418-43aa-92c7-b25ecabdea01/24-toggle-button-case-study.png" /></p>
<p><strong>Research question 17: Radio button</strong></p>
<p>One possibility of designing toggle buttons is to combine them with radio buttons. Radio buttons usually stand by themselves and are used in different contexts from toggle buttons. However, their signature radio button circles are an easy and clear mechanism for communicating selection, which could be used to emphasize the active side of a toggle.</p>
<p>We expect the button with the filled radio button to appear as active.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b466eef1-5125-4085-a0b3-61e4c2f15401/25-toggle-button-case-study.png" /></p>
Testing The Effectiveness Of Standalone Visual Cues
<p>We verified our assumptions in a quantitative online study. We needed to support our findings with a reliably good amount of hard data and the online research with <a href="https://www.uxtweak.com/"><strong>UXtweak tools</strong></a> was an easy way to get them. We used two versions of UXtweak’s <a href="https://www.uxtweak.com/five-second-test-tool"><strong>Five Second Test</strong></a>. UXtweak allows you to adjust the display time of the Five Second Test to your needs, so we ran one test where we showed the toggles to participants for 5 seconds and another one where we did the same for 20 seconds. We did this to see whether there would be a difference in results when the participants had more time to think about the toggles before they made decisions and answered questions.</p>
<p>We designed two variants of every tested toggle button, where either the left button (Racted) or the right button (Blison) was designed as active. We then split these variants randomly into two groups. One-half of the participants completed the research with stimulus group A while the second half was presented with group B. We did this to negate the effect of whether the visual cue was on the left or the right side.</p>
<h3>Five Second Test</h3>
<p>In the Five Second Test, the participants were shown toggle button designs one by one. Their task, given to them before each stimulus, was to first look at a toggle button for 5 seconds, then answer some questions. The same two questions were always asked. This is the first one:</p>
<p><strong>“Which option was turned on?”</strong></p>
<p>The answer was given via a radio button group, the available options being Racted (left) and Blison (right) for easy identification. </p>
<p>We considered several wordings of how this question should be formulated during our study’s design. Although this might seem marginal, the wrong wording could affect the participant’s understanding of the task and, with it, the whole study. For example, consider one of the other proposals: “Which button was pushed?” When you look at the designs, usually it’s the active button that is more visually expressive, highlighted in some way.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c2d59292-6c5f-46d3-8cb1-d615bcdcdef3/18-toggle-button-case-study.png" /></p>
<p>The psychology of perception of 2D pictures, specifically the atmospheric perspective principle, states that we perceive the objects which are less saturated and somehow blurred as further from us than the more visible ones. And if we’d asked which button was pushed, which in accordance with the physical world means further from us, we could get exactly the opposite answers than needed.</p>
<p>The second question aimed to verify the level of certainty about why the toggle option is currently active:</p>
<p><strong>“How sure do you feel about your answer?”</strong></p>
<p>Participants could answer on 5 points Likert scale, starting at “Not sure at all” and ending with an “Absolutely sure.” This gave us additional information about the clarity of the visual cues. Since some answer to a first question was required to continue, having a secondary means of comparing visual cues was useful in case the number of participants who picked the expected answer was the same in both.</p>
<p>To make sure that the instructions were understood correctly, in the first warm-up task (which wasn’t analyzed later), we asked participants one more question: “Which option have you chosen? The one that was…”, following with two answer options: “On” and “Off.” This question made the participants think about what they were supposed to do, and it verified whether they would perform the study how they were meant to.</p>
<h3>Twenty Second Test</h3>
<p>Analogically to the Five Second Test, the participant’s task was to look at the designs for a limited amount of time, although this time, the period was 20 seconds. We decided to conduct this variant of the study as well to check whether the performance gets better with more time to observe the designs.</p>
<p>The time period was the only thing different from the 5-second variant.</p>
<h3>Questionnaire During The Study</h3>
<p>At the beginning of the study, each participant was asked to fill in a small survey to help us profile the participants. We were interested in:</p>
<ul>
<li>The age of the participants,</li>
<li>Their gender,</li>
<li>Their highest achieved level of education,</li>
<li>The frequency at which they browse the web,</li>
<li>The purpose of why they browse the web most,</li>
<li>A self-evaluation of their skills as a web user.</li>
</ul>
<p>Having this data would let us understand the composition of our user sample but also search for detailed insights, such as whether the frequency of web browsing corresponds to the performance in the test or whether the perception of toggles is age-dependent (younger people who are more active online may have more experience with using them).</p>
<p>After the test was completed, we gave the participants an opportunity to leave us a message in a post-study question.</p>
<h3>Participants</h3>
<p>In total, we aimed to collect 100 responses to represent the general population. This data background would allow us later to generalize our findings during the interpretation of results.</p>
<p>For recruitment, we used <a href="https://www.uxtweak.com/user-participant-recruitment"><strong>UXtweak’s User Panel</strong></a>, which was perfect for an online unmoderated study with the need for a large number of participants. With the User Panel, we could comfortably order the participants and select some characteristics they should possess. We involved people from 16 to 75 years old, and we selected English-speaking countries’ participants (Canada, USA, GB, and Australia) to run the recruitment since our study was designed in English.</p>
Results
<p>Let’s continue in <a href="https://www.smashingmagazine.com/2022/08/toggle-button-case-study-part-2/">Part 2</a> to learn about our findings and how to make your toggle buttons clear to everyone at first sight.</p>
<h3>Related Reading on Smashing Magazine</h3>
<ul>
<li>“<a href="https://www.smashingmagazine.com/2019/02/buttons-interfaces/">When Is A Button Not A Button?</a>,” Vadim Makeev</li>
<li>“<a href="https://www.smashingmagazine.com/2022/08/back-button-ux-design/">Designing A Better Back Button UX</a>,” Vitaly Friedman</li>
<li>“<a href="https://www.smashingmagazine.com/2017/09/building-inclusive-toggle-buttons/">Building Inclusive Toggle Buttons</a>,” Heydon Pickering</li>
<li><a href="https://www.smashingmagazine.com/2021/08/frustrating-design-patterns-disabled-buttons/">“Frustrating Design Patterns: Disabled Buttons</a>,” Vitaly Friedman</li>
<li>“<a href="https://www.smashingmagazine.com/2018/01/ghost-button-design/">Ghost Button Design: Is This Really Still A Thing (And Why)?</a>,” Suzanne Scacca</li>
</ul>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Eduard Kuric)</author>
      <enclosure
        url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d5921d91-e0fb-4e2c-a79b-6691111f2606/toggle-button-case-study-part-1.jpg"
        length="0" type="image/jpg"/>
    </item>
    <item>
      <title><![CDATA[Implementing A Reset Password Feature With Next.js Dynamic Routes]]></title>
      <link>
        https://smashingmagazine.com/2022/08/implementing-reset-password-feature-nextjs-dynamic-routes/
      </link>
      <guid>
        https://smashingmagazine.com/2022/08/implementing-reset-password-feature-nextjs-dynamic-routes/
      </guid>
      <pubDate>Fri, 19 Aug 2022 10:00:00 GMT</pubDate>
      <description>
        <![CDATA[Most users tend to forget their passwords, so create experiences that will always be valuable for people when they use your products. In this article, we’ll discuss how to implement a password-reset feature with Next.js dynamic routes while prioritizing the UX.]]></description>
      <content:encoded><![CDATA[<p>In a general sense, authentication poses itself as a roadblock to many people when they are trying to get started with a particular framework, and Next.js isn’t left behind.</p>
<p>Although, there are lots of resources around building authenticated applications with Next.js. Well, there’s even an <a href="https://next-auth.js.org/">open-source project</a> that literally handles authentication from the ground up.</p>
<p>But, the scope of this article doesn’t revolve around the whole concept of authentication. We’re only picking a specific pattern of the authentication process: the “reset password” flow and how it can be implemented on the client-side — frontend — of a web application.</p>
<p>In this article, you’re going to see how this feature can be implemented by using the common data-fetching tool, Axios — the built-in dynamic routes feature of Next.js and the <code>useRouter</code> hook.</p>
An Overview Of The Reset-Password Flow
<p>Since the advent of the web, Engineers have always strived to provide solutions to the problems that arose during the early days of the web — and the security of software on the web is no exception.</p>
<p>There’s this popular saying that goes thus: “Users will always forget their passwords,” and that is the absolute truth. A lot of people even dread the “reset-password” page because, come to think of it, after spending a lot of time trying to guess their passwords — all to no avail — they’re either frustrated or angry as they land on this particular page.</p>
<p>As we create user interfaces, we should also try as much as possible to make the experience enjoyable for the users. As much as we’d love to just get over the flow of the reset password process, the UX of that flow should be prioritized too.</p>
<p>The common flow of the password reset process can be seen below.</p>
<ul>
<li>The user is frustrated after trying to sign without success. They click on the “password-reset” link, and they’re redirected to the corresponding page. The user interface that they see is the typical web form that’ll take in either their email address or username.</li>
<li>When they type their email address or username into the input field, they click on the button which has the common “email me a recovery link” text.</li>
<li>They get a confirmation that a secure link has been sent to their email. Sometimes, this confirmation text can be displayed in a card-like component or a modal that fades out over time.</li>
</ul>
<p><strong>Note</strong>: <em>For security purposes and good UX, it is good to use a text that is quite similar to this: “An email has been sent to your inbox. Please click the link when you get it.” You can construct this sentence anyhow you deem fit, as long as it does not reveal that the email or username they entered exists in the database. This approach prevents attackers from knowing if that email exists at all, thus sabotaging any phishing attempt they may want to try with the said email address. As for the UX, the text doesn’t assure the user that the credentials they’ve entered are the correct ones. This, in turn, allows them to double-check whatever credentials they’re submitting.</em></p>
<ul>
<li>The link that is sent to their email address contains a JWT and their <code>user_id</code>, or in this case, their email address.</li>
<li>Upon clicking on that link, they’re redirected to the route/page where they can input their new password. The route that the user will be on may be of the form below</li>
</ul>
<pre><code>https://localhost:3000/reset-password/user-email/JWToken</code></pre>

<ul>
<li>The last part of the flow is to verify if the JWT that is generated is associated with the user’s account. If not, we throw an error by rendering the error message that is obtained from the backend.</li>
</ul>
<p>Now that you’ve seen how the “reset password” flow is structured, let’s see how it can be implemented with Next.js.</p>
Understanding Dynamic Routes
<p>In this section, we’ll go over the concept of dynamic routes by illustrating it with the folder structure of a Next.js project and see how we’ll integrate it into the “reset password” feature. But first, let’s set up a Next.js app.</p>
<pre><code>npx create-next-app app-name</code></pre>

<p>The command above does that for us. The Next.js team has already shipped a new update to the framework, and they’ve also introduced a couple of new folders and features in the default project structure. However, we won’t be covering much on that aspect, as it is out of the scope of this article. You can read more about the updates <a href="https://nextjs.org/blog/layouts-rfc">here</a> if you want to.</p>
<p>In the snippet below, you’ll see the basic structure of the files we’ll be interacting with in this article.</p>
<pre><code>└── pages /
    ├── forgot-password/
    │   └── [token]/
    │       └── [email].js
    ├── _app.js
    └── index.js
</code></pre>

<p>Above, you’ll see that the files in the folder structure are quite small. That’s because I want to be concise as much as possible in this article.</p>
<p>And since the implementation of the “password reset” flow is our utmost concern, I think it’ll be best if we have less clutter. Now, let’s get a bit of an understanding of this structure.</p>
<p>You’ll notice that we have the <code>forgot-password</code> folder in the <code>pages</code> directory, which contains some files. But the naming convention of these files is quite different from the way other files are named. The name of the files — token and email.js — are wrapped with a pair of square brackets.</p>
<p>Folders and files that are named like this are referred to as dynamic routes, and since they’re in the <code>pages</code> directory, they automatically become routes that can be accessed by the browser. They are dynamic because the values that these routes take are not static, which means that they change over time.</p>
<p>This pattern of naming files is commonly seen in action when you decide to build a blog or when you’re interacting with data that changes based on the type of user that is logged into an application. You can take a look at how I utilized this feature of Next.js when I was <a href="https://meje.dev/blog/how-i-built-this-blog">building my blog</a>. You can also learn more about it in the <a href="https://nextjs.org/docs/routing/dynamic-routes">Next.js docs</a>.</p>
<p>In the <code>forgot-password</code> folder, the path to where the UI containing the forgot password form can be accessed here. Take a look at it below.</p>
<pre><code>http://localhost:3000/forgot-password/token/email</code></pre>

<p>Since it is a dynamic route, the <code>token</code> and <code>email</code> URL parameters will always change based on the user that is trying to reset their password. The token and email for user A will be different from that of user B.</p>
Reading Url Parameters With The Userouter Hook
<p>The <code>useRouter</code> hook in Next.js can be used to achieve a lot of practical frontend UI implementations — from the common idea of implementing an active navbar item with the <code>.pathname</code> key, to more complex features.</p>
<p>Let’s see how we can read the URL parameters from dynamic routes with the <code>useRouter</code> hook now, shall we? To do that, you’ll have to import the module into your page/component first.</p>
<div>
<pre><code>import { useRouter } from 'next/router'
export default function PageComponent({ children }) {
  const router = useRouter()
  return (
    &lt;React.Fragment&gt;
      {/<em> page content falls below </em>/}
      &lt;div&gt;{children}&lt;/div&gt;
    &lt;/React.Fragment&gt;
  )
}
</code></pre>
</div>

<p>The snippet above shows the basic usage of the hook. Since we’re interested in the query parameters of the URL, it’ll be best if we destructure the <code>query</code> method of the hook instead of doing something like this: <code>router.query</code>. We’ll just do something similar below.</p>
<div>
<pre><code>import { useRouter } from 'next/router'
const { query } = useRouter()
</code></pre>
</div>

<p>We can now go ahead to create variables that’ll store the URL parameters that we want. The snippet below shows how you can do that.</p>
<div>
<pre><code>const token = query.token
const email = query.email
</code></pre>
</div>

<p>Note that the <code>query.token</code> and <code>query.email</code> values are a result of the name of the files. Recall from the folder structure in the <code>forgot-password</code> folder where we have the <code>[email].js</code> and <code>[token]</code> files. If you rename those files to <code>[userEmail].js</code> and <code>[userToken]</code> respectively, the pattern of assigning these variables will become something like the one below.</p>
<div>
<pre><code>const token = query.userToken
const email = query.userEmail
</code></pre>
</div>

<p>You can always log these variables to the console to see the result. </p>
<p>Now that you’ve gotten an understanding of how these parameters are obtained from the URL, let’s get started by building the structure of the forms.</p>
Building The Forms
<p>In this section, we’ll walk through the process of building the form and how you can use Axios to perform data fetching via the arbitrary API endpoint. We won’t be focusing on the styling of these forms and the explanation of the structure. I’m assuming you already know how to structure and style a basic React form. So let’s get started with the form layout on the forget-password route.</p>
<div>
<pre><code>import React from 'react'
import axios from 'axios'
import { ErrModal, SuccessModal } from '../components/Modals'

export const DefaultResetPassword = () =&gt; {
  const [email, setEmail] = React.useState('')
  const [loading, setLoading] = React.useState(false)

  const handleForgot = () =&gt; { } // we’ll see this later

  return (
    &lt;div&gt;
      &lt;form onSubmit={handleForgot} className="reset-password"&gt;
        &lt;h1&gt;Forgot Password&lt;/h1&gt;
        &lt;p&gt;You are not alone. We’ve all been here at some point.&lt;/p&gt;
        &lt;div&gt;
          &lt;label htmlFor="email"&gt;Email address&lt;/label&gt;
          &lt;input
            type="email"
            name="email"
            id="email"
            placeholder= “your email address”
            value={email}
            onChange={(e) =&gt; setEmail(e.target.value)}
            required
          /&gt;
        &lt;/div&gt;
        &lt;button name="reset-pwd-button" className="reset-pwd"&gt;
          {!loading ? ‘Get secure link’: ‘Sending...’}
        &lt;/button&gt;
      &lt;/form&gt;
    &lt;/div&gt;
  )
}
</code></pre>
</div>

<p>The snippet above shows the basic structure of the UI that you’ll see when you get to the forgot-password route. You’ll notice the text in the paragraph tag below the bold “Forgot password” text.</p>
<div>
<pre><code>&lt;p&gt;You are not alone. We’ve all been here at some point&lt;/p&gt;
</code></pre>
</div>

<p>With a type of text like the one above, you are improving the user experience of people who get to the forgot password page of your app. You are assuring them that it is not a big deal that they forgot their password(s), so there’s no need to feel bad about it.</p>
<p>You don’t necessarily need to use the exact text above. You can just make sure that whatever text you are using has a tone of <strong>empathy</strong>.</p>
<p>Now, let’s move on to the important part of this form, which is where we need to declare a function that’ll send the email that the user enters in the input field to the backend.</p>
<div>
<pre><code>import { authEndpoints } from '../endpoints'

export const DefaultResetPassword = () =&gt; {
  const handleForgot = async (e) =&gt; {
    e.preventDefault()
    try {
      setLoading(true)
      const response = await axios({
        method: 'POST',
        url: authEndpoints.recover,
        data: {
          email,
        },
        headers: {
          'Content-Type': 'application/json',
        },
      })
      setResestSuccess(response.data.msg)
      setLoading(false)
      setResetError('')
    } catch (error) {
      setLoading(false)
      const { data } = error.response
      setResetError(data.msg)
      setResestSuccess(null)
    }
  }
  return &lt;div&gt;{/* ...previous form component */}&lt;/div&gt;
}
</code></pre>
</div>

<p>From the snippet above, you’ll notice that we’re importing the API endpoint that we’ll be sending a POST request to — and that’s why we’re passing it as a variable to the <code>url</code> key in the Axios method.</p>
<p>The POST request receives the user’s email address as payload, which in turn will be validated at the backend, and a JWT will be generated for that email address which will be used to authorize the password reset process of the user.</p>
<div>
<pre><code>setResestSuccess(response.data.msg)
setLoading(false)
setResetError('')
catch (error) {
  setLoading(false)
  const { data } = error.response
  setResetError(data.msg)
  setResestSuccess(null)
}
</code></pre>
</div>

<p>When you take a look at the snippet above, you’ll notice that we’re using some already-declared state callback functions of the state variables.  </p>
<p>An example is the <code>setLoading</code> function which has its value set to <code>true</code> in the <code>try</code> block. Then, its value is set to false when the data has been successfully sent. And if it doesn’t, we have a <code>catch</code> block that will “catch” the error and displays the error message that we’ve destructured from the endpoint.  </p>
<p>You’ll also notice that there are a couple of state callback functions in the snippet above, like <code>setResestSuccess</code> and <code>setResetError</code>. </p>
<p>The setters are obtained from the declaration of the state variables. See them below.</p>
<div>
<pre><code>import React from 'react'
import { ErrModal, SuccessModal } from '../components/Modals'

export const DefaultResetPassword = () =&gt; {
  const [resetSuccess, setResestSuccess] = React.useState()
  const [resetError, setResetError] = React.useState()
  return (
    &lt;div&gt;
      {resetError ? &lt;ErrModal message={resetError} /&gt; : null}
      {resetSuccess ? &lt;SuccessModal message={resetSuccess} /&gt; : null}
      &lt;form onSubmit={handleForgot} className="reset-password"&gt;
        {/* form content */}
      &lt;/form&gt;
    &lt;/div&gt;
  )
}
</code></pre>
</div>

<p>The error or success messages gotten from the backend can be rendered in the UI to let the user know the status of their action(s).</p>
<p>You’ll notice that we’re using custom modal components to render the message. These components receive the message as props, and they can be reused across the codebase. Take a look at the structure of the components below.</p>
<div>
<pre><code>export const SuccessModal = ({ message }) =&gt; {
  return (
    &lt;div className="auth-success-msg"&gt;
      &lt;p&gt;{message}&lt;/p&gt;
    &lt;/div&gt;
  )
}
export const ErrModal = ({ message }) =&gt; {
  return (
    &lt;div className="auth-err-msg"&gt;
      &lt;p&gt;{message}&lt;/p&gt;
    &lt;/div&gt;
  )
}
</code></pre>
</div>

<p>You can style these components uniquely so that you can be able to distinguish the “error” modal from the “success” modal. The common convention is to use red color for error messages and green color for success messages. How you choose to style these components is completely up to you.</p>
<p>In addition to all that has been said, we need a way to verify that the correct data type is being passed as a prop to the modal component. This can be achieved with the “prop-type” module in react.</p>
<pre><code>propTypes.ErrModal = {
  message: propTypes.string.isRequired,
}
propTypes.SuccessModal = {
  message: propTypes.string.isRequired,
}
</code></pre>

<p>The type-checking process in the snippet above ensures that the data the component receives must be a string, and it is required. If the component does not receive a prop with a string value, React will throw an error.</p>
<p>Now that we’ve covered the important aspect of the first form and the building blocks of what we’ll be replicating in the reset-password route. Let’s get started by taking a look at the layout of the form below.</p>
<div>
 <pre><code>import axios from "axios";
import React from “react”;
import Head from “next/head”;
import { useRouter } from "next/router";
import { SuccessModal, ErrModal } from "../components/Modals";

const ResetPassword = () =&gt; {
  const [newPassword, setNewPassword] = React.useState("");
  const [loading, setLoading] = React.useState(false);
  const [resetPasswordSuccess, setResetPasswordSuccess] = React.useState();
  const [resetPasswordError, setResetPasswordError] = React.useState();

  const { query } = useRouter();
  const token = query.token;
  const email = query.email;

  const resetPassword = () =&gt; { } // coming in later...

  return (
    &lt;React.Fragment&gt;
      &lt;Head&gt;
        &lt;title&gt;Reset your password&lt;/title&gt;
      &lt;/Head&gt;
      &lt;div&gt;
        {email &amp;&amp; token ? (
          &lt;div className="auth-wrapper"&gt;
            {resetPasswordSuccess ? (
              &lt;SuccessModal message={resetPasswordSuccess} /&gt;
            ) : (
              null
            )}
            {resetPasswordError ? (
              &lt;ErrModal message={resetPasswordError} /&gt;
            ) : (
              null
            )}
            &lt;form onSubmit={resetPassword} className="reset-password"&gt;
              &lt;h1&gt;Reset Password&lt;/h1&gt;
              &lt;p&gt;Please enter your new password&lt;/p&gt;
              &lt;div&gt;
                &lt;label htmlFor="password"&gt;Password*&lt;/label&gt;
                &lt;input
                  name="password"
                  type="password"
                  id="password"
                  placeholder="enter new pasword"
                  value={newPassword}
                  onChange={(e) =&gt; setNewPassword(e.target.value)}
                /&gt;
              &lt;/input&gt;
              &lt;button
                name="reset-pwd-button"
                className="reset-pwd"
              &gt;
                {!loading ? "Reset" : "Processing..."}
              &lt;/button&gt;
            &lt;/form&gt;
          &lt;/div&gt;
        ) : (
          &lt;p&gt;The page you're trying to get to isn't available&lt;/p&gt;
        )}
      &lt;/div&gt;
    &lt;/React.Fragment&gt;
  );
};
</code></pre>
</div>

<p>Since we’ve gone through the rudiments of the first form in the previous section, the snippet above contains almost the same thing in the previous form.</p>
<p>You can see how we’re reading the parameters from the URL and the declarations of the password reset error and success variables too.</p>
<div>
<pre><code>const [resetPasswordSuccess, setResetPasswordSuccess] = React.useState()
const [resetPasswordError, setResetPasswordError] = React.useState()
const { query } = useRouter()
const token = query.token
const email = query.email
</code></pre>
</div>

<p>You’ll also notice the way we’re conditionally rendering the reset password form by checking if the <code>email</code> and <code>token</code> variables are present in the URL; if these variables are false (i.e., they are not in the URL), we render a text that says that the page they’re looking for isn’t available.</p>
<div>
<pre><code>{
  email &amp;&amp; token ? (
    &lt;div className="auth-wrapper"&gt;
      &lt;FormComponentt /&gt;
    &lt;/div&gt;
  ) : (
    &lt;p&gt;The page you’re trying to get to isn’t available&lt;/p&gt;
  )
}
</code></pre>
</div>

<p>Now, let’s take a look at the handler function that we’d use in sending the new password of the user — coupled with the token and the email for the purpose of verification — to the backend through the API endpoint.</p>
<div>
<pre><code>import { authEndpoints } from '../endpoints'
const resetPassword = async (e) =&gt; {
  e.preventDefault()
  try {
    setLoading(true)
    const response = await axios({
      method: 'POST',
      url: authEndpoints.resetPassword,
      data: {
        token,
        email,
        password: newPassword,
      },
      headers: {
        'Content-Type': 'application/json',
      },
    })
    setResetPasswordSuccess(response.data.msg)
    setLoading(false)
    setTimeout(() =&gt; {
      router.push('/')
    }, 4000)
    setResetPasswordError('')
  } catch (error) {
    setLoading(false)
    setResetPasswordError(error.response.data.msg)
    setResetPasswordSuccess(null)
  }
}
</code></pre>
</div>

<p>The snippet above is an asynchronous handler function. We’re using it to send a POST request with the user’s new password, the access token, and the email address — which we grabbed from the query parameters at the URL segment.</p>
<div>
<pre><code>setTimeout(() =&gt; {
  router.push('/')
}, 4000)
</code></pre>
</div>

<p>When you take a look at the snippet above, you’ll see how we’re using the <code>setTimeout</code> method in JavaScript and Next.js’ <code>useRouter</code> hook to redirect the user to the home page — which is the login page in this case — after four seconds (you can reduce this time frame if you want to), so they can log in again.</p>
<p>Doing this also adds to the good user experience metric, as it prevents the user from looking for a link or a button that takes them back to the login page.</p>
Final Thoughts
<p>There is a lot of information about the best practices and awesome password-reset design patterns out there. This article is just a frontend implementation of a password-reset flow which also factors in the issue of user experience. It is not enough to just create a password reset feature without considering the UX of the people who would use this feature.</p>
<p>Thank you for reading. I hope this article has been helpful!</p>
<h3>Further Reading On Smashing Magazine</h3>
<ul>
<li>“<a href="https://www.smashingmagazine.com/2021/05/implement-authentication-nextjs-auth0/">How To Implement Authentication In Next.js With Auth0</a>,” Facundo Giuliani </li>
<li>“<a href="https://www.smashingmagazine.com/2022/04/dynamic-data-fetching-authenticated-nextjs-app/">Dynamic Data-Fetching In An Authenticated Next.js App</a>,” Caleb Olojo</li>
<li>“<a href="https://www.smashingmagazine.com/2021/11/localizing-your-nextjs-app/">Localizing Your Next.js App</a>,” Átila Fassina</li>
<li>“<a href="https://www.smashingmagazine.com/2016/06/the-current-state-of-authentication-we-have-a-password-problem/">The Current State Of Authentication: We Have A Password Problem</a>,” Drew Thomas</li>
</ul>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Caleb Olojo)</author>
      <enclosure
        url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/59a0f37a-cd1e-4a3c-abaf-bbf803d81034/implementing-reset-password-feature-nextjs-dynamic-routes-sharing-card.jpg"
        length="0" type="image/jpg"/>
    </item>
    <item>
      <title><![CDATA[An Introduction To Context Propagation In JavaScript]]></title>
      <link>https://smashingmagazine.com/2022/08/react-context-propagation-javascript/</link>
      <guid>https://smashingmagazine.com/2022/08/react-context-propagation-javascript/</guid>
      <pubDate>Thu, 18 Aug 2022 09:00:00 GMT</pubDate>
      <description>
        <![CDATA[React popularized context-propagation within applications with the context API. Evyatar Alush brings a brief intro to context propagation in JavaScript and how you can build React Context yourself.]]></description>
      <content:encoded><![CDATA[<p>React popularized the idea of context-propagation within our applications with its context API. In the world of React, context is used as an alternative to prop-drilling and synchronizing state across different parts of the apps.</p>
<blockquote>“Context provides a way to pass data through the component tree without having to pass props down manually at every level.”<br /><br />— React Docs</blockquote>

<p>You can imagine React’s context as some kind of a “wormhole” that you can pass values through somewhere up your component tree and access them further down in your children’s components.</p>
<p>The following snippet is a rather simplistic (and pretty useless) example of React’s context API, but it demonstrates how we can use values defined higher up in the component tree without passing them explicitly to the child components.</p>
<p>In the snippet below, we have our app that has a <code>Color</code> component in it. That Color component displays a message containing the message defined in its parent component — the app, only without having it being passed directly as a prop to the component, but rather — having it “magically” appear through the use of <code>useContext</code>.</p>
<pre><code>import {createContext, useContext} from 'react'

const MyContext = createContext();

function App() {
  return (
    &lt;MyContext.Provider value={color: "red"} &gt;
      &lt;Color/ &gt;
    &lt;/MyContext.Provider &gt;
  );
}

function Color() {
  const {color} = useContext(MyContext);

  return &lt;span &gt;Your color is: {color}&lt;/span &gt;
}
</code></pre>

<p>While the use-case for context propagation is clear when building user-facing applications with a UI framework, the need for a similar API exists even when not using a UI framework at all or even when not building UI.</p>
Why Should We Care About This?
<p>In my eyes, there are two reasons to actually try and implement it.</p>
<p>First, as a user of a framework — it is very important to understand how it does things. We often look at the tools we use as “magic” and things that just work. Trying to build parts of them for yourself demystifies it and helps you see that there’s no magic involved and that under the hood, things can be quite simple.</p>
<p>Second, the context API can come in handy when working on non-UI apps as well.</p>
<p>Whenever we build any sort of a medium to a large application, we are faced with functions that call one another, and the call stack may go multiple layers deep. Having to pass arguments further down can create a lot of mess — especially if you don’t use all these variables at all levels. In the world of React, we call it “prop drilling.”</p>
<p>Alternatively, if you are a library author and you rely on callbacks passed to you by the consumer, you may have variables declared at different levels of your runtime, and you want them to be available further down. As an example, take a unit testing framework.</p>
<pre><code>describe('add', () =&gt; {
  it('Should add two numbers', () =&gt; {
    expect(add(1, 1)).toBe(2);
  });
});
</code></pre>


<p>In the following example, we have this structure:</p>
<ol>
<li><code>describe</code> gets called, and calls the callback function passed to it.</li>
<li>within the callback, we have an <code>it</code> call.</li>
</ol>
What Do We Want Done?
<p>Let’s now write the basic implementation for our unit testing framework. I am taking the very naive and happy-path approach to make the code as simple as possible, but this, of course, not something you should use in real life.</p>
<pre><code>function describe(description, callback) {
  callback()
}

function it(text, callback) {
  try {
    callback()
    console.log("✅ " + text)
} catch {
    console.log("🚨 " + text)
  }
}
</code></pre>

<p>In the example above, we have the “describe” function that calls its callback. That callback may contain different calls to “it.” “it,” in its turn, logs whether the test is successful or failing.</p>
<p>Let’s assume that, along with the test message, we also want to log the message from “describe”:</p>
<pre><code>describe('calculator: Add', () =&gt; {
  it("Should correctly add two numbers", () =&gt; {
    expect(add(1, 1)).toBe(2);
  });
});
</code></pre>


<p>Would log to the console the test message prepended with the description:</p>
<pre><code>"calculator: Add &gt; ✅ Should correctly add two numbers"
</code></pre>


<p>To do this, we need to somehow have the description message “hop over” the user code and, somehow, find its way into the “it” function implementation.</p>
What Solutions Might We Try?
<p>When trying to solve this problem, there are multiple approaches we might try. I will try to go over a few, and demonstrate why they might not be suitable in our scenario.</p>
<ul>
<li><strong>Using “this”</strong>
We could try to instantiate a class and have the data propagate through “this,” but there are two problems here. “this” is very finicky. It doesn’t always work as expected, especially when factoring arrow functions, which use lexical scoping to determine the current “this” value, which means our consumers will have to use the function keyword.
Along with that, there is no relationship between “test” and “describe,” so there is no real way to share the current instance.</li>
<li><strong>Emitting an event</strong>
To emit an event, we need someone to catch it. But what if we have multiple suites running at the same time? Since we have no relationship between the test calls and their respected “describes,” what would prevent the other suites from catching their events as well?</li>
<li><strong>Storing the message on a global object</strong>
Global objects suffer from the same problems as emitting an event, and also, we pollute the global scope.
Having a global object also means that our context value can be inspected and even modified from outside of our function run, which can be very risky.</li>
<li><strong>Throwing an error</strong>
This can technically work: our “describe” can catch errors thrown by “it,” but it means that on the first failure, we will halt the execution, and no further tests will be able to run.</li>
</ul>
Context To The Rescue!
<p>By now, you must have guessed that I am advocating for a solution that would be somewhat similar in design to React’s own context API, and I think that our basic unit testing example could be a good candidate for testing it.</p>
The Anatomy Of Context
<p>Let’s break down what are the parts that React’s context is comprised of:</p>
<ol>
<li>React.createContext — creates a new context, basically defines a new specialized container for us.</li>
<li>Provider — the return value createContext. This is an object with the “provider” property. The provider property is a component in itself, and when used within a React application, it is the entry to our “wormhole.”</li>
<li>React.useContext — a function that, when called within a React tree that’s wrapped with a context, serves as an exit point from our wormhole, and allows to pull values out of it.</li>
</ol>
<p>Let’s take a look at React’s own context:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6d5d7d08-a4b1-4978-87ba-4803dd98021a/1-react-context-without-react.jpg" /></p>
<p>It looks like the React context object is quite complex. It contains a Provider and a Consumer that are actually React Elements. Let’s keep this structure in mind going forward.</p>
<p>Knowing what we now know about React’s context, let’s try to think how its different parts should interact with our unit testing example. I am going to make a nonsensical scenario just so we can imagine the different components working in real life.</p>
<pre><code>const TestContext = createContext()

function describe(description, callback) {
  // &lt;TestContext.Provider value={{description}} &gt;
callback()
  // &lt;/TestContext.Provider &gt;
}

function it(text, callback) {
  // const { description } = useContext(TestContext);

  try {
    callback()
    console.log(description + " &gt; ✅ " + text)
  } catch {
    console.log(description+ " &gt; 🚨 " + text)
  }
}
</code></pre>

<p>But clearly, this cannot work. First, we can’t use React Elements in our vanilla JS code. Second, we cannot use React’s context outside of React. Right? Right.</p>
<p>So let’s adapt that structure into real JS:</p>
<pre><code>const TestContext = createContext()

function describe(description, callback) {

  TestContext.Provider({description}, () =&gt; {
callback()
  });
}

function it(text, callback) {
  const { description } = useContext(TestContext);

  try {
    callback()
    console.log(description + " &gt; ✅ " + text)
  } catch {
    console.log(description+ " &gt; 🚨 " + text)
  }
}
</code></pre>

<p>OK, so this is starting to look more like JavaScript. What do we have here?</p>
<p>Well, mostly — instead of our ContextProvider component, we’re using TextContext.Provider, which takes an object with the references to our values, and <code>useContext()</code> that serves as our portal — so we can tap into our wormhole.</p>
<p>Can this work, though?
Let’s try.</p>
Drafting Our API
<p>Now that we have the general concept of how we’re going to use our context, let’s start by defining the functions we’re going to expose. Since we already know how the React Context API looks like, we can base it on that.</p>
<pre><code>function createContext() {
  return {
    Provider,
    Consumer
  }

  function Provider(value, callback) {}

  function Consumer() {}
}

function useContext(ctxRef) {}
</code></pre>

<p>We’re defining two functions, just like React. <code>createContext</code> and <code>useContext</code>. createContext returns a Provider and a Consumer, just like React’s context, and useContext takes in a context reference.</p>
Some Concepts To Be Aware Of Before We Dive In
<p>What we’re going to do from here on will build upon two core ideas that are important for JavaScript developers. I am not going to explain them here, but if you feel shaky about these topics, you are more than encouraged to read up on them:</p>
<ol>
<li>JavaScript Closures
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures">From MDN</a>: “A <strong>closure</strong> is the combination of a function bundled together (enclosed) with references to its surrounding state (the <strong>lexical environment</strong>). In other words, a closure gives you access to an outer function’s scope from an inner function. In JavaScript, closures are created every time a function is created, at function creation time.”</li>
<li>JavaScript’s Synchronous Nature
At its base, Javascript is synchronous and blocking. Yes, it has async promises, callback’s and async/await — and they will require some special handling, but for the most part, let’s treat JavaScript as synchronous, because unless we get to those realms, or VERY weird legacy edge case browser implementations, JavaScript code is synchronous.</li>
</ol>
<p>These two seemingly unrelated ideas are what allow our context to work. The assumption is that, if we set some value within <code>Provider</code> and call our callback, our values will remain and be available all throughout our synchronous function run. We just need a way to access it. That’s what <code>useContext</code> is for.</p>
Storing Values In Our Context
<p>Context is used to propagate data throughout our call stack, so the first thing we want to do is actually store information on it.
Let’s define a <code>contextValue</code> variable within our <code>createContext</code> function. Residing within the closure of <code>createContext</code>, guarantees that all functions defined within createContext will have access to it even later on.</p>
<pre><code>function createContext() {
  let contextValue = undefined;

  function Provider(value, callback) {}

  function Consumer() {}

  return {
    Provider,
    Consumer
  }
}
</code></pre>

<p>Now, that we have the value stored in the context, our <code>Provider</code> function can store the value it accepts on it, and the <code>Consumer</code> function can return it.</p>
<pre><code>function createContext() {
  let contextValue = undefined;

  function Provider(value, callback) {
    contextValue = value;
  }

  function Consumer() {
    return contextValue;
  }

  return {
    Provider,
    Consumer
  }
}
</code></pre>

<p>To access the data from within our function, we can simply call our Consumer function, but just so our interface works exactly like React’s, let’s also make useContext have access to the data.</p>
<pre><code>function useContext(ctxRef) {
  return ctxRef.Consumer();
}
</code></pre>

Calling Our Callbacks
<p>Now the fun part begins. As mentioned, this method relies on JavaScript synchronous nature. This means that from the point we run our callback, we <em>know</em>, for certain, that no other code will run — which means that we don’t <em>really</em> need to protect our context from being modified during our run, but instead, we only need to clean it up immediately after our callback is done running.</p>
<pre><code>function createContext() {
  let contextValue = undefined;

  function Provider(value, callback) {
    contextValue = value;
    callback();
    contextValue = undefined;
  }

  function Consumer() {
    return contextValue;
  }

  return {
    Provider,
    Consumer
  }
}
</code></pre>

<p>That’s all there is to it. Really. If our function is called with the Provider function, all throughout its execution it will have access to the Provider value.</p>
What If We Have A Nested Context?
<p>Nesting of contexts is something that can happen. For example, when I have a <code>describe</code> within a <code>describe</code>. In such a case, our context will break when exiting the inner-most context, because after each callback run, we reset the context value to undefined, and since both layers of the context share the same closure — the inner-most Provider will reset the value for the layers above it.</p>
<pre><code>function Provider(value, callback) {
  contextValue = value;
  callback();
  contextValue = undefined;
}
</code></pre>


<p>Luckily, it is very easy to handle. When entering a context, all we need to do is save its current value in a variable and set it back to it when we exit the context:</p>
<pre><code>function Provider(value, callback) {
  let currentValue = contextValue;
  contextValue = value;
  callback();
  contextValue = currentValue;
}
</code></pre>

<p>Now, whenever we step out of context, it will go back to the previous value, and if there are no more layers of context above, we will go back to the initial value — which is undefined.</p>
<p>Another feature that we didn’t implement today is the default value for the context. In React, you can initialize the context with a default value that will be returned by the Consumer/useContext in case we are not inside a running context.</p>
<p>If you’ve got this far, you have all the knowledge and tools to try and implement it by yourself — I’d love to see what you come up with.</p>
Is This Being Used Anywhere?
<p>Yes! I actually built the <a href="https://www.npmjs.com/package/context">context package on NPM</a> that does exactly that, with some modifications and a bunch of more features — including full typescript support, merging of nested contexts, return values from the “Provider” function, context initial values, and even context registration middleware.</p>
<p>You can inspect the full source code of the package here: <a href="https://github.com/ealush/vest/blob/latest/packages/context/src/context.ts">https://github.com/ealush/vest/blob/latest/packages/context/src/context.ts</a></p>
<p>And it is being used extensively inside <a href="https://github.com/ealush/vest">Vest validation framework</a>, a form validation framework that’s inspired by unit testing libraries such as Mocha or Jest. Context serves as Vest’s main runtime, as can be seen <a href="https://github.com/ealush/vest/blob/latest/packages/vest/src/core/ctx/ctx.ts">here</a>.</p>
<p>I hope you’ve enjoyed this brief intro to context propagation in JavaScript, and that it showed you that there’s no magic at all behind some of the most useful React APIs.</p>
<h3>Further Reading on Smashing Magazine</h3>
<ul>
<li>“<a href="https://www.smashingmagazine.com/2020/01/introduction-react-context-api/">An Introduction To React’s Context API</a>,” Yusuff Faruq</li>
<li>“<a href="https://www.smashingmagazine.com/2020/11/reactive-variables-graphql-apollo-client/">Reactive Variables In GraphQL Apollo Client</a>,” Daniel Don</li>
<li>“<a href="https://www.smashingmagazine.com/2021/08/compound-components-react/">Compound Components In React</a>,” Ichoku Chinonso</li>
<li>“<a href="https://www.smashingmagazine.com/2021/11/useful-react-hooks/">Useful React Hooks That You Can Use In Your Projects</a>,” Ifeanyi Dike</li>
</ul>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Evyatar Alush)</author>
      <enclosure
        url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d0e43048-1771-47ed-bb3b-be007358d056/react-context-propagation-javascript.jpg"
        length="0" type="image/jpg"/>
    </item>
    <item>
      <title><![CDATA[Designing A Better Back Button UX]]></title>
      <link>https://smashingmagazine.com/2022/08/back-button-ux-design/</link>
      <guid>https://smashingmagazine.com/2022/08/back-button-ux-design/</guid>
      <pubDate>Tue, 16 Aug 2022 09:00:00 GMT</pubDate>
      <description>
        <![CDATA[With the “Back” button, users often get confused and frustrated. How to design a better back button UX and where to put those “Back” buttons in our interfaces.]]></description>
      <content:encoded><![CDATA[<p>There aren’t many things in usability testing that keep showing up over and over again. One of them is the anxiety people experience when they have to go back to the previous page. Users generally <strong>don’t have much trust in the browser’s “Back” button</strong>, and for a good reason. We’ve all been in a situation when a browser’s “Back” button just didn’t work as expected, driving us away from the goal, rather than towards it.</p>
<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/97ae7223-2ade-4eaf-8417-7a02f4c59f7e/boots1-large-opt-1.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c066cba0-56c5-48db-846b-174fec5b6cf4/boots1-780w-opt-1.png" /></a>For single-page checkouts, the Back button should bring a user to the previous step, not to the previous page. Designed by <a href="/2017/05/better-form-design-one-thing-per-page/">Adam Silver</a>. (<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/97ae7223-2ade-4eaf-8417-7a02f4c59f7e/boots1-large-opt-1.png">View large version</a>)

<p>For example, if you happen to be in a multi-step process such as checkout, the “Back” button would often bring you to the <strong>very start of the process</strong>, rather than to the previous page, with all your data evaporated in thin air. And sometimes, we have to retype sensitive data such as credit card numbers multiple times because it can’t be stored for security reasons. Not to mention routing in single-page applications that doesn’t always work as expected.</p>
<p>So how can we make the “Back” button slightly more predictable and helpful? Let’s explore a few ideas and use cases below.</p>
<p>This article is <strong>part of our ongoing series</strong> on <a href="/category/design-patterns">design patterns</a>. It’s also a part of the upcoming <a href="https://smashingconf.com/online-workshops/workshops/vitaly-friedman-ux/">4-weeks live UX training</a> 🍣 and will be in our recently released <a href="https://smart-interface-design-patterns.com/">video course</a> soon.</p>

Fear Of The Browser’s “Back” Button
<p>At the first glance, the “Back” button doesn’t seem to be much of an issue, does it? And sure enough, <a href="https://baymard.com/blog/back-button-expectations">users rely extensively on the browser’s “Back” button</a>. Yet users often seem to be <strong>thinking twice</strong> before actually hitting that button. Mostly, they are just afraid of losing their data or the state of the page in which they currently are — and it’s understandable since sometimes it’s not clear where the browser will bring them to.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/db1f511c-cf13-49e5-8694-cd2418b7525f/1-amazon-product-mobile-dining-room-color-chairs.png" /></p>
<p>That’s why it’s not uncommon to see people taking <strong>screenshots of the current page</strong>, or opening the same page in another tab to ensure that their data (at least for the current page) is still available in the browser for copy-pasting.</p>
<p><strong>Severe problems</strong> start showing up when we introduce overlays, anchor links, image galleries, and dynamic views into our interfaces. For example, if a user clicks through a <a href="/2022/04/designing-better-carousel-ux/">carousel</a> in an article, changes the view in a dashboard or toggles states in a <a href="/2022/07/designing-better-pricing-page/">pricing page</a>. Should the “Back” button bring a user to the previous state, or to the previous page? </p>
<p>There is no clear answer to that question, but there are some design patterns that work better than the others.</p>
Always Close Large Overlays With The “Back” Button
<p><a href="https://baymard.com/blog/back-button-expectations">Research shows</a> that the more different a new view is visually, the more likely it is to be perceived as a <strong>separate page</strong> by users. With it comes the expectation that the “Back” button will bring a user to the previous “page,” even though, technically, it might not really be a separate page.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8ca0bdcc-4f0e-412a-b9a9-d2b21c9d7e31/2-logo-modal-title-purchase.png" /></p>
<p>This goes for the product list appearing after filtering and sorting, for accordion checkouts, but could also be helpful for anchor links and expanded and <strong>truncated content</strong> — especially if the sections are lengthy. In these situations it’s <a href="https://www.nngroup.com/articles/overuse-of-overlays/">reasonable</a> to align the browser’s “Back” button behavior to match user’s expectations — with the <a href="https://developer.mozilla.org/en-US/docs/Web/API/History_API">History API</a>.</p>
<p>Surely we don’t want to <strong>pollute users’ history</strong> with unnecessary states or pages, though. When a user clicks through an image gallery in an article, we probably shouldn’t add every single image to the user’s history as it would make it much harder to get to the “actual” previous page.</p>
<p>Most importantly, a <strong>state of the carousel</strong> is rarely seen as a “different page.” As long as the page doesn’t change significantly, we should avoid adding states to the user’s history stack. This goes for checkboxes, drop-down menus, view switchers, toggles, and dynamically injected sections as well as they modify content on the <em>same</em> page.</p>
<p>Finally, whenever a user is likely to lose data by going “back”, e.g. returning from an overlay, it is definitely a good idea to <strong>prompt users to confirm their action</strong> and inform them that they might lose some data.</p>
The Position Of The Custom “Back” Button
<p>Even though we’ve aligned the expectations for the “Back” button behavior, some users will still be worried if the “Back” button actually works as expected. A good way to resolve this issue is by adding a <strong>custom, form-specific “Back” component</strong> within your interface.</p>
<p>There are major differences in how users perceive a browser’s native button and a custom “Back” button nicely tucked somewhere in the interface. While the behavior of browser’s button isn’t always obvious, users do expect <strong>“the right behavior”</strong> from a dedicated, custom button living <em>within</em> the website or application. Consequently, users also trust custom buttons more, and use them with fewer doubts.</p>
<p>But then, where should that custom-designed button actually live?</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/01049a05-9b81-4d66-a876-79bf143f8aa0/4-buttons-tertiary-secondary-primary-outer-edge.png" /></p>
<p>Steve Schoger <a href="https://twitter.com/steveschoger/status/1159895731286790147">suggests</a> that whether the buttons are aligned to the right or to the left in the form, it’s always a good idea to <strong>put the primary action on the outer side</strong>. This means that the “Back” button — which would also be visually less heavy — would be residing next to the “Next” button.</p>
<p>This might be working well for forms, but if a user is coming from an overview page, we could also display a <strong>sticky bar</strong>, a floating icon or <a href="/2022/04/breadcrumbs-ux-design/">breadcrumbs</a> allowing them to return to the overview. Or, of course, we could just show that “Back” prominently, e.g. on the top of the page.</p>
Consider Putting The “Back” Button Above The Form
<p>Indeed, the example above is a quite common pattern that will usually work well. However, in my experience, this would also cause trouble as every now and again, users will accidentally <strong>click on a wrong button</strong> — mostly because these buttons are located too close to each other.</p>
<p>Therefore, I’d always argue that placing the buttons as <strong>far away</strong> from each other as possible is an idea that’s worth testing.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7480cb82-9687-40bf-81e8-ed715367a5ed/5-back-buttons-primary-form.png" /></p>
<p>Adam Silver <a href="https://adamsilver.io/blog/where-to-put-buttons-on-forms/#put-the-back-button-above-the-form">suggests</a> to put the “Back” button <strong>above the form</strong>, as designed by Joe Lanman, a designer at the Gov.uk. According to Joe, ultimately, the “Back” button is then in a <strong>similar place</strong> to where most browsers put the browser’s “Back” button. Also, the “Back” button is probably not needed at the bottom of the page once the user fills out the form — “if they fill out the form and click back, they will <strong>lose their answers</strong>.”</p>
Custom “Back” Button Should Look Like An Interactive Element
<p>It’s worth emphasizing that the “Back” button, when positioned above the form, should actually look like an <strong>interactive element</strong>. It can be an underlined link or a standalone button that actually looks like a button.</p>
<p>If the “Back” link blends in with the rest of the page, users sometimes can’t find a way to go back and usually start searching at the bottom of the page. So to make it work, the “Back” button <strong>should be visible and noticeable</strong>.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0e690383-f3ed-47eb-a284-aff4c9559cac/6-govuk-register-vote-nationality-options.png" /></p>
<p>On <a href="https://www.registertovote.service.gov.uk/register-to-vote/nationality">Gov.uk</a>, the “Back” link is located at the very top of the page (underlined), appearing as an interactive element — in a place where one would usually expect breadcrumbs. There is only one single prominent button, and that’s the “Continue” button.</p>
<p>Another issue I’ve run into with this pattern is that for lengthy forms in busy interfaces, users might be scrolling down too quickly before even noticing a “Back” button on the top of the page. At the point when they actually stop scrolling, the button would be <strong>out of view</strong>, especially on mobile, and they might have issues discovering a reliable way to go back.</p>
<p>This issue doesn’t really show up for <strong>shorter forms</strong> — which is what Gov.uk suggests with their <a href="/2017/05/better-form-design-one-thing-per-page/">One-thing-per-page pattern</a>.</p>
Position Back and Next Buttons Far From Each Other
<p>It might appear only reasonable to group “Previous” and “Next” controls in the interface to allow users to go back and forth quickly. It is indeed reasonable in situations when we expect the user journey to contain a lot of jumps. That’s typically a case in <strong>configurators, customizers and wizards</strong>.  </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/21edcef3-e8ff-4d36-94e5-910e7a2834cd/van-s-shoes-customizer.png" /></p>
<p><a href="https://www.vans.com/customizer.authentic-classic.html?recipe=6f2bd0c01eeb21a31836c2b9dc8be262">Van’s shoes customizer</a> provides a navigation drawer for quick jumps, along with a “previous/next” stepper. On narrow screens, all options are listed horizontally, and to choose one, the customer swipes left or right.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b130ab60-c2ea-4fb5-9c25-033a3ae4982d/177milkstreet.png" /></p>
<p><a href="https://www.177milkstreet.com/recipes/hazelnut-crusted-chicken-cutlets-with-arugula-and-fennel-salad#overview">177milkstreet’s recipes</a> groups “Previous/next” buttons at the bottom of the navigation split screen, while single steps are laid out vertically.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/df7dd2de-7d9b-4c2e-b398-a9d6f0ca79fb/7-standing-desk-colors-product-purchase.png" /></p>
<p>On <a href="https://www.fully.com/en-eu/jarvis-adjustable-height-desk-laminate.html">Fully</a>, the “Back” button and the “Next” button are positioned <strong>very far from each other</strong>. Users can go back by tapping on a back-arrow all the way on the left outer edge of the screen while they continue with the process in the bottom right corner of the screen. That’s a safe way to eliminate mistaps or misclicks.</p>
<p>Surely, the “Back” button is different from the “Previous” button, yet often in testing users perceive them to be similar, or at least perform the same action. In general, the <strong>more distance we add between two opposite actions</strong>, the less likely the mistakes are to happen.</p>
Group Back States As Snapshots
<p>As we saw above, sometimes you might not need a custom “Back” button after all. Surely we need to support the browser’s “Back” button behavior properly anyway, but instead of a custom way to go back, we can allow users to go back to relevant options only. For example, with a <strong>dedicated snapshots area for states</strong>.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ee08e150-5c84-4ec8-922e-de596bbffe1f/8-product-page-guitar-stratocaster-colors.png" /></p>
<p>On <a href="https://www.fender.com/en-US/mod-shop/mod-shop-stratocaster/0181900706.html">Fender Mod Shop</a>, you can create “snapshots” as you are configuring a model. You are always driven forward to explore and customize, with an option to go back to a specific version that you saved as a snapshot.</p>
Wrapping Up
<p>The way we see our own websites isn’t necessarily the same way our users perceive it. The more different the views are from one interaction to another, the more likely users perceive these views as <strong>“separate things”</strong>. Users rely on a “Back” button to go back, but often we mismatch their expectations, bringing frustration and abandonment.</p>
<p>We definitely need to <strong>align users’ expectations</strong> with the “Back” button behavior at a very minimum. Additionally, it’s a good idea to add a custom “Back” button to our interfaces — and perhaps place them far away from the “Next” or “Continue” buttons, maybe even at the <strong>top of the page</strong>.</p>
<p>While it works very well in some scenarios, it might not work well for you. In that case, try to avoid placing the buttons <strong>too close to each other</strong> and make sure they look different enough visually. One could be a link, and the other could be a button. What seems to be a small detail might pay off big time and result in lower abandonment and higher conversion. And that’s worth it.</p>
Meet “Smart Interface Design Patterns”
<p>If you are interested in similar insights around UX, take a look at <a href="https://smart-interface-design-patterns.com/"><strong>Smart Interface Design Patterns</strong></a>, our shiny new <strong>8h-video course</strong> with 100s of practical examples from real-life projects. Plenty of design patterns and guidelines on everything from accordions and dropdowns to complex tables and intricate web forms — with 5 new segments added every year. <em>Just sayin’!</em> <a href="https://www.youtube.com/watch?v=aSP5oR9g-ss">Check a free preview</a>.</p>
<a href="https://smart-interface-design-patterns.com/"><img src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7cc4e1de-6921-474e-a3fb-db4789fc13dd/b4024b60-e627-177d-8bff-28441f810462.jpeg" /></a>Meet <a href="https://smart-interface-design-patterns.com/">Smart Interface Design Patterns</a>, our new video course on interface design &amp; UX.

<div><a href="https://smart-interface-design-patterns.com/">Jump to the video course →</a></div>

<p>100 design patterns &amp; real-life
examples.<br />8h-video course + live UX training. <a href="https://www.youtube.com/watch?v=aSP5oR9g-ss">Free preview</a>.</p>

Useful Resources
<ul>
<li><a href="https://baymard.com/blog/back-button-expectations">Back Button Expectations</a>, Baymard Institute</li>
<li><a href="https://uxdesign.cc/design-with-the-web-in-mind-d9f9df2e8812">Designing With the Web in Mind</a>, Chloe Sanderson</li>
<li><a href="https://www.smashingmagazine.com/2018/02/designing-a-perfect-responsive-configurator/">Designing A Perfect Configurator</a></li>
<li><a href="https://www.smashingmagazine.com/2017/06/designing-perfect-accordion-checklist/">Designing A Perfect Accordion</a></li>
<li><a href="https://www.smashingmagazine.com/2022/03/designing-better-infinite-scroll/">Designing A Perfect Infinite Scroll</a></li>
<li><a href="https://www.smashingmagazine.com/2017/08/designing-perfect-feature-comparison-table/">Designing A Perfect Feature Comparison</a></li>
<li><a href="https://www.smashingmagazine.com/2017/07/designing-perfect-slider/">Designing A Perfect Slider</a></li>
</ul>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Vitaly Friedman)</author>
      <enclosure
        url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fa18317f-4169-4c0d-aeb5-0b8f8714ef1f/designing-better-back-button-ux.jpg"
        length="0" type="image/jpg"/>
    </item>
    <item>
      <title><![CDATA[Everything Developers Must Know About Figma]]></title>
      <link>https://smashingmagazine.com/2022/08/everything-developers-must-know-about-figma/</link>
      <guid>https://smashingmagazine.com/2022/08/everything-developers-must-know-about-figma/</guid>
      <pubDate>Mon, 15 Aug 2022 11:30:00 GMT</pubDate>
      <description>
        <![CDATA[Christine highlights some of Figma’s features and possibilities to help you build a design that aligns with code as much as needed and improve your team work.]]></description>
      <content:encoded><![CDATA[<p>We must understand the possibilities and limitations of each other’s tools to work hand in hand, so let me show you the design side of things and all the little Figma treasures you might not yet understand fully.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fb045466-6112-4611-a2f9-694637cad7c7/54-everything-developers-must-know-figma.png" /></p>
<ol>
<li><a href="#1-we-work-with-components-and-variants-in-figma">We work with components and variants in Figma</a>.</li>
<li><a href="#2-we-work-with-styles-in-figma-but-they-are-not-very-smart">We work with styles in Figma, but they are not very smart</a>.</li>
<li><a href="#3-we-can-set-up-and-test-responsive-design">We can set up and test responsive design!</a></li>
<li><a href="#4-we-have-no-breakpoints-in-figma">We have no breakpoints in Figma</a>.</li>
<li><a href="#5-we-can-also-work-with-actual-data-sort-of">We can also work with actual data (sort of)</a>.</li>
<li><a href="#6-you-might-want-to-point-out-soft-grid-vs-hard-grid-to-us">You might want to point out soft grid vs. hard grid to us</a>.</li>
<li><a href="#7-why-we-sometimes-mess-up-line-height">Why we sometimes mess up line-height</a>.</li>
<li><a href="#8-all-we-have-in-figma-is-px">All we have in Figma is PX</a>.</li>
<li><a href="/#9-we-can-set-up-pretty-sweet-prototypes-in-figma">We can set up pretty sweet prototypes in Figma</a>.</li>
<li><a href="#10-we-will-invite-you-to-view-only-rights-giving-you-access-to-everything-you-need-as-a-developer">We will invite you to ‘View Only’ rights, giving you access to everything you need as a developer</a>.</li>
</ol>
1. We Work With Components And Variants In Figma
<h3>Components In Figma</h3>
<p>In Figma, we can set up re-usable UI components and create instances. <strong>Components can also be nested.</strong> Hence we can follow a nice <a href="https://atomicdesign.bradfrost.com/">atomic design</a> path.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/99d72008-835d-43bc-b1b9-bc1f5c5a200a/3-everything-developers-must-know-figma.png" /></p>
<p><strong>Tip:</strong> <em>With <code>true/false or yes/no</code>, you can create a toggle of the entire component. This is a great way to create a <code>light/dark mode</code>.I saw this setup in <a href="https://www.joeyabanks.me/">Joey Banks’s</a> excellent <a href="https://www.figma.com/community/file/1121065701252736567">iOS 16 UI Kit for Figma</a>. Best file setup I have ever seen in general!</em></p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a8c28d06-66fc-40f8-8715-6219e5d35d67/4-everything-developers-must-know-figma.png" /></p>
<h4>We Have Props!</h4>
<p>Component properties were released in March 2022. So I assume a lot of developers do not know about the possibility of using them in design yet. So far, we have <strong>text props, for instance, swap and toggle props</strong>. And of course, we can combine them all together.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/463ece74-bba6-494b-b6b1-bd91017f3d28/5-everything-developers-must-know-figma.png" /></p>
<h3>Opportunities Between Design And Code</h3>
<h4>Align UI And Code Components In Naming And Structure</h4>
<p>Due to the use of components, variants, and props, we can align our UI components with code components. However, to do so, we need information about the structure, naming, behavior, etc., from development. So sit down with us, have a coffee, and show us the code base you have or dream of building. Many videos and tutorials show how different teams handle this alignment process. I leave you to the rabbit hole.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dae29757-4197-49ad-a4e5-3890a26886e2/6-everything-developers-must-know-figma.png" /></p>
<h4>Quick Link UI And Code Components In Figma</h4>
<p>If you want to link components to a code base without much effort and documentation, you can simply add a link and a description to the Figma component documentation (a bit hidden). The link will create a button in the inspect tab linking directly to, e.g., the Github section of the same component in code. The Figma component search also picks up the description, which is handy for larger systems.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/491a5d5c-1581-4958-a896-140e62bf1aa9/9-everything-developers-must-know-figma.png" /></p>
<p><strong>Note:</strong> <em>Aligning components is fantastic, but it also takes a lot of effort and, most of all, maintenance, so use it where it makes sense, e.g., a design system. If you just design a one-pager website, you still use components with a clean and scalable design and clear building blocks to be coded, but they do not necessarily need to align with the code. It’s like you would not build an assembly line to streamline the process of making a cake if you would only want to bake a birthday cake for your friend. Yet you still use the same basic ingredients.</em></p>
2. We Work With Styles In Figma, But They Are Not Very Smart
<h3>Styles In Figma</h3>
<p>In Figma, we can create styles for <strong>color, text, grids</strong>, and <strong>things like shadows or blurs</strong> and re-apply them across our design. However, that’s pretty much it.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dde98f58-9dbf-425f-88e9-7e1bedb17b17/11-everything-developers-must-know-figma.png" /></p>
<h3>Opportunities Between Design And Code</h3>
<p><strong>Figma Token Plugin to create or connect with existing tokens</strong></p>
<p>As you can see, Figma styles are a bit isolated and do not interact with one another. So you cannot set a base font size to scale and adapt the scaling rate. You can only set a fixed size. Also, we have no styles for spacing systems (yet). However, with the <a href="https://www.figma.com/community/plugin/843461159747178978">Figma Tokens</a> plugin, you can create tokens in Figma and work with them. And even more impressive, you can connect and can align with code tokens. Check out the (really well-made) <a href="https://docs.figmatokens.com/">documentation</a> and this fantastic <a href="https://www.youtube.com/watch?v=zkLfw6Jb6WM">video by the creator Jan Six</a>. So amazing!!!</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a7391714-0f56-4b6d-a592-b603930b83d0/12-everything-developers-must-know-figma.png" /></p>
3. We Can Set Up And Test Responsive Design!
<p>This is a big one! Let’s look at it step by step. The tools we have for responsive design are the following:</p>
<p>Our tools in Figma for responsive design:</p>
<ul>
<li><a href="#auto-layout">Auto Layout</a></li>
<li><a href="#constraints">Constraints</a></li>
<li><a href="#grid">Grid</a></li>
</ul>
<p>We can use the above tools <strong>individually, not at all, or combine them</strong>. It depends a lot on what we want to build. There is no right or wrong.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9ee5e30e-ee38-4415-9fdf-945e8876364f/13-everything-developers-must-know-figma.png" /></p>
<p>Very important to know from a developer’s point of view is that <strong>we have no automated breakpoints in Figma</strong> (I will talk about how to deal with that in a bit).</p>
<h3>Auto Layout</h3>
<p>Auto layout is really powerful but takes some practice to work with (and will drive you nuts to start with, but stick with it!!!). It is <a href="https://www.figma.com/blog/behind-the-feature-the-making-of-the-new-auto-layout/">(loosely) based on flexbox</a>, as you will notice when you glimpse at the Inspect tab.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/018dfc88-d022-433e-8878-2224ffca27b8/16-everything-developers-must-know-figma.png" /></p>
<h3>Combine Grids And Constraints</h3>
<p>The cool thing is that as soon as a grid is applied to a frame, the constraints will assume the columns as the parent frame. So we can set up really nice and straightforward responsive behavior by combining grids and constraints.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/81a59d7b-afed-41ff-8b5a-15bebbb9cb90/19-everything-developers-must-know-figma.png" /></p>
<h3>Combine Grid, Constraints, And Auto Layout Elements</h3>
<p>So even though we cannot combine auto layout and constraints within a frame, we can place auto layout elements/instances inside a parent frame and then use constraints around them. In this way, the content reshuffles nicely, keeping all set parameters.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4be4c44e-1ac5-4e8a-a9ff-435b00f6434e/22-everything-developers-must-know-figma.png" /></p>
<h3>We Can Make Our Own Breakpoints By Hand!</h3>
<p>However, we can create our own breakpoints by hand! So with the technical information given, we can set up the visual representation in Figma. I am just using a random example of breakpoints here.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7be615b1-df9c-4532-95dd-3c7ed9ef28ca/23-everything-developers-must-know-figma.png" /></p>
<p>We can then place our auto layout components within those ranges and see where adjustments are necessary. In my example, I switch from a full fluid screen on mobile to an overlay with a fixed size at breakpoint <code>S</code>.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4604b3ca-31f4-4283-bd7a-348b5d16ceb4/25-everything-developers-must-know-figma.png" /></p>
<p><strong>Note:</strong> <em>Sometimes, you might use the same grid for several breakpoints, then just note, e.g., Grid: <code>S</code>+<code>M</code> (from 576 to 992). This way, you could always split it in two again in case the margin or anything changes in the future.</em></p>
<h4>Responsive Typography Is Non-Existent</h4>
<p>Unfortunately, what kicks in automatically with media queries in CSS needs to be <strong>added by hand in Figma</strong>. We can set up a <strong>responsive Typescale</strong> and then need to make sure to <strong>change text style (if applicable) when breakpoints are changing</strong>. It’s a bit annoying and full of potential errors, I know.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d72ef6ab-359a-44e4-8c83-dbc7d91960d4/26-everything-developers-must-know-figma.png" /></p>
<p>If you want to work with <strong>fluid typography</strong> (VW units, <code>clamps()</code>, <code>calc()</code>, you name it), this is best <strong>tested in the browser as we cannot simulate fluid text behavior with Figma</strong>. We can, however, pick a specific min and max screen size to get a rough idea of the situation at a specific width.</p>
<h3>Breakpoint Plugin</h3>
<p>However, to end on an exciting topic: Once you go through the effort of setting up your components and pages responsively, you can chuck them into the breakpoints plugin and get a really lovely overall idea of the design.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/eaa98138-ada7-45a0-8de6-b14855cbd5c4/28-everything-developers-must-know-figma.png" /></p>
5. We Can Also Work With Actual Data (Sort Of)
<p>Figma cannot connect to a classic database, but we can use actual data with some preparation. You can use the<a href="https://www.figma.com/community/plugin/735770583268406934"> Google Sheets Sync</a> plugin and just add actual content there. By simply naming our layers with #columnname, run the plugin, add the link, and hit sync. And boom, there you go. There is also a Plugin for <a href="https://www.figma.com/community/plugin/741940457537193498">Airtable</a> and <a href="https://www.figma.com/community/plugin/1116202373222780315">Notion</a> Sync working pretty much in the same way.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5607949d-3aab-416a-b735-5fe11676eb26/29-everything-developers-must-know-figma.png" /></p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8a5badd2-1105-488c-a8ad-b820a962ed65/31-everything-developers-must-know-figma.png" /></p>
<p>In general, we should test components with different content such as ideal state, little content, heavy content, empty, error, and loading states where applicable. I made a <a href="https://www.figma.com/community/file/1117518363362257693">checklist for components</a> you can use before release.</p>
<p>Working with actual data gives us a good idea of potential shortcomings. We can also see if the database needs some grooming or if the image pool needs a bit of love and attention to live up to the brand promise.</p>
6. You Might Want To Point Out Soft Grid vs. Hard Grid To Us
<p>When we click on Grids, Figma adds this px grid to the background. Order! Structure! As a designer, you jump at this, and as you were told to space with 8pt, you use the grid.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3f8ee096-d28d-4ca3-9867-f6ed2f7cbb7d/32-everything-developers-must-know-figma.png" /></p>
<p>So we have this grid, which is why many designers jump to conclusions using a hard grid to set their spacing (it can be used for other alignment and handy in mobile setup, though). We have no spacing blocks or cubes to create a soft grid, we can set this by hand, though, and nudge in steps of <code>8</code>, but that is about it.</p>
<p><strong>Tip:</strong> <em>In Figma, we can alter the nudge amount. Press Cmd + / and type “nudge” and change to <code>8</code>. Make sure to keep <code>alt</code> pressing when nudging to see the distances. By pressing shift and up and down arrows, we then nudge in, e.g., <code>8pt</code> steps.</em></p>
<h3>Opportunities Between Design And Code</h3>
<h4>How Does Spacing Work For You In CSS?</h4>
<p>Feel free to point out (preferably at the beginning of the project) that there is no such magic background grid in CSS and that the spacing system means measuring in spacing blocks from element to element (including the line height!). Or, in other words, explain the difference between the hard grid vs. the soft Grid that we use later in UI Design and CSS.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/001e58c5-9ae5-4c6d-b2b6-80d5dc9453c9/33-everything-developers-must-know-figma.png" /></p>
<p><strong>And yet again: Use the <a href="https://www.figma.com/community/plugin/843461159747178978">Figma Tokens Plugin</a>.</strong></p>
<p>Here we can just pull the real spacing system with spacing tokens and apply it to our components. We can also set up our own tokens just in Figma right in the plugin.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ed60fcca-2018-44d4-a4a5-a731aaa386dc/35-everything-developers-must-know-figma.png" /></p>
<p><strong>Note:</strong> <em>We cannot set line height in Figma to something like <code>1.5</code> notation! By default, it uses px. But we can cheat a little and use <code>%</code>, so <code>1.5</code> in CSS would be <code>150%</code> in Figma. You will still find the px value only in the inspect tab.</em></p>
<h3>Opportunities Between Design And Code</h3>
<h4>Explain It!</h4>
<p>So as a developer, you might find that the line height is randomly set to <code>1</code>. This is a desperate design attempt to get rid of the “random” space we do not understand (yet). So it makes sense to remind (new) designers that UI Design is dynamic. Screen sizes change, and content length will vary (either because the content is added or translated into a new language). Thus, we can never assume a single line of the text remains a single line of text forever. Also, we do not want to create too many styles. So explain that working with the natural line height is just fine, and you will do the same in CSS.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/12257b8b-43de-4834-a8a9-6bcf54776e2d/36-everything-developers-must-know-figma.png" /></p>
8. All We Have In Figma Is PX
<p>In Figma, we can only work with px, and we work at 1px=1pt. We do not have rem, em, or any other relative way to define things like font size. So if you see px everywhere in a UI Design, this does not mean we want it hard coded!!!</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/48a3efbd-4d82-4f7f-bb93-482d2eecceba/37-everything-developers-must-know-figma.png" /></p>
9. We Can Set Up Pretty Sweet Prototypes In Figma
<p>We can create rather impressive prototypes directly from our design files in Figma. If you hit the play button in the file (top right), you can see them. We can link frames to new pages or overlays and also animate within component sets from variant to variant.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7ddacc5f-ca2b-4843-900e-cfa9629511d1/40-everything-developers-must-know-figma.png" /></p>
<h3>Opportunities Between Design And Code</h3>
<p>As a developer, you will be able to navigate the file and pull out all information you need:</p>
<h4>Pages</h4>
<p>You can navigate the different frames on the canvas but note how there are different pages above the layers menu on the left. Every team uses pages differently, some for versions and sprints, some to structure the file into the design, components, and testing. In any case, ensure not to overlook the pages as they are the file’s structure.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8e68e967-1eda-41e1-a5b5-fa0bb3aefbaf/41-everything-developers-must-know-figma.png" /></p>
<h4>Inspect Mode</h4>
<p>When entering a file with view mode, you will see the <strong>inspect menu</strong> open per default. Click on an element, and you will be shown the <strong>distance</strong> to the nearest objects and the <strong>specs on the right-hand side menu.</strong></p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/26ee52f0-364e-41dd-b9c5-9f1457158d9e/42-everything-developers-must-know-figma.png" /></p>
<p>You can switch between CSS, iOS, and Android.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/424ea34e-4f4b-4a60-82ff-177a220c07a0/43-everything-developers-must-know-figma.png" /></p>
<p>When clicking on the main component, you will see the link to the code documentation (if applicable) and any comments in inspect mode.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3d2c7bbe-4341-49eb-a1c9-fbe4ee8af9e0/44-everything-developers-must-know-figma.png" /></p>
<p>This only shows up if it was added to the design tab’s component documentation. And you obviously only need this if you want to align UI and code components.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/154d9e50-f09a-440b-aafb-f15869aeab02/45-everything-developers-must-know-figma.png" /></p>
<p>By the way, it works with any link. However, some such Github links create a nice custom button.</p>
<h4>Styles Overview</h4>
<p>Click on the canvas to get an overview of all styles in the file. Note that this only shows local styles; some might be pulled in from an external library. So the best is to check for style documentation (every design team should set this up for you) to make sure you have all information.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d58e781b-9523-4a6d-9696-1d0b2cf1f941/46-everything-developers-must-know-figma.png" /></p>
<p>You should, however, still receive a general overview of all styles from your design team, including internal and external styles used now or in the future.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d3c87cbf-8102-45e4-b886-5c805b46b301/47-everything-developers-must-know-figma.png" /></p>
<h4>Jump To The Main Component</h4>
<p>This is really important yet a bit hidden. Click on any instance on the canvas and then click on the diamond-shaped symbol sign, and you will jump to the main component and documentation. This is where you can get all information and measurements.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/61fdeda4-bc93-4409-b364-d9c983921965/48-everything-developers-must-know-figma.png" /></p>
<p>You should then be led to the <strong>Figma UI component library.</strong> This might be a local page or an external UI component document giving you all the necessary information and specs defined by the UI team. If you do not find such an overview, kindly ask your design team to set this up for you.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/857bf36a-016d-41e1-a000-40f387aa182c/49-everything-developers-must-know-figma.png" /></p>
<blockquote>There is no magic automation for style and component overview in Figma. This needs to be set up and documented by the design team, and the format may vary.</blockquote>

<h4>Export Assets Of Any Size And Form</h4>
<p>Assets can be exported to any asset in the format (JPG, PNG, SVG) and @size from the “view only” mode, so no bulk export by the design team is needed anymore.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/271ef2d7-00e9-4c87-9329-ef610fb3d323/50-everything-developers-must-know-figma.png" /></p>
<p><strong>Tip:</strong> <em>For a specific height or width, instead of <code>3x</code>, <code>2x</code>, just enter the width followed by <code>w</code> (e.g., <code>300w</code>), and it will export it, keeping the image proportions. It also works for height (<code>h</code>).</em></p>
<h4>Comment</h4>
<p>Leave comments and discuss within your team.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/622ffb65-5658-4fd5-9993-141829a3afe3/51-everything-developers-must-know-figma.png" /></p>
<h4>Prototype</h4>
<p>Hit the play button (top right corner of your design file), and you will jump to the presentation mode seeing your prototype in action. Usually, the designer was nice enough to add some flows and structure the prototype, so you get a good idea of different flows.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/597f7b4c-5b1c-431c-ba11-4d57ac2e402b/52-everything-developers-must-know-figma.png" /></p>
<p><strong>Tip:</strong> <em>Individual links can be created from every flow of the prototype menu. I like using this to set up an overview of the design and testing stages. You can also link to any other team planning file here.</em></p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3dd9d451-fe34-4696-bc8a-0bbbf7a13ebf/53-everything-developers-must-know-figma.png" /></p>
Stay In Touch!
<p>If you liked this article, make sure to subscribe and visit me on <a href="https://www.moonlearning.io/">moonlearning.io</a>, where I teach about UX/UI Design+Figma. This article is also the base of my talk and workshop during the <a href="https://smashingconf.com/ny-2022/">Smashing Conference New York, the 10th to the 13th of October 2022</a>. See you there!</p>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Christine Vallaure)</author>
      <enclosure
        url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/57ba237f-8cb7-48aa-8538-93a3fe26d997/everything-developers-must-know-about-figma.jpg"
        length="0" type="image/jpg"/>
    </item>
    <item>
      <title><![CDATA[Meet Skeleton: Svelte + Tailwind For Reactive UIs]]></title>
      <link>https://smashingmagazine.com/2022/08/skeleton-svelte-tailwind-reactive-uis/</link>
      <guid>https://smashingmagazine.com/2022/08/skeleton-svelte-tailwind-reactive-uis/</guid>
      <pubDate>Fri, 12 Aug 2022 08:00:00 GMT</pubDate>
      <description>
        <![CDATA[The power of framework-specific UI libraries, such as Skeleton, can lead to more productivity using the combined ability of Svelte and Tailwind to build modern web-based apps.]]></description>
      <content:encoded><![CDATA[<p>If you’ve ever found yourself tasked with creating and implementing custom UI, then you know how difficult it can be to meet the demands of the modern web. Your interface must be responsive, reactive, and accessible, all while remaining visually appealing to a broad spectrum of users. Let’s face it; this can be a challenge for even the most seasoned frontend developer.</p>
<p>Over the last ten years, we’ve seen the introduction of UI frameworks that help ease this burden. Most rely on JavaScript and lean into components and reactive patterns to handle real-time user interaction. Frameworks such as <a href="https://angular.io/">Angular</a>, <a href="https://reactjs.org/">React</a>, and <a href="https://vuejs.org/">Vue</a> have been <a href="https://2021.stateofjs.com/en-US/libraries/front-end-frameworks/">established as the standard</a> for what we currently know as modern frontend development.</p>
<p>Alongside the tools, we’ve seen the rise of framework-specific libraries like <a href="https://material.angular.io/">Angular Material</a>, <a href="https://mantine.dev/">Mantine</a> (for React), and <a href="https://vuetifyjs.com/en/">Vuetify</a> that to provide a “batteries included” approach to implementing UI, including deep integration of each framework’s unique set of features. With the emergence of new frameworks such as Svelte, we might expect to see similar libraries appear to fulfill this role. To gain insight into how these tools might work, let’s review what Svelte brings to frontend development.</p>
Svelte And SvelteKit
<p>In 2016, <a href="https://twitter.com/rich_harris">Rich Harris</a> introduced <a href="https://svelte.dev/">Svelte</a>, a fresh take on components for the web. To understand the benefits of Svelte, see his 2019 conference talk titled “Rethinking Reactivity,” where Rich explains the origins of Svelte and demonstrates its unique compiler-driven approach.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/85cec3f2-b29a-479b-91bd-da6547d62fc0/3-skeleton-svelte-tailwind-reactive-uis.png" /></p>
<p>Skeleton was founded by the development team at <a href="https://www.brainandbonesllc.com/">Brain &amp; Bones</a>. The team, myself included, has been consistently impressed with Svelte and the tools it brings to the frontend developer’s arsenal. The team and I were looking to migrate several internal projects from Angular to SvelteKit when we realized there was an opportunity to combine Svelte’s intuitive component system with the utility-driven design systems of Tailwind, and thus Skeleton was born.</p>
<p>The team realized Skeleton has the potential to benefit many in the Svelte community, and as such, we’ve decided to make it <a href="https://github.com/Brain-Bones/skeleton">open-source</a>. We hope to see Skeleton grow into a powerful UI toolkit that can help many developers, whether your skills lie within the frontend space or not.</p>
<p>To see what we mean, let’s take a moment to create a basic SvelteKit app and integrate Skeleton.</p>
Getting Started With Skeleton
<p>Open your terminal and run each of the following commands. Be sure to set “my-skeleton-app” to whatever name you prefer. When prompted, we recommend using Typescript and creating a barebones (aka “skeleton”) project:</p>
<pre><code>npm create svelte@latest my-skeleton-app
cd my-skeleton-app
npm install
npm run dev -- --open</code></pre>

<p>This will generate the SvelteKit app, move your terminal into the project directory, install all required dependencies, then start a local dev server. Using the <code>-- --open</code> flag here will open the following address in your browser automatically:</p>
<pre><code>http://localhost:5173/</code></pre>

<p>In your terminal, use Ctrl + C to close and stop the server. Don’t worry; we’ll resume it in a moment.</p>
<p>Next, we need to install Tailwind. <a href="https://github.com/svelte-add/tailwindcss">Svelte-add</a> helps make this process trivial. Simply run the following commands, and it’ll handle the rest.</p>
<pre><code>npx svelte-add@latest tailwindcss
npm install</code></pre>

<p>This will install the latest Tailwind version into your project, create <code>/src/app.css</code> to house your global CSS, and generate the necessary <code>tailwind.config.cjs</code>. Then we install our new Tailwind dependency.</p>
<p>Finally, let’s install the Skeleton package via NPM:</p>
<pre><code>npm i @brainandbones/skeleton --save-dev</code></pre>

<p>We’re nearly ready to add our first component, and we just need to make a couple of quick updates to the project configuration.</p>
<h3>Configure Tailwind</h3>
<p>To ensure Skeleton plays well with Tailwind, open <code>tailwind.config.cjs</code> in the root of your project and add the following:</p>
<div>
<pre><code>module.exports = {
    content: [
        // ...
        './node_modules/@brainandbones/skeleton/*<em>/</em>.{html,js,svelte,ts}'
    ],
    plugins: [
        require('@brainandbones/skeleton/tailwind.cjs')
    ]
}</code></pre>
</div>

<p>The <code>content</code> section ensures the compiler is aware of all Tailwind classes within our Skeleton components, while <code>plugins</code> uses a Skeleton file to prepare for the theme we’ll set up in the next section.</p>
<h3>Implement A Skeleton Theme</h3>
<p>Skeleton includes a simple yet powerful <a href="https://skeleton.brainandbonesllc.com/guides/themes">theme system</a> that leans into <a href="https://tailwindcss.com/docs/customizing-colors#using-css-variables">Tailwind’s best practices</a>. The theme controls the visual appearance of all components and intelligently adapts for <a href="https://tailwindcss.com/docs/dark-mode">dark mode</a> while also providing access to Tailwind utility classes that represent your theme’s unique color palette.</p>
<p>The Skeleton team has provided a <a href="https://skeleton.brainandbonesllc.com/guides/themes">curated set of themes</a>, as well as a <a href="https://skeleton.brainandbonesllc.com/guides/themes">theme generator</a> to help design custom themes using either Tailwind colors or hex colors to match your brand’s identity.</p>
<p>To keep things simple, we’ll begin with Skeleton’s default theme. Copy the following CSS into a new file in <em><code>/src/theme.css</code>.</em></p>
<pre><code>:root {
    /* --- Skeleton Theme --- */
    /* primary (emerald) */
    --color-primary-50: 236 253 245;
    --color-primary-100: 209 250 229;
    --color-primary-200: 167 243 208;
    --color-primary-300: 110 231 183;
    --color-primary-400: 52 211 153;
    --color-primary-500: 16 185 129;
    --color-primary-600: 5 150 105;
    --color-primary-700: 4 120 87;
    --color-primary-800: 6 95 70;
    --color-primary-900: 6 78 59;
    /* accent (indigo) */
    --color-accent-50: 238 242 255;
    --color-accent-100: 224 231 255;
    --color-accent-200: 199 210 254;
    --color-accent-300: 165 180 252;
    --color-accent-400: 129 140 248;
    --color-accent-500: 99 102 241;
    --color-accent-600: 79 70 229;
    --color-accent-700: 67 56 202;
    --color-accent-800: 55 48 163;
    --color-accent-900: 49 46 129;
    /* warning (rose) */
    --color-warning-50: 255 241 242;
    --color-warning-100: 255 228 230;
    --color-warning-200: 254 205 211;
    --color-warning-300: 253 164 175;
    --color-warning-400: 251 113 133;
    --color-warning-500: 244 63 94;
    --color-warning-600: 225 29 72;
    --color-warning-700: 190 18 60;
    --color-warning-800: 159 18 57;
    --color-warning-900: 136 19 55;
    /* surface (gray) */
    --color-surface-50: 249 250 251;
    --color-surface-100: 243 244 246;
    --color-surface-200: 229 231 235;
    --color-surface-300: 209 213 219;
    --color-surface-400: 156 163 175;
    --color-surface-500: 107 114 128;
    --color-surface-600: 75 85 99;
    --color-surface-700: 55 65 81;
    --color-surface-800: 31 41 55;
    --color-surface-900: 17 24 39;
}</code></pre>

<p><strong>Note:</strong> <em>Colors are converted from Hex to RGB to properly support <a href="https://tailwindcss.com/docs/background-color#changing-the-opacity">Tailwind’s background opacity</a>.</em></p>
<p>Next, let’s configure SvelteKit to use our new theme. To do this, open your root layout file at <code>/src/routes/__layout.svelte</code>. Declare your theme just before your global stylesheet <code>app.css</code>.</p>
<pre><code>import '../theme.css'; // &lt;--
import '../app.css';</code></pre>

<p>To make things look a bit nicer, we’ll add some basic <code>&lt;body&gt;</code> element styles that support either light or <a href="https://tailwindcss.com/docs/dark-mode">dark mode</a> system settings. Add the following to your <code>/src/app.css</code>.</p>
<div>
<pre><code>body { @apply bg-surface-100 dark:bg-surface-900 text-black dark:text-white p-4; }</code></pre>
</div>

<p>For more instruction, consult the <a href="https://skeleton.brainandbonesllc.com/guides/styling">Style</a> documentation which covers global styles in greater detail.</p>
<h3>Add A Component</h3>
<p>Finally, let’s implement our first Skeleton component. Open your app’s home page <code>/src/routes/index.svelte</code> and add the follow. Feel free to replace the file’s entire contents:</p>
<pre><code>&lt;script lang="ts"&gt;
    import { Button } from '@brainandbones/skeleton';
&lt;/script&gt;

&lt;Button variant="filled-primary"&gt;Skeleton&lt;/Button&gt;</code></pre>

<p>To preview this, we’ll need to restart our local dev server. Run <code>npm run dev</code> in your terminal and point your browser to <code>http://localhost:5173/</code>. You should see a Skeleton Button component appear on the page!</p>
<h3>Customizing Components</h3>
<p>As with any Svelte component, custom “props” (read: properties) can be provided to configure your component. For example, the Button component’s <code>variant</code> prop allows us to set any number of <a href="https://skeleton.brainandbonesllc.com/components/buttons">canned options</a> that adapt to your theme. By switching the variant value to <code>filled-accent</code> we’ll see the button change from our theme’s primary color (emerald) to the accent color (indigo).</p>
<p>Each component provides a set of props for you to configure as you please. See the <a href="https://skeleton.brainandbonesllc.com/components/buttons">Button documentation</a> to try an interactive sandbox where you can test different sizes, colors, etc.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bee60c94-44dd-464d-b8da-126ea888442b/1-skeleton-svelte-tailwind-reactive-uis.png" /></p>
<p>You may notice that many of the prop values resembled Tailwind class names. In fact, this is exactly what these are! These props are provided verbatim to the component’s template. This means we can set a component’s background style to any theme color, any Tailwind color, or even set a one-off color using <a href="https://tailwindcss.com/docs/background-color#arbitrary-values">Tailwind’s arbitrary value syntax</a>.</p>
<pre><code>&lt;!-- Using our theme color --&gt;
&lt;Button background="bg-accent-500"&gt;Accent&lt;/Button&gt;

&lt;!-- Using Tailwind colors --&gt;
&lt;Button background="bg-orange-500"&gt;Orange&lt;/Button&gt;

&lt;!-- Using Tailwind's arbitrary value syntax --&gt;
&lt;Button background="bg-[#BADA55]"&gt;Arbitrary&lt;/Button&gt;</code></pre>

<p>This gives you the control to maintain a cohesive set of styles or choose to “draw outside of the lines” with arbitrary values. You’re not limited to the default props, though. You can provide any valid CSS classes to a component using a standard <code>class</code> attribute:</p>
<div>
<pre><code>&lt;Button variant="filled-primary" class="py-10 px-20"&gt;Big!&lt;/Button&gt;</code></pre>
</div>

<h3>Form Meets Function</h3>
<p>One of the primary benefits of framework-specific libraries like Skeleton is the potential for deep integration of the framework’s unique set of features. To see how Skeleton integrates with Svelte, let’s try out <a href="https://skeleton.brainandbonesllc.com/utilities/dialogs">Skeleton’s dialog system</a>.</p>
<p>First, add the Dialog component within the global scope of your app. The easiest way to do this is to open <code>/src/routes/__layout.svelte</code> and add the following above the <code>&lt;slot /&gt;</code> element:</p>
<pre><code>&lt;script lang="ts"&gt;
    // ...
    import { Dialog } from '@brainandbones/skeleton';
&lt;/script&gt;

&lt;!-- Add the Dialog component here --&gt;
&lt;Dialog /&gt;

&lt;slot /&gt;</code></pre>

<p><strong>Note:</strong> <em>The Dialog component will not be visible on the page by default.</em></p>
<p>Next, let’s update our home page to trigger our first Dialog. Open <code>/src/routes/index.svelte</code> and replace the entire contents with the following:</p>
<div>
<pre><code>&lt;script lang="ts"&gt;
    import { Button, dialogStore } from '@brainandbones/skeleton';
    import type { DialogAlert } from '@brainandbones/skeleton/Notifications/Stores';

    function triggerDialog(): void {
        const d: DialogAlert = {
            title: ‘Welcome to Skeleton.’,
            body: ‘This is a standard alert dialog.’,
        };
        dialogStore.trigger(d);
    }
&lt;/script&gt;

&lt;Button variant="filled-primary" on:click={() =&gt; { triggerDialog() }}&gt;Trigger Dialog&lt;/Button&gt;</code></pre>
</div>

<p>This provides all the scaffolding needed to trigger a dialog. In your browser, click the button, and you should see your new dialog message appear!</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5e323dbf-e1c0-4605-9718-1c3ad55023cc/2-skeleton-svelte-tailwind-reactive-uis.png" /></p>
<p>Skeleton accomplishes this using Svelte’s <a href="https://svelte.dev/tutorial/writable-stores">writable stores</a>, which are reactive objects that help manage the global state. When the button is clicked, the dialog store is triggered, and an instance of a dialog is provided to the store. The store then acts as a queue. Since stores are reactive, this means our Dialog component can listen for any updates to the store’s contents. When a new dialog is added to the queue, the Dialog component updates to show the contents on the screen.</p>
<p>Skeleton always shows the top-most dialog in the queue. When dismissed, it then displays the following dialog in the queue. If no dialogs remain, the Dialog component hides and returns to its default non-visible state.</p>
<p>Here’s a simple mock to help visualize the data structure of the dialog store queue:</p>
<pre><code>dialogStore = [
    // dialog #1, &lt;-- top items the queue, shown on screen
    // dialog #2, &lt;-- the next dialog in line
    // dialog #3, &lt;-- bottom of the queue, the last added
];</code></pre>

<p>It’s Skeleton’s tight integration with Svelte features that makes this possible. That’s the power of framework-specific tooling — structure, design, and functionality all in one tightly coupled package!</p>
Learn More About Skeleton
<p>Skeleton is currently available in early access beta, but feel free to visit our <a href="https://skeleton.brainandbonesllc.com/">documentation</a> if you would like to learn more. The site provides detailed guides to help get started and covers the full suite of available components and utilities. You can report issues, request walkthroughs, or contribute code at <a href="https://github.com/Brain-Bones/skeleton">Skeleton’s GitHub</a>. You’re also welcome to join our <a href="https://discord.gg/EXqV7W8MtY">Discord community</a> to chat with contributors and showcase projects you’ve created with Skeleton.</p>
<p>Skeleton was founded by <a href="https://www.brainandbonesllc.com/">Brain &amp; Bones</a>. We feed gamers’ love for competition, providing a platform that harnesses the power of hyper-casual games to enhance engagement online and in-person.</p>
<h3>Further Resources</h3>
<ul>
<li><a href="https://skeleton.brainandbonesllc.com/">Skeleton</a> by <a href="https://www.brainandbonesllc.com/">Brain &amp; Bones</a></li>
<li><a href="https://github.com/Brain-Bones/skeleton">Skeleton’s GitHub repo</a></li>
<li><a href="https://discord.gg/EXqV7W8MtY">Skeleton’s Discord community</a></li>
<li>Featured in the <a href="https://svelte.dev/blog/whats-new-in-svelte-august-2022">official Svelte August 2022 community showcase</a></li>
</ul>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Chris Simmons)</author>
      <enclosure
        url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/beaede58-125c-47db-8c29-7af80ea35534/skeleton-svelte-tailwind-reactive-uis.jpg"
        length="0" type="image/jpg"/>
    </item>
    <item>
      <title>
        <![CDATA[Databases For Front-End Developers: The Rise Of Serverless Databases (Part 1)]]></title>
      <link>
        https://smashingmagazine.com/2022/08/databases-frontend-developers-rise-serverless-databases/
      </link>
      <guid>
        https://smashingmagazine.com/2022/08/databases-frontend-developers-rise-serverless-databases/
      </guid>
      <pubDate>Thu, 11 Aug 2022 08:00:00 GMT</pubDate>
      <description>
        <![CDATA[In this article, the first part of “Databases for Front-end Developers” series, Atila Fassina helps you understand the concepts behind database architecture in order to use them reliably and sheds some light on serverless databases.]]></description>
      <content:encoded><![CDATA[<p>As front-end developers, we understand the foundational role <strong>data</strong> plays in our daily jobs. It may come from an external API, a CMS, or even a spreadsheet. But god forbid we need to talk about setting up databases.</p>
<p>Those days are over. With serverless databases becoming popular by the day, it has never been easier to create a full-stack architecture with both vertical and horizontal scaling, high availability, and bulletproof consistency.</p>
<p>To fully reap the benefits of such an architecture, it’s essential to understand what decisions are made <strong>for you</strong>. In the same way that the “learn JavaScript, not a framework” mantra became popular, we also ought to understand the concepts behind database architecture in order to use them reliably. So, welcome to the first part of our <strong>“Databases for Front-end Developers”</strong> series.</p>
<p>This series is not going to make you an expert on distributed systems or capable of jumping into a database admin role, but it will shed some light on the concepts, terms, and acronyms you will face when getting ready to choose your next stack. See it as a primer on (serverless) databases. Hopefully, it will give you a push into the rabbit hole and make you confident in joining conversations to evaluate tradeoffs for different solutions.</p>
Spreadsheets And Content Management Systems
<p>What?! Spreadsheets? Well, yes. The user interface (you and I, or U and I, or UI) is quite similar to that of a database. Spreadsheets give you a table in which to store data. In some cases, they will only allow you to define specific data types per column. The familiarities are there, but spreadsheets find an abrupt end once we pop the hood. </p>
<p>The availability is questionable: spreadsheets are not meant to <em>serve</em> content, only <em>store</em> content. For starters, they will not fuel an app as it scales, and they may not obey certain best practices when it comes to assuring data integrity. Up to very recently, they were the quickest way to get started with some data layer. But now, there is no point for an app <em>not</em> to use a real (serverless) database (more on this later).</p>
<p>A <strong>Content Management System (CMS)</strong> is another kind of database. “Content” is a special kind of data that the CMS specializes in. It will provide the user (developer) with enough abstractions to facilitate managing such data to a point where the underlying database is not a concern. It will handle the deliverability, availability, and integrity of your data. But the heavier the abstraction is, the higher the tradeoff. The data types are limited to what the CMS will give you, with most even imposing their own architecture for handling relations, queries, types, etc. Of course, there are still significant and viable use cases for CMSs, and they aren’t going anywhere. So, as long as you’re sure that’s <em>your</em> use case, you’ll be fine with one.</p>
Growth Pains
<p>If you choose the simpler, “abstractionful” route of a spreadsheet or a CMS as your source of truth and your data begins to diversify, obstacles will show up. The first issue with a spreadsheet is usually about the underlying API, it’s often not intended for most average-sized apps’ traffic, and then there are the first refactoring conversations.</p>
<p>With a CMS, APIs are usually not the problem, but managing the data can be. As an app grows and data diversifies, some of it ends up not being <em>content</em> anymore and may be more related to application logic.</p>
<p>When data is not content, managing it in a CMS is not ideal. It’s less flexible and often doesn’t fit the owner-team workflow. Now, while it is perfectly possible for other databases and CMSs to coexist, it’s up to the developers to understand the pros and cons of each solution and decide what is best for their app’s delivery and user experience.</p>
Database Admin Is Hard
<p>As front-end developers, the first time we talk about databases is usually a conversation about “relational vs. non-relational.” From then on, while trying to figure out the differences, we loosely hear a myriad of terms, such as ACID, BASE, and even CAP Theorem. This article will skip a thorough explanation of these differences. We will look better into them in the next part of this series. For now, it is sufficient to say “non-relational” databases impose <strong>eventual consistency</strong> on an app.</p>
<p>Eventual consistency can also be unwrapped into a longer discussion, but let’s take it as this: </p>
<blockquote>Eventual consistency means that in certain special conditions, the data received is stale.</blockquote>

<p>Like comments in a blog post, they won’t affect your app if a few seconds after a <em>write</em> you still don’t see the latest one. But password updates need to be <strong>strongly consistent</strong> always, not <strong>eventually consistent</strong>.</p>
<p>Of course, those are not the only differences. Query performance is different between each type of database. One can imagine being eventually consistent allows for quicker <em>reads</em> because there is less assurance involved.</p>
More Growth Pains
<p>Once the database is decided, the app can grow steadily and smoothly for a while. As an app gets big, data complexity grows, and as data complexity grows, the database becomes slower. At scale, how do we make a database faster?</p>
<ul>
<li>Do you add more resources to a single server? (vertical scale)</li>
<li>How do you replicate data across a cluster of machines?<ul>
<li>Do you split your database into smaller partitions (shards) instead? (horizontal scale, more about this in part 2)</li>
</ul>
</li>
<li>Do you add a faster in-memory database in front of it for common queries? (key-value store)</li>
</ul>
<p>Those are not easy questions to answer. It depends on the user base, the type of data, the amount, frequency, and origin of queries. Is your database read-heavy or write-heavy? And though there is a multitude of factors impacting this decision, there’s also a high cost attached to making the wrong choice.</p>
<p>Additionally, some use cases may even require searching through data easier from user-land. A search engine is not an easy problem to solve and often requires an additional type of database to properly index your data (if sharded, it’s even harder). Having all this around your user’s data also brings a whole set of tools around it just to make it maintainable.</p>
<p>Even more, keeping an eye on our databases (now “data infrastructure” if we’ve got a search engine in the mix) requires a high level of observability and <strong>OLAP (Online Analytical Processing)</strong>. This introduces a whole new level of complexity!</p>
<p>As you may have noticed, very high stakes are associated with creating, maintaining, and growing a database. Decisions that can make or break an app, decisions that are costly to go back on, and that must be made relatively early.</p>
Serverless Databases Are Fun
<p>Because of all the complexity mentioned above, many investors and incubators have their eyes turned to startups creating serverless databases. They are a whole new category of databases. The concepts of traditional ones still apply, but differently.</p>
<h3>Serverless Databases</h3>
<p>To understand what a “serverless database” really is, we first need to deconstruct the term. It is a common joke that “serverless” is a misnomer. Still, the point of a serverless architecture is to abstract away from the consumer (developer) the complexity of handling site reliability and server maintenance provided by a serverless vendor, such as Netlify, Vercel, Amazon Web Services (AWS), and so many others. I tend to like <a href="https://xata.io/blog/what-is-a-serverless-database">Xata’s definition of “serverless database”</a>.</p>
<p>A “serverless database” does for databases what serverless does for servers. The complexity is lifted away (to different degrees depending on the chosen platform). Some, like Supabase and Firebase, will offer a multitude of serverless related features to couple with your database; others, like AWS Aurora or PlanetScale, focus on making it easier to use and scale PostgreSQL and MySQL DBs. And finally, there are others that abstract the database entirely, like Xata. They provide you with an ORM-like SDK, keep the database behind an API, and are able to offer a complex set of database features, bending the current limitations of traditional relational and non-relational databases.</p>
<p>Once we get to the next part of this series, we will talk about different kinds of databases. Then you will be ready to pop the hood on any serverless database offering you want and understand the differences for yourself. Meanwhile, let’s keep it superficial.</p>
Batteries Included
<p>Don’t take the “serverless” prefix lightly; these databases are from a different breed. They are able to offer guarantees and performance that “traditional” databases require some effort to reach, sometimes not even so. This is because on serverless databases, the work has been done, just not by your team.</p>
<p>The same way “serverless” means you don’t need to handle your server, “serverless database” means you don’t need to handle your database. The platform will handle it for you.</p>
<p>Because of this, the decisions about scalability and deliverability are often made external to your team. What your team gets is the assurance that any request will receive a response in a timely manner and that data will respect the consistency guarantees. Again, different solutions have different tradeoffs. It’s important to check what each offering imposes before jumping in.</p>
See You On The Next One
<p>Hopefully, this has been enough to spark your curiosity. This is the first article of a 3-part series. In the next ones, we will cover more in-depth information about what databases actually <em>are</em>. Specifically, we’ll look into:</p>
<ul>
<li>Schemas,</li>
<li>Theorems and models,</li>
<li>Types of databases,</li>
<li>whatever you suggest in the comments below!</li>
</ul>
<p>All that necessary knowledge will enable you to choose the best solution for your app. Understanding the tradeoffs of different serverless solutions and surrounding yourself with the right kind of help is crucial to setting your app up for success. <a href="https://twitter.com/atilafassina">Reach out to me</a> if you need anything meanwhile. Otherwise, see you in a few days!</p>
<h3>Further Reading on Smashing Magazine</h3>
<ul>
<li>“<a href="https://www.smashingmagazine.com/2021/07/gatsby-serverless-functions-international-space-station/">Gatsby Serverless Functions And The International Space Station</a>,” Paul Scanlon</li>
<li>“<a href="https://www.smashingmagazine.com/2021/03/choosing-new-serverless-database-technology-agency/">Choosing A New Serverless Database Technology At An Agency (Case Study)</a>,” Michael Rispoli</li>
<li>“<a href="https://www.smashingmagazine.com/2020/08/smashing-podcast-episode-22/">Smashing Podcast Episode 22 With Chris Coyier: What Is Serverless?</a>,” Drew McLellan</li>
<li>“<a href="https://www.smashingmagazine.com/2018/05/building-serverless-contact-form-static-website/">Building A Serverless Contact Form For Your Static Site</a>,” Brian Holt</li>
</ul>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Atila Fassina)</author>
      <enclosure
        url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/37dc0212-cede-409c-9e35-612cb2a58332/databases-frontend-developers-rise-serverless-databases.jpg"
        length="0" type="image/jpg"/>
    </item>
    <item>
      <title><![CDATA[Core Web Vitals Tools To Boost Your Web Performance Scores]]></title>
      <link>https://smashingmagazine.com/2022/08/core-web-vitals-tools-boost-performance/</link>
      <guid>https://smashingmagazine.com/2022/08/core-web-vitals-tools-boost-performance/</guid>
      <pubDate>Tue, 09 Aug 2022 14:00:00 GMT</pubDate>
      <description>
        <![CDATA[Identify, compare, analyze and fix your Core Web Vitals scores to boost web performance of your sites. These tools will help you to do just that.]]></description>
      <content:encoded><![CDATA[<p>The success of your website depends on the impression it leaves on its users. By optimizing your <a href="https://web.dev/vitals/#core-web-vitals">Core Web Vitals</a> scores, you can <strong>gauge and improve user experience</strong>. Essentially, a <em>web vital</em> is a quality standard for UX and web performance set by Google. Each web vital represents a discrete aspect of a user’s experience. It can be measured based on real data from users visiting your sites (<a href="https://web.dev/lab-and-field-data-differences/#field-data">field metric</a>) or in a lab environment (<a href="https://web.dev/lab-and-field-data-differences/#lab-data">lab metric</a>).</p>
<p>In fact, several <strong>user-centric metrics</strong> are used to quantify web vitals. They keep evoling, too: as there were conversations around slowly adding accessibility and responsiveness as web vitals as well. In fact, <strong>Core Web Vitals</strong> are just a part of this large set of vitals.</p>
<p>It’s worth mentioning that good Core Web Vitals scores <a href="https://philipwalton.com/articles/my-challenge-to-the-web-performance-community/">don’t necessarily mean</a> that your website scores in high 90s on Lighthouse. You might have a pretty suboptimal Lighthouse score while having green Core Web Vitals scores. Ultimately, for now it seems that it’s only the latter that <a href="https://developers.google.com/search/blog/2021/11/bringing-page-experience-to-desktop">contribute to SEO ranking</a> — both on mobile and on desktop.</p>
<p>While most of the tools covered below only rely on field metrics, others use a mix of both field and lab metrics.
1</p>
PageSpeed Compare
<p><a href="https://pagespeed.compare">PageSpeed Compare</a> is a page speed evaluation and benchmarking tool. It measures the web performance of a single page using <a href="https://pagespeed.web.dev/">Google PageSpeed Insights</a>. It can also compare the performance of multiple pages of your site or those of your competitors’ websites. It evaluates lab metrics, field metrics, page resources, DOM size, CPU time, and potential savings for a website. PageSpeed Compare measures vitals like FCP, LCP, FID, CLS, and others using land and field data.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2921a25d-a7ea-4afb-ab9a-9b358287d1f5/pagespeed-compare-01.png" /></p>
<p>The report it generates lists the resources loaded by a page, the overall size for each resource type category, and the number of requests made for each type. Additionally, it examines the number of <strong>third-party requests</strong> and resources a page makes. It also lists cached resources and identifies unused Javascript. PageSpeed Compare checks the DOM of the page and breaks down its size, complexity, and children. It also identifies unused images and layout shifts in a graph. </p>
<p>When it comes to <strong>CPU time</strong>, the tool breaks down CPU time spent for various tasks, Javascript execution time, and CPU blocking. Lastly, it recommends optimizations you can make to improve your page. It graphs server, network, CSS, Javascript, critical content, and image optimizations to show the potential savings you could gain by incorporating fixes into your site. It gives resource-specific suggestions you could make to optimize the performance of your page. For example, it could recommend that you remove unused CSS and show you the savings this would give in a graph.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1fc149cd-fbc5-4c99-9896-308caf7e38f6/pagespeed-compare-02.png" /></p>
<p>PageSpeed Compare provides <strong>web performance reports</strong> in a dashboard-alike overview with a set of graphs. You can compare <strong>up to 12 pages at once</strong> and presents the report in a simple and readable way since it uses PageSpeed Insights to generate reports. Network and CPU are throttled for lab data tests for more realistic conditions.</p>
Bulk Core Web Vitals Check
<p><a href="https://www.experte.com/web-vitals">Experte's Bulk Core Web Vitals Check</a> is a free tool that crawls up to 500 pages of the entire domain and provides an overview of the Core Web Vitals scores for them. Once the tool has crawled all the pages, it starts performing a <strong>Core Web Vitals check</strong> for each page and returns the results in a table. Running the test takes a while, as each web page test is done one at a time. So it’s a good idea to let it run for <strong>15-30 mins</strong> to get your results.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ad48d47f-74c8-4fc8-9c03-c3287a07f274/core-web-vitals-bulk-checker.png" /></p>
<p>What’s the benefit then? As a result, you get a full overview of the pages that perform best, and <strong>pages that perform worst</strong> — and can compare the values over time. Under the hood, the tool uses Pagespeed Insights to measure Core Web Vitals.</p>
<p>You can <strong>export the results as a CSV file</strong> for Excel, Google Sheets or Apple Pages. The table format in which the results are returned makes it easy to compare web vitals across different pages. The tests can be run for both mobile and desktop.</p>
<p>Alternatively, you can also check David Gossage's article on <a href="https://seogreetings.com/blogs/news/review-core-web-vitals-scores-in-bulk">How to review Core Web Vitals scores in bulk</a>, in which he shares the scripts and how to get an API key to run the script manually without any external tools or services.</p>
Treo
<p>If you’re looking for a slightly more advanced option for bulk Core Web Vitals check, this tool will cover your needs well. <a href="https://treo.sh/sitespeed">Treo Site Speed</a> also performs site speed audits using data from the Chrome UX Report, <a href="https://developer.chrome.com/docs/lighthouse/overview/">Lighthouse</a> and <a href="https://pagespeed.web.dev/">PageSpeed Insights</a>.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1d686916-e6f9-4fd9-92da-5d6d7ca00770/treo.png" /></p>
<p>The audits can be performed across <strong>various devices and network conditions</strong>. Additionally though, with <a href="https://treo.sh/">Treo</a>, you can track the performance of all your pages across your sitemap, and even set up <strong>alerts for performance regressions</strong>. Additionally, you can receive monthly updates on your website’s performance.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c5af1ab7-14b3-4fb9-874d-fc9ffc31d8d5/treo-core-web-vitals-sitemap-scan.jpeg" /></p>
<p>With Treo Site Speed, you can also <strong>benchmark a website against competitors</strong>. <a href="https://treo.sh/sites">The reports Treo generates</a> are comprehensive, broken down by devices and geography. They are granular and available at domain and page levels. You can export the reports or access their data using an API. They are also <strong>shareable</strong>.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/aac6dfb7-0fe7-4ab1-a719-9c1f1011c76f/treo-sitemap-scan.png" /></p>
WebPageTest Core Web Vitals Test
<p><a href="https://www.webpagetest.org/">WebPageTest</a> is, of course, a performance testing suite on its own. Yet one of the useful features it provides is a detailed breakdown of <a href="https://www.webpagetest.org/webvitals">Core Web Vitals metrics</a> and pointers to problematic areas and how to fix them.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4ab12dbc-2453-487c-8e3b-fb10bc7f18c9/webpagetest.png" /></p>
<p>There are also plenty of Core Web Vitals-related details in the <a href="https://www.webpagetest.org/result/220808_BiDcMJ_6EY/3/experiments/">actual performance audit</a>, along with suggestions for improvements which you can turn on without changing a line of code. For some, you will need a pro account though.</p>
Cumulative Layout Shift Debuggers
<p>Basically, the <a href="https://webvitals.dev/cls">CLS Debugger</a> <strong>helps you visualize CLS</strong>. It uses the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Layout_Instability_API">Layout Instability API</a> in Chromium to load pages and calculate their CLS. The CLS is calculated for both mobile and desktop devices and takes a few minutes to complete. The network and CPU are throttled during the test, and the pages are requested from the US.</p>
<p>The <strong>CLS debugger generates a GIF image</strong> with animations showing how the viewport elements shift. The generated GIF is important in practically visualizing layout shifts. The elements that contribute most to CLS are marked with squares to see their size and layout shift visually. They are also listed in a table together with their CLS scores.</p>

<a href="https://webvitals.dev/cls"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c87c902f-e267-4ded-90ee-af9407a33c4d/webvitals-dev.gif" /></a><br /><a href="https://webvitals.dev/cls">CLS debugger</a> in action: highlighting the shifts frame by frame.


<p>Although the CLS is calculated as a lab metric initially, the CLS debugger receives CLS measurements from the Chrome UX Report as well. The CLS, then, is a rolling average of the past 28 days. The CLS debugger allows you to ignore cookie interstitials — plus, you can generate reports for specific countries, too.</p>
<p>Alternatively, you can also use the <a href="https://defaced.dev/tools/layout-shift-gif-generator/">Layout Shift GIF Generator</a>. The tool is available on <a href="https://defaced.dev/tools/layout-shift-gif-generator/">its webpage</a> or as a <a href="https://www.npmjs.com/package/layout-shift-gif">command line tool</a>. With the CLI tool, you can specify additional options, such as the <strong>viewport width and height</strong>, cookies to supply to the page, the GIF output options, and the CLS calculation method.</p>
Polypane Web Vitals
<p>If you want to keep your Core Web Vitals scores nearby during development, <a href="https://polypane.app/docs/web-vitals/">Polypane Web Vitals</a> is a fantastic feature worth looking into. <a href="https://polypane.app/">Polypane</a> is a standalone browser for web development, that includes tools for accessibility, responsive design and, most recently, performance and Core Web Vitals, too.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ba2d4fc2-6c40-4cd5-a87b-7161376d5755/core-web-vitals-largest-contentful-paint.png" /></p>
<p>You can automatically gather Web Vitals scores for each page, and these are then shown at the bottom of your page. The tool also provides LCP visualization, and shows layout shifts as well.</p>
Noteable Mentions
<ul>
<li><a href="https://calibreapp.com/tools/core-web-vitals-checker">Calibre’s Core Web Vitals Checker</a> allows you to check Core Web Vitals for your page with one click. It uses data from the Chrome UX Report and measures LCP, CLS, FID, TTFB, INP and FCP.</li>
</ul>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6ef5d053-91ca-431b-88b3-c7d4fd9b6cec/calibre.png" /></p>
<ul>
<li><p><a href="https://crux-compare.netlify.app/">CrUX Compare</a> is a little free tool that allows you to add a few sites and compare their Core Web Vitals scores side-by-side.</p>
</li>
<li><p><a href="https://github.com/GoogleChrome/web-vitals">Web Vitals JavaScript library</a> is a tiny library for measuring all the Web Vitals metrics on real users on your site.</p>
</li>
<li><p><a href="https://www.smashingmagazine.com/2021/04/complete-guide-measure-core-web-vitals/">An In-Depth Guide To Measuring Core Web Vitals</a> is a guide by Barry Pollard on how to measure Core Web Vitals, detect issues and solve them, on Smashing Magazine.</p>
</li>
</ul>
]]></content:encoded>
      <author>hello@smashingmagazine.com (Zara Cooper)</author>
      <enclosure
        url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a3b91182-5474-4e02-855c-30c0887948c1/core-web-vitals-tools-boost-performance.jpg"
        length="0" type="image/jpg"/>
    </item>
  </channel>
</rss>
